<?php
/*
=========================================================================================================================
Project       :   Budgeting & Planning System
Versi       :   2.0.0
Deskripsi     :   Model Class untuk Summary Report
Function      : - getInput              : YIR 20/06/2014  : setting input untuk region
            - tmpRptDevCost           : SID 04/08/2014  : generate temp table untuk dev cost
            - delTmpRptDevCost          : SID 04/08/2014  : hapus temp table untuk dev cost
            - reportDevelopmentCost       : SID 04/08/2014  : generate report development cost
            - reportSummaryDevelopmentCost    : SID 04/08/2014  : generate report summary development cost
            - tmpRptEstCost           : SID 05/08/2014  : generate temp table untuk estate cost
            - delTmpRptEstCost          : SID 05/08/2014  : hapus temp table untuk estate cost
            - reportEstateCost          : SID 05/08/2014  : generate report estate cost
            - reportSummaryEstateCost     : SID 05/08/2014  : generate report summary estate cost
            - reportCapex           : SID 05/08/2014  : generate report CAPEX
            - reportSebaranHa         : SID 23/08/2013  : generate report sebaran HA
            - reportVraUtilisasi        : SID 06/08/2014  : generate report vra utilisasi per BA
            - reportVraUtilisasiRegion      : SID 22/08/2014  : generate report vra utilisasi per region
            - getLastGenerate         : SID 12/08/2014  : get last generate date
            - querySummaryDevelopmentCostPerBa  : SID 25/08/2014  : query summary development cost per BA
            - querySummaryDevelopmentCostPerAfd : SID 28/08/2014  : query summary development cost per AFD
            - querySummaryEstateCostPerBa   : SID 25/08/2014  : query summary estate cost per BA
            - querySummaryEstateCostPerAfd    : SID 28/08/2014  : query summary estate cost per AFD
            - modReviewDevelopmentCostPerBa   : SID 25/08/2014  : generate module review development cost per BA
            - modReviewDevelopmentCostPerAfd  : SID 28/08/2014  : generate module review development cost per AFD
            - modReviewEstateCostPerBa      : SID 25/08/2014  : generate module review estate cost per BA
            - modReviewEstateCostPerAfd     : SID 28/08/2014  : generate module review estate cost per AFD
            - modReviewProduksiPerAfd     : SID 28/08/2014  : generate module review produksi per AFD
            - modReviewProduksiPerBa      : SID 28/08/2014  : generate module review produksi per BA
            - modReviewProduksiPerRegion    : SID 28/08/2014  : generate module review produksi per region
            - reportHkDevelopmentCost     : YUS 09/09/2014  : generate report HK development cost
            - reportHkEstateCost        : YUS 10/09/2014  : generate report HK estate cost
            - reportNormaPupukTbm       : NBU 30/07/2015  : generate report Norma Pupuk TBM
Disusun Oleh    :   IT Enterprise Solution - PT Triputra Agro Persada
Developer     :   Sabrina Ingrid Davita
Dibuat Tanggal    :   23/08/2013
Update Terakhir   : 05/08/2014
Revisi        : 
  NBU 18/05/2015  : - Ubah perhitungan sebaran di estate cost (Line 6054)
  NBU 30/07/2015  : - Penambahan report Norma Pupuk Tbm
=========================================================================================================================
*/
class Application_Model_Report
{
  private $_db = null;
  private $_global = null;
  private $_siteCode = '';

  public function __construct()
  {
    $this->_db = Zend_Registry::get('db');
    $this->_global = new Application_Model_Global();
    $this->_formula = new Application_Model_Formula();
    $this->_siteCode = Zend_Registry::get('auth')->getIdentity()->BA_CODE;
    $this->_userName = Zend_Registry::get('auth')->getIdentity()->USER_NAME;
    $this->_referenceRole = Zend_Registry::get('auth')->getIdentity()->REFERENCE_ROLE; // TAMBAHAN : Sabrina - 19/06/2013
    $this->_userRole = Zend_Registry::get('auth')->getIdentity()->USER_ROLE; // TAMBAHAN : Sabrina - 19/06/2013
    
    $sess = new Zend_Session_Namespace('period');
    $this->_period = $sess->period;
  }
  
  //setting input untuk region dan maturity stage
  public function getInput()
  {
    $result = array();

    $table = new Application_Model_DbOptions();
    $options = array();
    $options['optRegion'] = $table->getRegion();

    // elements
    $result['src_region_code'] = array(
      'type'    => 'select',
      'name'    => 'src_region_code',
      'value'   => '',
      'options' => $options['optRegion'],
      'ext'     => 'onChange=\'$("#src_ba").val("");\'', //src_afd
      'style'   => 'width:200px;background-color: #e6ffc8;'
    );

    return $result;
  }
  
  //generate temp table untuk dev cost
  public function tmpRptDevCost($params = array())
  {
    $where = "";
    $ba_code = ""; $period_budget = "";
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $period_budget = $params['budgetperiod'];
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $ba_code = $params['key_find'];
      $where .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    //generate dev cost per BA
    $query = "
      INSERT INTO TMP_RPT_DEV_COST (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
      SELECT  PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          TIPE_TRANSAKSI,
          ACTIVITY_CODE,
          ACTIVITY_DESC,
          COST_ELEMENT,
          KETERANGAN,
          UOM,
          SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
          SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
          SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
          SUM (NVL (QTY_APR, 0)) AS QTY_APR,
          SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
          SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
          SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
          SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
          SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
          SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
          SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
          SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
          (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
           + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))) AS QTY_SMS1,
          (SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
           + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SMS2,
          (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
           + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
           + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
           + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SETAHUN,
          SUM (NVL (COST_JAN, 0)) COST_JAN,
          SUM (NVL (COST_FEB, 0)) COST_FEB,
          SUM (NVL (COST_MAR, 0)) COST_MAR,
          SUM (NVL (COST_APR, 0)) COST_APR,
          SUM (NVL (COST_MAY, 0)) COST_MAY,
          SUM (NVL (COST_JUN, 0)) COST_JUN,
          SUM (NVL (COST_JUL, 0)) COST_JUL,
          SUM (NVL (COST_AUG, 0)) COST_AUG,
          SUM (NVL (COST_SEP, 0)) COST_SEP,
          SUM (NVL (COST_OCT, 0)) COST_OCT,
          SUM (NVL (COST_NOV, 0)) COST_NOV,
          SUM (NVL (COST_DEC, 0)) COST_DEC,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
          (SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
           + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
          SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
          SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
          CASE
            WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
            THEN SUM (NVL (RP_ROTASI_SMS1, 0))
            ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
          END AS RP_ROTASI_TOTAL,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
      FROM (
        -- RKT LAND CLEARING
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'LC' TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            RKT.DIS_COST_JAN COST_JAN,
            RKT.DIS_COST_FEB COST_FEB,
            RKT.DIS_COST_MAR COST_MAR,
            RKT.DIS_COST_APR COST_APR,
            RKT.DIS_COST_MAY COST_MAY,
            RKT.DIS_COST_JUN COST_JUN,
            RKT.DIS_COST_JUL COST_JUL,
            RKT.DIS_COST_AUG COST_AUG,
            RKT.DIS_COST_SEP COST_SEP,
            RKT.DIS_COST_OCT COST_OCT,
            RKT.DIS_COST_NOV COST_NOV,
            RKT.DIS_COST_DEC COST_DEC,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
        FROM TR_RKT_LC_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT_LC RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          $where
        UNION ALL 
        -- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS1 IN (NULL, 'TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            CASE
              WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
              THEN 'TBM0'
              ELSE RKT.MATURITY_STAGE_SMS1
            END as TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
          $where
        UNION ALL 
        -- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
          $where
        UNION ALL 
        -- RKT TANAM : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            CASE
              WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
              THEN 'TBM0'
              ELSE RKT.MATURITY_STAGE_SMS1
            END as TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_HECTARE_STATEMENT HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
          AND HS.BLOCK_CODE = RKT.BLOCK_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
          AND HS.STATUS = 'PROYEKSI'
          $where
        UNION ALL 
        -- RKT TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_HECTARE_STATEMENT HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
          AND HS.BLOCK_CODE = RKT.BLOCK_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
          AND HS.STATUS = 'PROYEKSI'
          $where
        UNION ALL 
        -- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            CASE
              WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
              THEN 'TBM0'
              ELSE RKT.MATURITY_STAGE_SMS1
            END as TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
          $where
        UNION ALL 
        -- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          $where
        UNION ALL
        -- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
            RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
            RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
            RKT.QTY_TUNGGAL_APR AS QTY_APR,
            RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
            RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
            (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
            (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
            (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
            (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
            (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 1
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020300'
          $where
        UNION ALL 
        -- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
            RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
            RKT.QTY_TUNGGAL_SEP AS QTY_SEP,
            RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
            RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
            RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
            (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
            (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
            (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
            (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
            (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 2
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020300'
          $where
        UNION ALL 
        -- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
            RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
            RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
            RKT.QTY_MAJEMUK_APR AS QTY_APR,
            RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
            RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
            (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
            (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
            (RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
            (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
            (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 1
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020400'
          $where
        UNION ALL 
        -- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
            RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
            RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
            RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
            RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
            RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
            (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
            (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
            (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
            (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
            (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 2
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020400'
          $where
        UNION ALL 
        -- RKT PUPUK TUNGGAL SELAIN COST ELEMENT MATERIAL & LABOUR
        SELECT  COST.PERIOD_BUDGET,
            COST.REGION_CODE,
            COST.BA_CODE,
            KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
            '5101020300' AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_NAME,
            COST.COST_ELEMENT,
            '' AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
              ELSE 0
            END AS COST_JAN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
              ELSE 0
            END AS COST_FEB,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
              ELSE 0
            END AS COST_MAR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
              ELSE 0
            END AS COST_APR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
              ELSE 0
            END AS COST_MAY,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
              ELSE 0
            END AS COST_JUN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
              ELSE 0
            END AS COST_JUL,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
              ELSE 0
            END AS COST_AUG,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
              ELSE 0
            END AS COST_SEP,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
              ELSE 0
            END AS COST_OCT,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
              ELSE 0
            END AS COST_NOV,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
              ELSE 0
            END AS COST_DEC,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS1,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS2
        FROM (
          SELECT  PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
          FROM (  
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                0 DIS_COST_JUL,
                0 DIS_COST_AUG,
                0 DIS_COST_SEP,
                0 DIS_COST_OCT,
                0 DIS_COST_NOV,
                0 DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              --AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR','TRANSPORT')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS1
            UNION ALL
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                0 DIS_COST_JAN,
                0 DIS_COST_FEB,
                0 DIS_COST_MAR,
                0 DIS_COST_APR,
                0 DIS_COST_MAY,
                0 DIS_COST_JUN,
                SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              --AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR','TRANSPORT')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS2
          )
          GROUP BY PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            COST_ELEMENT,
            MATURITY_STAGE
        ) COST
        LEFT JOIN V_TOTAL_KG_PUPUK KG_PUPUK
          ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
        UNION ALL 
        -- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL & LABOUR
        SELECT  COST.PERIOD_BUDGET,
            COST.REGION_CODE,
            COST.BA_CODE,
            KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
            '5101020400' AS ACTIVITY_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_NAME,
            COST.COST_ELEMENT,
            '' AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
              ELSE 0
            END AS COST_JAN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
              ELSE 0
            END AS COST_FEB,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
              ELSE 0
            END AS COST_MAR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
              ELSE 0
            END AS COST_APR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
              ELSE 0
            END AS COST_MAY,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
              ELSE 0
            END AS COST_JUN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
              ELSE 0
            END AS COST_JUL,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
              ELSE 0
            END AS COST_AUG,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
              ELSE 0
            END AS COST_SEP,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
              ELSE 0
            END AS COST_OCT,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
              ELSE 0
            END AS COST_NOV,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
              ELSE 0
            END AS COST_DEC,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS1,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS2
        FROM (
          SELECT  PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
          FROM (  
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                0 DIS_COST_JUL,
                0 DIS_COST_AUG,
                0 DIS_COST_SEP,
                0 DIS_COST_OCT,
                0 DIS_COST_NOV,
                0 DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              --AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR','TRANSPORT')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS1
            UNION ALL
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                0 DIS_COST_JAN,
                0 DIS_COST_FEB,
                0 DIS_COST_MAR,
                0 DIS_COST_APR,
                0 DIS_COST_MAY,
                0 DIS_COST_JUN,
                SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              --AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR','TRANSPORT')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS2
          )
          GROUP BY PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            COST_ELEMENT,
            MATURITY_STAGE
        ) COST
        LEFT JOIN V_TOTAL_KG_PUPUK KG_PUPUK
          ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
        UNION ALL
        -- PUPUK TUNGGAL LABOUR
        SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         TIPE_TRANSAKSI,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         COST_ELEMENT,
         '' KETERANGAN,
         UOM,
         SUM (QTY_JAN) QTY_JAN,
         SUM (QTY_FEB) QTY_FEB,
         SUM (QTY_MAR) QTY_MAR,
         SUM (QTY_APR) QTY_APR,
         SUM (QTY_MAY) QTY_MAY,
         SUM (QTY_JUN) QTY_JUN,
         SUM (QTY_JUL) QTY_JUL,
         SUM (QTY_AUG) QTY_AUG,
         SUM (QTY_SEP) QTY_SEP,
         SUM (QTY_OCT) QTY_OCT,
         SUM (QTY_NOV) QTY_NOV,
         SUM (QTY_DEC) QTY_DEC,
         SUM (COST_JAN) COST_JAN,
         SUM (COST_FEB) COST_FEB,
         SUM (COST_MAR) COST_MAR,
         SUM (COST_APR) COST_APR,
         SUM (COST_MAY) COST_MAY,
         SUM (COST_JUN) COST_JUN,
         SUM (COST_JUL) COST_JUL,
         SUM (COST_AUG) COST_AUG,
         SUM (COST_SEP) COST_SEP,
         SUM (COST_OCT) COST_OCT,
         SUM (COST_NOV) COST_NOV,
         SUM (COST_DEC) COST_DEC,
         RP_ROTASI_SMS1,
         RP_ROTASI_SMS2
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.MATURITY_STAGE TIPE_TRANSAKSI,
             RKT.COA_CODE AS ACTIVITY_CODE,
             'PUPUK TUNGGAL' AS ACTIVITY_DESC,
             'LABOUR' AS COST_ELEMENT,
             RKT.MATERIAL_NAME AS KETERANGAN,
             'HK' UOM,
             (RKT.QTY_TUNGGAL_JAN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JAN,
             (RKT.QTY_TUNGGAL_FEB * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_FEB,
             (RKT.QTY_TUNGGAL_MAR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAR,
             (RKT.QTY_TUNGGAL_APR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_APR,
             (RKT.QTY_TUNGGAL_MAY * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAY,
             (RKT.QTY_TUNGGAL_JUN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUN,
             (RKT.QTY_TUNGGAL_JUL * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUL,
             (RKT.QTY_TUNGGAL_AUG * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_AUG,
             (RKT.QTY_TUNGGAL_SEP * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_SEP,
             (RKT.QTY_TUNGGAL_OCT * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_OCT,
             (RKT.QTY_TUNGGAL_NOV * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_NOV,
             (RKT.QTY_TUNGGAL_DEC * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_DEC,
             (RKT.QTY_TUNGGAL_JAN * RP_QTY_INTERNAL) AS COST_JAN,
             (RKT.QTY_TUNGGAL_FEB * RP_QTY_INTERNAL) AS COST_FEB,
             (RKT.QTY_TUNGGAL_MAR * RP_QTY_INTERNAL) AS COST_MAR,
             (RKT.QTY_TUNGGAL_APR * RP_QTY_INTERNAL) AS COST_APR,
             (RKT.QTY_TUNGGAL_MAY * RP_QTY_INTERNAL) AS COST_MAY,
             (RKT.QTY_TUNGGAL_JUN * RP_QTY_INTERNAL) AS COST_JUN,
             (RKT.QTY_TUNGGAL_JUL * RP_QTY_INTERNAL) AS COST_JUL,
             (RKT.QTY_TUNGGAL_AUG * RP_QTY_INTERNAL) AS COST_AUG,
             (RKT.QTY_TUNGGAL_SEP * RP_QTY_INTERNAL) AS COST_SEP,
             (RKT.QTY_TUNGGAL_OCT * RP_QTY_INTERNAL) AS COST_OCT,
             (RKT.QTY_TUNGGAL_NOV * RP_QTY_INTERNAL) AS COST_NOV,
             (RKT.QTY_TUNGGAL_DEC * RP_QTY_INTERNAL) AS COST_DEC,
             0 RP_ROTASI_SMS1,
             0 RP_ROTASI_SMS2
          FROM V_TOTAL_PKK_PUPUK_PER_MATERIAL RKT
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
             LEFT JOIN TN_INFRASTRUKTUR TNI
              ON TNI.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND TNI.BA_CODE = RKT.BA_CODE
                 AND TNI.ACTIVITY_CODE =
                   CASE UPPER (RKT.FLAG)
                    WHEN 'MAKRO' THEN 43750
                    ELSE 43751
                   END
                 AND TNI.DELETE_USER IS NULL
            LEFT JOIN TR_RKT_CHECKROLL_SUM CHECKROLL
               ON CHECKROLL.PERIOD_BUDGET = TNI.PERIOD_BUDGET
                 AND CHECKROLL.BA_CODE = TNI.BA_CODE
                 AND CHECKROLL.JOB_CODE = TNI.SUB_COST_ELEMENT
           WHERE RKT.MATURITY_STAGE IN ('TBM0','TBM1','TBM2','TBM3')
             AND RKT.COA_CODE = '5101020300'
             $where) TOTAL
    GROUP BY PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         TIPE_TRANSAKSI,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         COST_ELEMENT,
         UOM,
         RP_ROTASI_SMS1,
         RP_ROTASI_SMS2 
        UNION ALL
        -- PUPUK MAJEMUK LABOUR
        SELECT PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             TIPE_TRANSAKSI,
             ACTIVITY_CODE,
             ACTIVITY_DESC,
             COST_ELEMENT,
             '' KETERANGAN,
             UOM,
             SUM (QTY_JAN) QTY_JAN,
             SUM (QTY_FEB) QTY_FEB,
             SUM (QTY_MAR) QTY_MAR,
             SUM (QTY_APR) QTY_APR,
             SUM (QTY_MAY) QTY_MAY,
             SUM (QTY_JUN) QTY_JUN,
             SUM (QTY_JUL) QTY_JUL,
             SUM (QTY_AUG) QTY_AUG,
             SUM (QTY_SEP) QTY_SEP,
             SUM (QTY_OCT) QTY_OCT,
             SUM (QTY_NOV) QTY_NOV,
             SUM (QTY_DEC) QTY_DEC,
             SUM (COST_JAN) COST_JAN,
             SUM (COST_FEB) COST_FEB,
             SUM (COST_MAR) COST_MAR,
             SUM (COST_APR) COST_APR,
             SUM (COST_MAY) COST_MAY,
             SUM (COST_JUN) COST_JUN,
             SUM (COST_JUL) COST_JUL,
             SUM (COST_AUG) COST_AUG,
             SUM (COST_SEP) COST_SEP,
             SUM (COST_OCT) COST_OCT,
             SUM (COST_NOV) COST_NOV,
             SUM (COST_DEC) COST_DEC,
             RP_ROTASI_SMS1,
             RP_ROTASI_SMS2
          FROM (SELECT RKT.PERIOD_BUDGET,
                 ORG.REGION_CODE,
                 RKT.BA_CODE,
                 RKT.MATURITY_STAGE TIPE_TRANSAKSI,
                 RKT.COA_CODE AS ACTIVITY_CODE,
                 'PUPUK MAJEMUK' AS ACTIVITY_DESC,
                 'LABOUR' AS COST_ELEMENT,
                 RKT.MATERIAL_NAME AS KETERANGAN,
                 'HK' UOM,
                 (RKT.QTY_TUNGGAL_JAN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JAN,
                 (RKT.QTY_TUNGGAL_FEB * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_FEB,
                 (RKT.QTY_TUNGGAL_MAR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAR,
                 (RKT.QTY_TUNGGAL_APR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_APR,
                 (RKT.QTY_TUNGGAL_MAY * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAY,
                 (RKT.QTY_TUNGGAL_JUN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUN,
                 (RKT.QTY_TUNGGAL_JUL * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUL,
                 (RKT.QTY_TUNGGAL_AUG * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_AUG,
                 (RKT.QTY_TUNGGAL_SEP * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_SEP,
                 (RKT.QTY_TUNGGAL_OCT * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_OCT,
                 (RKT.QTY_TUNGGAL_NOV * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_NOV,
                 (RKT.QTY_TUNGGAL_DEC * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_DEC,
                 (RKT.QTY_MAJEMUK_JAN * RP_QTY_INTERNAL) AS COST_JAN,
                 (RKT.QTY_MAJEMUK_FEB * RP_QTY_INTERNAL) AS COST_FEB,
                 (RKT.QTY_MAJEMUK_MAR * RP_QTY_INTERNAL) AS COST_MAR,
                 (RKT.QTY_MAJEMUK_APR * RP_QTY_INTERNAL) AS COST_APR,
                 (RKT.QTY_MAJEMUK_MAY * RP_QTY_INTERNAL) AS COST_MAY,
                 (RKT.QTY_MAJEMUK_JUN * RP_QTY_INTERNAL) AS COST_JUN,
                 (RKT.QTY_MAJEMUK_JUL * RP_QTY_INTERNAL) AS COST_JUL,
                 (RKT.QTY_MAJEMUK_AUG * RP_QTY_INTERNAL) AS COST_AUG,
                 (RKT.QTY_MAJEMUK_SEP * RP_QTY_INTERNAL) AS COST_SEP,
                 (RKT.QTY_MAJEMUK_OCT * RP_QTY_INTERNAL) AS COST_OCT,
                 (RKT.QTY_MAJEMUK_NOV * RP_QTY_INTERNAL) AS COST_NOV,
                 (RKT.QTY_MAJEMUK_DEC * RP_QTY_INTERNAL) AS COST_DEC,
                 0 RP_ROTASI_SMS1,
                 0 RP_ROTASI_SMS2
              FROM V_TOTAL_PKK_PUPUK_PER_MATERIAL RKT
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON ORG.BA_CODE = RKT.BA_CODE
                 LEFT JOIN TN_INFRASTRUKTUR TNI
                  ON TNI.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND TNI.BA_CODE = RKT.BA_CODE
                     AND TNI.ACTIVITY_CODE =
                       CASE UPPER (RKT.FLAG)
                        WHEN 'MAKRO' THEN 43750
                        ELSE 43751
                       END
                    AND TNI.DELETE_USER IS NULL
            LEFT JOIN TR_RKT_CHECKROLL_SUM CHECKROLL
               ON CHECKROLL.PERIOD_BUDGET = TNI.PERIOD_BUDGET
                 AND CHECKROLL.BA_CODE = TNI.BA_CODE
                 AND CHECKROLL.JOB_CODE = TNI.SUB_COST_ELEMENT
               WHERE RKT.MATURITY_STAGE IN ('TBM0','TBM1','TBM2','TBM3')
                 AND RKT.COA_CODE = '5101020400' 
                 $where) TOTAL
        GROUP BY PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             TIPE_TRANSAKSI,
             ACTIVITY_CODE,
             ACTIVITY_DESC,
             COST_ELEMENT,
             UOM,
             RP_ROTASI_SMS1,
             RP_ROTASI_SMS2
        UNION ALL
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM0
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TBM0' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_RELATION_COST RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              SUM (HS.SMS1_TBM0) SMS1_TBM0,
              SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
              SUM (HS.SMS2_TBM0) SMS2_TBM0,
              SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
        UNION ALL 
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM1
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TBM1' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_RELATION_COST RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              SUM (HS.SMS1_TBM1) SMS1_TBM1,
              SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
              SUM (HS.SMS2_TBM1) SMS2_TBM1,
              SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
        UNION ALL 
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM2
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TBM2' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_RELATION_COST RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              SUM (HS.SMS1_TBM2) SMS1_TBM2,
              SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
              SUM (HS.SMS2_TBM2) SMS2_TBM2,
              SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
        UNION ALL 
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM3
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TBM3' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_RELATION_COST RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              SUM (HS.SMS1_TBM3) SMS1_TBM3,
              SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
              SUM (HS.SMS2_TBM3) SMS2_TBM3,
              SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
      ) REPORT
      GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        KETERANGAN,
        UOM
    ";
    

    //echo $query.' : TMP_RPT_DEV_COST ';
	//die();
    $this->_db->query($query);
    $this->_db->commit();
    //if ($this->_db->commit()) {
      //echo 'tmp_rpt_dev_cost_query . ' . $query;  
    //}

    /*$components['transport_pupuk_all'] = "
      INSERT INTO TMP_RPT_DEV_COST (
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_DESC,
        COST_ELEMENT,
        UOM,
        INSERT_USER,
        INSERT_TIME,
        ACTIVITY_CODE,
        QTY_SETAHUN,
        COST_SETAHUN,
        QTY_JAN, COST_JAN,
        QTY_FEB, COST_FEB,
        QTY_MAR, COST_MAR,
        QTY_APR, COST_APR,
        QTY_MAY, COST_MAY,
        QTY_JUN, COST_JUN,
        QTY_JUL, COST_JUL,
        QTY_AUG, COST_AUG,
        QTY_SEP, COST_SEP,
        QTY_OCT, COST_OCT,
        QTY_NOV, COST_NOV,
        QTY_DEC, COST_DEC
      )
      SELECT * FROM (
        SELECT P.*
          , SUM(P.JUMLAH/KG_AFDELING*HM_KM) OVER(PARTITION BY P.PERIOD_BUDGET, P.BA_CODE, P.MATURITY_STAGE_SMS1, P.COA_CODE) QTY_TOTAL
          , SUM(JUMLAH/KG_AFDELING*PRICE_HM_KM) OVER(PARTITION BY P.PERIOD_BUDGET, P.BA_CODE, P.MATURITY_STAGE_SMS1, P.COA_CODE) COST_TOTAL
        FROM (
          -- SEMESTER 1
          SELECT * FROM (
            SELECT TBM.PERIOD_BUDGET, HS.REGION_CODE, TBM.BA_CODE
            , F_GET_PUPUK_KG_AFDELING(TBM.PERIOD_BUDGET, TBM.BA_CODE, HS.AFD_CODE) KG_AFDELING
            , HS.MATURITY_STAGE_SMS1
            , 'PUPUK TUNGGAL', 'TRANSPORT', 'KG'
            , '".$this->_userName."', CURRENT_TIMESTAMP
            , (TBM.DOSIS * HS.POKOK_TANAM) JUMLAH
            , MAT.COA_CODE
            , HS.BULAN_PEMUPUKAN
            , HS.PRICE_HM_KM, HS.HM_KM
            FROM (
              SELECT MONTHTOADD, (T_1.USIA_TANAM + MONTHTOADD) USIA_TANAMAN, MONTHTOADD + 1 AS BULAN_PEMUPUKAN, T_1.*
              FROM (
                SELECT HCS.*, VRA.PRICE_HM_KM, VRA.HM_KM, MONTHS_BETWEEN(HCS.PERIOD_BUDGET, HCS.TAHUN_TANAM) USIA_TANAM, ORG.REGION_CODE
                FROM TM_HECTARE_STATEMENT HCS
                JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HCS.BA_CODE
                LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = HCS.PERIOD_BUDGET
                  AND VRA.BA_CODE = HCS.BA_CODE AND VRA.LOCATION_CODE = HCS.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
                WHERE EXTRACT(YEAR FROM HCS.PERIOD_BUDGET) = '".$period_budget."'
                AND HCS.BA_CODE = '".$ba_code."'
                AND HCS.MATURITY_STAGE_SMS1 IN ('TBM0','TBM1','TBM2','TBM3')
                AND NOT EXISTS (
                  SELECT 1 FROM TN_PUPUK_TBM2_TM TM WHERE TM.PERIOD_BUDGET = HCS.PERIOD_BUDGET AND TM.BA_CODE = HCS.BA_CODE
                  AND TM.AFD_CODE = HCS.AFD_CODE AND TM.BLOCK_CODE = HCS.BLOCK_CODE
                )
                AND HCS.MATURITY_STAGE_SMS1 != 'TM'
              ) T_1
              CROSS JOIN (
                SELECT LEVEL-1 MONTHTOADD FROM (SELECT 0 MONTH_START, 6 MONTH_END FROM DUAL) 
                CONNECT BY LEVEL <= (MONTH_END - MONTH_START)
              )
            ) HS 
            JOIN TN_PUPUK_TBM2_LESS TBM ON TBM.PALM_AGE = HS.USIA_TANAMAN AND TBM.BA_CODE = HS.BA_CODE 
              AND TBM.LAND_TYPE = HS.LAND_TYPE AND TBM.PERIOD_BUDGET = HS.PERIOD_BUDGET
            JOIN TM_MATERIAL MAT ON MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.BA_CODE = HS.BA_CODE
              AND MAT.MATERIAL_CODE = TBM.MATERIAL_CODE
            WHERE MAT.COA_CODE = '5101020300' -- TUNGGAL
          )
          UNION ALL
          SELECT * FROM (
            SELECT TBM.PERIOD_BUDGET, HS.REGION_CODE, TBM.BA_CODE
            , F_GET_PUPUK_KG_AFDELING(TBM.PERIOD_BUDGET, TBM.BA_CODE, HS.AFD_CODE) KG_AFDELING
            , HS.MATURITY_STAGE_SMS1
            , 'PUPUK MAJEMUK', 'TRANSPORT', 'KG'
            , '".$this->_userName."', CURRENT_TIMESTAMP
            , (TBM.DOSIS * HS.POKOK_TANAM) JUMLAH
            , MAT.COA_CODE
            , HS.BULAN_PEMUPUKAN
            , HS.PRICE_HM_KM, HS.HM_KM
            FROM (
              SELECT MONTHTOADD, (T_1.USIA_TANAM + MONTHTOADD) USIA_TANAMAN, MONTHTOADD + 1 AS BULAN_PEMUPUKAN, T_1.*
              FROM (
                SELECT HCS.*, VRA.PRICE_HM_KM, VRA.HM_KM, MONTHS_BETWEEN(HCS.PERIOD_BUDGET, HCS.TAHUN_TANAM) USIA_TANAM, ORG.REGION_CODE
                FROM TM_HECTARE_STATEMENT HCS
                JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HCS.BA_CODE
                LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = HCS.PERIOD_BUDGET
                  AND VRA.BA_CODE = HCS.BA_CODE AND VRA.LOCATION_CODE = HCS.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
                WHERE EXTRACT(YEAR FROM HCS.PERIOD_BUDGET) = '".$period_budget."'
                AND HCS.BA_CODE = '".$ba_code."'
                AND HCS.MATURITY_STAGE_SMS1 IN ('TBM0','TBM1','TBM2','TBM3')
                AND NOT EXISTS (
                  SELECT 1 FROM TN_PUPUK_TBM2_TM TM WHERE TM.PERIOD_BUDGET = HCS.PERIOD_BUDGET AND TM.BA_CODE = HCS.BA_CODE
                  AND TM.AFD_CODE = HCS.AFD_CODE AND TM.BLOCK_CODE = HCS.BLOCK_CODE
                )
                AND HCS.MATURITY_STAGE_SMS1 != 'TM'
              ) T_1
              CROSS JOIN (
                SELECT LEVEL-1 MONTHTOADD FROM (SELECT 0 MONTH_START, 6 MONTH_END FROM DUAL) 
                CONNECT BY LEVEL <= (MONTH_END - MONTH_START)
              )
            ) HS 
            JOIN TN_PUPUK_TBM2_LESS TBM ON TBM.PALM_AGE = HS.USIA_TANAMAN AND TBM.BA_CODE = HS.BA_CODE 
              AND TBM.LAND_TYPE = HS.LAND_TYPE AND TBM.PERIOD_BUDGET = HS.PERIOD_BUDGET
            JOIN TM_MATERIAL MAT ON MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.BA_CODE = HS.BA_CODE
              AND MAT.MATERIAL_CODE = TBM.MATERIAL_CODE
            WHERE MAT.COA_CODE = '5101020400' -- MAJEMUK
          )
          UNION ALL
          -- SEMESTER 2
          SELECT * FROM (
            SELECT TBM.PERIOD_BUDGET, HS.REGION_CODE, TBM.BA_CODE
            , F_GET_PUPUK_KG_AFDELING(TBM.PERIOD_BUDGET, TBM.BA_CODE, HS.AFD_CODE) KG_AFDELING
            , HS.MATURITY_STAGE_SMS2
            , 'PUPUK TUNGGAL', 'TRANSPORT', 'KG'
            , '".$this->_userName."', CURRENT_TIMESTAMP
            , (TBM.DOSIS * HS.POKOK_TANAM) JUMLAH
            , MAT.COA_CODE
            , HS.BULAN_PEMUPUKAN
            , HS.PRICE_HM_KM, HS.HM_KM
            FROM (
              SELECT MONTHTOADD, (T_1.USIA_TANAM + MONTHTOADD) USIA_TANAMAN, MONTHTOADD + 1 AS BULAN_PEMUPUKAN, T_1.*
              FROM (
                SELECT HCS.*, VRA.PRICE_HM_KM, VRA.HM_KM, MONTHS_BETWEEN(HCS.PERIOD_BUDGET, HCS.TAHUN_TANAM) USIA_TANAM, ORG.REGION_CODE
                FROM TM_HECTARE_STATEMENT HCS
                JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HCS.BA_CODE
                LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = HCS.PERIOD_BUDGET
                  AND VRA.BA_CODE = HCS.BA_CODE AND VRA.LOCATION_CODE = HCS.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
                WHERE EXTRACT(YEAR FROM HCS.PERIOD_BUDGET) = '".$period_budget."'
                AND HCS.BA_CODE = '".$ba_code."'
                AND HCS.MATURITY_STAGE_SMS2 IN ('TBM0','TBM1','TBM2','TBM3')
                AND NOT EXISTS (
                  SELECT 1 FROM TN_PUPUK_TBM2_TM TM WHERE TM.PERIOD_BUDGET = HCS.PERIOD_BUDGET AND TM.BA_CODE = HCS.BA_CODE
                  AND TM.AFD_CODE = HCS.AFD_CODE AND TM.BLOCK_CODE = HCS.BLOCK_CODE
                )
                AND HCS.MATURITY_STAGE_SMS2 != 'TM'
              ) T_1
              CROSS JOIN (
                SELECT LEVEL+5 MONTHTOADD FROM (SELECT 0 MONTH_START, 6 MONTH_END FROM DUAL) 
                CONNECT BY LEVEL <= (MONTH_END - MONTH_START)
              )
            ) HS 
            JOIN TN_PUPUK_TBM2_LESS TBM ON TBM.PALM_AGE = HS.USIA_TANAMAN AND TBM.BA_CODE = HS.BA_CODE 
              AND TBM.LAND_TYPE = HS.LAND_TYPE AND TBM.PERIOD_BUDGET = HS.PERIOD_BUDGET
            JOIN TM_MATERIAL MAT ON MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.BA_CODE = HS.BA_CODE
              AND MAT.MATERIAL_CODE = TBM.MATERIAL_CODE
            WHERE MAT.COA_CODE = '5101020300' -- TUNGGAL
          )
          UNION ALL
          SELECT * FROM (
            SELECT TBM.PERIOD_BUDGET, HS.REGION_CODE, TBM.BA_CODE
            , F_GET_PUPUK_KG_AFDELING(TBM.PERIOD_BUDGET, TBM.BA_CODE, HS.AFD_CODE) KG_AFDELING
            , HS.MATURITY_STAGE_SMS2
            , 'PUPUK MAJEMUK', 'TRANSPORT', 'KG'
            , '".$this->_userName."', CURRENT_TIMESTAMP
            , (TBM.DOSIS * HS.POKOK_TANAM) JUMLAH
            , MAT.COA_CODE
            , HS.BULAN_PEMUPUKAN
            , HS.PRICE_HM_KM, HS.HM_KM
            FROM (
              SELECT MONTHTOADD, (T_1.USIA_TANAM + MONTHTOADD) USIA_TANAMAN, MONTHTOADD + 1 AS BULAN_PEMUPUKAN, T_1.*
              FROM (
                SELECT HCS.*, VRA.PRICE_HM_KM, VRA.HM_KM, MONTHS_BETWEEN(HCS.PERIOD_BUDGET, HCS.TAHUN_TANAM) USIA_TANAM, ORG.REGION_CODE
                FROM TM_HECTARE_STATEMENT HCS
                JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HCS.BA_CODE
                LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = HCS.PERIOD_BUDGET
                  AND VRA.BA_CODE = HCS.BA_CODE AND VRA.LOCATION_CODE = HCS.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
                WHERE EXTRACT(YEAR FROM HCS.PERIOD_BUDGET) = '".$period_budget."'
                AND HCS.BA_CODE = '".$ba_code."'
                AND HCS.MATURITY_STAGE_SMS2 IN ('TBM0','TBM1','TBM2','TBM3')
                AND NOT EXISTS (
                  SELECT 1 FROM TN_PUPUK_TBM2_TM TM WHERE TM.PERIOD_BUDGET = HCS.PERIOD_BUDGET AND TM.BA_CODE = HCS.BA_CODE
                  AND TM.AFD_CODE = HCS.AFD_CODE AND TM.BLOCK_CODE = HCS.BLOCK_CODE
                )
                AND HCS.MATURITY_STAGE_SMS2 != 'TM'
              ) T_1
              CROSS JOIN (
                SELECT LEVEL+5 MONTHTOADD FROM (SELECT 0 MONTH_START, 6 MONTH_END FROM DUAL) 
                CONNECT BY LEVEL <= (MONTH_END - MONTH_START)
              )
            ) HS 
            JOIN TN_PUPUK_TBM2_LESS TBM ON TBM.PALM_AGE = HS.USIA_TANAMAN AND TBM.BA_CODE = HS.BA_CODE 
              AND TBM.LAND_TYPE = HS.LAND_TYPE AND TBM.PERIOD_BUDGET = HS.PERIOD_BUDGET
            JOIN TM_MATERIAL MAT ON MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.BA_CODE = HS.BA_CODE
              AND MAT.MATERIAL_CODE = TBM.MATERIAL_CODE
            WHERE MAT.COA_CODE = '5101020400' -- MAJEMUK
          )
          UNION ALL
          -- SUB BLOK TBM DENGAN REKOMENDASI TM
          SELECT * FROM (
            SELECT HS.PERIOD_BUDGET, ORG.REGION_CODE, HS.BA_CODE
              , F_GET_PUPUK_KG_AFDELING(HS.PERIOD_BUDGET, HS.BA_CODE, HS.AFD_CODE) KG_AFDELING
              , HS.MATURITY_STAGE_SMS1
              , 'PUPUK TUNGGAL', 'TRANSPORT', 'KG'
              , '".$this->_userName."', CURRENT_TIMESTAMP
              , TM.JUMLAH, MAT.COA_CODE
              , CAST(TM.BULAN_PEMUPUKAN AS INTEGER) BULAN_PEMUPUKAN
              , VRA.PRICE_HM_KM, VRA.HM_KM
            FROM TM_HECTARE_STATEMENT HS
            JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
            JOIN TN_PUPUK_TBM2_TM TM ON HS.BA_CODE  = TM.BA_CODE AND HS.PERIOD_BUDGET = TM.PERIOD_BUDGET
              AND HS.AFD_CODE = TM.AFD_CODE AND HS.BLOCK_CODE = TM.BLOCK_CODE
            LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = HS.PERIOD_BUDGET
              AND VRA.BA_CODE = HS.BA_CODE AND VRA.LOCATION_CODE = HS.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
            JOIN TM_MATERIAL MAT ON MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.BA_CODE = HS.BA_CODE
              AND MAT.MATERIAL_CODE = TM.MATERIAL_CODE
            WHERE (HS.MATURITY_STAGE_SMS1 != 'TM' AND HS.MATURITY_STAGE_SMS1 != 'TM')
            AND EXTRACT(YEAR FROM HS.PERIOD_BUDGET) = '".$period_budget."'
              AND HS.BA_CODE = '".$ba_code."' AND HS.MATURITY_STAGE_SMS1 != 'TM'
              AND MAT.COA_CODE = '5101020300' -- TUNGGAL
          )
          UNION ALL
          SELECT * FROM (
            SELECT HS.PERIOD_BUDGET, ORG.REGION_CODE, HS.BA_CODE
              , F_GET_PUPUK_KG_AFDELING(HS.PERIOD_BUDGET, HS.BA_CODE, HS.AFD_CODE) KG_AFDELING
              , HS.MATURITY_STAGE_SMS1
              , 'PUPUK MAJEMUK', 'TRANSPORT', 'KG'
              , '".$this->_userName."', CURRENT_TIMESTAMP
              , TM.JUMLAH, MAT.COA_CODE
              , CAST(TM.BULAN_PEMUPUKAN AS INTEGER) BULAN_PEMUPUKAN
              , VRA.PRICE_HM_KM, VRA.HM_KM
            FROM TM_HECTARE_STATEMENT HS
            JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
            JOIN TN_PUPUK_TBM2_TM TM ON HS.BA_CODE  = TM.BA_CODE AND HS.PERIOD_BUDGET = TM.PERIOD_BUDGET
              AND HS.AFD_CODE = TM.AFD_CODE AND HS.BLOCK_CODE = TM.BLOCK_CODE
            LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = HS.PERIOD_BUDGET
              AND VRA.BA_CODE = HS.BA_CODE AND VRA.LOCATION_CODE = HS.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
            JOIN TM_MATERIAL MAT ON MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.BA_CODE = HS.BA_CODE
              AND MAT.MATERIAL_CODE = TM.MATERIAL_CODE
            WHERE (HS.MATURITY_STAGE_SMS1 != 'TM' AND HS.MATURITY_STAGE_SMS1 != 'TM')
            AND EXTRACT(YEAR FROM HS.PERIOD_BUDGET) = '".$period_budget."'
              AND HS.BA_CODE = '".$ba_code."' AND HS.MATURITY_STAGE_SMS1 != 'TM'
              AND MAT.COA_CODE = '5101020400' -- MAJEMUK
          )
        ) P
      )
      PIVOT (
        SUM(JUMLAH/KG_AFDELING*HM_KM) AS DIS, SUM(JUMLAH/KG_AFDELING*PRICE_HM_KM) AS COST
        FOR BULAN_PEMUPUKAN IN (
        '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
        '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
        )
      )
    ";*/
    

    /*foreach ($components as $key => $sql_string) {
      $this->_db->query($sql_string);
      //$this->_db->commit();
      if ($this->_db->commit()) {
        echo '2 . ' . $components['transport_pupuk_all'];    
      }
    }*/
    
    // KASTRASI DAN SANITASI
    $dev_components['kastrasi_sanitasi'] = "
      INSERT INTO TMP_RPT_DEV_COST (
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        UOM,
        QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
        COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
        QTY_SETAHUN, COST_SETAHUN,
        INSERT_USER, INSERT_TIME
      )
      SELECT 
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        TIPE_TRANSAKSI,
        COST_ELEMENT, NULL
        , SUM(PLAN_JAN) PLAN_JAN, SUM(PLAN_FEB) PLAN_FEB, SUM(PLAN_MAR) PLAN_MAR
        , SUM(PLAN_APR) PLAN_APR, SUM(PLAN_MAY) PLAN_MAY, SUM(PLAN_JUN) PLAN_JUN
        , SUM(PLAN_JUL) PLAN_JUL, SUM(PLAN_AUG) PLAN_AUG, SUM(PLAN_SEP) PLAN_SEP
        , SUM(PLAN_OCT) PLAN_OCT, SUM(PLAN_NOV) PLAN_NOV, SUM(PLAN_DEC) PLAN_DEC
        , SUM(DIS_JAN) DIS_JAN, SUM(DIS_FEB) DIS_FEB, SUM(DIS_MAR) DIS_MAR
        , SUM(DIS_APR) DIS_APR, SUM(DIS_MAY) DIS_MAY, SUM(DIS_JUN) DIS_JUN
        , SUM(DIS_JUL) DIS_JUL, SUM(DIS_AUG) DIS_AUG, SUM(DIS_SEP) DIS_SEP
        , SUM(DIS_OCT) DIS_OCT, SUM(DIS_NOV) DIS_NOV, SUM(DIS_DEC) DIS_DEC
        , SUM(SUM_PLAN), SUM(SUM_DIS), '".$this->_userName."', CURRENT_TIMESTAMP
      FROM (
        SELECT R.PERIOD_BUDGET, ORG.REGION_CODE, R.BA_CODE, R.MATURITY_STAGE_SMS1 MATURITY_STAGE
          , R.ACTIVITY_CODE, R.TIPE_TRANSAKSI, CE.COST_ELEMENT
          , CE.PLAN_JAN, CE.PLAN_FEB, CE.PLAN_MAR, CE.PLAN_APR, CE.PLAN_MAY, CE.PLAN_JUN
          , 0 PLAN_JUL, 0 PLAN_AUG, 0 PLAN_SEP, 0 PLAN_OCT, 0 PLAN_NOV, 0 PLAN_DEC
          , CE.DIS_JAN, CE.DIS_FEB, CE.DIS_MAR, CE.DIS_APR, CE.DIS_MAY, CE.DIS_JUN
          , 0 DIS_JUL, 0 DIS_AUG, 0 DIS_SEP, 0 DIS_OCT, 0 DIS_NOV, 0 DIS_DEC
          , CE.PLAN_JAN+CE.PLAN_FEB+CE.PLAN_MAR+CE.PLAN_APR+CE.PLAN_MAY+CE.PLAN_JUN SUM_PLAN
          , CE.DIS_JAN+CE.DIS_FEB+CE.DIS_MAR+CE.DIS_APR+CE.DIS_MAY+CE.DIS_JUN SUM_DIS
        FROM TR_RKT R
        JOIN TR_RKT_COST_ELEMENT CE ON CE.TRX_RKT_CODE = R.TRX_RKT_CODE
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = R.BA_CODE
        WHERE EXTRACT(YEAR FROM R.PERIOD_BUDGET) = '".$period_budget."'
        AND R.BA_CODE = '".$ba_code."'
        AND R.TOTAL_RP_SETAHUN IS NOT NULL
        AND R.ACTIVITY_CODE IN ('41300', '41400')
        AND R.MATURITY_STAGE_SMS1 != 'TM'
        UNION
        SELECT R.PERIOD_BUDGET, ORG.REGION_CODE, R.BA_CODE, R.MATURITY_STAGE_SMS2 MATURITY_STAGE
          , R.ACTIVITY_CODE, R.TIPE_TRANSAKSI, CE.COST_ELEMENT
          , 0 PLAN_JAN, 0 PLAN_FEB, 0 PLAN_MAR, 0 PLAN_APR, 0 PLAN_MAY, 0 PLAN_JUN
          , CE.PLAN_JUL, CE.PLAN_AUG, CE.PLAN_SEP, CE.PLAN_OCT, CE.PLAN_NOV, CE.PLAN_DEC
          , 0 DIS_JAN, 0 DIS_FEB, 0 DIS_MAR, 0 DIS_APR, 0 DIS_MAY, 0 DIS_JUN
          , CE.DIS_JUL, CE.DIS_AUG, CE.DIS_SEP, CE.DIS_OCT, CE.DIS_NOV, CE.DIS_DEC
          , CE.PLAN_JUL+CE.PLAN_AUG+CE.PLAN_SEP+CE.PLAN_OCT+CE.PLAN_NOV+CE.PLAN_DEC SUM_PLAN
          , CE.DIS_JUL+CE.DIS_AUG+CE.DIS_SEP+CE.DIS_OCT+CE.DIS_NOV+CE.DIS_DEC SUM_DIS
        FROM TR_RKT R
        JOIN TR_RKT_COST_ELEMENT CE ON CE.TRX_RKT_CODE = R.TRX_RKT_CODE
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = R.BA_CODE
        WHERE EXTRACT(YEAR FROM R.PERIOD_BUDGET) = '".$period_budget."'
        AND R.BA_CODE = '".$ba_code."'
        AND R.TOTAL_RP_SETAHUN IS NOT NULL
        AND R.ACTIVITY_CODE IN ('41300', '41400')
        AND R.MATURITY_STAGE_SMS2!= 'TM'
      )
      GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, TIPE_TRANSAKSI, ACTIVITY_CODE, TIPE_TRANSAKSI, COST_ELEMENT
    ";

    // GAJI
    $dev_components['GAJI'] = "
      INSERT INTO TMP_RPT_DEV_COST (
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        UOM,
        QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
        COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
        QTY_SETAHUN, COST_SETAHUN,
        INSERT_USER, INSERT_TIME
      )
      SELECT 
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        'GAJI' AS ACTIVITY_CODE, 
        'GAJI' AS ACTIVITY_DESC,
        'LABOUR' AS COST_ELEMENT,
        '' UOM,
        SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
        SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
        SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
        SUM(NVL (QTY_APR,0)) AS QTY_APR,
        SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
        SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
        SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
        SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
        SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
        SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
        SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
        SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (QTY_JAN,0)) +
        SUM(NVL (QTY_FEB,0)) +
        SUM(NVL (QTY_MAR,0)) +
        SUM(NVL (QTY_APR,0)) +
        SUM(NVL (QTY_MAY,0)) +
        SUM(NVL (QTY_JUN,0)) +
        SUM(NVL (QTY_JUL,0)) +
        SUM(NVL (QTY_AUG,0)) +
        SUM(NVL (QTY_SEP,0)) +
        SUM(NVL (QTY_OCT,0)) +
        SUM(NVL (QTY_NOV,0)) +
        SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
      FROM (   
        SELECT
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JAN,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_FEB,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_APR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAY,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUN,
          ".$this->freeColumnQty('sm2').", 
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JAN,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_FEB,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_MAR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_APR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_MAY,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JUN,
          ".$this->freeColumnCost('sm2')."
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
          , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
          (
            SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            --AND MATURITY_STAGE_SMS1 IS NOT NULL
            AND MATURITY_STAGE_SMS1 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS1 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HA_TM
        LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
        LEFT JOIN(
          SELECT CR.PERIOD_BUDGET, CR.BA_CODE, SUM(CR.TOTAL_GP_MPP) GP_MPP, SUM(CR.MPP_PERIOD_BUDGET) MPP
          FROM TM_JOB_TYPE JT
          JOIN TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE AND JT.JOB_TYPE = 'OT'
          WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
          AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
          GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE
        ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
        UNION ALL --HITUNG TUNJANGAN UNTUK SMS2
        SELECT
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          ".$this->freeColumnQty('sm1').", 
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUL,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_AUG,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_SEP,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_OCT,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_NOV,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_DEC,
          ".$this->freeColumnCost('sm1').",
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JUL,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_AUG,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_SEP,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_OCT,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_NOV,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_DEC
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
          , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
          (
            SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            --AND MATURITY_STAGE_SMS1 IS NOT NULL
            AND MATURITY_STAGE_SMS2 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS2 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HA_TM
        LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
        LEFT JOIN (
          SELECT CR.PERIOD_BUDGET, CR.BA_CODE, SUM(CR.TOTAL_GP_MPP) GP_MPP, SUM(CR.MPP_PERIOD_BUDGET) MPP
          FROM TM_JOB_TYPE JT
          JOIN TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE AND JT.JOB_TYPE = 'OT'
          WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
          AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
          GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE
        ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
      )
      GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, MATURITY_STAGE_SMS1
    ";

    // ASTEK, CATU, JABATAN, KEHADIRAN, LAINNYA
    $dev_components['komponen_gaji'] = "
      INSERT INTO TMP_RPT_DEV_COST (
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        UOM,
        QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
        COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
        QTY_SETAHUN, COST_SETAHUN,
        INSERT_USER, INSERT_TIME
      )
      SELECT
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        TUNJANGAN_TYPE AS ACTIVITY_CODE, 
        TUNJANGAN_TYPE AS ACTIVITY_DESC,
        'LABOUR' AS COST_ELEMENT,
        '' UOM,
        SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
        SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
        SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
        SUM(NVL (QTY_APR,0)) AS QTY_APR,
        SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
        SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
        SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
        SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
        SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
        SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
        SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
        SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (QTY_JAN,0)) +
        SUM(NVL (QTY_FEB,0)) +
        SUM(NVL (QTY_MAR,0)) +
        SUM(NVL (QTY_APR,0)) +
        SUM(NVL (QTY_MAY,0)) +
        SUM(NVL (QTY_JUN,0)) +
        SUM(NVL (QTY_JUL,0)) +
        SUM(NVL (QTY_AUG,0)) +
        SUM(NVL (QTY_SEP,0)) +
        SUM(NVL (QTY_OCT,0)) +
        SUM(NVL (QTY_NOV,0)) +
        SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        CURRENT_TIMESTAMP AS INSERT_TIME
      FROM (
        SELECT
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1, TTL_COST.TUNJANGAN_TYPE,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JAN,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_FEB,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_APR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAY,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUN,
          ".$this->freeColumnQty('sm2').",
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUN,
          ".$this->freeColumnCost('sm2')."
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
          , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
          (
            SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            --AND MATURITY_STAGE_SMS1 IS NOT NULL
            AND MATURITY_STAGE_SMS2 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM BPS_PROD.TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS1 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HA_TM
        LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
        LEFT JOIN(
          SELECT S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE
          , SUM(S.TOTAL_GP_MPP) GP_ALL
          , SUM(S.JUMLAH * S.MPP_PERIOD_BUDGET) COST_BA, S.MPP 
          FROM (
            SELECT CR.PERIOD_BUDGET, CR.BA_CODE
              , CD.TUNJANGAN_TYPE
              , JT.JOB_TYPE
              , CR.TOTAL_GP_MPP
              , CD.JUMLAH
              , CR.MPP_PERIOD_BUDGET
              , SUM(CR.MPP_PERIOD_BUDGET) OVER (PARTITION BY CR.PERIOD_BUDGET, CR.BA_CODE) MPP
            FROM BPS_PROD.TM_JOB_TYPE JT
            JOIN BPS_PROD.TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE
            JOIN BPS_PROD.TR_RKT_CHECKROLL_DETAIL CD ON CD.TRX_CR_CODE = CR.TRX_CR_CODE
            WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
            AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
            AND CD.TUNJANGAN_TYPE IN ('ASTEK', 'CATU', 'JABATAN', 'KEHADIRAN', 'LAINNYA')
            ORDER BY 2
          ) S WHERE JOB_TYPE = 'OT'
          GROUP BY S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE,S.MPP 
        ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
        UNION ALL --HITUNG TUNJANGAN UNTUK SMS2
        SELECT
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2, TTL_COST.TUNJANGAN_TYPE,
          ".$this->freeColumnQty('sm1').", 
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUL,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_AUG,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_SEP,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_OCT,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_NOV,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_DEC,
          ".$this->freeColumnCost('sm1').",
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_DEC
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
          , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
          (
            SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            --AND MATURITY_STAGE_SMS1 IS NOT NULL
            AND MATURITY_STAGE_SMS2 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM BPS_PROD.TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS2 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HA_TM
        LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
        LEFT JOIN (
          SELECT S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE
          , SUM(S.TOTAL_GP_MPP) GP_ALL
          , SUM(S.JUMLAH * S.MPP_PERIOD_BUDGET) COST_BA, S.MPP 
          FROM (
            SELECT CR.PERIOD_BUDGET, CR.BA_CODE
              , CD.TUNJANGAN_TYPE
              , JT.JOB_TYPE
              , CR.TOTAL_GP_MPP
              , CD.JUMLAH
              , CR.MPP_PERIOD_BUDGET
              , SUM(CR.MPP_PERIOD_BUDGET) OVER (PARTITION BY CR.PERIOD_BUDGET, CR.BA_CODE) MPP
            FROM BPS_PROD.TM_JOB_TYPE JT
            JOIN BPS_PROD.TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE
            JOIN BPS_PROD.TR_RKT_CHECKROLL_DETAIL CD ON CD.TRX_CR_CODE = CR.TRX_CR_CODE
            WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
            AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
            AND CD.TUNJANGAN_TYPE IN ('ASTEK', 'CATU', 'JABATAN', 'KEHADIRAN', 'LAINNYA')
            ORDER BY 2
          ) S WHERE JOB_TYPE = 'OT'
          GROUP BY S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE,S.MPP 
        ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
      )
      GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, MATURITY_STAGE_SMS1, TUNJANGAN_TYPE
    "; 

    // BONUS, THR
    $dev_components['komponen_gaji_tahunan'] = "
      INSERT INTO TMP_RPT_DEV_COST (
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        UOM,
        QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
        COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
        QTY_SETAHUN, COST_SETAHUN,
        INSERT_USER, INSERT_TIME
      )
      SELECT 
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        MATURITY_STAGE AS TIPE_TRANSAKSI,
        TUNJANGAN_TYPE AS ACTIVITY_CODE, 
        TUNJANGAN_TYPE AS ACTIVITY_DESC,
        'LABOUR' AS COST_ELEMENT,
        '' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN, SUM(NVL (DIS_FEB,0)) AS DIS_FEB, SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR, SUM(NVL (DIS_MAY,0)) AS DIS_MAY, SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL, SUM(NVL (DIS_AUG,0)) AS DIS_AUG, SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT, SUM(NVL (DIS_NOV,0)) AS DIS_NOV, SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN, SUM(NVL (COST_FEB,0)) AS COST_FEB, SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR, SUM(NVL (COST_MAY,0)) AS COST_MAY, SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL, SUM(NVL (COST_AUG,0)) AS COST_AUG, SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT, SUM(NVL (COST_NOV,0)) AS COST_NOV, SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (
        SUM(NVL (DIS_JAN,0)) + SUM(NVL (DIS_FEB,0)) + SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) + SUM(NVL (DIS_MAY,0)) + SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) + SUM(NVL (DIS_AUG,0)) + SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) + SUM(NVL (DIS_NOV,0)) + SUM(NVL (DIS_DEC,0))
        ) AS DIS_SETAHUN,
        (
        SUM(NVL (COST_JAN,0)) + SUM(NVL (COST_FEB,0)) + SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) + SUM(NVL (COST_MAY,0)) + SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) + SUM(NVL (COST_AUG,0)) + SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) + SUM(NVL (COST_NOV,0)) + SUM(NVL (COST_DEC,0))
        ) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        CURRENT_TIMESTAMP AS INSERT_TIME
      FROM (
        SELECT
          HS.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HS.BA_CODE,
          HS.AFD_CODE,
          HS.BLOCK_CODE,
          HS.MATURITY_STAGE_SMS1 MATURITY_STAGE,
          COST.TUNJANGAN_TYPE,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JAN,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_FEB,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAR,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_APR,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAY,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JAN,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_FEB,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAR,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_APR,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAY,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC, COST.MPP_BA, COST.COST_BA
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
          --, BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
          ,(
          SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            AND MATURITY_STAGE_SMS1 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS1 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HS
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
        JOIN (
          SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
          , SUM( COSTTYPE )/12 AS COST_BA
          , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
          FROM
            (
              SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
              TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
              FROM TM_TARIF_TUNJANGAN TTJ
              JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
              JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
              WHERE
                TTJ.TUNJANGAN_TYPE IN ('THR', 'BONUS')
                AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET)= '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
            )
          GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
        UNION ALL 
        SELECT
          HS.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HS.BA_CODE,
          HS.AFD_CODE,
          HS.BLOCK_CODE,
          HS.MATURITY_STAGE_SMS2 MATURITY_STAGE,
          COST.TUNJANGAN_TYPE,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUL,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_AUG,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_SEP,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_OCT,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_NOV,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUL,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_AUG,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_SEP,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_OCT,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_NOV,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_DEC,
          COST.MPP_BA, COST.COST_BA
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
          --, BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
          ,(
          SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            AND MATURITY_STAGE_SMS2 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS2 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HS
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
        JOIN (
          SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
          , SUM( COSTTYPE )/12 AS COST_BA
          , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
          FROM
            (
              SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
              TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
              FROM TM_TARIF_TUNJANGAN TTJ
              JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
              JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
              WHERE
                TTJ.TUNJANGAN_TYPE IN ('THR', 'BONUS')
                AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET)= '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
            )
          GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
      ) H
      GROUP BY PERIOD_BUDGET,REGION_CODE,BA_CODE,COST_BA,MATURITY_STAGE, TUNJANGAN_TYPE
    ";

    // 'HHR','OBAT','PPH_21'
    $dev_components['komponen_gaji_bulanan'] = "
      INSERT INTO TMP_RPT_DEV_COST (
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        UOM,
        QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
        COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
        QTY_SETAHUN, COST_SETAHUN,
        INSERT_USER, INSERT_TIME
      )
      SELECT 
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        MATURITY_STAGE AS TIPE_TRANSAKSI,
        TUNJANGAN_TYPE AS ACTIVITY_CODE, 
        TUNJANGAN_TYPE AS ACTIVITY_DESC,
        'LABOUR' AS COST_ELEMENT,
        '' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN, SUM(NVL (DIS_FEB,0)) AS DIS_FEB, SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR, SUM(NVL (DIS_MAY,0)) AS DIS_MAY, SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL, SUM(NVL (DIS_AUG,0)) AS DIS_AUG, SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT, SUM(NVL (DIS_NOV,0)) AS DIS_NOV, SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN, SUM(NVL (COST_FEB,0)) AS COST_FEB, SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR, SUM(NVL (COST_MAY,0)) AS COST_MAY, SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL, SUM(NVL (COST_AUG,0)) AS COST_AUG, SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT, SUM(NVL (COST_NOV,0)) AS COST_NOV, SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (
        SUM(NVL (DIS_JAN,0)) + SUM(NVL (DIS_FEB,0)) + SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) + SUM(NVL (DIS_MAY,0)) + SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) + SUM(NVL (DIS_AUG,0)) + SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) + SUM(NVL (DIS_NOV,0)) + SUM(NVL (DIS_DEC,0))
        ) AS DIS_SETAHUN,
        (
        SUM(NVL (COST_JAN,0)) + SUM(NVL (COST_FEB,0)) + SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) + SUM(NVL (COST_MAY,0)) + SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) + SUM(NVL (COST_AUG,0)) + SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) + SUM(NVL (COST_NOV,0)) + SUM(NVL (COST_DEC,0))
        ) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        CURRENT_TIMESTAMP AS INSERT_TIME
      FROM (
        SELECT
          HS.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HS.BA_CODE,
          HS.AFD_CODE,
          HS.BLOCK_CODE,
          HS.MATURITY_STAGE_SMS1 MATURITY_STAGE,
          COST.TUNJANGAN_TYPE,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JAN,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_FEB,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAR,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_APR,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAY,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JAN,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_FEB,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAR,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_APR,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAY,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC, COST.MPP_BA, COST.COST_BA
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
          --, BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
          ,(
          SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            AND MATURITY_STAGE_SMS1 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS1 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HS
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
        JOIN (
          SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
          , SUM( COSTTYPE )/12 AS COST_BA
          , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
          FROM
            (
              SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
              TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
              FROM TM_TARIF_TUNJANGAN TTJ
              JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
              JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
              WHERE
                TTJ.TUNJANGAN_TYPE IN ('HHR','OBAT','PPH_21')
                --TTJ.TUNJANGAN_TYPE IN ('HHR','PPH_21')
                AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET)= '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
            )
          GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
        UNION ALL 
        SELECT
          HS.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HS.BA_CODE,
          HS.AFD_CODE,
          HS.BLOCK_CODE,
          HS.MATURITY_STAGE_SMS2 MATURITY_STAGE,
          COST.TUNJANGAN_TYPE,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUL,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_AUG,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_SEP,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_OCT,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_NOV,
          (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUL,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_AUG,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_SEP,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_OCT,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_NOV,
          (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_DEC,
          COST.MPP_BA, COST.COST_BA
        FROM (
          SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
          --, BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
          ,(
          SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            AND MATURITY_STAGE_SMS2 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
          FROM TM_HECTARE_STATEMENT
          WHERE MATURITY_STAGE_SMS2 != 'TM'
          AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
        ) HS
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
        JOIN (
          SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
          , SUM( COSTTYPE )/12 AS COST_BA
          , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
          FROM
            (
              SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
              TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
              FROM TM_TARIF_TUNJANGAN TTJ
              JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
              JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
              WHERE
                TTJ.TUNJANGAN_TYPE IN ('HHR','OBAT','PPH_21')
                --TTJ.TUNJANGAN_TYPE IN ('HHR','PPH_21')
                AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET)= '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
            )
          GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
      ) H
      GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, COST_BA, MATURITY_STAGE, TUNJANGAN_TYPE
    ";

    $a = 40;
    foreach ($dev_components as $key => $query_string) {
      $this->_db->query($query_string);
      $this->_db->commit();
      //if ($this->_db->commit()) {
        //echo $a . ' - dev_components - ' . $key . ' - ' . $query_string;
      //}
      $a++;
    }

    $dev_comp = array();
    $dev_comp['astek_catu_jabatan_kehadiran_lainnya'] = "
      INSERT INTO TMP_RPT_DEV_COST_AFD (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        AFD_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
SELECT
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      AFD_CODE,
      MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
      TUNJANGAN_TYPE AS ACTIVITY_CODE, 
      TUNJANGAN_TYPE AS ACTIVITY_DESC,
      'LABOUR' AS COST_ELEMENT,
      '' KETERANGAN,
      '' UOM,
      SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
      SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
      SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
      SUM(NVL (QTY_APR,0)) AS QTY_APR,
      SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
      SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
      SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
      SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
      SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
      SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
      SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
      SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
      (SUM(NVL (QTY_JAN,0)) + SUM(NVL(QTY_FEB,0)) + SUM(NVL(QTY_MAR,0)) + SUM(NVL(QTY_APR,0)) + SUM(NVL(QTY_MAY,0)) + SUM(NVL(QTY_JUN,0))) AS QTY_SMS1,
      (SUM(NVL(QTY_JUL,0)) + SUM(NVL(QTY_AUG,0)) + SUM(NVL(QTY_SEP,0)) + SUM(NVL(QTY_OCT,0)) + SUM(NVL(QTY_NOV,0)) + SUM(NVL(QTY_DEC,0))) AS  QTY_SMS2, 
      (SUM(NVL (QTY_JAN,0)) +
      SUM(NVL (QTY_FEB,0)) +
      SUM(NVL (QTY_MAR,0)) +
      SUM(NVL (QTY_APR,0)) +
      SUM(NVL (QTY_MAY,0)) +
      SUM(NVL (QTY_JUN,0)) +
      SUM(NVL (QTY_JUL,0)) +
      SUM(NVL (QTY_AUG,0)) +
      SUM(NVL (QTY_SEP,0)) +
      SUM(NVL (QTY_OCT,0)) +
      SUM(NVL (QTY_NOV,0)) +
      SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
      SUM(NVL (COST_JAN,0)) AS COST_JAN,
      SUM(NVL (COST_FEB,0)) AS COST_FEB,
      SUM(NVL (COST_MAR,0)) AS COST_MAR,
      SUM(NVL (COST_APR,0)) AS COST_APR,
      SUM(NVL (COST_MAY,0)) AS COST_MAY,
      SUM(NVL (COST_JUN,0)) AS COST_JUN,
      SUM(NVL (COST_JUL,0)) AS COST_JUL,
      SUM(NVL (COST_AUG,0)) AS COST_AUG,
      SUM(NVL (COST_SEP,0)) AS COST_SEP,
      SUM(NVL (COST_OCT,0)) AS COST_OCT,
      SUM(NVL (COST_NOV,0)) AS COST_NOV,
      SUM(NVL (COST_DEC,0)) AS COST_DEC,
      (SUM(NVL (COST_JAN,0)) +
      SUM(NVL (COST_FEB,0)) +
      SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) +
      SUM(NVL (COST_MAY,0)) +
      SUM(NVL (COST_JUN,0))) AS COST_SMS1,
      (SUM(NVL (COST_JUL,0)) +
      SUM(NVL (COST_AUG,0)) +
      SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) +
      SUM(NVL (COST_NOV,0)) +
      SUM(NVL (COST_DEC,0))) AS COST_SMS2,
      (SUM(NVL (COST_JAN,0)) +
      SUM(NVL (COST_FEB,0)) +
      SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) +
      SUM(NVL (COST_MAY,0)) +
      SUM(NVL (COST_JUN,0)) +
      SUM(NVL (COST_JUL,0)) +
      SUM(NVL (COST_AUG,0)) +
      SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) +
      SUM(NVL (COST_NOV,0)) +
      SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
      0 RP_ROTASI_SMS1,
      0 RP_ROTASI_SMS2,
      0 RP_ROTASI_TOTAL,
      '".$this->_userName."' AS INSERT_USER,
      CURRENT_TIMESTAMP AS INSERT_TIME
    FROM (
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1, TTL_COST.TUNJANGAN_TYPE,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUN,
        0 QTY_JUL,
        0 QTY_AUG,
        0 QTY_SEP,
        0 QTY_OCT,
        0 QTY_NOV,
        0 QTY_DEC,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 COST_JUL,
        0 COST_AUG,
        0 COST_SEP,
        0 COST_OCT,
        0 COST_NOV,
        0 COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
        (
          SELECT SUM (HA_PLANTED) AS HA
          FROM TM_HECTARE_STATEMENT
          WHERE 1 = 1 
          --AND MATURITY_STAGE_SMS1 IS NOT NULL
          AND MATURITY_STAGE_SMS1 = 'TM'
          AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
          AND BA_CODE = '".$ba_code."'
          GROUP BY PERIOD_BUDGET, BA_CODE
        ) HA
        FROM BPS_PROD.TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS1 != 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN(
        SELECT S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE
        , SUM(S.TOTAL_GP_MPP) GP_ALL
        , SUM(S.JUMLAH * S.MPP_PERIOD_BUDGET) COST_BA, S.MPP 
        FROM (
          SELECT CR.PERIOD_BUDGET, CR.BA_CODE
            , CD.TUNJANGAN_TYPE
            , JT.JOB_TYPE
            , CR.TOTAL_GP_MPP
            , CD.JUMLAH
            , CR.MPP_PERIOD_BUDGET
            , SUM(CR.MPP_PERIOD_BUDGET) OVER (PARTITION BY CR.PERIOD_BUDGET, CR.BA_CODE) MPP
          FROM BPS_PROD.TM_JOB_TYPE JT
          JOIN BPS_PROD.TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE
          JOIN BPS_PROD.TR_RKT_CHECKROLL_DETAIL CD ON CD.TRX_CR_CODE = CR.TRX_CR_CODE
          WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
          AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
          AND CD.TUNJANGAN_TYPE IN ('ASTEK', 'CATU', 'JABATAN', 'KEHADIRAN', 'LAINNYA')
          ORDER BY 2
        ) S WHERE JOB_TYPE = 'OT'
        GROUP BY S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE,S.MPP 
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
      UNION ALL --HITUNG TUNJANGAN UNTUK SMS2
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2, TTL_COST.TUNJANGAN_TYPE,
        0 QTY_JAN,
        0 QTY_FEB,
        0 QTY_MAR,
        0 QTY_APR,
        0 QTY_MAY,
        0 QTY_JUN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_DEC,
        0 COST_JAN,
        0 COST_FEB,
        0 COST_MAR,
        0 COST_APR,
        0 COST_MAY,
        0 COST_JUN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
        (
          SELECT SUM (HA_PLANTED) AS HA
          FROM TM_HECTARE_STATEMENT
          WHERE 1 = 1 
          --AND MATURITY_STAGE_SMS1 IS NOT NULL
          AND MATURITY_STAGE_SMS2 = 'TM'
          AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
          AND BA_CODE = '".$ba_code."'
          GROUP BY PERIOD_BUDGET, BA_CODE
        ) HA
        FROM BPS_PROD.TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS2 != 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN (
        SELECT S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE
        , SUM(S.TOTAL_GP_MPP) GP_ALL
        , SUM(S.JUMLAH * S.MPP_PERIOD_BUDGET) COST_BA, S.MPP 
        FROM (
          SELECT CR.PERIOD_BUDGET, CR.BA_CODE
            , CD.TUNJANGAN_TYPE
            , JT.JOB_TYPE
            , CR.TOTAL_GP_MPP
            , CD.JUMLAH
            , CR.MPP_PERIOD_BUDGET
            , SUM(CR.MPP_PERIOD_BUDGET) OVER (PARTITION BY CR.PERIOD_BUDGET, CR.BA_CODE) MPP
          FROM BPS_PROD.TM_JOB_TYPE JT
          JOIN BPS_PROD.TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE
          JOIN BPS_PROD.TR_RKT_CHECKROLL_DETAIL CD ON CD.TRX_CR_CODE = CR.TRX_CR_CODE
          WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
          AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
          AND CD.TUNJANGAN_TYPE IN ('ASTEK', 'CATU', 'JABATAN', 'KEHADIRAN', 'LAINNYA')
          ORDER BY 2
        ) S WHERE JOB_TYPE = 'OT'
        GROUP BY S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE,S.MPP 
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, MATURITY_STAGE_SMS1, TUNJANGAN_TYPE
    ";

    $dev_comp['gaji'] = "
      INSERT INTO TMP_RPT_DEV_COST_AFD (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        AFD_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
SELECT 
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      AFD_CODE,
      MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
      'GAJI' AS ACTIVITY_CODE, 
      'GAJI' AS ACTIVITY_DESC,
      'LABOUR' AS COST_ELEMENT,
      '' KETERANGAN,
      '' UOM,
      SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
      SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
      SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
      SUM(NVL (QTY_APR,0)) AS QTY_APR,
      SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
      SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
      SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
      SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
      SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
      SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
      SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
      SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
      (SUM(NVL (QTY_JAN,0)) + SUM(NVL(QTY_FEB,0)) + SUM(NVL(QTY_MAR,0)) + SUM(NVL(QTY_APR,0)) + SUM(NVL(QTY_MAY,0)) + SUM(NVL(QTY_JUN,0))) AS QTY_SMS1,
      (SUM(NVL(QTY_JUL,0)) + SUM(NVL(QTY_AUG,0)) + SUM(NVL(QTY_SEP,0)) + SUM(NVL(QTY_OCT,0)) + SUM(NVL(QTY_NOV,0)) + SUM(NVL(QTY_DEC,0))) AS  QTY_SMS2, 
      (SUM(NVL (QTY_JAN,0)) +
      SUM(NVL (QTY_FEB,0)) +
      SUM(NVL (QTY_MAR,0)) +
      SUM(NVL (QTY_APR,0)) +
      SUM(NVL (QTY_MAY,0)) +
      SUM(NVL (QTY_JUN,0)) +
      SUM(NVL (QTY_JUL,0)) +
      SUM(NVL (QTY_AUG,0)) +
      SUM(NVL (QTY_SEP,0)) +
      SUM(NVL (QTY_OCT,0)) +
      SUM(NVL (QTY_NOV,0)) +
      SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
      SUM(NVL (COST_JAN,0)) AS COST_JAN,
      SUM(NVL (COST_FEB,0)) AS COST_FEB,
      SUM(NVL (COST_MAR,0)) AS COST_MAR,
      SUM(NVL (COST_APR,0)) AS COST_APR,
      SUM(NVL (COST_MAY,0)) AS COST_MAY,
      SUM(NVL (COST_JUN,0)) AS COST_JUN,
      SUM(NVL (COST_JUL,0)) AS COST_JUL,
      SUM(NVL (COST_AUG,0)) AS COST_AUG,
      SUM(NVL (COST_SEP,0)) AS COST_SEP,
      SUM(NVL (COST_OCT,0)) AS COST_OCT,
      SUM(NVL (COST_NOV,0)) AS COST_NOV,
      SUM(NVL (COST_DEC,0)) AS COST_DEC,
      (SUM(NVL (COST_JAN,0)) +
      SUM(NVL (COST_FEB,0)) +
      SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) +
      SUM(NVL (COST_MAY,0)) +
      SUM(NVL (COST_JUN,0))) AS COST_SMS1,
      (SUM(NVL (COST_JUL,0)) +
      SUM(NVL (COST_AUG,0)) +
      SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) +
      SUM(NVL (COST_NOV,0)) +
      SUM(NVL (COST_DEC,0))) AS COST_SMS2,
      (SUM(NVL (COST_JAN,0)) +
      SUM(NVL (COST_FEB,0)) +
      SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) +
      SUM(NVL (COST_MAY,0)) +
      SUM(NVL (COST_JUN,0)) +
      SUM(NVL (COST_JUL,0)) +
      SUM(NVL (COST_AUG,0)) +
      SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) +
      SUM(NVL (COST_NOV,0)) +
      SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
      0 RP_ROTASI_SMS1,
      0 RP_ROTASI_SMS2,
      0 RP_ROTASI_TOTAL,
      '".$this->_userName."' AS INSERT_USER,
      CURRENT_TIMESTAMP AS INSERT_TIME
    FROM (   
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUN,
        0 QTY_JUL,
        0 QTY_AUG,
        0 QTY_SEP,
        0 QTY_OCT,
        0 QTY_NOV,
        0 QTY_DEC,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JUN,
        0 COST_JUL,
        0 COST_AUG,
        0 COST_SEP,
        0 COST_OCT,
        0 COST_NOV,
        0 COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS1 IS NOT NULL
     AND MATURITY_STAGE_SMS1 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS1 != 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN(
        SELECT CR.PERIOD_BUDGET, CR.BA_CODE, SUM(CR.TOTAL_GP_MPP) GP_MPP, SUM(CR.MPP_PERIOD_BUDGET) MPP
        FROM TM_JOB_TYPE JT
        JOIN TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE AND JT.JOB_TYPE = 'OT'
        WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
        AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
        GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
      UNION ALL --HITUNG TUNJANGAN UNTUK SMS2
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 QTY_JAN, 
        0 QTY_FEB, 
        0 QTY_MAR, 
        0 QTY_APR, 
        0 QTY_MAY, 
        0 QTY_JUN, 
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_DEC,
        0 COST_JAN,
        0 COST_FEB,
        0 COST_MAR,
        0 COST_APR,
        0 COST_MAY,
        0 COST_JUN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS2 IS NOT NULL
     AND MATURITY_STAGE_SMS2 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS2 != 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN (
        SELECT CR.PERIOD_BUDGET, CR.BA_CODE, SUM(CR.TOTAL_GP_MPP) GP_MPP, SUM(CR.MPP_PERIOD_BUDGET) MPP
        FROM TM_JOB_TYPE JT
        JOIN TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE AND JT.JOB_TYPE = 'OT'
        WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
        AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
        GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, MATURITY_STAGE_SMS1
    ";

    $dev_comp['obat'] = "
INSERT INTO TMP_RPT_DEV_COST_AFD (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        AFD_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
--select afd_code, tipe_transaksi, sum(cost_setahun) from (
SELECT 
PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          TIPE_TRANSAKSI,
          'OBAT' AS ACTIVITY_CODE, 
          'OBAT' AS ACTIVITY_DESC,
          'LABOUR' AS COST_ELEMENT,
          '' KETERANGAN,
          '' UOM,
          SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
          SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
          SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
          SUM(NVL (QTY_APR,0)) AS QTY_APR,
          SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
          SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
          SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
          SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
          SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
          SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
          SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
          SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
          (SUM(NVL (QTY_JAN,0)) + SUM(NVL(QTY_FEB,0)) + SUM(NVL(QTY_MAR,0)) + SUM(NVL(QTY_APR,0)) + SUM(NVL(QTY_MAY,0)) + SUM(NVL(QTY_JUN,0))) AS QTY_SMS1,
          (SUM(NVL(QTY_JUL,0)) + SUM(NVL(QTY_AUG,0)) + SUM(NVL(QTY_SEP,0)) + SUM(NVL(QTY_OCT,0)) + SUM(NVL(QTY_NOV,0)) + SUM(NVL(QTY_DEC,0))) AS  QTY_SMS2, 
          (SUM(NVL (QTY_JAN,0)) +
          SUM(NVL (QTY_FEB,0)) +
          SUM(NVL (QTY_MAR,0)) +
          SUM(NVL (QTY_APR,0)) +
          SUM(NVL (QTY_MAY,0)) +
          SUM(NVL (QTY_JUN,0)) +
          SUM(NVL (QTY_JUL,0)) +
          SUM(NVL (QTY_AUG,0)) +
          SUM(NVL (QTY_SEP,0)) +
          SUM(NVL (QTY_OCT,0)) +
          SUM(NVL (QTY_NOV,0)) +
          SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0))) AS COST_SMS1,
          (SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SMS2,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          0 RP_ROTASI_SMS1,
          0 RP_ROTASI_SMS2,
          0 RP_ROTASI_TOTAL,
          '".$this->_userName."' AS INSERT_USER,
          CURRENT_TIMESTAMP AS INSERT_TIME
FROM (
SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          'OBAT' AS ACTIVITY_CODE, 
          'OBAT' AS ACTIVITY_DESC,
          'LABOUR' AS COST_ELEMENT,
          '' KETERANGAN,
          '' UOM,
          SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
          SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
          SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
          SUM(NVL (QTY_APR,0)) AS QTY_APR,
          SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
          SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
          SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
          SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
          SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
          SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
          SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
          SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
          (SUM(NVL (QTY_JAN,0)) + SUM(NVL(QTY_FEB,0)) + SUM(NVL(QTY_MAR,0)) + SUM(NVL(QTY_APR,0)) + SUM(NVL(QTY_MAY,0)) + SUM(NVL(QTY_JUN,0))) AS QTY_SMS1,
          (SUM(NVL(QTY_JUL,0)) + SUM(NVL(QTY_AUG,0)) + SUM(NVL(QTY_SEP,0)) + SUM(NVL(QTY_OCT,0)) + SUM(NVL(QTY_NOV,0)) + SUM(NVL(QTY_DEC,0))) AS  QTY_SMS2, 
          (SUM(NVL (QTY_JAN,0)) +
          SUM(NVL (QTY_FEB,0)) +
          SUM(NVL (QTY_MAR,0)) +
          SUM(NVL (QTY_APR,0)) +
          SUM(NVL (QTY_MAY,0)) +
          SUM(NVL (QTY_JUN,0)) +
          SUM(NVL (QTY_JUL,0)) +
          SUM(NVL (QTY_AUG,0)) +
          SUM(NVL (QTY_SEP,0)) +
          SUM(NVL (QTY_OCT,0)) +
          SUM(NVL (QTY_NOV,0)) +
          SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0))) AS COST_SMS1,
          (SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SMS2,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          0 RP_ROTASI_SMS1,
          0 RP_ROTASI_SMS2,
          0 RP_ROTASI_TOTAL,
          '".$this->_userName."' AS INSERT_USER,
          CURRENT_TIMESTAMP AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_JUN,
          0 AS QTY_JUL,
          0 AS QTY_AUG,
          0 AS QTY_SEP,
          0 AS QTY_OCT,
          0 AS QTY_NOV,
          0 AS QTY_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1 AND MATURITY_STAGE_SMS1 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS QTY_JAN,
          0 AS QTY_FEB,
          0 AS QTY_MAR,
          0 AS QTY_APR,
          0 AS QTY_MAY,
          0 AS QTY_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
     AND MATURITY_STAGE_SMS2 NOT IN ('TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1 AND MATURITY_STAGE_SMS2 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1
    ) GROUP BY 
    PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          TIPE_TRANSAKSI
    ";

    $dev_comp['thr'] = "
      INSERT INTO TMP_RPT_DEV_COST_AFD (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        AFD_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          'THR' AS ACTIVITY_CODE, 
          'THR' AS ACTIVITY_DESC,
          'LABOUR' AS COST_ELEMENT,
          '' KETERANGAN,
          '' UOM,
          SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
          SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
          SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
          SUM(NVL (QTY_APR,0)) AS QTY_APR,
          SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
          SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
          SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
          SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
          SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
          SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
          SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
          SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
          (SUM(NVL (QTY_JAN,0)) + SUM(NVL(QTY_FEB,0)) + SUM(NVL(QTY_MAR,0)) + SUM(NVL(QTY_APR,0)) + SUM(NVL(QTY_MAY,0)) + SUM(NVL(QTY_JUN,0))) AS QTY_SMS1,
          (SUM(NVL(QTY_JUL,0)) + SUM(NVL(QTY_AUG,0)) + SUM(NVL(QTY_SEP,0)) + SUM(NVL(QTY_OCT,0)) + SUM(NVL(QTY_NOV,0)) + SUM(NVL(QTY_DEC,0))) AS  QTY_SMS2, 
          (SUM(NVL (QTY_JAN,0)) +
          SUM(NVL (QTY_FEB,0)) +
          SUM(NVL (QTY_MAR,0)) +
          SUM(NVL (QTY_APR,0)) +
          SUM(NVL (QTY_MAY,0)) +
          SUM(NVL (QTY_JUN,0)) +
          SUM(NVL (QTY_JUL,0)) +
          SUM(NVL (QTY_AUG,0)) +
          SUM(NVL (QTY_SEP,0)) +
          SUM(NVL (QTY_OCT,0)) +
          SUM(NVL (QTY_NOV,0)) +
          SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0))) AS COST_SMS1,
          (SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SMS2,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          0 RP_ROTASI_SMS1,
          0 RP_ROTASI_SMS2,
          0 RP_ROTASI_TOTAL,
          '".$this->_userName."' AS INSERT_USER,
          CURRENT_TIMESTAMP AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_JUN,
          0 AS QTY_JUL,
          0 AS QTY_AUG,
          0 AS QTY_SEP,
          0 AS QTY_OCT,
          0 AS QTY_NOV,
          0 AS QTY_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
     AND MATURITY_STAGE_SMS1 NOT IN ('TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE  1 = 1 AND MATURITY_STAGE_SMS1 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS QTY_JAN,
          0 AS QTY_FEB,
          0 AS QTY_MAR,
          0 AS QTY_APR,
          0 AS QTY_MAY,
          0 AS QTY_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS QTY_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1 AND MATURITY_STAGE_SMS2 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND TTJ.BA_CODE = '".$ba_code."'
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          --BLOCK_CODE,
          MATURITY_STAGE_SMS1
    ";

    $b = 120;
    foreach ($dev_comp as $key => $query_string) {
      $this->_db->query($query_string);
      $this->_db->commit();
      //if ($this->_db->commit()) {
        //echo $b . ' - dev_comp - ' . $key . ' - ' . $query_string;
      //}
      $b++;
    }

    //generate dev cost per AFD
    $query = "
      INSERT INTO TMP_RPT_DEV_COST_AFD (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        AFD_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
      SELECT  PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          TIPE_TRANSAKSI,
          ACTIVITY_CODE,
          ACTIVITY_DESC,
          COST_ELEMENT,
          KETERANGAN,
          UOM,
          SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
          SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
          SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
          SUM (NVL (QTY_APR, 0)) AS QTY_APR,
          SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
          SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
          SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
          SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
          SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
          SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
          SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
          SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
          (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
           + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))) AS QTY_SMS1,
          (SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
           + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SMS2,
          (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
           + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
           + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
           + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SETAHUN,
          SUM (NVL (COST_JAN, 0)) COST_JAN,
          SUM (NVL (COST_FEB, 0)) COST_FEB,
          SUM (NVL (COST_MAR, 0)) COST_MAR,
          SUM (NVL (COST_APR, 0)) COST_APR,
          SUM (NVL (COST_MAY, 0)) COST_MAY,
          SUM (NVL (COST_JUN, 0)) COST_JUN,
          SUM (NVL (COST_JUL, 0)) COST_JUL,
          SUM (NVL (COST_AUG, 0)) COST_AUG,
          SUM (NVL (COST_SEP, 0)) COST_SEP,
          SUM (NVL (COST_OCT, 0)) COST_OCT,
          SUM (NVL (COST_NOV, 0)) COST_NOV,
          SUM (NVL (COST_DEC, 0)) COST_DEC,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
          (SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
           + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
          SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
          SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
          CASE
            WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
            THEN SUM (NVL (RP_ROTASI_SMS1, 0))
            ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
          END AS RP_ROTASI_TOTAL,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
      FROM (
        -- RKT LAND CLEARING
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'LC' TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            RKT.DIS_COST_JAN COST_JAN,
            RKT.DIS_COST_FEB COST_FEB,
            RKT.DIS_COST_MAR COST_MAR,
            RKT.DIS_COST_APR COST_APR,
            RKT.DIS_COST_MAY COST_MAY,
            RKT.DIS_COST_JUN COST_JUN,
            RKT.DIS_COST_JUL COST_JUL,
            RKT.DIS_COST_AUG COST_AUG,
            RKT.DIS_COST_SEP COST_SEP,
            RKT.DIS_COST_OCT COST_OCT,
            RKT.DIS_COST_NOV COST_NOV,
            RKT.DIS_COST_DEC COST_DEC,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
        FROM TR_RKT_LC_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT_LC RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          $where
        UNION ALL 
        -- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS1 IN (NULL, 'TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            CASE
              WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
              THEN 'TBM0'
              ELSE RKT.MATURITY_STAGE_SMS1
            END as TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
          $where
        UNION ALL   
        -- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
          $where
        UNION ALL 
        -- RKT TANAM : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            CASE
              WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
              THEN 'TBM0'
              ELSE RKT.MATURITY_STAGE_SMS1
            END as TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_HECTARE_STATEMENT HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
          AND HS.BLOCK_CODE = RKT.BLOCK_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
          AND HS.STATUS = 'PROYEKSI'
          $where
        UNION ALL 
        -- RKT TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_HECTARE_STATEMENT HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
          AND HS.BLOCK_CODE = RKT.BLOCK_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
          AND HS.STATUS = 'PROYEKSI'
          $where
        UNION ALL 
        -- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            CASE
              WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
              THEN 'TBM0'
              ELSE RKT.MATURITY_STAGE_SMS1
            END as TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
          $where
        UNION ALL 
        -- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT 
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          $where
        UNION ALL
        -- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
            RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
            RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
            RKT.QTY_TUNGGAL_APR AS QTY_APR,
            RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
            RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
            (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
            (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
            (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
            (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
            (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 1
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020300'
          $where
        UNION ALL 
        -- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
            RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
            RKT.QTY_TUNGGAL_SEP AS QTY_SEP,
            RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
            RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
            RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
            (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
            (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
            (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
            (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
            (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 2
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020300'
          $where
        UNION ALL 
        -- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
            RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
            RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
            RKT.QTY_MAJEMUK_APR AS QTY_APR,
            RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
            RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
            (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
            (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
            (RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
            (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
            (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 1
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020400'
          $where
        UNION ALL 
        -- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            RKT.COA_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
            RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
            RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
            RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
            RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
            RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
            (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
            (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
            (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
            (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
            (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.SEMESTER = 2
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          AND RKT.COA_CODE = '5101020400'
          $where
        UNION ALL 
        -- RKT PUPUK TUNGGAL SELAIN COST ELEMENT MATERIAL & LABOUR
        SELECT  COST.PERIOD_BUDGET,
            COST.REGION_CODE,
            COST.BA_CODE,
            COST.AFD_CODE,
            KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
            '5101020300' AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_NAME,
            COST.COST_ELEMENT,
            '' AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
              ELSE 0
            END AS COST_JAN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
              ELSE 0
            END AS COST_FEB,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
              ELSE 0
            END AS COST_MAR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
              ELSE 0
            END AS COST_APR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
              ELSE 0
            END AS COST_MAY,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
              ELSE 0
            END AS COST_JUN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
              ELSE 0
            END AS COST_JUL,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
              ELSE 0
            END AS COST_AUG,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
              ELSE 0
            END AS COST_SEP,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
              ELSE 0
            END AS COST_OCT,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
              ELSE 0
            END AS COST_NOV,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
              ELSE 0
            END AS COST_DEC,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS1,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS2
        FROM (
          SELECT  PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
          FROM (  
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                0 DIS_COST_JUL,
                0 DIS_COST_AUG,
                0 DIS_COST_SEP,
                0 DIS_COST_OCT,
                0 DIS_COST_NOV,
                0 DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS1
            UNION ALL
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                0 DIS_COST_JAN,
                0 DIS_COST_FEB,
                0 DIS_COST_MAR,
                0 DIS_COST_APR,
                0 DIS_COST_MAY,
                0 DIS_COST_JUN,
                SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS2
          )
          GROUP BY PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            COST_ELEMENT,
            MATURITY_STAGE
        ) COST
        LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
          ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
        UNION ALL 
        -- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL & LABOUR
        SELECT  COST.PERIOD_BUDGET,
            COST.REGION_CODE,
            COST.BA_CODE,
            COST.AFD_CODE,
            KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
            '5101020400' AS ACTIVITY_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_NAME,
            COST.COST_ELEMENT,
            '' AS KETERANGAN,
            'KG' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
              ELSE 0
            END AS COST_JAN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
              ELSE 0
            END AS COST_FEB,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
              ELSE 0
            END AS COST_MAR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
              ELSE 0
            END AS COST_APR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
              ELSE 0
            END AS COST_MAY,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
              ELSE 0
            END AS COST_JUN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
              ELSE 0
            END AS COST_JUL,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
              ELSE 0
            END AS COST_AUG,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
              ELSE 0
            END AS COST_SEP,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
              ELSE 0
            END AS COST_OCT,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
              ELSE 0
            END AS COST_NOV,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
              ELSE 0
            END AS COST_DEC,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS1,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS2
        FROM (
          SELECT  PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
          FROM (  
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                0 DIS_COST_JUL,
                0 DIS_COST_AUG,
                0 DIS_COST_SEP,
                0 DIS_COST_OCT,
                0 DIS_COST_NOV,
                0 DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS1
            UNION ALL
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                0 DIS_COST_JAN,
                0 DIS_COST_FEB,
                0 DIS_COST_MAR,
                0 DIS_COST_APR,
                0 DIS_COST_MAY,
                0 DIS_COST_JUN,
                SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS2
          )
          GROUP BY PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            COST_ELEMENT,
            MATURITY_STAGE
        ) COST
        LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
          ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
        UNION ALL
        -- PUPUK TUNGGAL LABOUR
        SELECT PERIOD_BUDGET,
           REGION_CODE,
           BA_CODE,
           AFD_CODE,
           TIPE_TRANSAKSI,
           ACTIVITY_CODE,
           ACTIVITY_DESC,
           COST_ELEMENT,
           '' KETERANGAN,
           UOM,
           SUM (QTY_JAN) QTY_JAN,
           SUM (QTY_FEB) QTY_FEB,
           SUM (QTY_MAR) QTY_MAR,
           SUM (QTY_APR) QTY_APR,
           SUM (QTY_MAY) QTY_MAY,
           SUM (QTY_JUN) QTY_JUN,
           SUM (QTY_JUL) QTY_JUL,
           SUM (QTY_AUG) QTY_AUG,
           SUM (QTY_SEP) QTY_SEP,
           SUM (QTY_OCT) QTY_OCT,
           SUM (QTY_NOV) QTY_NOV,
           SUM (QTY_DEC) QTY_DEC,
           SUM (COST_JAN) COST_JAN,
           SUM (COST_FEB) COST_FEB,
           SUM (COST_MAR) COST_MAR,
           SUM (COST_APR) COST_APR,
           SUM (COST_MAY) COST_MAY,
           SUM (COST_JUN) COST_JUN,
           SUM (COST_JUL) COST_JUL,
           SUM (COST_AUG) COST_AUG,
           SUM (COST_SEP) COST_SEP,
           SUM (COST_OCT) COST_OCT,
           SUM (COST_NOV) COST_NOV,
           SUM (COST_DEC) COST_DEC,
           RP_ROTASI_SMS1,
           RP_ROTASI_SMS2
        FROM (SELECT RKT.PERIOD_BUDGET,
           ORG.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.MATURITY_STAGE TIPE_TRANSAKSI,
           RKT.COA_CODE ACTIVITY_CODE,
           'PUPUK TUNGGAL' AS ACTIVITY_DESC,
           'LABOUR' AS COST_ELEMENT,
           RKT.MATERIAL_NAME AS KETERANGAN,
           'HK' UOM,
           (RKT.QTY_TUNGGAL_JAN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JAN,
           (RKT.QTY_TUNGGAL_FEB * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_FEB,
           (RKT.QTY_TUNGGAL_MAR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAR,
           (RKT.QTY_TUNGGAL_APR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_APR,
           (RKT.QTY_TUNGGAL_MAY * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAY,
           (RKT.QTY_TUNGGAL_JUN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUN,
           (RKT.QTY_TUNGGAL_JUL * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUL,
           (RKT.QTY_TUNGGAL_AUG * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_AUG,
           (RKT.QTY_TUNGGAL_SEP * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_SEP,
           (RKT.QTY_TUNGGAL_OCT * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_OCT,
           (RKT.QTY_TUNGGAL_NOV * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_NOV,
           (RKT.QTY_TUNGGAL_DEC * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_DEC,
           (RKT.QTY_TUNGGAL_JAN * RP_QTY_INTERNAL) AS COST_JAN,
           (RKT.QTY_TUNGGAL_FEB * RP_QTY_INTERNAL) AS COST_FEB,
           (RKT.QTY_TUNGGAL_MAR * RP_QTY_INTERNAL) AS COST_MAR,
           (RKT.QTY_TUNGGAL_APR * RP_QTY_INTERNAL) AS COST_APR,
           (RKT.QTY_TUNGGAL_MAY * RP_QTY_INTERNAL) AS COST_MAY,
           (RKT.QTY_TUNGGAL_JUN * RP_QTY_INTERNAL) AS COST_JUN,
           (RKT.QTY_TUNGGAL_JUL * RP_QTY_INTERNAL) AS COST_JUL,
           (RKT.QTY_TUNGGAL_AUG * RP_QTY_INTERNAL) AS COST_AUG,
           (RKT.QTY_TUNGGAL_SEP * RP_QTY_INTERNAL) AS COST_SEP,
           (RKT.QTY_TUNGGAL_OCT * RP_QTY_INTERNAL) AS COST_OCT,
           (RKT.QTY_TUNGGAL_NOV * RP_QTY_INTERNAL) AS COST_NOV,
           (RKT.QTY_TUNGGAL_DEC * RP_QTY_INTERNAL) AS COST_DEC,
           0 RP_ROTASI_SMS1,
           0 RP_ROTASI_SMS2
        FROM V_PKK_PUPUK_PER_MATERIAL_AFD RKT
           LEFT JOIN TM_ORGANIZATION ORG
            ON ORG.BA_CODE = RKT.BA_CODE
           LEFT JOIN TN_INFRASTRUKTUR TNI
            ON TNI.PERIOD_BUDGET = RKT.PERIOD_BUDGET
             AND TNI.BA_CODE = RKT.BA_CODE
             AND TNI.ACTIVITY_CODE =
                 CASE UPPER (RKT.FLAG)
                  WHEN 'MAKRO' THEN 43750
                  ELSE 43751
                 END
             AND TNI.DELETE_USER IS NULL
           LEFT JOIN TR_RKT_CHECKROLL_SUM CHECKROLL
           ON CHECKROLL.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           AND CHECKROLL.BA_CODE = TNI.BA_CODE
           AND CHECKROLL.JOB_CODE = TNI.SUB_COST_ELEMENT
       WHERE RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
           AND RKT.COA_CODE = '5101020300'
           $where) TOTAL
      GROUP BY PERIOD_BUDGET,
           REGION_CODE,
           BA_CODE,
           AFD_CODE,
           TIPE_TRANSAKSI,
           ACTIVITY_CODE,
           ACTIVITY_DESC,
           COST_ELEMENT,
           UOM,
           RP_ROTASI_SMS1,
           RP_ROTASI_SMS2
        UNION ALL
        -- PUPUK MAJEMUK LABOUR
          SELECT PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             AFD_CODE,
             TIPE_TRANSAKSI,
             ACTIVITY_CODE,
             ACTIVITY_DESC,
             COST_ELEMENT,
             '' KETERANGAN,
             UOM,
             SUM (QTY_JAN) QTY_JAN,
             SUM (QTY_FEB) QTY_FEB,
             SUM (QTY_MAR) QTY_MAR,
             SUM (QTY_APR) QTY_APR,
             SUM (QTY_MAY) QTY_MAY,
             SUM (QTY_JUN) QTY_JUN,
             SUM (QTY_JUL) QTY_JUL,
             SUM (QTY_AUG) QTY_AUG,
             SUM (QTY_SEP) QTY_SEP,
             SUM (QTY_OCT) QTY_OCT,
             SUM (QTY_NOV) QTY_NOV,
             SUM (QTY_DEC) QTY_DEC,
             SUM (COST_JAN) COST_JAN,
             SUM (COST_FEB) COST_FEB,
             SUM (COST_MAR) COST_MAR,
             SUM (COST_APR) COST_APR,
             SUM (COST_MAY) COST_MAY,
             SUM (COST_JUN) COST_JUN,
             SUM (COST_JUL) COST_JUL,
             SUM (COST_AUG) COST_AUG,
             SUM (COST_SEP) COST_SEP,
             SUM (COST_OCT) COST_OCT,
             SUM (COST_NOV) COST_NOV,
             SUM (COST_DEC) COST_DEC,
             RP_ROTASI_SMS1,
             RP_ROTASI_SMS2
          FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.MATURITY_STAGE TIPE_TRANSAKSI,
             RKT.COA_CODE ACTIVITY_CODE,
             'PUPUK MAJEMUK' AS ACTIVITY_DESC,
             'LABOUR' AS COST_ELEMENT,
             RKT.MATERIAL_NAME AS KETERANGAN,
             'HK' UOM,
             (RKT.QTY_MAJEMUK_JAN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JAN,
             (RKT.QTY_MAJEMUK_FEB * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_FEB,
             (RKT.QTY_MAJEMUK_MAR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAR,
             (RKT.QTY_MAJEMUK_APR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_APR,
             (RKT.QTY_MAJEMUK_MAY * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAY,
             (RKT.QTY_MAJEMUK_JUN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUN,
             (RKT.QTY_MAJEMUK_JUL * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUL,
             (RKT.QTY_MAJEMUK_AUG * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_AUG,
             (RKT.QTY_MAJEMUK_SEP * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_SEP,
             (RKT.QTY_MAJEMUK_OCT * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_OCT,
             (RKT.QTY_MAJEMUK_NOV * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_NOV,
             (RKT.QTY_MAJEMUK_DEC * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_DEC,
             (RKT.QTY_MAJEMUK_JAN * RP_QTY_INTERNAL) AS COST_JAN,
             (RKT.QTY_MAJEMUK_FEB * RP_QTY_INTERNAL) AS COST_FEB,
             (RKT.QTY_MAJEMUK_MAR * RP_QTY_INTERNAL) AS COST_MAR,
             (RKT.QTY_MAJEMUK_APR * RP_QTY_INTERNAL) AS COST_APR,
             (RKT.QTY_MAJEMUK_MAY * RP_QTY_INTERNAL) AS COST_MAY,
             (RKT.QTY_MAJEMUK_JUN * RP_QTY_INTERNAL) AS COST_JUN,
             (RKT.QTY_MAJEMUK_JUL * RP_QTY_INTERNAL) AS COST_JUL,
             (RKT.QTY_MAJEMUK_AUG * RP_QTY_INTERNAL) AS COST_AUG,
             (RKT.QTY_MAJEMUK_SEP * RP_QTY_INTERNAL) AS COST_SEP,
             (RKT.QTY_MAJEMUK_OCT * RP_QTY_INTERNAL) AS COST_OCT,
             (RKT.QTY_MAJEMUK_NOV * RP_QTY_INTERNAL) AS COST_NOV,
             (RKT.QTY_MAJEMUK_DEC * RP_QTY_INTERNAL) AS COST_DEC,
             0 RP_ROTASI_SMS1,
             0 RP_ROTASI_SMS2
          FROM V_PKK_PUPUK_PER_MATERIAL_AFD RKT
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
             LEFT JOIN TN_INFRASTRUKTUR TNI
              ON TNI.PERIOD_BUDGET = RKT.PERIOD_BUDGET
               AND TNI.BA_CODE = RKT.BA_CODE
               AND TNI.ACTIVITY_CODE =
                   CASE UPPER (RKT.FLAG)
                    WHEN 'MAKRO' THEN 43750
                    ELSE 43751
                   END
               AND TNI.DELETE_USER IS NULL
            LEFT JOIN TR_RKT_CHECKROLL_SUM CHECKROLL
               ON CHECKROLL.PERIOD_BUDGET = TNI.PERIOD_BUDGET
                 AND CHECKROLL.BA_CODE = TNI.BA_CODE
                 AND CHECKROLL.JOB_CODE = TNI.SUB_COST_ELEMENT
         WHERE RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
             AND RKT.COA_CODE = '5101020400'
             $where) TOTAL
        GROUP BY PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             AFD_CODE,
             TIPE_TRANSAKSI,
             ACTIVITY_CODE,
             ACTIVITY_DESC,
             COST_ELEMENT,
             UOM,
             RP_ROTASI_SMS1,
             RP_ROTASI_SMS2
        UNION ALL
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM0
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TBM0' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT  SEBARAN_HA.PERIOD_BUDGET,
              SEBARAN_HA.BA_CODE,
              SEBARAN_HA.AFD_CODE,
              RKT.REPORT_TYPE,
              RKT.COA_CODE,
              RKT.COA_DESC,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
          FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2                                    
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(TOTAL_HA_SMS1) HA_BA_1,
                    SUM(TOTAL_HA_SMS2) HA_BA_2
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
            GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2
          ) SEBARAN_HA
          LEFT JOIN V_TOTAL_RELATION_COST RKT
            ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
            AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        ) RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              HS.AFD_CODE,
              HS.SMS1_TBM0,
              HS.TOTAL_HA_SMS1,
              HS.SMS2_TBM0,
              HS.TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
        UNION ALL 
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM1
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TBM1' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT  SEBARAN_HA.PERIOD_BUDGET,
              SEBARAN_HA.BA_CODE,
              SEBARAN_HA.AFD_CODE,
              RKT.REPORT_TYPE,
              RKT.COA_CODE,
              RKT.COA_DESC,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
          FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2                                    
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(TOTAL_HA_SMS1) HA_BA_1,
                    SUM(TOTAL_HA_SMS2) HA_BA_2
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
            GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2
          ) SEBARAN_HA
          LEFT JOIN V_TOTAL_RELATION_COST RKT
            ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
            AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        ) RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              HS.AFD_CODE,
              HS.SMS1_TBM1,
              HS.TOTAL_HA_SMS1,
              HS.SMS2_TBM1,
              HS.TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
        UNION ALL 
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM2
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TBM2' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT  SEBARAN_HA.PERIOD_BUDGET,
              SEBARAN_HA.BA_CODE,
              SEBARAN_HA.AFD_CODE,
              RKT.REPORT_TYPE,
              RKT.COA_CODE,
              RKT.COA_DESC,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
          FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2                                    
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(TOTAL_HA_SMS1) HA_BA_1,
                    SUM(TOTAL_HA_SMS2) HA_BA_2
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
            GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2
          ) SEBARAN_HA
          LEFT JOIN V_TOTAL_RELATION_COST RKT
            ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
            AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        ) RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.AFD_CODE,
              HS.BA_CODE,
              HS.SMS1_TBM2,
              HS.TOTAL_HA_SMS1,
              HS.SMS2_TBM2,
              HS.TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
        UNION ALL 
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM3
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TBM3' TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' AS KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT  SEBARAN_HA.PERIOD_BUDGET,
              SEBARAN_HA.BA_CODE,
              SEBARAN_HA.AFD_CODE,
              RKT.REPORT_TYPE,
              RKT.COA_CODE,
              RKT.COA_DESC,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
          FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                  SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2                                    
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(TOTAL_HA_SMS1) HA_BA_1,
                    SUM(TOTAL_HA_SMS2) HA_BA_2
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
            GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_BA.HA_BA_1,
                  SUMHA_BA.HA_BA_2
          ) SEBARAN_HA
          LEFT JOIN V_TOTAL_RELATION_COST RKT
            ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
            AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        ) RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              HS.AFD_CODE,
              HS.SMS1_TBM3,
              HS.TOTAL_HA_SMS1,
              HS.SMS2_TBM3,
              HS.TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE <> '1212010101'
          $where
      ) REPORT
      GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        KETERANGAN,
        UOM
    ";
    //echo 'bbbbbbb : query : TMP_RPT_DEV_COST_AFD '.$query;
	//die();
    $this->_db->query($query);
    $this->_db->commit();
    //if ($this->_db->commit()) {
      //echo '8 . ' . $query;
    //}

    return true;
  }
  
  //hapus temp table untuk dev cost
  public function delTmpRptDevCost($params = array())
  {
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    //hapus dev cost per BA
    $query = "
      DELETE FROM TMP_RPT_DEV_COST 
      WHERE 1 = 1
      $where 
    ";
    $this->_db->query($query);
    $this->_db->commit();
    
    //hapus dev cost per afd
    $query = "
      DELETE FROM TMP_RPT_DEV_COST_AFD 
      WHERE 1 = 1
      $where 
    ";
    $this->_db->query($query);
    $this->_db->commit();
    
    return true;
  }
  
  //generate report development cost
  public function reportDevelopmentCost($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel development cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND ALL_ACT.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_DEV_COST ALL_ACT
        WHERE 1 = 1 
        $where
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
    ";
    //echo $query;
	//die();
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }   
    /* ################################################### generate excel development cost ################################################### */
    
    return $result;
  }
  
  //generate report development cost per AFD
  public function reportDevelopmentCostAfd($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel development cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND ALL_ACT.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_DEV_COST_AFD ALL_ACT
        WHERE 1 = 1 
        $where
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      --AND REPORT.ACTIVITY_CODE = '5201010101'
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           REPORT.AFD_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
    ";
//echo $query;
//die();
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }   
    /* ################################################### generate excel development cost ################################################### */
    
    return $result;
  }
  
  //query summary development cost per BA
  public function querySummaryDevelopmentCostPerBa($params = array())
  {
    $where = $select_group = $order_group = "";
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT CASE
         WHEN DESCRIPTION = 'LAND CLEARING' THEN 'LC' ELSE DESCRIPTION
      END AS DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      
    }else{
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND ALL_ACT.BA_CODE = '".$params['key_find']."'
      ";
      $xwhere .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
        SELECT STR.*,
           CASE
            WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
            THEN
            (CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
              THEN
                (SELECT PRICE
                   FROM TN_HARGA_BORONG
                   WHERE     1 = 1
                  AND PERIOD_BUDGET = STR.PERIOD_BUDGET
                  AND BA_CODE = STR.BA_CODE
                  AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
              ELSE
                INFRA.RP_HA_INTERNAL
              END
              )              
            ELSE
            NORM.PRICE_ROTASI
           END
           AS NORMA
        FROM (SELECT  $select_group
          STRUKTUR_REPORT.PERIOD_BUDGET, 
          STRUKTUR_REPORT.REGION_CODE, 
          STRUKTUR_REPORT.BA_CODE, 
          STRUKTUR_REPORT.ESTATE_NAME, 
          STRUKTUR_REPORT.ACTIVITY_CODE, 
          STRUKTUR_REPORT.ACTIVITY_DESC, 
          STRUKTUR_REPORT.UOM, 
          STRUKTUR_REPORT.QTY_SMS1, 
          STRUKTUR_REPORT.QTY_SMS2, 
          STRUKTUR_REPORT.COST_SMS1, 
          STRUKTUR_REPORT.COST_SMS2, 
          STRUKTUR_REPORT.COST_SETAHUN,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
            THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
            ELSE 0
          END as RP_HA_SMS1,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
            THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
            ELSE 0
          END as RP_HA_SMS2,
          CASE
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) > 0
            THEN STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2)
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) = 0
            THEN 0
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND STRUKTUR_REPORT.QTY_SMS1 = 0 
               AND STRUKTUR_REPORT.QTY_SMS2 = 0
            THEN 0
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND STRUKTUR_REPORT.QTY_SMS1 > 0 
               AND STRUKTUR_REPORT.QTY_SMS2 = 0
            THEN STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND STRUKTUR_REPORT.QTY_SMS1 = 0 
               AND STRUKTUR_REPORT.QTY_SMS2 > 0
            THEN STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2
            ELSE
              (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1) + (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
          END as RP_HA_SETAHUN
      FROM (
        SELECT  $select_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM, 
            CASE
              WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM1)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS1_TBM0)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS1_TBM1)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS1_TBM2)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS1_TBM3)
              ELSE 0
            END AS QTY_SMS1,
            CASE
              WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM2)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS2_TBM0)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS2_TBM1)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS2_TBM2)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS2_TBM3)
              ELSE 0
            END AS QTY_SMS2,
            SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
            SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
            SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN
        FROM (
          SELECT  CASE
                WHEN INSTR(HIRARKI, '/',1, 2) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
                ELSE NULL
              END GROUP01,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 3) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP02,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 4) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP03,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 5) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP04,
              GROUP_CODE
          FROM (
            SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
                LVL, 
                TO_CHAR(GROUP_CODE) AS GROUP_CODE
            FROM (
              SELECT  GROUP_CODE, 
                  CONNECT_BY_ISCYCLE \"CYCLE\",
                  LEVEL as LVL, 
                  SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
              FROM TM_RPT_MAPPING_ACT
              WHERE level > 1
              START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
              CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
            )
            GROUP BY HIRARKI, LVL, GROUP_CODE
            ORDER BY HIRARKI
          )
        ) STRUKTUR_REPORT
        LEFT JOIN TM_RPT_MAPPING_ACT MAPP
          ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
        LEFT JOIN (
          SELECT *
          FROM TMP_RPT_DEV_COST ALL_ACT
          WHERE 1 = 1
          $where
        )REPORT
          ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
          AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
          AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = REPORT.BA_CODE
        LEFT JOIN (  
          SELECT  PERIOD_BUDGET,
              BA_CODE,
              SUM (SMS1_TBM0) SMS1_TBM0,
              SUM (SMS1_TBM1) SMS1_TBM1,
              SUM (SMS1_TBM2) SMS1_TBM2,
              SUM (SMS1_TBM3) SMS1_TBM3,
              SUM (SMS2_TBM0) SMS2_TBM0,
              SUM (SMS2_TBM1) SMS2_TBM1,
              SUM (SMS2_TBM2) SMS2_TBM2,
              SUM (SMS2_TBM3) SMS2_TBM3
          FROM V_REPORT_SEBARAN_HS
          GROUP BY PERIOD_BUDGET, 
            BA_CODE
        ) TOTAL_SEBARAN_HA
          ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
          AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
        LEFT JOIN (  
          SELECT  PERIOD_BUDGET,
              BA_CODE,
              ACTIVITY_CODE,
              (SUM (PLAN_JAN) + SUM (PLAN_FEB) + SUM (PLAN_MAR)
               + SUM (PLAN_APR) + SUM (PLAN_MAY) + SUM (PLAN_JUN)) AS SEM1,
              (SUM (PLAN_JUL) + SUM (PLAN_AUG) + SUM (PLAN_SEP)
               + SUM (PLAN_OCT) + SUM (PLAN_NOV) + SUM (PLAN_DEC)) AS SEM2
          FROM TR_RKT_LC
          WHERE DELETE_TIME IS NULL
            AND FLAG_TEMP IS NULL
          GROUP BY PERIOD_BUDGET, 
            BA_CODE, 
            ACTIVITY_CODE
        ) LC
          ON LC.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
          AND LC.BA_CODE = REPORT.BA_CODE
          AND LC.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        WHERE REPORT.ACTIVITY_CODE IS NOT NULL
        GROUP BY $order_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM,
            REPORT.TIPE_TRANSAKSI
      ) STRUKTUR_REPORT
      ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
           STRUKTUR_REPORT.BA_CODE,
           $order_group
           STRUKTUR_REPORT.ACTIVITY_CODE) STR
       LEFT JOIN (
       SELECT PERIOD_BUDGET,
            BA_CODE,
            ACTIVITY_GROUP,
            ACTIVITY_CODE,
            PRICE_ROTASI
         FROM (SELECT RANK ()
                 OVER (PARTITION BY PERIOD_BUDGET,
                          BA_CODE,
                          ACTIVITY_GROUP,
                          ACTIVITY_CODE
                     ORDER BY
                     --BACOUNT 
                     MAX_HA
                     DESC, 
                     PRIORITY ASC)
                 RANK_Z,
                PRIORITY,
                --BACOUNT,
                MAX_HA,
                PERIOD_BUDGET,
                BA_CODE,
                ACTIVITY_GROUP,
                ACTIVITY_CODE,
                PRICE_ROTASI
             FROM (  SELECT 
                    --BACOUNT,
                    MAX_HA,
                    PRIORITY,
                    PERIOD_BUDGET,
                    BA_CODE,
                    ACTIVITY_GROUP,
                    ACTIVITY_CODE,
                    SUM (PRICE_ROTASI) PRICE_ROTASI
                   FROM (SELECT --HS.BACOUNT,
                        HS.MAX_HA,
                        HS.PERIOD_BUDGET,
                        HS.BA_CODE,
                        TB.ACTIVITY_GROUP,
                        TB.ACTIVITY_CODE,
                        TB.ACTIVITY_CLASS,
                        TB.LAND_TYPE,
                        TB.TOPOGRAPHY,
                        TB.COST_ELEMENT,
                        TB.PRICE_ROTASI,
                        '1' AS PRIORITY
                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                               SUM (HA_PLANTED) MAX_HA,
                               PERIOD_BUDGET,
                               BA_CODE,
                               case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                               TOPOGRAPHY,
                               LAND_TYPE
                            FROM TM_HECTARE_STATEMENT
                             WHERE 1 = 1 
                               AND DELETE_USER IS NULL
                               $xwhere
                               AND MATURITY_STAGE_SMS1 NOT IN
                                    ('TM')
                          GROUP BY PERIOD_BUDGET,
                               BA_CODE,
                               MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                               TOPOGRAPHY,
                               LAND_TYPE) HS
                        LEFT JOIN
                           TN_BIAYA TB
                        ON TB.BA_CODE = HS.BA_CODE
                           AND TB.PERIOD_BUDGET =
                             HS.PERIOD_BUDGET
                           AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                           AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY,'ALL')
                           AND TB.LAND_TYPE IN (HS.LAND_TYPE,'ALL')
                           AND TB.DELETE_USER IS NULL
                     UNION ALL
                     -- INI BUAT YANG LAND TYPE NYA ALL
                     SELECT --HS.BACOUNT,
                        HS.MAX_HA,
                        HS.PERIOD_BUDGET,
                        HS.BA_CODE,
                        TB.ACTIVITY_GROUP,
                        TB.ACTIVITY_CODE,
                        TB.ACTIVITY_CLASS,
                        TB.LAND_TYPE,
                        TB.TOPOGRAPHY,
                        TB.COST_ELEMENT,
                        TB.PRICE_ROTASI,
                        '2' AS PRIORITY
                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                               SUM (HA_PLANTED) MAX_HA,
                               PERIOD_BUDGET,
                               BA_CODE,
                               case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                               TOPOGRAPHY,
                               LAND_TYPE
                            FROM TM_HECTARE_STATEMENT
                             WHERE 1 = 1 
                               AND DELETE_USER IS NULL
                               $xwhere
                               AND MATURITY_STAGE_SMS1 NOT IN
                                    ('TM')
                          GROUP BY PERIOD_BUDGET,
                               BA_CODE,
                               MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                               TOPOGRAPHY,
                               LAND_TYPE) HS
                        LEFT JOIN
                           TN_BIAYA TB
                        ON TB.BA_CODE = HS.BA_CODE
                           AND TB.PERIOD_BUDGET =
                             HS.PERIOD_BUDGET
                           AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                           AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY,'ALL')
                           AND TB.LAND_TYPE = 'ALL'
                           AND TB.DELETE_USER IS NULL
                     UNION ALL
                     -- INI BUAT YANG TOPOGRAPHY NYA ALL
                     SELECT --HS.BACOUNT,
                        HS.MAX_HA,
                        HS.PERIOD_BUDGET,
                        HS.BA_CODE,
                        TB.ACTIVITY_GROUP,
                        TB.ACTIVITY_CODE,
                        TB.ACTIVITY_CLASS,
                        TB.LAND_TYPE,
                        TB.TOPOGRAPHY,
                        TB.COST_ELEMENT,
                        TB.PRICE_ROTASI,
                        '3' AS PRIORITY
                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                               SUM (HA_PLANTED) MAX_HA,
                               PERIOD_BUDGET,
                               BA_CODE,
                               case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                               TOPOGRAPHY,
                               LAND_TYPE
                            FROM TM_HECTARE_STATEMENT
                             WHERE 1 = 1 
                               AND DELETE_USER IS NULL
                               $xwhere
                               AND MATURITY_STAGE_SMS1 NOT IN
                                    ('TM')
                          GROUP BY PERIOD_BUDGET,
                               BA_CODE,
                               MATURITY_STAGE_SMS2,
                               MATURITY_STAGE_SMS1,
                               TOPOGRAPHY,
                               LAND_TYPE) HS
                        LEFT JOIN
                           TN_BIAYA TB
                        ON TB.BA_CODE = HS.BA_CODE
                           AND TB.PERIOD_BUDGET =
                             HS.PERIOD_BUDGET
                           AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                           AND TB.TOPOGRAPHY = 'ALL'
                           AND TB.LAND_TYPE IN (HS.LAND_TYPE,'ALL')
                           AND TB.DELETE_USER IS NULL
                     UNION ALL
                     -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                     SELECT --HS.BACOUNT,
                        HS.MAX_HA,
                        HS.PERIOD_BUDGET,
                        HS.BA_CODE,
                        TB.ACTIVITY_GROUP,
                        TB.ACTIVITY_CODE,
                        TB.ACTIVITY_CLASS,
                        TB.LAND_TYPE,
                        TB.TOPOGRAPHY,
                        TB.COST_ELEMENT,
                        TB.PRICE_ROTASI,
                        '4' AS PRIORITY
                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                               SUM (HA_PLANTED) MAX_HA,
                               PERIOD_BUDGET,
                               BA_CODE,
                               case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                               TOPOGRAPHY,
                               LAND_TYPE
                            FROM TM_HECTARE_STATEMENT
                             WHERE 1 = 1 
                               AND DELETE_USER IS NULL
                               $xwhere
                               AND MATURITY_STAGE_SMS1 NOT IN
                                    ('TM')
                          GROUP BY PERIOD_BUDGET,
                               BA_CODE,
                               MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                               TOPOGRAPHY,
                               LAND_TYPE) HS
                        LEFT JOIN
                           TN_BIAYA TB
                        ON TB.BA_CODE = HS.BA_CODE
                           AND TB.PERIOD_BUDGET =
                             HS.PERIOD_BUDGET
                           AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                           AND TB.TOPOGRAPHY = 'ALL'
                           AND TB.LAND_TYPE = 'ALL'
                           AND TB.DELETE_USER IS NULL)
                 GROUP BY 
                    --BACOUNT,
                    MAX_HA,
                    PRIORITY,
                    PERIOD_BUDGET,
                    BA_CODE,
                    ACTIVITY_GROUP,
                    ACTIVITY_CODE
                 ORDER BY MAX_HA DESC, PRIORITY ASC)
            WHERE PRICE_ROTASI IS NOT NULL)
        WHERE RANK_Z = 1    
        ) NORM
         ON     NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
        AND NORM.BA_CODE = STR.BA_CODE
        AND NORM.ACTIVITY_GROUP = case when STR.ACTIVITY_CODE IN ('40100', '40200', '40300')
               AND STR.GROUP01_DESC = 'TBM0' THEN 
            'TNM' ELSE STR.GROUP01_DESC END
        AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE 
        -- INI UNTUK PERHITUNGAN DI TN INFRASTRUKTUR
     LEFT JOIN ( 
      SELECT PERIOD_BUDGET,
          BA_CODE,
          ACTIVITY_CODE,
          RP_HA_INTERNAL
       FROM (SELECT RANK ()
               OVER (
                PARTITION BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE
                ORDER BY MAX_HA DESC, PRIORITY ASC)
               RANK_Z,
              PRIORITY,
              --BACOUNT,
              MAX_HA,
              PERIOD_BUDGET,
              BA_CODE,
              ACTIVITY_CODE,
              RP_HA_INTERNAL
           FROM (  SELECT --BACOUNT,
                  MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                 FROM (SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '1' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN
                                  ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '2' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '3' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN
                                  ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE,'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '4' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL
                         )
               GROUP BY --BACOUNT,
                  MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE
               ORDER BY MAX_HA DESC, PRIORITY ASC)
          WHERE RP_HA_INTERNAL IS NOT NULL)
      WHERE RANK_Z = 1) INFRA   
      ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
      AND INFRA.BA_CODE = STR.BA_CODE
      AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
      ORDER BY STR.PERIOD_BUDGET,
          STR.BA_CODE,
          STR.GROUP01,
          STR.GROUP02,
          STR.ACTIVITY_CODE
    ";
    
    return $query;
  }
  
  //generate report summary development cost
  public function reportSummaryDevelopmentCost($params = array())
  {
    $where = $select_group = $order_group = "";
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);
    
    /* ################################################### generate excel development cost ################################################### */
    $query = $this->querySummaryDevelopmentCostPerBa($params);
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }   
    /* ################################################### generate excel development cost ################################################### */
        
    return $result;
  }
  
  //generate report summary development cost AFD
  public function reportSummaryDevelopmentCostAfd($params = array())
  {
    $where = $select_group = $order_group = "";
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);
    
    /* ################################################### generate excel development cost ################################################### */
    $query = $this->querySummaryDevelopmentCostPerAfd($params);
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }   
    /* ################################################### generate excel development cost ################################################### */
        
    return $result;
  }
  
  //generate module review development cost per BA
  public function modReviewDevelopmentCostPerBa($params = array())
  {
    $where = $select_group = $order_group = "";
    
    // ############################################# get all BA #############################################
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    $query = "
      SELECT REGION_NAME, BA_CODE
      FROM TM_ORGANIZATION
      WHERE DELETE_USER IS NULL
      $where
      ORDER BY REGION_NAME, BA_CODE
    ";
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['BA_CODE'] = array(); // distinct BA
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct BA_CODE
        if (in_array($row['BA_CODE'], $result['BA_CODE']) == false) {
          array_push($result['BA_CODE'], $row['BA_CODE']);
        }
        
        $result['REGION_NAME'] = $row['REGION_NAME'];
      }
    }
    
    // ############################################# get all group + activity #############################################
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    $query = "
      SELECT  $select_group
          MAPP.ACTIVITY_CODE,
          REPORT.ACTIVITY_DESC
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_DEV_COST ALL_ACT
        WHERE 1 = 1
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      WHERE MAPP.ACTIVITY_CODE IS NOT NULL
        AND REPORT.ACTIVITY_DESC IS NOT NULL
      ORDER BY $order_group
           MAPP.ACTIVITY_CODE
    ";
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct GROUP_ACTIVITY
        if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
          array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
          
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
        }
      }
    }
    
    /* ################################################### generate excel module review development cost ################################################### */
    $query = $this->querySummaryDevelopmentCostPerBa($params);
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['NORMA'] = $row['NORMA'];
        
        $result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
      }
    }   
    /* ################################################### generate excel module review development cost ################################################### */
    return $result;
  }
  
  //query summary development cost per AFD
  public function querySummaryDevelopmentCostPerAfd($params = array())
  {
    $where = $select_group = $order_group = "";
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT CASE
            WHEN DESCRIPTION = 'LAND CLEARING' THEN 'LC' ELSE DESCRIPTION
           END AS DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND ALL_ACT.BA_CODE = '".$params['key_find']."'
      ";
      $xwhere .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT STR.*, 
        CASE
            WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
            THEN
            (CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
              THEN
                (SELECT PRICE
                   FROM TN_HARGA_BORONG
                   WHERE     1 = 1
                  AND PERIOD_BUDGET = STR.PERIOD_BUDGET
                  AND BA_CODE = STR.BA_CODE
                  AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
              ELSE
                INFRA.RP_HA_INTERNAL
              END
              )              
            ELSE
            NORM.PRICE_ROTASI
           END
           AS NORMA
         FROM (     
      SELECT  $select_group
          STRUKTUR_REPORT.PERIOD_BUDGET, 
          STRUKTUR_REPORT.REGION_CODE, 
          STRUKTUR_REPORT.BA_CODE, 
          STRUKTUR_REPORT.ESTATE_NAME, 
          STRUKTUR_REPORT.AFD_CODE, 
          STRUKTUR_REPORT.ACTIVITY_CODE, 
          STRUKTUR_REPORT.ACTIVITY_DESC, 
          STRUKTUR_REPORT.UOM, 
          STRUKTUR_REPORT.QTY_SMS1, 
          STRUKTUR_REPORT.QTY_SMS2, 
          STRUKTUR_REPORT.COST_SMS1, 
          STRUKTUR_REPORT.COST_SMS2, 
          STRUKTUR_REPORT.COST_SETAHUN,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
            THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
            ELSE 0
          END as RP_HA_SMS1,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
            THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
            ELSE 0
          END as RP_HA_SMS2,
          CASE
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) > 0
            THEN STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2)
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) = 0
            THEN 0
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND STRUKTUR_REPORT.QTY_SMS1 = 0 
               AND STRUKTUR_REPORT.QTY_SMS2 = 0
            THEN 0
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND STRUKTUR_REPORT.QTY_SMS1 > 0 
               AND STRUKTUR_REPORT.QTY_SMS2 = 0
            THEN STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1
            WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
               AND STRUKTUR_REPORT.QTY_SMS1 = 0 
               AND STRUKTUR_REPORT.QTY_SMS2 > 0
            THEN STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2
            ELSE
              (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1) + (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
          END as RP_HA_SETAHUN
      FROM (
        SELECT  $select_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.AFD_CODE, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM, 
            CASE
              WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM1)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS1_TBM0)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS1_TBM1)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS1_TBM2)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS1_TBM3)
              ELSE 0
            END AS QTY_SMS1,
            CASE
              WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM2)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS2_TBM0)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS2_TBM1)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS2_TBM2)
              WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS2_TBM3)
              ELSE 0
            END AS QTY_SMS2,
            SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
            SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
            SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN
        FROM (
          SELECT  CASE
                WHEN INSTR(HIRARKI, '/',1, 2) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
                ELSE NULL
              END GROUP01,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 3) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP02,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 4) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP03,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 5) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP04,
              GROUP_CODE
          FROM (
            SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
                LVL, 
                TO_CHAR(GROUP_CODE) AS GROUP_CODE
            FROM (
              SELECT  GROUP_CODE, 
                  CONNECT_BY_ISCYCLE \"CYCLE\",
                  LEVEL as LVL, 
                  SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
              FROM TM_RPT_MAPPING_ACT
              WHERE level > 1
              START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
              CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
            )
            GROUP BY HIRARKI, LVL, GROUP_CODE
            ORDER BY HIRARKI
          )
        ) STRUKTUR_REPORT
        LEFT JOIN TM_RPT_MAPPING_ACT MAPP
          ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
        LEFT JOIN (
          SELECT *
          FROM TMP_RPT_DEV_COST_AFD ALL_ACT
          WHERE 1 = 1
          $where
        )REPORT
          ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
          AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
          AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = REPORT.BA_CODE
        LEFT JOIN (  
          SELECT  PERIOD_BUDGET,
              BA_CODE,
              AFD_CODE,
              SMS1_TBM0,
              SMS1_TBM1,
              SMS1_TBM2,
              SMS1_TBM3,
              SMS2_TBM0,
              SMS2_TBM1,
              SMS2_TBM2,
              SMS2_TBM3
          FROM V_REPORT_SEBARAN_HS
        ) TOTAL_SEBARAN_HA
          ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
          AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
          AND TOTAL_SEBARAN_HA.AFD_CODE = REPORT.AFD_CODE
        LEFT JOIN (  
          SELECT  PERIOD_BUDGET,
              BA_CODE,
              AFD_CODE,
              ACTIVITY_CODE,
              (SUM (PLAN_JAN) + SUM (PLAN_FEB) + SUM (PLAN_MAR)
               + SUM (PLAN_APR) + SUM (PLAN_MAY) + SUM (PLAN_JUN)) AS SEM1,
              (SUM (PLAN_JUL) + SUM (PLAN_AUG) + SUM (PLAN_SEP)
               + SUM (PLAN_OCT) + SUM (PLAN_NOV) + SUM (PLAN_DEC)) AS SEM2
          FROM TR_RKT_LC
          WHERE DELETE_TIME IS NULL
            AND FLAG_TEMP IS NULL
          GROUP BY PERIOD_BUDGET, 
            BA_CODE, 
            AFD_CODE,
            ACTIVITY_CODE
        ) LC
          ON LC.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
          AND LC.BA_CODE = REPORT.BA_CODE
          AND LC.AFD_CODE = REPORT.AFD_CODE
          AND LC.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        WHERE REPORT.ACTIVITY_CODE IS NOT NULL
        GROUP BY $order_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            REPORT.AFD_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM,
            REPORT.TIPE_TRANSAKSI
      ) STRUKTUR_REPORT
      ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
           STRUKTUR_REPORT.BA_CODE,
           STRUKTUR_REPORT.AFD_CODE,
           $order_group
           STRUKTUR_REPORT.ACTIVITY_CODE) STR
           LEFT JOIN (
           SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, PRICE_ROTASI FROM (
      SELECT RANK () OVER (PARTITION BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_GROUP,
                       ACTIVITY_CODE
                ORDER BY MAX_HA DESC,PRIORITY ASC) RANK_Z, 
        PRIORITY, 
        --BACOUNT, 
        MAX_HA,
        PERIOD_BUDGET, 
        BA_CODE, 
        AFD_CODE, 
        ACTIVITY_GROUP,
        ACTIVITY_CODE, 
        PRICE_ROTASI
        FROM (  
        SELECT MAX_HA, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, SUM (PRICE_ROTASI) PRICE_ROTASI
            FROM (
            SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '1' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 NOT IN ('TM')
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE  
                       ) HS        
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                    AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                    AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')   
                    AND TB.DELETE_USER IS NULL
                UNION ALL                 -- INI BUAT YANG LAND TYPE NYA ALL   
                SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '2' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 NOT IN ('TM')
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                    AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                    AND TB.LAND_TYPE = 'ALL'  
                    AND TB.DELETE_USER IS NULL                    
                UNION ALL                -- INI BUAT YANG TOPOGRAPHY NYA ALL
                SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '3' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 NOT IN ('TM')
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                    AND TB.TOPOGRAPHY = 'ALL'
                    AND TB.LAND_TYPE = HS.LAND_TYPE  
                    AND TB.DELETE_USER IS NULL
                UNION ALL -- INI BUAT YANG LAND TYPE  DAN TOPOGRAPHY NYA ALL
                SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '4' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2, 
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 NOT IN ('TM')
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = case when ACTIVITY_CODE in ('40100', '40200', '40300') AND HS.MATURITY_STAGE_SMS2 = 'TBM0' THEN 
                                    'TNM' ELSE HS.MATURITY_STAGE_SMS2 END
                    AND TB.TOPOGRAPHY = 'ALL'
                    AND TB.LAND_TYPE = 'ALL'
                    AND TB.DELETE_USER IS NULL
                    )
          GROUP BY MAX_HA, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE
          ORDER BY MAX_HA DESC, PRIORITY ASC 
          )
       WHERE PRICE_ROTASI IS NOT NULL
       )
       WHERE RANK_Z = 1
       ) NORM
       ON NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
       AND NORM.BA_CODE = STR.BA_CODE
       AND NORM.AFD_CODE = STR.AFD_CODE
       AND NORM.ACTIVITY_GROUP = case when STR.ACTIVITY_CODE IN ('40100', '40200', '40300')
               AND STR.GROUP01_DESC = 'TBM0' THEN 
            'TNM' ELSE STR.GROUP01_DESC END
       AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE
       LEFT JOIN ( 
      SELECT PERIOD_BUDGET,
          BA_CODE,
          ACTIVITY_CODE,
          RP_HA_INTERNAL
       FROM (SELECT RANK ()
               OVER (
                PARTITION BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE
                ORDER BY MAX_HA DESC, PRIORITY ASC)
               RANK_Z,
              PRIORITY,
              MAX_HA,
              PERIOD_BUDGET,
              BA_CODE,
              ACTIVITY_CODE,
              RP_HA_INTERNAL
           FROM (  SELECT --BACOUNT,
                  MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                 FROM (SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '1' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN
                                  ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '2' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN
                                  ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '3' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                            SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                            AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN
                                  ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '4' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 NOT IN
                                  ('TM')
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL)
               GROUP BY MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE
               ORDER BY MAX_HA DESC, PRIORITY ASC)
          WHERE RP_HA_INTERNAL IS NOT NULL)
      WHERE RANK_Z = 1) INFRA   
      ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
      AND INFRA.BA_CODE = STR.BA_CODE
      AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
      ORDER BY STR.PERIOD_BUDGET,
       STR.BA_CODE,
       STR.AFD_CODE,
       STR.GROUP01,
       STR.GROUP02,
       STR.ACTIVITY_CODE
    ";
    
    return $query;
  }
  
  //generate module review development cost per AFD
  public function modReviewDevelopmentCostPerAfd($params = array())
  {
    $where = $select_group = $order_group = "";
    
    // ############################################# get all BA #############################################
    //filter period budget
    if ($params['budgetperiod'] != '') {
      $where .= "
        AND TO_CHAR(A.PERIOD_BUDGET, 'RRRR') = '".$params['budgetperiod']."'
      ";
    }
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND B.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND A.BA_CODE = '".$params['key_find']."'
      ";
    }
    $query = "
      SELECT *
      FROM (
        SELECT B.REGION_NAME, B.COMPANY_NAME, B.ESTATE_NAME, A.AFD_CODE
        FROM TM_HECTARE_STATEMENT A
        LEFT JOIN TM_ORGANIZATION B
          ON A.BA_CODE = B.BA_CODE
        WHERE A.DELETE_USER IS NULL
        $where
        UNION
        SELECT B.REGION_NAME, B.COMPANY_NAME, B.ESTATE_NAME, A.AFD_CODE
        FROM TR_RKT_LC A
        LEFT JOIN TM_ORGANIZATION B
          ON A.BA_CODE = B.BA_CODE
        WHERE A.DELETE_USER IS NULL
        $where
      ) 
      GROUP BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
      ORDER BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
    ";
    
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['AFD_CODE'] = array(); // distinct BA
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct AFD_CODE
        if (in_array($row['AFD_CODE'], $result['AFD_CODE']) == false) {
          array_push($result['AFD_CODE'], $row['AFD_CODE']);
        }
        
        $result['REGION_NAME'] = $row['REGION_NAME'];
        $result['COMPANY_NAME'] = $row['COMPANY_NAME'];
        $result['ESTATE_NAME'] = $row['ESTATE_NAME'];
      }
    }
    
    // ############################################# get all group + activity #############################################
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    $query = "
      SELECT  $select_group
          MAPP.ACTIVITY_CODE,
          REPORT.ACTIVITY_DESC
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_DEV_COST ALL_ACT
        WHERE 1 = 1
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      WHERE MAPP.ACTIVITY_CODE IS NOT NULL
        AND REPORT.ACTIVITY_DESC IS NOT NULL
      ORDER BY $order_group
           MAPP.ACTIVITY_CODE
    ";
    
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct GROUP_ACTIVITY
        if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
          array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
          
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
        }
      }
    }
    
    /* ################################################### generate excel module review development cost ################################################### */
    $query = $this->querySummaryDevelopmentCostPerAfd($params);
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['NORMA'] = $row['NORMA'];
        
        $result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
      }
    }   
    /* ################################################### generate excel module review development cost ################################################### */

    return $result;
  }
  
  //generate temp table untuk estate cost
  public function tmpRptEstCost($params = array())
  {
    //echo 'a';
    $where = "";
    $where1 = "";
    $ba_code = ""; $period_budget = "";
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $period_budget = $params['budgetperiod'];
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where1 .= "
        AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $where1 .= "
        AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";  
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $ba_code = $params['key_find'];
      $where .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
      $where1 .= "
        AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
      ";
    }
    //generate estate cost per BA
    //echo 'zzz'; die;
    $query = "
      INSERT INTO TMP_RPT_EST_COST (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
      SELECT  PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          TIPE_TRANSAKSI,
          ACTIVITY_CODE,
          ACTIVITY_DESC,
          COST_ELEMENT,
          KETERANGAN,
          UOM,
          SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
          SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
          SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
          SUM (NVL (QTY_APR, 0)) AS QTY_APR,
          SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
          SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
          SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
          SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
          SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
          SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
          SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
          SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
          CASE
            WHEN ACTIVITY_CODE = 'HA_TM'
            THEN SUM (QTY_JAN)
            ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0)))
          END AS QTY_SMS1,
          CASE
            WHEN ACTIVITY_CODE = 'HA_TM'
            THEN SUM (QTY_JUL)
            ELSE (SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
          END AS QTY_SMS2,
          CASE
            WHEN ACTIVITY_CODE = 'HA_TM'
            THEN 0
            ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
                + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
          END AS QTY_SETAHUN,
          SUM (NVL (COST_JAN, 0)) COST_JAN,
          SUM (NVL (COST_FEB, 0)) COST_FEB,
          SUM (NVL (COST_MAR, 0)) COST_MAR,
          SUM (NVL (COST_APR, 0)) COST_APR,
          SUM (NVL (COST_MAY, 0)) COST_MAY,
          SUM (NVL (COST_JUN, 0)) COST_JUN,
          SUM (NVL (COST_JUL, 0)) COST_JUL,
          SUM (NVL (COST_AUG, 0)) COST_AUG,
          SUM (NVL (COST_SEP, 0)) COST_SEP,
          SUM (NVL (COST_OCT, 0)) COST_OCT,
          SUM (NVL (COST_NOV, 0)) COST_NOV,
          SUM (NVL (COST_DEC, 0)) COST_DEC,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
          (SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
           + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
          SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
          SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
          CASE
            WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
            THEN SUM (NVL (RP_ROTASI_SMS1, 0))
            ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
          END AS RP_ROTASI_TOTAL,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
      FROM (
        -- HECTARE TANAM TM - SMS 1
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' AS TIPE_TRANSAKSI,
            'HA_TM' ACTIVITY_CODE,
            'HEKTAR TM' AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            'HA' AS UOM,
            RKT.HA_PLANTED AS QTY_JAN,
            RKT.HA_PLANTED AS QTY_FEB,
            RKT.HA_PLANTED AS QTY_MAR,
            RKT.HA_PLANTED AS QTY_APR,
            RKT.HA_PLANTED AS QTY_MAY,
            RKT.HA_PLANTED AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TM_HECTARE_STATEMENT RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL 
          AND RKT.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS1 = 'TM'
          $where
        UNION ALL 
        -- HECTARE TANAM TM - SMS 2
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' AS TIPE_TRANSAKSI,
            'HA_TM' ACTIVITY_CODE,
            'HEKTAR TM' AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            'HA' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.HA_PLANTED AS QTY_JUL,
            RKT.HA_PLANTED AS QTY_AUG,
            RKT.HA_PLANTED AS QTY_SEP,
            RKT.HA_PLANTED AS QTY_OCT,
            RKT.HA_PLANTED AS QTY_NOV,
            RKT.HA_PLANTED AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TM_HECTARE_STATEMENT RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL 
          AND RKT.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 = 'TM'
          $where
        UNION ALL
        -- PRODUKSI TBS 
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' TIPE_TRANSAKSI,
            'PRODUKSI_TBS' ACTIVITY_CODE,
            'PRODUKSI TBS' ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            'TON' UOM,
            RKT.JAN QTY_JAN,
            RKT.FEB QTY_FEB,
            RKT.MAR QTY_MAR,
            RKT.APR QTY_APR,
            RKT.MAY QTY_MAY,
            RKT.JUN QTY_JUN,
            RKT.JUL QTY_JUL,
            RKT.AUG QTY_AUG,
            RKT.SEP QTY_SEP,
            RKT.OCT QTY_OCT,
            RKT.NOV QTY_NOV,
            RKT.DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_PRODUKSI_PERIODE_BUDGET RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          $where
        UNION ALL 
        -- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 1 TM
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN AS QTY_JAN,
            RKT.PLAN_FEB AS QTY_FEB,
            RKT.PLAN_MAR AS QTY_MAR,
            RKT.PLAN_APR AS QTY_APR,
            RKT.PLAN_MAY AS QTY_MAY,
            RKT.PLAN_JUN AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN AS COST_JAN,
            RKT.DIS_FEB AS COST_FEB,
            RKT.DIS_MAR AS COST_MAR,
            RKT.DIS_APR AS COST_APR,
            RKT.DIS_MAY AS COST_MAY,
            RKT.DIS_JUN AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.RP_ROTASI_SMS1 AS RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI', 'MANUAL_SISIP')
          AND RKT.MATURITY_STAGE_SMS1 = 'TM'
          AND RKT.ACTIVITY_CODE <> '51110'
          $where
        UNION ALL 
        -- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 2 TM
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL AS QTY_JUL,
            RKT.PLAN_AUG AS QTY_AUG,
            RKT.PLAN_SEP AS QTY_SEP,
            RKT.PLAN_OCT AS QTY_OCT,
            RKT.PLAN_NOV AS QTY_NOV,
            RKT.PLAN_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL AS COST_JUL,
            RKT.DIS_AUG AS COST_AUG,
            RKT.DIS_SEP AS COST_SEP,
            RKT.DIS_OCT AS COST_OCT,
            RKT.DIS_NOV AS COST_NOV,
            RKT.DIS_DEC AS COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.RP_ROTASI_SMS2 AS RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI', 'MANUAL_SISIP')
          AND RKT.MATURITY_STAGE_SMS2 = 'TM'
          AND RKT.ACTIVITY_CODE <> '51110'
          $where
        UNION ALL 
         -- AJK PEMANEN BA NBU 17.09.2015
            SELECT PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               TIPE_TRANSAKSI,
               ACTIVITY_CODE,
               ACTIVITY_DETAIL,
               COST_ELEMENT,
               KETERANGAN,
               UOM,
               SUM (QTY_JAN) QTY_JAN,
               SUM (QTY_FEB) QTY_FEB,
               SUM (QTY_MAR) QTY_MAR,
               SUM (QTY_APR) QTY_APR,
               SUM (QTY_MAY) QTY_MAY,
               SUM (QTY_JUN) QTY_JUN,
               SUM (QTY_JUL) QTY_JUL,
               SUM (QTY_AUG) QTY_AUG,
               SUM (QTY_SEP) QTY_SEP,
               SUM (QTY_OCT) QTY_OCT,
               SUM (QTY_NOV) QTY_NOV,
               SUM (QTY_DEC) QTY_DEC,
               SUM (COST_JAN) COST_JAN,
               SUM (COST_FEB) COST_FEB,
               SUM (COST_MAR) COST_MAR,
               SUM (COST_APR) COST_APR,
               SUM (COST_MAY) COST_MAY,
               SUM (COST_JUN) COST_JUN,
               SUM (COST_JUL) COST_JUL,
               SUM (COST_AUG) COST_AUG,
               SUM (COST_SEP) COST_SEP,
               SUM (COST_OCT) COST_OCT,
               SUM (COST_NOV) COST_NOV,
               SUM (COST_DEC) COST_DEC,
               SUM (RP_ROTASI_SMS1) RP_ROTASI_SMS1,
               SUM (RP_ROTASI_SMS2) RP_ROTASI_SMS2
            FROM (SELECT ANGKUT.PERIOD_BUDGET,
                   ANGKUT.REGION_CODE,
                   ANGKUT.BA_CODE,
                   ANGKUT.AFD_CODE,
                   'TM' AS TIPE_TRANSAKSI,
                   ANGKUT.ACTIVITY_CODE AS ACTIVITY_CODE,
                   TA.DESCRIPTION AS ACTIVITY_DETAIL,
                   'TRANSPORT' AS COST_ELEMENT,
                   '' KETERANGAN,
                   '' AS UOM,
                   0 QTY_JAN,
                   0 QTY_FEB,
                   0 QTY_MAR,
                   0 QTY_APR,
                   0 QTY_MAY,
                   0 QTY_JUN,
                   0 QTY_JUL,
                   0 QTY_AUG,
                   0 QTY_SEP,
                   0 QTY_OCT,
                   0 QTY_NOV,
                   0 QTY_DEC,
                   (SEBARAN.JAN * ANGKUT.TOTAL) COST_JAN,
                   (SEBARAN.FEB * ANGKUT.TOTAL) COST_FEB,
                   (SEBARAN.MAR * ANGKUT.TOTAL) COST_MAR,
                   (SEBARAN.APR * ANGKUT.TOTAL) COST_APR,
                   (SEBARAN.MAY * ANGKUT.TOTAL) COST_MAY,
                   (SEBARAN.JUN * ANGKUT.TOTAL) COST_JUN,
                   (SEBARAN.JUL * ANGKUT.TOTAL) COST_JUL,
                   (SEBARAN.AUG * ANGKUT.TOTAL) COST_AUG,
                   (SEBARAN.SEP * ANGKUT.TOTAL) COST_SEP,
                   (SEBARAN.OCT * ANGKUT.TOTAL) COST_OCT,
                   (SEBARAN.NOV * ANGKUT.TOTAL) COST_NOV,
                   (SEBARAN.DEC * ANGKUT.TOTAL) COST_DEC,
                   0 RP_ROTASI_SMS1,
                   0 RP_ROTASI_SMS2
                FROM (SELECT ANGKUT.PERIOD_BUDGET,
                       ANGKUT.BA_CODE,
                       ANGKUT.AFD_CODE,
                       ANGKUT.ACTIVITY_CODE,
                       price_hm_km TOTAL,
                       ANGKUT.REGION_CODE
                    FROM (  SELECT RKT.PERIOD_BUDGET,
                             ORG.REGION_CODE,
                             RKT.BA_CODE,
                             RKT.location_code AFD_CODE,
                             RKT.ACTIVITY_CODE,
                             SUM (hm_km) hm_km,
                             SUM (price_hm_km) price_hm_km
                          FROM    TR_RKT_VRA_DISTRIBUSI RKT
                             LEFT JOIN
                              TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE
                         WHERE RKT.ACTIVITY_CODE = '51110'
                             AND RKT.LOCATION_CODE NOT IN
                                ('UMUM',
                                 'BIBITAN',
                                 'BASECAMP',
                                 'LAIN')
                             AND RKT.DELETE_USER IS NULL
                             $where
                        GROUP BY RKT.PERIOD_BUDGET,
                             ORG.REGION_CODE,
                             RKT.BA_CODE,
                             RKT.location_code,
                             RKT.ACTIVITY_CODE) ANGKUT) ANGKUT
                   LEFT JOIN (SELECT PERIOD_BUDGET,
                             BA_CODE,
                             AFD_CODE,
                             JAN / TOTAL AS JAN,
                             FEB / TOTAL AS FEB,
                             MAR / TOTAL AS MAR,
                             APR / TOTAL AS APR,
                             MAY / TOTAL AS MAY,
                             JUN / TOTAL AS JUN,
                             JUL / TOTAL AS JUL,
                             AUG / TOTAL AS AUG,
                             SEP / TOTAL AS SEP,
                             OCT / TOTAL AS OCT,
                             NOV / TOTAL AS NOV,
                             DEC / TOTAL AS DEC,
                             TOTAL
                          FROM (  SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                 norma.BA_CODE BA_CODE,
                                 norma.AFD_CODE AFD_CODE,
                                 SUM (norma.JAN) JAN,
                                 SUM (norma.FEB) FEB,
                                 SUM (norma.MAR) MAR,
                                 SUM (norma.APR) APR,
                                 SUM (norma.MAY) MAY,
                                 SUM (norma.JUN) JUN,
                                 SUM (norma.JUL) JUL,
                                 SUM (norma.AUG) AUG,
                                 SUM (norma.SEP) SEP,
                                 SUM (norma.OCT) OCT,
                                 SUM (norma.NOV) NOV,
                                 SUM (norma.DEC) DEC,
                                 MAX (total_BA) total
                              FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                 LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                  ON norma.PERIOD_BUDGET =
                                      thn_berjalan.PERIOD_BUDGET
                                     AND norma.BA_CODE =
                                       thn_berjalan.BA_CODE
                                     AND norma.AFD_CODE =
                                       thn_berjalan.AFD_CODE
                                     AND norma.BLOCK_CODE =
                                       thn_berjalan.BLOCK_CODE
                                 LEFT JOIN (  SELECT PERIOD_BUDGET,
                                           BA_CODE,
                                           AFD_CODE,
                                           SUM( (  JAN
                                               + FEB
                                               + MAR
                                               + APR
                                               + MAY
                                               + JUN
                                               + JUL
                                               + AUG
                                               + SEP
                                               + OCT
                                               + NOV
                                               + DEC))
                                            TOTAL_BA
                                        FROM TR_PRODUKSI_PERIODE_BUDGET
                                      GROUP BY PERIOD_BUDGET,
                                           BA_CODE,
                                           AFD_CODE)
                                       ttl_afd
                                  ON ttl_afd.PERIOD_BUDGET =
                                      norma.PERIOD_BUDGET
                                     AND ttl_afd.BA_CODE =
                                       norma.BA_CODE
                                     AND ttl_afd.AFD_CODE =
                                       norma.AFD_CODE
                               WHERE     norma.DELETE_USER IS NULL
                                 $where1
                            GROUP BY norma.PERIOD_BUDGET,
                                 norma.BA_CODE,
                                 norma.AFD_CODE)) SEBARAN
                    ON     sebaran.PERIOD_BUDGET = ANGKUT.PERIOD_BUDGET
                       AND sebaran.BA_CODE = ANGKUT.BA_CODE
                       AND sebaran.AFD_CODE = ANGKUT.AFD_CODE
                   LEFT JOIN TM_ACTIVITY TA
                    ON TA.ACTIVITY_CODE = ANGKUT.ACTIVITY_CODE)
          GROUP BY PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               TIPE_TRANSAKSI,
               ACTIVITY_CODE,
               ACTIVITY_DETAIL,
               COST_ELEMENT,
               KETERANGAN,
               UOM
     UNION ALL
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101, 5101030504) UNTUK TM
        /*SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_TOTAL_RELATION_COST RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              SUM (HS.SMS1_TM) SMS1_TM,
              SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
              SUM (HS.SMS2_TM) SMS2_TM,
              SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE NOT IN ( '1212010101',  '5101030504')
          $where*/

        SELECT
            RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            --RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            COST_JAN,
            COST_FEB,
            COST_MAR,
            COST_APR,
            COST_MAY,
            COST_JUN,
            COST_JUL,
            COST_AUG,
            COST_SEP,
            COST_OCT,
            COST_NOV,
            COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT  SEBARAN_HA.PERIOD_BUDGET,
              SEBARAN_HA.BA_CODE,
              SEBARAN_HA.AFD_CODE,
              RKT.REPORT_TYPE,
              RKT.COA_CODE,
              RKT.COA_DESC,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
          FROM (
              SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
              FROM V_REPORT_SEBARAN_HS SUMHA_AFD
              LEFT JOIN (
                SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
                FROM V_REPORT_SEBARAN_HS
                GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
              ) SUMHA_BA
                ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
                SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
            --SELECT SUMHA_AFD.PERIOD_BUDGET,
            --      SUMHA_AFD.BA_CODE,
            --      SUMHA_AFD.AFD_CODE,
            --      SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
            --      SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
            --      SUMHA_BA.HA_BA_1,
            --      SUMHA_BA.HA_BA_2                                    
            --FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            --LEFT JOIN (
            --  SELECT PERIOD_BUDGET,
            --        BA_CODE,
            --        SUM(TOTAL_HA_SMS1) HA_BA_1,
            --        SUM(TOTAL_HA_SMS2) HA_BA_2
            --  FROM V_REPORT_SEBARAN_HS
            --  GROUP BY PERIOD_BUDGET,
            --        BA_CODE                                        
            --) SUMHA_BA
            --  ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
            --  AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
            --GROUP BY SUMHA_AFD.PERIOD_BUDGET,
            --      SUMHA_AFD.BA_CODE,
            --      SUMHA_AFD.AFD_CODE,
            --      SUMHA_BA.HA_BA_1,
            --      SUMHA_BA.HA_BA_2
          ) SEBARAN_HA
          LEFT JOIN V_TOTAL_RELATION_COST RKT
            ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
            AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        ) RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              HS.AFD_CODE,
              HS.SMS1_TM,
              HS.TOTAL_HA_SMS1,
              HS.SMS2_TM,
              HS.TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE NOT IN ( '1212010101',  '5101030504')
        $where
        
        -- RKT PUPUK TUNGGAL
        -- saya pindahin paling bawah
        -- yaddi.surahman@tap-agri.co.id

        -- PUPUK TUNGGAL LABOUR DAN PUPUK MAJEMUK LABOUR
        -- saya pindahin paling bawah
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - BIAYA PEMANEN, PREMI JANJANG LEBIH, PREMI BRONDOLAN, DAN PREMI INSENTIF
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - KRANI BUAH
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - ALAT PANEN
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - SUPERVISI PEMANEN
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - PREMI SUPIR
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - ANGKUT - LANGSIR (TRANSPORT)
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        --  PANEN - ANGKUT - LANGSIR (LABOUR)
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - TRANSPORT TBS - BONGKAR MUAT
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN - ANGKUT - TRANSPORT TBS INTERNAL
        -- PANEN - ANGKUT - TRANSPORT TBS EKSTERNAL
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        -- PANEN : PENGANGKUTAN TBS INTERNAL (COA : 5101030504)
        -- saya pindah paling bawah 
        -- yaddi.surahman@tap-agri.co.id

        UNION ALL
        -- RKT PERKERASAN JALAN : SMS 1 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS1 = 'TM'
          AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
          AND RKT_INDUK.SUMBER_BIAYA = 'INTERNAL'
          $where
        UNION ALL
        -- RKT PERKERASAN JALAN : SMS 2 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 = 'TM'
          AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
          AND RKT_INDUK.SUMBER_BIAYA = 'INTERNAL'
          $where
      UNION ALL
      -- PERKERASAN JALAN -- COST ELEMENT: CONTRACT
      SELECT  RKT.PERIOD_BUDGET,
          ORG.REGION_CODE,
          RKT.BA_CODE,
          'TM' AS TIPE_TRANSAKSI,
          RKT.ACTIVITY_CODE,
          ACT.DESCRIPTION AS ACTIVITY_DESC,
          RKT.COST_ELEMENT,
          '' KETERANGAN,
          ACT.UOM,
          RKT.PLAN_JAN QTY_JAN,
          RKT.PLAN_FEB QTY_FEB,
          RKT.PLAN_MAR QTY_MAR,
          RKT.PLAN_APR QTY_APR,
          RKT.PLAN_MAY QTY_MAY,
          RKT.PLAN_JUN QTY_JUN,
          0 QTY_JUL,
          0 QTY_AUG,
          0 QTY_SEP,
          0 QTY_OCT,
          0 QTY_NOV,
          0 QTY_DEC,
          RKT.DIS_JAN COST_JAN,
          RKT.DIS_FEB COST_FEB,
          RKT.DIS_MAR COST_MAR,
          RKT.DIS_APR COST_APR,
          RKT.DIS_MAY COST_MAY,
          RKT.DIS_JUN COST_JUN,
          0 COST_JUL,
          0 COST_AUG,
          0 COST_SEP,
          0 COST_OCT,
          0 COST_NOV,
          0 COST_DEC,
          RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
          0 RP_ROTASI_SMS2
      FROM TR_RKT_PK_COST_ELEMENT RKT
      JOIN TR_RKT_PK RKT_INDUK
        ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
      JOIN TM_ACTIVITY ACT
        ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
      JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = RKT.BA_CODE
      WHERE RKT.DELETE_USER IS NULL
        AND RKT_INDUK.FLAG_TEMP IS NULL
        AND RKT.MATURITY_STAGE_SMS1 = 'TM'
        AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
        AND RKT_INDUK.SUMBER_BIAYA = 'EXTERNAL'
        AND RKT.COST_ELEMENT = 'CONTRACT'
        $where
      UNION ALL
      -- RKT PERKERASAN JALAN : SMS 2 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
      SELECT  RKT.PERIOD_BUDGET,
          ORG.REGION_CODE,
          RKT.BA_CODE,
          'TM' AS TIPE_TRANSAKSI,
          RKT.ACTIVITY_CODE,
          ACT.DESCRIPTION AS ACTIVITY_DESC,
          RKT.COST_ELEMENT,
          '' KETERANGAN,
          ACT.UOM,
          0 QTY_JAN,
          0 QTY_FEB,
          0 QTY_MAR,
          0 QTY_APR,
          0 QTY_MAY,
          0 QTY_JUN,
          RKT.PLAN_JUL QTY_JUL,
          RKT.PLAN_AUG QTY_AUG,
          RKT.PLAN_SEP QTY_SEP,
          RKT.PLAN_OCT QTY_OCT,
          RKT.PLAN_NOV QTY_NOV,
          RKT.PLAN_DEC QTY_DEC,
          0 COST_JAN,
          0 COST_FEB,
          0 COST_MAR,
          0 COST_APR,
          0 COST_MAY,
          0 COST_JUN,
          RKT.DIS_JUL COST_JUL,
          RKT.DIS_AUG COST_AUG,
          RKT.DIS_SEP COST_SEP,
          RKT.DIS_OCT COST_OCT,
          RKT.DIS_NOV COST_NOV,
          RKT.DIS_DEC COST_DEC,
          0 RP_ROTASI_SMS1,
          RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
      FROM TR_RKT_PK_COST_ELEMENT RKT
      JOIN TR_RKT_PK RKT_INDUK ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
      JOIN TM_ACTIVITY ACT ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
      WHERE RKT.DELETE_USER IS NULL
        AND RKT_INDUK.FLAG_TEMP IS NULL
        AND RKT.MATURITY_STAGE_SMS2 = 'TM'
        AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
        AND RKT_INDUK.SUMBER_BIAYA = 'EXTERNAL'
        AND RKT.COST_ELEMENT = 'CONTRACT'
        $where
      ) REPORT
      GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        KETERANGAN,
        UOM
    ";
    //echo 'ddddd : query';
    $this->_db->query($query);
    $this->_db->commit();
    //if ($this->_db->commit()) {
      //echo '9 . ' . $query;
    //}

  // yaddi.surahman@tap-agri.co.id
  $components['labor_pupuk_tunggal'] = "
    INSERT INTO TMP_RPT_EST_COST (
    PERIOD_BUDGET,
    REGION_CODE,
    BA_CODE,
    TIPE_TRANSAKSI,
    ACTIVITY_CODE,
    ACTIVITY_DESC,
    COST_ELEMENT,
    UOM,
    INSERT_USER,INSERT_TIME, KETERANGAN,
    QTY_JAN, COST_JAN,
    QTY_FEB, COST_FEB,
    QTY_MAR, COST_MAR,
    QTY_APR, COST_APR,
    QTY_MAY, COST_MAY,
    QTY_JUN, COST_JUN,
    QTY_JUL, COST_JUL,
    QTY_AUG, COST_AUG,
    QTY_SEP, COST_SEP,
    QTY_OCT, COST_OCT,
    QTY_NOV, COST_NOV,
    QTY_DEC, COST_DEC,
    QTY_SETAHUN, COST_SETAHUN
    )
    SELECT PIV.*, 
    NVL(PIV.JAN_DIS,0)+NVL(PIV.FEB_DIS,0)+NVL(PIV.MAR_DIS,0)+NVL(PIV.APR_DIS,0)+NVL(PIV.MAY_DIS,0)+NVL(PIV.JUN_DIS,0)+
    NVL(PIV.JUL_DIS,0)+NVL(PIV.AUG_DIS,0)+NVL(PIV.SEP_DIS,0)+NVL(PIV.OCT_DIS,0)+NVL(PIV.NOV_DIS,0)+NVL(PIV.DEC_DIS,0) QTY_SETAHUN,
    NVL(PIV.JAN_COST,0)+NVL(PIV.FEB_COST,0)+NVL(PIV.MAR_COST,0)+NVL(PIV.APR_COST,0)+NVL(PIV.MAY_COST,0)+NVL(PIV.JUN_COST,0)+
    NVL(PIV.JUL_COST,0)+NVL(PIV.AUG_COST,0)+NVL(PIV.SEP_COST,0)+NVL(PIV.OCT_COST,0)+NVL(PIV.NOV_COST,0)+NVL(PIV.DEC_COST,0) COST_SETAHUN
    FROM (
    SELECT * FROM (
      SELECT RKT.PERIOD_BUDGET, RKT.REGION_CODE, RKT.BA_CODE, 'TM' TIPE_TRANSAKSI, RKT.COA_CODE ACTIVITY_CODE
      , 'PUPUK TUNGGAL' ACTIVITY_DESC
      , 'LABOUR' COST_ELEMENT
      , 'HA' UOM
      , '".$this->_userName."', CURRENT_TIMESTAMP, NULL
      , RKT.BULAN_PEMUPUKAN
      , RKT.JUMLAH
      , RKT.POKOK_TANAM * COST.RP_QTY_INTERNAL COST
      FROM (
      SELECT DECODE(UPPER(MAT.FLAG), 'MAKRO', '43750', 'MIKRO', '43751', 'TANKOS', '43500', '43770') ACTIVITY_CODE
        , HS.LAND_TYPE, HS.TOPOGRAPHY, ORG.REGION_CODE, HS.BA_CODE, HS.BLOCK_CODE, HS.PERIOD_BUDGET, HS.HA_PLANTED
        , HS.POKOK_TANAM
        , SUM(FZ.HA_PUPUK) OVER (PARTITION BY HS.PERIOD_BUDGET,HS.BA_CODE, HS.AFD_CODE, HS.BLOCK_CODE, FZ.MATERIAL_CODE) JUMLAH
        , FZ.BULAN_PEMUPUKAN, MAT.FLAG, MAT.MATERIAL_NAME, COA.COA_CODE
      FROM TM_HECTARE_STATEMENT HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN TN_PUPUK_TBM2_TM FZ ON FZ.PERIOD_BUDGET = HS.PERIOD_BUDGET AND FZ.BA_CODE = HS.BA_CODE
        AND FZ.AFD_CODE = HS.AFD_CODE AND FZ.BLOCK_CODE = HS.BLOCK_CODE
      JOIN TM_MATERIAL MAT ON MAT.MATERIAL_CODE = FZ.MATERIAL_CODE AND MAT.PERIOD_BUDGET = FZ.PERIOD_BUDGET
        AND MAT.BA_CODE = FZ.BA_CODE
      JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
      WHERE EXTRACT(YEAR FROM FZ.PERIOD_BUDGET) = ".$params['budgetperiod']."
      AND FZ.BA_CODE = '".$params['key_find']."'
      AND HS.MATURITY_STAGE_SMS1 = 'TM'
      AND COA.COA_CODE = '5101020300'
      AND FZ.JENIS_TANAM = 'NORMAL'
      ) RKT
      LEFT JOIN TN_INFRASTRUKTUR COST ON COST.ACTIVITY_CODE = RKT.ACTIVITY_CODE AND COST.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND COST.BA_CODE = RKT.BA_CODE AND COST.COST_ELEMENT = 'LABOUR' 
      AND RKT.TOPOGRAPHY = COST.TOPOGRAPHY
      LEFT JOIN TR_RKT_CHECKROLL_SUM CR ON CR.BA_CODE = RKT.BA_CODE AND CR.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND CR.JOB_CODE = 'FW030'
    )
    PIVOT (
      SUM(JUMLAH) AS DIS, SUM(COST) AS COST
      FOR BULAN_PEMUPUKAN IN (
      '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
      '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
      )
    )
    ) PIV
  ";
 
  $components['labor_pupuk_majemuk'] = "
    INSERT INTO TMP_RPT_EST_COST (
    PERIOD_BUDGET,
    REGION_CODE,
    BA_CODE,
    TIPE_TRANSAKSI,
    ACTIVITY_CODE,
    ACTIVITY_DESC,
    COST_ELEMENT,
    UOM,
    INSERT_USER,INSERT_TIME, KETERANGAN,
    QTY_JAN, COST_JAN,
    QTY_FEB, COST_FEB,
    QTY_MAR, COST_MAR,
    QTY_APR, COST_APR,
    QTY_MAY, COST_MAY,
    QTY_JUN, COST_JUN,
    QTY_JUL, COST_JUL,
    QTY_AUG, COST_AUG,
    QTY_SEP, COST_SEP,
    QTY_OCT, COST_OCT,
    QTY_NOV, COST_NOV,
    QTY_DEC, COST_DEC,
    QTY_SETAHUN, COST_SETAHUN
    )
    SELECT PIV.*, 
    NVL(PIV.JAN_DIS,0)+NVL(PIV.FEB_DIS,0)+NVL(PIV.MAR_DIS,0)+NVL(PIV.APR_DIS,0)+NVL(PIV.MAY_DIS,0)+NVL(PIV.JUN_DIS,0)+
    NVL(PIV.JUL_DIS,0)+NVL(PIV.AUG_DIS,0)+NVL(PIV.SEP_DIS,0)+NVL(PIV.OCT_DIS,0)+NVL(PIV.NOV_DIS,0)+NVL(PIV.DEC_DIS,0) QTY_SETAHUN,
    NVL(PIV.JAN_COST,0)+NVL(PIV.FEB_COST,0)+NVL(PIV.MAR_COST,0)+NVL(PIV.APR_COST,0)+NVL(PIV.MAY_COST,0)+NVL(PIV.JUN_COST,0)+
    NVL(PIV.JUL_COST,0)+NVL(PIV.AUG_COST,0)+NVL(PIV.SEP_COST,0)+NVL(PIV.OCT_COST,0)+NVL(PIV.NOV_COST,0)+NVL(PIV.DEC_COST,0) COST_SETAHUN
    FROM (
    SELECT * FROM (
      SELECT RKT.PERIOD_BUDGET, RKT.REGION_CODE, RKT.BA_CODE, 'TM' TIPE_TRANSAKSI, RKT.COA_CODE ACTIVITY_CODE
      , 'PUPUK MAJEMUK' ACTIVITY_DESC
      , 'LABOUR' COST_ELEMENT
      , 'HA' UOM
      , '".$this->_userName."', CURRENT_TIMESTAMP, NULL
      , RKT.BULAN_PEMUPUKAN
      , RKT.JUMLAH
      , RKT.POKOK_TANAM * COST.RP_QTY_INTERNAL COST
      FROM (
      SELECT DECODE(UPPER(MAT.FLAG), 'MAKRO', '43750', 'MIKRO', '43751', 'TANKOS', '43500', '43770') ACTIVITY_CODE
        , HS.LAND_TYPE, HS.TOPOGRAPHY, ORG.REGION_CODE, HS.BA_CODE, HS.BLOCK_CODE, HS.PERIOD_BUDGET, HS.HA_PLANTED
        , HS.POKOK_TANAM
        , SUM(FZ.HA_PUPUK) OVER (PARTITION BY HS.PERIOD_BUDGET,HS.BA_CODE, HS.AFD_CODE, HS.BLOCK_CODE, FZ.MATERIAL_CODE) JUMLAH
        , FZ.BULAN_PEMUPUKAN, MAT.FLAG, MAT.MATERIAL_NAME, COA.COA_CODE
      FROM TM_HECTARE_STATEMENT HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN TN_PUPUK_TBM2_TM FZ ON FZ.PERIOD_BUDGET = HS.PERIOD_BUDGET AND FZ.BA_CODE = HS.BA_CODE
        AND FZ.AFD_CODE = HS.AFD_CODE AND FZ.BLOCK_CODE = HS.BLOCK_CODE
      JOIN TM_MATERIAL MAT ON MAT.MATERIAL_CODE = FZ.MATERIAL_CODE AND MAT.PERIOD_BUDGET = FZ.PERIOD_BUDGET
        AND MAT.BA_CODE = FZ.BA_CODE
      JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
      WHERE EXTRACT(YEAR FROM FZ.PERIOD_BUDGET) = ".$params['budgetperiod']."
      AND FZ.BA_CODE = '".$params['key_find']."'
      AND HS.MATURITY_STAGE_SMS1 = 'TM'
      AND COA.COA_CODE = '5101020400'
      AND FZ.JENIS_TANAM = 'NORMAL'
      ) RKT
      LEFT JOIN TN_INFRASTRUKTUR COST ON COST.ACTIVITY_CODE = RKT.ACTIVITY_CODE AND COST.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND COST.BA_CODE = RKT.BA_CODE AND COST.COST_ELEMENT = 'LABOUR' 
      AND RKT.TOPOGRAPHY = COST.TOPOGRAPHY
      LEFT JOIN TR_RKT_CHECKROLL_SUM CR ON CR.BA_CODE = RKT.BA_CODE AND CR.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND CR.JOB_CODE = 'FW030'
    )
    PIVOT (
      SUM(JUMLAH) AS DIS, SUM(COST) AS COST
      FOR BULAN_PEMUPUKAN IN (
      '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
      '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
      )
    )
    ) PIV
  ";

  $components['material_pupuk_tunggal'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      QTY_JAN, COST_JAN,
      QTY_FEB, COST_FEB,
      QTY_MAR, COST_MAR,
      QTY_APR, COST_APR,
      QTY_MAY, COST_MAY,
      QTY_JUN, COST_JUN,
      QTY_JUL, COST_JUL,
      QTY_AUG, COST_AUG,
      QTY_SEP, COST_SEP,
      QTY_OCT, COST_OCT,
      QTY_NOV, COST_NOV,
      QTY_DEC, COST_DEC,
      QTY_SETAHUN, COST_SETAHUN
    )
      SELECT PIV.*, 
          NVL(PIV.JAN_DIS,0)+NVL(PIV.FEB_DIS,0)+NVL(PIV.MAR_DIS,0)+NVL(PIV.APR_DIS,0)+NVL(PIV.MAY_DIS,0)+NVL(PIV.JUN_DIS,0)+
          NVL(PIV.JUL_DIS,0)+NVL(PIV.AUG_DIS,0)+NVL(PIV.SEP_DIS,0)+NVL(PIV.OCT_DIS,0)+NVL(PIV.NOV_DIS,0)+NVL(PIV.DEC_DIS,0) QTY_SETAHUN,
          NVL(PIV.JAN_COST,0)+NVL(PIV.FEB_COST,0)+NVL(PIV.MAR_COST,0)+NVL(PIV.APR_COST,0)+NVL(PIV.MAY_COST,0)+NVL(PIV.JUN_COST,0)+
          NVL(PIV.JUL_COST,0)+NVL(PIV.AUG_COST,0)+NVL(PIV.SEP_COST,0)+NVL(PIV.OCT_COST,0)+NVL(PIV.NOV_COST,0)+NVL(PIV.DEC_COST,0) COST_SETAHUN
        FROM (
          SELECT * FROM (
            SELECT RKT.PERIOD_BUDGET, RKT.REGION_CODE, RKT.BA_CODE
            , 'TM' TIPE_TRANSAKSI, RKT.COA_CODE ACTIVITY_CODE
            , 'PUPUK TUNGGAL' ACTIVITY_DESC
            , 'MATERIAL' COST_ELEMENT
            , 'KG' UOM
            , '".$this->_userName."', CURRENT_TIMESTAMP, MATERIAL_NAME
            , RKT.BULAN_PEMUPUKAN
            , JUMLAH
            , PRICE
          FROM (
            SELECT DECODE(UPPER(MAT.FLAG), 'MAKRO', '43750', 'MIKRO', '43751', 'TANKOS', '43500', '43770') ACTIVITY_CODE
              , HS.LAND_TYPE, HS.TOPOGRAPHY, ORG.REGION_CODE, HS.BA_CODE
              , HS.AFD_CODE, HS.BLOCK_CODE, HS.PERIOD_BUDGET, HS.HA_PLANTED, HS.POKOK_TANAM
              , FZ.BULAN_PEMUPUKAN, MAT.FLAG, MAT.MATERIAL_NAME, COA.COA_CODE
              , MAT.PRICE, FZ.JUMLAH
            FROM TM_HECTARE_STATEMENT HS
            JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
            JOIN TN_PUPUK_TBM2_TM FZ ON FZ.PERIOD_BUDGET = HS.PERIOD_BUDGET AND FZ.BA_CODE = HS.BA_CODE
              AND FZ.AFD_CODE = HS.AFD_CODE AND FZ.BLOCK_CODE = HS.BLOCK_CODE
            JOIN TM_MATERIAL MAT ON MAT.MATERIAL_CODE = FZ.MATERIAL_CODE AND MAT.PERIOD_BUDGET = FZ.PERIOD_BUDGET
              AND MAT.BA_CODE = FZ.BA_CODE
            JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
            WHERE EXTRACT(YEAR FROM FZ.PERIOD_BUDGET) = '".$params['budgetperiod']."'
            AND FZ.BA_CODE = '".$params['key_find']."'
            AND HS.MATURITY_STAGE_SMS1 = 'TM'
            AND COA.COA_CODE = '5101020300'
            AND FZ.JENIS_TANAM = 'NORMAL'
          ) RKT
        )
        PIVOT (
          SUM(JUMLAH) AS DIS, SUM(JUMLAH * PRICE) AS COST
          FOR BULAN_PEMUPUKAN IN (
            '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
            '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
          )
        )
      ) PIV
  ";

  $components['material_pupuk_majemuk'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      QTY_JAN, COST_JAN,
      QTY_FEB, COST_FEB,
      QTY_MAR, COST_MAR,
      QTY_APR, COST_APR,
      QTY_MAY, COST_MAY,
      QTY_JUN, COST_JUN,
      QTY_JUL, COST_JUL,
      QTY_AUG, COST_AUG,
      QTY_SEP, COST_SEP,
      QTY_OCT, COST_OCT,
      QTY_NOV, COST_NOV,
      QTY_DEC, COST_DEC,
      QTY_SETAHUN, COST_SETAHUN
    )
      SELECT PIV.*, 
          NVL(PIV.JAN_DIS,0)+NVL(PIV.FEB_DIS,0)+NVL(PIV.MAR_DIS,0)+NVL(PIV.APR_DIS,0)+NVL(PIV.MAY_DIS,0)+NVL(PIV.JUN_DIS,0)+
          NVL(PIV.JUL_DIS,0)+NVL(PIV.AUG_DIS,0)+NVL(PIV.SEP_DIS,0)+NVL(PIV.OCT_DIS,0)+NVL(PIV.NOV_DIS,0)+NVL(PIV.DEC_DIS,0) QTY_SETAHUN,
          NVL(PIV.JAN_COST,0)+NVL(PIV.FEB_COST,0)+NVL(PIV.MAR_COST,0)+NVL(PIV.APR_COST,0)+NVL(PIV.MAY_COST,0)+NVL(PIV.JUN_COST,0)+
          NVL(PIV.JUL_COST,0)+NVL(PIV.AUG_COST,0)+NVL(PIV.SEP_COST,0)+NVL(PIV.OCT_COST,0)+NVL(PIV.NOV_COST,0)+NVL(PIV.DEC_COST,0) COST_SETAHUN
        FROM (
          SELECT * FROM (
            SELECT RKT.PERIOD_BUDGET, RKT.REGION_CODE, RKT.BA_CODE
            , 'TM' TIPE_TRANSAKSI, RKT.COA_CODE ACTIVITY_CODE
            , 'PUPUK MAJEMUK' ACTIVITY_DESC
            , 'MATERIAL' COST_ELEMENT
            , 'KG' UOM
            , '".$this->_userName."', CURRENT_TIMESTAMP, MATERIAL_NAME
            , RKT.BULAN_PEMUPUKAN
            , JUMLAH
            , PRICE
          FROM (
            SELECT DECODE(UPPER(MAT.FLAG), 'MAKRO', '43750', 'MIKRO', '43751', 'TANKOS', '43500', '43770') ACTIVITY_CODE
              , HS.LAND_TYPE, HS.TOPOGRAPHY, ORG.REGION_CODE, HS.BA_CODE
              , HS.AFD_CODE, HS.BLOCK_CODE, HS.PERIOD_BUDGET, HS.HA_PLANTED, HS.POKOK_TANAM
              , FZ.BULAN_PEMUPUKAN, MAT.FLAG, MAT.MATERIAL_NAME, COA.COA_CODE
              , MAT.PRICE, FZ.JUMLAH
            FROM TM_HECTARE_STATEMENT HS
            JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
            JOIN TN_PUPUK_TBM2_TM FZ ON FZ.PERIOD_BUDGET = HS.PERIOD_BUDGET AND FZ.BA_CODE = HS.BA_CODE
              AND FZ.AFD_CODE = HS.AFD_CODE AND FZ.BLOCK_CODE = HS.BLOCK_CODE
            JOIN TM_MATERIAL MAT ON MAT.MATERIAL_CODE = FZ.MATERIAL_CODE AND MAT.PERIOD_BUDGET = FZ.PERIOD_BUDGET
              AND MAT.BA_CODE = FZ.BA_CODE
            JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
            WHERE EXTRACT(YEAR FROM FZ.PERIOD_BUDGET) = '".$params['budgetperiod']."'
            AND FZ.BA_CODE = '".$params['key_find']."'
            AND HS.MATURITY_STAGE_SMS1 = 'TM'
            AND COA.COA_CODE = '5101020400'
            AND FZ.JENIS_TANAM = 'NORMAL'
          ) RKT
        )
        PIVOT (
          SUM(JUMLAH) AS DIS, SUM(JUMLAH * PRICE) AS COST
          FOR BULAN_PEMUPUKAN IN (
            '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
            '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
          )
        )
      ) PIV
  ";

  $components['tools_pupuk_tunggal'] = "
    INSERT INTO TMP_RPT_EST_COST (
    PERIOD_BUDGET,
    REGION_CODE,
    BA_CODE,
    TIPE_TRANSAKSI,
    ACTIVITY_CODE,
    ACTIVITY_DESC,
    COST_ELEMENT,
    UOM,
    INSERT_USER,INSERT_TIME, KETERANGAN,
    QTY_JAN, COST_JAN,
    QTY_FEB, COST_FEB,
    QTY_MAR, COST_MAR,
    QTY_APR, COST_APR,
    QTY_MAY, COST_MAY,
    QTY_JUN, COST_JUN,
    QTY_JUL, COST_JUL,
    QTY_AUG, COST_AUG,
    QTY_SEP, COST_SEP,
    QTY_OCT, COST_OCT,
    QTY_NOV, COST_NOV,
    QTY_DEC, COST_DEC,
    QTY_SETAHUN, COST_SETAHUN
    )
    SELECT PIV.*, 
    NVL(PIV.JAN_DIS,0)+NVL(PIV.FEB_DIS,0)+NVL(PIV.MAR_DIS,0)+NVL(PIV.APR_DIS,0)+NVL(PIV.MAY_DIS,0)+NVL(PIV.JUN_DIS,0)+
    NVL(PIV.JUL_DIS,0)+NVL(PIV.AUG_DIS,0)+NVL(PIV.SEP_DIS,0)+NVL(PIV.OCT_DIS,0)+NVL(PIV.NOV_DIS,0)+NVL(PIV.DEC_DIS,0) QTY_SETAHUN,
    NVL(PIV.JAN_COST,0)+NVL(PIV.FEB_COST,0)+NVL(PIV.MAR_COST,0)+NVL(PIV.APR_COST,0)+NVL(PIV.MAY_COST,0)+NVL(PIV.JUN_COST,0)+
    NVL(PIV.JUL_COST,0)+NVL(PIV.AUG_COST,0)+NVL(PIV.SEP_COST,0)+NVL(PIV.OCT_COST,0)+NVL(PIV.NOV_COST,0)+NVL(PIV.DEC_COST,0) COST_SETAHUN
    FROM (
    SELECT RKT.PERIOD_BUDGET, RKT.REGION_CODE, RKT.BA_CODE
     , RKT.MATURITY_STAGE_SMS1
     , RKT.POKOK_TANAM
     , COST.RP_QTY_INTERNAL
     , RKT.BULAN_PEMUPUKAN, RKT.JUMLAH
     , RKT.COA_CODE, 'PUPUK TUNGGAL', 'TOOLS', 'KG'
     , '".$this->_userName."', CURRENT_TIMESTAMP, NULL
    FROM (
      SELECT TM.PERIOD_BUDGET, TM.BA_CODE, TM.AFD_CODE, TM.BLOCK_CODE, HS.BLOCK_DESC
      , HS.MATURITY_STAGE_SMS1, HS.MATURITY_STAGE_SMS2
      , TM.POKOK POKOK_TANAM, ORG.REGION_CODE
      , CAST(TM.BULAN_PEMUPUKAN AS INT) BULAN_PEMUPUKAN
      , MAT.MATERIAL_CODE --, MAT.MATERIAL_NAME
      , UPPER(MAT.FLAG) MATERIAL_TYPE
      , HS.TOPOGRAPHY, COA.COA_CODE
      , TM.JUMLAH, TM.DOSIS
      , DECODE(UPPER(MAT.FLAG), 'MAKRO', '43750', 'MIKRO', '43751', 'TANKOS', '43500', '43770') ACTIVITY_CODE
      FROM TM_HECTARE_STATEMENT HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN TN_PUPUK_TBM2_TM TM ON TM.AFD_CODE = HS.AFD_CODE AND TM.BA_CODE = HS.BA_CODE
        AND TM.BLOCK_CODE = HS.BLOCK_CODE AND TM.PERIOD_BUDGET = HS.PERIOD_BUDGET
      JOIN TM_MATERIAL MAT ON MAT.BA_CODE = HS.BA_CODE AND MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET 
        AND MAT.MATERIAL_CODE = TM.MATERIAL_CODE
      JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
      WHERE EXTRACT(YEAR FROM TM.PERIOD_BUDGET) = ".$params['budgetperiod']."
       AND TM.BA_CODE = '".$params['key_find']."'
       AND TRIM(TM.JENIS_TANAM) = 'NORMAL'
       AND HS.MATURITY_STAGE_SMS1 = 'TM'
      AND COA.COA_CODE = '5101020300' -- TUNGGAL
    ) RKT
    LEFT JOIN TN_INFRASTRUKTUR COST ON COST.ACTIVITY_CODE = RKT.ACTIVITY_CODE AND COST.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND COST.BA_CODE = RKT.BA_CODE AND COST.COST_ELEMENT = 'TOOLS'
    LEFT JOIN TM_MATERIAL M1 ON M1.PERIOD_BUDGET = COST.PERIOD_BUDGET AND M1.MATERIAL_CODE = COST.SUB_COST_ELEMENT
      AND M1.BA_CODE = COST.BA_CODE
    WHERE COST.TOPOGRAPHY = (
      SELECT DISTINCT NVL(B1.TOPOGRAPHY, 'ALL') FROM TN_INFRASTRUKTUR B1 WHERE B1.TOPOGRAPHY = RKT.TOPOGRAPHY 
      AND COST.ACTIVITY_CODE = B1.ACTIVITY_CODE AND COST.PERIOD_BUDGET = B1.PERIOD_BUDGET
      AND COST.BA_CODE = B1.BA_CODE AND COST.COST_ELEMENT = 'TOOLS' AND COST.SUB_COST_ELEMENT = B1.SUB_COST_ELEMENT
    )
    )
    PIVOT (
    SUM(JUMLAH) DIS, SUM(POKOK_TANAM * RP_QTY_INTERNAL) AS COST
    FOR BULAN_PEMUPUKAN IN (
      '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
      '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
    )
    ) PIV
  ";

  $components['tools_pupuk_majemuk'] = "
    INSERT INTO TMP_RPT_EST_COST (
    PERIOD_BUDGET,
    REGION_CODE,
    BA_CODE,
    TIPE_TRANSAKSI,
    ACTIVITY_CODE,
    ACTIVITY_DESC,
    COST_ELEMENT,
    UOM,
    INSERT_USER,INSERT_TIME, KETERANGAN,
    QTY_JAN, COST_JAN,
    QTY_FEB, COST_FEB,
    QTY_MAR, COST_MAR,
    QTY_APR, COST_APR,
    QTY_MAY, COST_MAY,
    QTY_JUN, COST_JUN,
    QTY_JUL, COST_JUL,
    QTY_AUG, COST_AUG,
    QTY_SEP, COST_SEP,
    QTY_OCT, COST_OCT,
    QTY_NOV, COST_NOV,
    QTY_DEC, COST_DEC,
    QTY_SETAHUN, COST_SETAHUN
    )
    SELECT PIV.*, 
    NVL(PIV.JAN_DIS,0)+NVL(PIV.FEB_DIS,0)+NVL(PIV.MAR_DIS,0)+NVL(PIV.APR_DIS,0)+NVL(PIV.MAY_DIS,0)+NVL(PIV.JUN_DIS,0)+
    NVL(PIV.JUL_DIS,0)+NVL(PIV.AUG_DIS,0)+NVL(PIV.SEP_DIS,0)+NVL(PIV.OCT_DIS,0)+NVL(PIV.NOV_DIS,0)+NVL(PIV.DEC_DIS,0) QTY_SETAHUN,
    NVL(PIV.JAN_COST,0)+NVL(PIV.FEB_COST,0)+NVL(PIV.MAR_COST,0)+NVL(PIV.APR_COST,0)+NVL(PIV.MAY_COST,0)+NVL(PIV.JUN_COST,0)+
    NVL(PIV.JUL_COST,0)+NVL(PIV.AUG_COST,0)+NVL(PIV.SEP_COST,0)+NVL(PIV.OCT_COST,0)+NVL(PIV.NOV_COST,0)+NVL(PIV.DEC_COST,0) COST_SETAHUN
    FROM (
    SELECT RKT.PERIOD_BUDGET, RKT.REGION_CODE, RKT.BA_CODE
     , RKT.MATURITY_STAGE_SMS1
     , RKT.POKOK_TANAM
     , COST.RP_QTY_INTERNAL
     , RKT.BULAN_PEMUPUKAN, RKT.JUMLAH
     , RKT.COA_CODE, 'PUPUK MAJEMUK', 'TOOLS', 'KG'
     , '".$this->_userName."', CURRENT_TIMESTAMP, NULL
    FROM (
      SELECT TM.PERIOD_BUDGET, TM.BA_CODE, TM.AFD_CODE, TM.BLOCK_CODE, HS.BLOCK_DESC
      , HS.MATURITY_STAGE_SMS1, HS.MATURITY_STAGE_SMS2
      , TM.POKOK POKOK_TANAM, ORG.REGION_CODE
      , CAST(TM.BULAN_PEMUPUKAN AS INT) BULAN_PEMUPUKAN
      , MAT.MATERIAL_CODE --, MAT.MATERIAL_NAME
      , UPPER(MAT.FLAG) MATERIAL_TYPE
      , HS.TOPOGRAPHY, COA.COA_CODE
      , TM.JUMLAH, TM.DOSIS
      , DECODE(UPPER(MAT.FLAG), 'MAKRO', '43750', 'MIKRO', '43751', 'TANKOS', '43500', '43770') ACTIVITY_CODE
      FROM TM_HECTARE_STATEMENT HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN TN_PUPUK_TBM2_TM TM ON TM.AFD_CODE = HS.AFD_CODE AND TM.BA_CODE = HS.BA_CODE
        AND TM.BLOCK_CODE = HS.BLOCK_CODE AND TM.PERIOD_BUDGET = HS.PERIOD_BUDGET
      JOIN TM_MATERIAL MAT ON MAT.BA_CODE = HS.BA_CODE AND MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET 
        AND MAT.MATERIAL_CODE = TM.MATERIAL_CODE
      JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
      WHERE EXTRACT(YEAR FROM TM.PERIOD_BUDGET) = ".$params['budgetperiod']."
       AND TM.BA_CODE = '".$params['key_find']."'
       AND TRIM(TM.JENIS_TANAM) = 'NORMAL'
       AND HS.MATURITY_STAGE_SMS1 = 'TM'
      AND COA.COA_CODE = '5101020400' -- TUNGGAL
    ) RKT
    LEFT JOIN TN_INFRASTRUKTUR COST ON COST.ACTIVITY_CODE = RKT.ACTIVITY_CODE AND COST.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND COST.BA_CODE = RKT.BA_CODE AND COST.COST_ELEMENT = 'TOOLS'
    LEFT JOIN TM_MATERIAL M1 ON M1.PERIOD_BUDGET = COST.PERIOD_BUDGET AND M1.MATERIAL_CODE = COST.SUB_COST_ELEMENT
      AND M1.BA_CODE = COST.BA_CODE
    WHERE COST.TOPOGRAPHY = (
      SELECT DISTINCT NVL(B1.TOPOGRAPHY, 'ALL') FROM TN_INFRASTRUKTUR B1 WHERE B1.TOPOGRAPHY = RKT.TOPOGRAPHY 
      AND COST.ACTIVITY_CODE = B1.ACTIVITY_CODE AND COST.PERIOD_BUDGET = B1.PERIOD_BUDGET
      AND COST.BA_CODE = B1.BA_CODE AND COST.COST_ELEMENT = 'TOOLS' AND COST.SUB_COST_ELEMENT = B1.SUB_COST_ELEMENT
    )
    )
    PIVOT (
    SUM(JUMLAH) DIS, SUM(POKOK_TANAM * RP_QTY_INTERNAL) AS COST
    FOR BULAN_PEMUPUKAN IN (
      '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
      '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
    )
    ) PIV
  ";

  $components['transport_pupuk_tunggal'] = "
    INSERT INTO TMP_RPT_EST_COST (
    PERIOD_BUDGET,
    REGION_CODE,
    BA_CODE,
    TIPE_TRANSAKSI,
    ACTIVITY_CODE,
    ACTIVITY_DESC,
    COST_ELEMENT,
    UOM,
    INSERT_USER,INSERT_TIME, KETERANGAN,
    QTY_SETAHUN, COST_SETAHUN,
    QTY_JAN, COST_JAN,
    QTY_FEB, COST_FEB,
    QTY_MAR, COST_MAR,
    QTY_APR, COST_APR,
    QTY_MAY, COST_MAY,
    QTY_JUN, COST_JUN,
    QTY_JUL, COST_JUL,
    QTY_AUG, COST_AUG,
    QTY_SEP, COST_SEP,
    QTY_OCT, COST_OCT,
    QTY_NOV, COST_NOV,
    QTY_DEC, COST_DEC
    )
    SELECT * FROM (
      SELECT S.*, SUM(S.JUMLAH/KG_AFDELING*HM_KM) OVER () QTY_TOTAL
        , SUM(S.JUMLAH/KG_AFDELING*PRICE_HM_KM) OVER () COST_TOTAL 
      FROM (
        SELECT TM.PERIOD_BUDGET, ORG.REGION_CODE, TM.BA_CODE
        , HS.MATURITY_STAGE_SMS1
        , TM.JUMLAH
        , COA.COA_CODE
        , 'PUPUK TUNGGAL', 'TRANSPORT', NULL UOM
        , '".$this->_userName."', CURRENT_TIMESTAMP, NULL
        , CAST(TM.BULAN_PEMUPUKAN AS INT) BULAN_PEMUPUKAN, VRA.PRICE_HM_KM, VRA.HM_KM
        , F_GET_PUPUK_KG_AFDELING(TM.PERIOD_BUDGET, TM.BA_CODE, TM.AFD_CODE) KG_AFDELING
        FROM TM_HECTARE_STATEMENT HS
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
        JOIN TN_PUPUK_TBM2_TM TM ON TM.AFD_CODE = HS.AFD_CODE AND TM.BA_CODE = HS.BA_CODE
        AND TM.BLOCK_CODE = HS.BLOCK_CODE AND TM.PERIOD_BUDGET = HS.PERIOD_BUDGET
        JOIN TM_MATERIAL MAT ON MAT.BA_CODE = HS.BA_CODE AND MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.MATERIAL_CODE = TM.MATERIAL_CODE
        JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
        LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = TM.PERIOD_BUDGET
        -- JOIN TM_VRA VH ON VH.VRA_CODE = VRA.VRA_CODE
        AND VRA.BA_CODE = TM.BA_CODE AND VRA.LOCATION_CODE = TM.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
        WHERE EXTRACT(YEAR FROM TM.PERIOD_BUDGET) = ".$params['budgetperiod']."
         AND TM.BA_CODE = '".$params['key_find']."'
         AND HS.MATURITY_STAGE_SMS1 = 'TM'
        AND TRIM(TM.JENIS_TANAM) = 'NORMAL'
        AND COA.COA_CODE = '5101020300' -- TUNGGAL
      ) S
    )
    PIVOT (
      SUM(JUMLAH/KG_AFDELING*HM_KM) DIS, SUM(JUMLAH/KG_AFDELING*PRICE_HM_KM) COST
      FOR BULAN_PEMUPUKAN IN (
      '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
      '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
      )
    )
  ";

  $components['transport_pupuk_majemuk'] = "
    INSERT INTO TMP_RPT_EST_COST (
    PERIOD_BUDGET,
    REGION_CODE,
    BA_CODE,
    TIPE_TRANSAKSI,
    ACTIVITY_CODE,
    ACTIVITY_DESC,
    COST_ELEMENT,
    UOM,
    INSERT_USER,INSERT_TIME, KETERANGAN,
    QTY_SETAHUN, COST_SETAHUN,
    QTY_JAN, COST_JAN,
    QTY_FEB, COST_FEB,
    QTY_MAR, COST_MAR,
    QTY_APR, COST_APR,
    QTY_MAY, COST_MAY,
    QTY_JUN, COST_JUN,
    QTY_JUL, COST_JUL,
    QTY_AUG, COST_AUG,
    QTY_SEP, COST_SEP,
    QTY_OCT, COST_OCT,
    QTY_NOV, COST_NOV,
    QTY_DEC, COST_DEC
    )
    SELECT * FROM (
      SELECT S.*, SUM(S.JUMLAH/KG_AFDELING*HM_KM) OVER () QTY_TOTAL
        , SUM(S.JUMLAH/KG_AFDELING*PRICE_HM_KM) OVER () COST_TOTAL 
      FROM (
        SELECT TM.PERIOD_BUDGET, ORG.REGION_CODE, TM.BA_CODE
        , HS.MATURITY_STAGE_SMS1
        , TM.JUMLAH
        , COA.COA_CODE
        , 'PUPUK MAJEMUK', 'TRANSPORT', NULL UOM
        , '".$this->_userName."', CURRENT_TIMESTAMP, NULL
        , CAST(TM.BULAN_PEMUPUKAN AS INT) BULAN_PEMUPUKAN, VRA.PRICE_HM_KM, VRA.HM_KM
        , F_GET_PUPUK_KG_AFDELING(TM.PERIOD_BUDGET, TM.BA_CODE, TM.AFD_CODE) KG_AFDELING
        FROM TM_HECTARE_STATEMENT HS
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
        JOIN TN_PUPUK_TBM2_TM TM ON TM.AFD_CODE = HS.AFD_CODE AND TM.BA_CODE = HS.BA_CODE
        AND TM.BLOCK_CODE = HS.BLOCK_CODE AND TM.PERIOD_BUDGET = HS.PERIOD_BUDGET
        JOIN TM_MATERIAL MAT ON MAT.BA_CODE = HS.BA_CODE AND MAT.PERIOD_BUDGET = HS.PERIOD_BUDGET AND MAT.MATERIAL_CODE = TM.MATERIAL_CODE
        JOIN TM_COA COA ON COA.COA_CODE = MAT.COA_CODE
        LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.PERIOD_BUDGET = TM.PERIOD_BUDGET
        -- JOIN TM_VRA VH ON VH.VRA_CODE = VRA.VRA_CODE
        AND VRA.BA_CODE = TM.BA_CODE AND VRA.LOCATION_CODE = TM.AFD_CODE AND VRA.ACTIVITY_CODE IN ('43750', '43760')
        WHERE EXTRACT(YEAR FROM TM.PERIOD_BUDGET) = ".$params['budgetperiod']."
         AND TM.BA_CODE = '".$params['key_find']."'
         AND HS.MATURITY_STAGE_SMS1 = 'TM'
        AND TRIM(TM.JENIS_TANAM) = 'NORMAL'
        AND COA.COA_CODE = '5101020400' -- MAJEMUK
      ) S
    )
    PIVOT (
      SUM(JUMLAH/KG_AFDELING*HM_KM) DIS, SUM(JUMLAH/KG_AFDELING*PRICE_HM_KM) COST
      FOR BULAN_PEMUPUKAN IN (
      '1' AS JAN, '2' AS FEB, '3' AS MAR, '4' AS APR, '5' AS MAY, '6' AS JUN,
      '7' AS JUL, '8' AS AUG, '9' AS SEP, '10' AS OCT, '11' AS NOV, '12' AS DEC
      )
    )
  ";


  // RKT PANEN
  $components['biaya_pemanen'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030101', 'BIAYA PEMANEN', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JAN,
      (SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_FEB,
      (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_MAR,
      (SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_APR,
      (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_MAY,
      (SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JUN,
      (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JUL,
      (SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_AUG,
      (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_SEP,
      (SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_OCT,
      (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_NOV,
      (SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_DEC,
      (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_BASIS)+(SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_BASIS)+
      (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_BASIS)+(SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_BASIS)+
      (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_BASIS)+(SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_BASIS)+
      (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_BASIS)+(SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_BASIS)+
      (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_BASIS)+(SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_BASIS)+
      (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_BASIS)+(SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_BASIS)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['premi_panen_janjang'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030201', 'PREMI PANEN JANJANG', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JAN,
      (SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_FEB,
      (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_MAR,
      (SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_APR,
      (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_MAY,
      (SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JUN,
      (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JUL,
      (SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_AUG,
      (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_SEP,
      (SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_OCT,
      (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_NOV,
      (SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_DEC,
      (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+(SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+
      (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+(SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+
      (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+(SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+
      (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+(SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+
      (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+(SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+
      (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)+(SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['premi_insentif'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030201-1', 'PREMI PANEN INCENTIVE', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.INCENTIVE) AS COST_JAN,
      (SEBARAN.FEB * RKT.INCENTIVE) AS COST_FEB,
      (SEBARAN.MAR * RKT.INCENTIVE) AS COST_MAR,
      (SEBARAN.APR * RKT.INCENTIVE) AS COST_APR,
      (SEBARAN.MAY * RKT.INCENTIVE) AS COST_MAY,
      (SEBARAN.JUN * RKT.INCENTIVE) AS COST_JUN,
      (SEBARAN.JUL * RKT.INCENTIVE) AS COST_JUL,
      (SEBARAN.AUG * RKT.INCENTIVE) AS COST_AUG,
      (SEBARAN.SEP * RKT.INCENTIVE) AS COST_SEP,
      (SEBARAN.OCT * RKT.INCENTIVE) AS COST_OCT,
      (SEBARAN.NOV * RKT.INCENTIVE) AS COST_NOV,
      (SEBARAN.DEC * RKT.INCENTIVE) AS COST_DEC,
      (SEBARAN.JAN * RKT.INCENTIVE)+(SEBARAN.FEB * RKT.INCENTIVE)+
      (SEBARAN.MAR * RKT.INCENTIVE)+(SEBARAN.APR * RKT.INCENTIVE)+
      (SEBARAN.MAY * RKT.INCENTIVE)+(SEBARAN.JUN * RKT.INCENTIVE)+
      (SEBARAN.JUL * RKT.INCENTIVE)+(SEBARAN.AUG * RKT.INCENTIVE)+
      (SEBARAN.SEP * RKT.INCENTIVE)+(SEBARAN.OCT * RKT.INCENTIVE)+
      (SEBARAN.NOV * RKT.INCENTIVE)+(SEBARAN.DEC * RKT.INCENTIVE)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['premi_panen_brd'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030301', 'PREMI PANEN BRD', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JAN,
      (SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_FEB,
      (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAR,
      (SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_APR,
      (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAY,
      (SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUN,
      (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUL,
      (SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_AUG,
      (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_SEP,
      (SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_OCT,
      (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_NOV,
      (SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_DEC,
      (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+(SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+
      (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+(SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+
      (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+(SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+
      (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+(SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+
      (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+(SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+
      (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)+(SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_BRD)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['krani_buah'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030701-2', 'KRANI BUAH', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.KRANI_BUAH_TOTAL) AS COST_JAN,
      (SEBARAN.FEB * RKT.KRANI_BUAH_TOTAL) AS COST_FEB,
      (SEBARAN.MAR * RKT.KRANI_BUAH_TOTAL) AS COST_MAR,
      (SEBARAN.APR * RKT.KRANI_BUAH_TOTAL) AS COST_APR,
      (SEBARAN.MAY * RKT.KRANI_BUAH_TOTAL) AS COST_MAY,
      (SEBARAN.JUN * RKT.KRANI_BUAH_TOTAL) AS COST_JUN,
      (SEBARAN.JUL * RKT.KRANI_BUAH_TOTAL) AS COST_JUL,
      (SEBARAN.AUG * RKT.KRANI_BUAH_TOTAL) AS COST_AUG,
      (SEBARAN.SEP * RKT.KRANI_BUAH_TOTAL) AS COST_SEP,
      (SEBARAN.OCT * RKT.KRANI_BUAH_TOTAL) AS COST_OCT,
      (SEBARAN.NOV * RKT.KRANI_BUAH_TOTAL) AS COST_NOV,
      (SEBARAN.DEC * RKT.KRANI_BUAH_TOTAL) AS COST_DEC,
      (SEBARAN.JAN * RKT.KRANI_BUAH_TOTAL)+(SEBARAN.FEB * RKT.KRANI_BUAH_TOTAL)+
      (SEBARAN.MAR * RKT.KRANI_BUAH_TOTAL)+(SEBARAN.APR * RKT.KRANI_BUAH_TOTAL)+
      (SEBARAN.MAY * RKT.KRANI_BUAH_TOTAL)+(SEBARAN.JUN * RKT.KRANI_BUAH_TOTAL)+
      (SEBARAN.JUL * RKT.KRANI_BUAH_TOTAL)+(SEBARAN.AUG * RKT.KRANI_BUAH_TOTAL)+
      (SEBARAN.SEP * RKT.KRANI_BUAH_TOTAL)+(SEBARAN.OCT * RKT.KRANI_BUAH_TOTAL)+
      (SEBARAN.NOV * RKT.KRANI_BUAH_TOTAL)+(SEBARAN.DEC * RKT.KRANI_BUAH_TOTAL)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['alat_panen'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030103', 'ALAT PANEN', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JAN,
      (SEBARAN.FEB * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_FEB,
      (SEBARAN.MAR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAR,
      (SEBARAN.APR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_APR,
      (SEBARAN.MAY * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAY,
      (SEBARAN.JUN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUN,
      (SEBARAN.JUL * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUL,
      (SEBARAN.AUG * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_AUG,
      (SEBARAN.SEP * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_SEP,
      (SEBARAN.OCT * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_OCT,
      (SEBARAN.NOV * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_NOV,
      (SEBARAN.DEC * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_DEC,
      (SEBARAN.JAN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+(SEBARAN.FEB * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+
      (SEBARAN.MAR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+(SEBARAN.APR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+
      (SEBARAN.MAY * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+(SEBARAN.JUN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+
      (SEBARAN.JUL * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+(SEBARAN.AUG * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+
      (SEBARAN.SEP * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+(SEBARAN.OCT * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+
      (SEBARAN.NOV * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)+(SEBARAN.DEC * RKT.BIAYA_ALAT_PANEN_RP_TOTAL)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['supervisi_pemanen'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030701-1', 'SUPERVISI PEMANEN', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JAN,
      (SEBARAN.FEB * RKT.BIAYA_SPV_RP_TOTAL) AS COST_FEB,
      (SEBARAN.MAR * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAR,
      (SEBARAN.APR * RKT.BIAYA_SPV_RP_TOTAL) AS COST_APR,
      (SEBARAN.MAY * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAY,
      (SEBARAN.JUN * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUN,
      (SEBARAN.JUL * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUL,
      (SEBARAN.AUG * RKT.BIAYA_SPV_RP_TOTAL) AS COST_AUG,
      (SEBARAN.SEP * RKT.BIAYA_SPV_RP_TOTAL) AS COST_SEP,
      (SEBARAN.OCT * RKT.BIAYA_SPV_RP_TOTAL) AS COST_OCT,
      (SEBARAN.NOV * RKT.BIAYA_SPV_RP_TOTAL) AS COST_NOV,
      (SEBARAN.DEC * RKT.BIAYA_SPV_RP_TOTAL) AS COST_DEC,
      (SEBARAN.JAN * RKT.BIAYA_SPV_RP_TOTAL)+(SEBARAN.FEB * RKT.BIAYA_SPV_RP_TOTAL)+
      (SEBARAN.MAR * RKT.BIAYA_SPV_RP_TOTAL)+(SEBARAN.APR * RKT.BIAYA_SPV_RP_TOTAL)+
      (SEBARAN.MAY * RKT.BIAYA_SPV_RP_TOTAL)+(SEBARAN.JUN * RKT.BIAYA_SPV_RP_TOTAL)+
      (SEBARAN.JUL * RKT.BIAYA_SPV_RP_TOTAL)+(SEBARAN.AUG * RKT.BIAYA_SPV_RP_TOTAL)+
      (SEBARAN.SEP * RKT.BIAYA_SPV_RP_TOTAL)+(SEBARAN.OCT * RKT.BIAYA_SPV_RP_TOTAL)+
      (SEBARAN.NOV * RKT.BIAYA_SPV_RP_TOTAL)+(SEBARAN.DEC * RKT.BIAYA_SPV_RP_TOTAL)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['premi_supir'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030504-3', 'PREMI SUPIR', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.SUPIR_PREMI) AS COST_JAN,
      (SEBARAN.FEB * RKT.SUPIR_PREMI) AS COST_FEB,
      (SEBARAN.MAR * RKT.SUPIR_PREMI) AS COST_MAR,
      (SEBARAN.APR * RKT.SUPIR_PREMI) AS COST_APR,
      (SEBARAN.MAY * RKT.SUPIR_PREMI) AS COST_MAY,
      (SEBARAN.JUN * RKT.SUPIR_PREMI) AS COST_JUN,
      (SEBARAN.JUL * RKT.SUPIR_PREMI) AS COST_JUL,
      (SEBARAN.AUG * RKT.SUPIR_PREMI) AS COST_AUG,
      (SEBARAN.SEP * RKT.SUPIR_PREMI) AS COST_SEP,
      (SEBARAN.OCT * RKT.SUPIR_PREMI) AS COST_OCT,
      (SEBARAN.NOV * RKT.SUPIR_PREMI) AS COST_NOV,
      (SEBARAN.DEC * RKT.SUPIR_PREMI) AS COST_DEC,
      (SEBARAN.JAN * RKT.SUPIR_PREMI)+(SEBARAN.FEB * RKT.SUPIR_PREMI)+
      (SEBARAN.MAR * RKT.SUPIR_PREMI)+(SEBARAN.APR * RKT.SUPIR_PREMI)+
      (SEBARAN.MAY * RKT.SUPIR_PREMI)+(SEBARAN.JUN * RKT.SUPIR_PREMI)+
      (SEBARAN.JUL * RKT.SUPIR_PREMI)+(SEBARAN.AUG * RKT.SUPIR_PREMI)+
      (SEBARAN.SEP * RKT.SUPIR_PREMI)+(SEBARAN.OCT * RKT.SUPIR_PREMI)+
      (SEBARAN.NOV * RKT.SUPIR_PREMI)+(SEBARAN.DEC * RKT.SUPIR_PREMI)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['langsir_transport'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME,
      QTY_JAN,QTY_FEB,QTY_MAR,QTY_APR,QTY_MAY,QTY_JUN,
      QTY_JUL,QTY_AUG,QTY_SEP,QTY_OCT,QTY_NOV,QTY_DEC,
      COST_JAN,COST_FEB,COST_MAR,COST_APR,COST_MAY,COST_JUN,
      COST_JUL,COST_AUG,COST_SEP,COST_OCT,COST_NOV,COST_DEC,
      QTY_SETAHUN,COST_SETAHUN
    )
    SELECT 
      PERIOD_BUDGET, REGION_CODE, BA_CODE,
      'TM' AS TIPE_TRANSAKSI,
      '5101030404-2' ACTIVITY_CODE,
      'LANGSIR' ACTIVITY_DESC,
      'TRANSPORT' COST_ELEMENT, UOM,
      '".$this->_userName."', CURRENT_TIMESTAMP,
      SUM(QTY_JAN),SUM(QTY_FEB),SUM(QTY_MAR),SUM(QTY_APR),SUM(QTY_MAY),SUM(QTY_JUN),
      SUM(QTY_JUL),SUM(QTY_AUG),SUM(QTY_SEP),SUM(QTY_OCT),SUM(QTY_NOV),SUM(QTY_DEC),
      SUM(COST_JAN),SUM(COST_FEB),SUM(COST_MAR),SUM(COST_APR),SUM(COST_MAY),SUM(COST_JUN),
      SUM(COST_JUL),SUM(COST_AUG),SUM(COST_SEP),SUM(COST_OCT),SUM(COST_NOV),SUM(COST_DEC),
      SUM(QTY_SETAHUN),SUM(COST_SETAHUN)
    FROM (
      SELECT RKT.PERIOD_BUDGET,ORG.REGION_CODE, RKT.BA_CODE,VH.UOM,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.JAN/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_JAN,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.FEB/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_FEB,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.MAR/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_MAR,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.APR/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_APR,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.MAY/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_MAY,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.JUN/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_JUN,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.JUL/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_JUL,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.AUG/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_AUG,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.SEP/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_SEP,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.OCT/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_OCT,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.NOV/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_NOV,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.DEC/DIS.TOTAL)*VN.RP_KG)*1000/VN.RP_HM QTY_DEC,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.JAN/DIS.TOTAL)*VN.RP_KG)*1000 COST_JAN,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.FEB/DIS.TOTAL)*VN.RP_KG)*1000 COST_FEB,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.MAR/DIS.TOTAL)*VN.RP_KG)*1000 COST_MAR,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.APR/DIS.TOTAL)*VN.RP_KG)*1000 COST_APR,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.MAY/DIS.TOTAL)*VN.RP_KG)*1000 COST_MAY,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.JUN/DIS.TOTAL)*VN.RP_KG)*1000 COST_JUN,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.JUL/DIS.TOTAL)*VN.RP_KG)*1000 COST_JUL,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.AUG/DIS.TOTAL)*VN.RP_KG)*1000 COST_AUG,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.SEP/DIS.TOTAL)*VN.RP_KG)*1000 COST_SEP,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.OCT/DIS.TOTAL)*VN.RP_KG)*1000 COST_OCT,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.NOV/DIS.TOTAL)*VN.RP_KG)*1000 COST_NOV,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*(DIS.DEC/DIS.TOTAL)*VN.RP_KG)*1000 COST_DEC,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*VN.RP_KG)*1000/VN.RP_HM QTY_SETAHUN,
        (RKT.TON*(RKT.PERSEN_LANGSIR/100)*VN.RP_KG)*1000  COST_SETAHUN
      FROM TR_RKT_PANEN RKT
      LEFT JOIN (
        SELECT BG.PERIOD_BUDGET, ORG.REGION_CODE, BG.BA_CODE,BG.AFD_CODE,BG.BLOCK_CODE,
          SUM(BG.JAN) JAN, SUM(BG.FEB) FEB, SUM(BG.MAR) MAR, SUM(BG.APR) APR, SUM(BG.MAY) MAY, SUM(BG.JUN) JUN, 
          SUM(BG.JUL) JUL, SUM(BG.AUG) AUG, SUM(BG.SEP) SEP, SUM(BG.OCT) OCT, SUM(BG.NOV) NOV, SUM(BG.DEC) DEC, 
          SUM(BG.JAN)+SUM(BG.FEB)+SUM(BG.MAR)+SUM(BG.APR)+SUM(BG.MAY)+SUM(BG.JUN)+
          SUM(BG.JUL)+SUM(BG.AUG)+SUM(BG.SEP)+SUM(BG.OCT)+SUM(BG.NOV)+SUM(BG.DEC) TOTAL
        FROM TR_PRODUKSI_PERIODE_BUDGET BG
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = BG.BA_CODE   
        WHERE BG.DELETE_USER IS NULL AND to_char(BG.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
        AND BG.BA_CODE = '".$params['key_find']."' AND BG.DELETE_USER IS NULL
        GROUP BY BG.PERIOD_BUDGET, ORG.REGION_CODE, BG.BA_CODE,BG.AFD_CODE,BG.BLOCK_CODE
      ) DIS ON RKT.PERIOD_BUDGET = DIS.PERIOD_BUDGET AND RKT.BA_CODE = DIS.BA_CODE 
        AND RKT.AFD_CODE = DIS.AFD_CODE AND RKT.BLOCK_CODE = DIS.BLOCK_CODE
      LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
      LEFT JOIN TN_PANEN_PREMI_LANGSIR VN ON VN.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND VN.BA_CODE = RKT.BA_CODE
        AND VN.RP_HM > 0 AND VN.RP_KG > 0
      JOIN TM_VRA VH ON VH.VRA_CODE = VN.VRA_CODE
      WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL
        AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = '".$params['budgetperiod']."'
        AND RKT.BA_CODE = '".$params['key_find']."'
    ) 
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, UOM
  ";

  $components['langsir_transport_vra'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      QTY_JAN,QTY_FEB,QTY_MAR,QTY_APR,QTY_MAY,QTY_JUN,QTY_JUL,QTY_AUG,QTY_SEP,QTY_OCT,QTY_NOV,QTY_DEC,
      COST_JAN,COST_FEB,COST_MAR,COST_APR,COST_MAY,COST_JUN,COST_JUL,COST_AUG,COST_SEP,COST_OCT,COST_NOV,COST_DEC,
      COST_SETAHUN, QTY_SETAHUN
    )
      SELECT
      PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030404-3', 'LANGSIR - VRA', 'TRANSPORT', NULL,
      '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
      NVL(SUM(JAN/TOTAL*HM_KM),0),
      NVL(SUM(FEB/TOTAL*HM_KM),0),
      NVL(SUM(MAR/TOTAL*HM_KM),0),
      NVL(SUM(APR/TOTAL*HM_KM),0),
      NVL(SUM(MAY/TOTAL*HM_KM),0),
      NVL(SUM(JUN/TOTAL*HM_KM),0),
      NVL(SUM(JUL/TOTAL*HM_KM),0),
      NVL(SUM(AUG/TOTAL*HM_KM),0),
      NVL(SUM(SEP/TOTAL*HM_KM),0),
      NVL(SUM(OCT/TOTAL*HM_KM),0),
      NVL(SUM(NOV/TOTAL*HM_KM),0),
      NVL(SUM(DEC/TOTAL*HM_KM),0),
      NVL(SUM(JAN/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(FEB/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(MAR/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(APR/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(MAY/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(JUN/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(JUL/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(AUG/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(SEP/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(OCT/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(NOV/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(DEC/TOTAL*PRICE_HM_KM),0),
      NVL(SUM(PRICE_HM_KM),0), NVL(SUM(HM_KM),0)
      FROM (
        SELECT DIS.*,  VRADIS.HM_KM, VRADIS.PRICE_HM_KM
        FROM (
          SELECT RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE,RKT.AFD_CODE,
              SUM(RKT.JAN) JAN, SUM(RKT.FEB) FEB, SUM(RKT.MAR) MAR, SUM(RKT.APR) APR, SUM(RKT.MAY) MAY, SUM(RKT.JUN) JUN, 
              SUM(RKT.JUL) JUL, SUM(RKT.AUG) AUG, SUM(RKT.SEP) SEP, SUM(RKT.OCT) OCT, SUM(RKT.NOV) NOV, SUM(RKT.DEC) DEC, 
              SUM(RKT.JAN)+SUM(RKT.FEB)+SUM(RKT.MAR)+SUM(RKT.APR)+SUM(RKT.MAY)+SUM(RKT.JUN)+
              SUM(RKT.JUL)+SUM(RKT.AUG)+SUM(RKT.SEP)+SUM(RKT.OCT)+SUM(RKT.NOV)+SUM(RKT.DEC) TOTAL
          FROM TR_PRODUKSI_PERIODE_BUDGET RKT
          JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE   
          WHERE RKT.DELETE_USER IS NULL AND to_char(RKT.PERIOD_BUDGET,'RRRR') = ".$params['budgetperiod']."
          AND RKT.BA_CODE = '".$params['key_find']."'
          GROUP BY RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE,RKT.AFD_CODE
        ) DIS
        JOIN (
            SELECT BA_CODE, PERIOD_BUDGET, SUM(HM_KM) HM_KM, SUM(PRICE_HM_KM) PRICE_HM_KM, LOCATION_CODE
             FROM TR_RKT_VRA_DISTRIBUSI VRADIS  
             JOIN TM_VRA V ON V.VRA_CODE = VRADIS.VRA_CODE
             WHERE VRADIS.TIPE_TRANSAKSI = 'NON_INFRA' 
             AND VRADIS.ACTIVITY_CODE = '51600' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = ".$params['budgetperiod']."
             AND VRADIS.BA_CODE = '".$params['key_find']."'
            GROUP BY BA_CODE, PERIOD_BUDGET, LOCATION_CODE
        ) VRADIS ON VRADIS.PERIOD_BUDGET = DIS.PERIOD_BUDGET AND VRADIS.BA_CODE = DIS.BA_CODE
          AND VRADIS.LOCATION_CODE = DIS.AFD_CODE
        ORDER BY DIS.BA_CODE, DIS.AFD_CODE
      ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['langsir_labor'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030404-2', 'LANGSIR', 'LABOUR', NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.LANGSIR_TUKANG_MUAT) AS COST_JAN,
      (SEBARAN.FEB * RKT.LANGSIR_TUKANG_MUAT) AS COST_FEB,
      (SEBARAN.MAR * RKT.LANGSIR_TUKANG_MUAT) AS COST_MAR,
      (SEBARAN.APR * RKT.LANGSIR_TUKANG_MUAT) AS COST_APR,
      (SEBARAN.MAY * RKT.LANGSIR_TUKANG_MUAT) AS COST_MAY,
      (SEBARAN.JUN * RKT.LANGSIR_TUKANG_MUAT) AS COST_JUN,
      (SEBARAN.JUL * RKT.LANGSIR_TUKANG_MUAT) AS COST_JUL,
      (SEBARAN.AUG * RKT.LANGSIR_TUKANG_MUAT) AS COST_AUG,
      (SEBARAN.SEP * RKT.LANGSIR_TUKANG_MUAT) AS COST_SEP,
      (SEBARAN.OCT * RKT.LANGSIR_TUKANG_MUAT) AS COST_OCT,
      (SEBARAN.NOV * RKT.LANGSIR_TUKANG_MUAT) AS COST_NOV,
      (SEBARAN.DEC * RKT.LANGSIR_TUKANG_MUAT) AS COST_DEC,
      (SEBARAN.JAN * RKT.LANGSIR_TUKANG_MUAT)+(SEBARAN.FEB * RKT.LANGSIR_TUKANG_MUAT)+
      (SEBARAN.MAR * RKT.LANGSIR_TUKANG_MUAT)+(SEBARAN.APR * RKT.LANGSIR_TUKANG_MUAT)+
      (SEBARAN.MAY * RKT.LANGSIR_TUKANG_MUAT)+(SEBARAN.JUN * RKT.LANGSIR_TUKANG_MUAT)+
      (SEBARAN.JUL * RKT.LANGSIR_TUKANG_MUAT)+(SEBARAN.AUG * RKT.LANGSIR_TUKANG_MUAT)+
      (SEBARAN.SEP * RKT.LANGSIR_TUKANG_MUAT)+(SEBARAN.OCT * RKT.LANGSIR_TUKANG_MUAT)+
      (SEBARAN.NOV * RKT.LANGSIR_TUKANG_MUAT)+(SEBARAN.DEC * RKT.LANGSIR_TUKANG_MUAT)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";

  $components['bongkar_muat'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030404-1', 'BONGKAR MUAT', NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.TUKANG_MUAT_TOTAL) AS COST_JAN,
      (SEBARAN.FEB * RKT.TUKANG_MUAT_TOTAL) AS COST_FEB,
      (SEBARAN.MAR * RKT.TUKANG_MUAT_TOTAL) AS COST_MAR,
      (SEBARAN.APR * RKT.TUKANG_MUAT_TOTAL) AS COST_APR,
      (SEBARAN.MAY * RKT.TUKANG_MUAT_TOTAL) AS COST_MAY,
      (SEBARAN.JUN * RKT.TUKANG_MUAT_TOTAL) AS COST_JUN,
      (SEBARAN.JUL * RKT.TUKANG_MUAT_TOTAL) AS COST_JUL,
      (SEBARAN.AUG * RKT.TUKANG_MUAT_TOTAL) AS COST_AUG,
      (SEBARAN.SEP * RKT.TUKANG_MUAT_TOTAL) AS COST_SEP,
      (SEBARAN.OCT * RKT.TUKANG_MUAT_TOTAL) AS COST_OCT,
      (SEBARAN.NOV * RKT.TUKANG_MUAT_TOTAL) AS COST_NOV,
      (SEBARAN.DEC * RKT.TUKANG_MUAT_TOTAL) AS COST_DEC,
      (SEBARAN.JAN * RKT.TUKANG_MUAT_TOTAL)+(SEBARAN.FEB * RKT.TUKANG_MUAT_TOTAL)+
      (SEBARAN.MAR * RKT.TUKANG_MUAT_TOTAL)+(SEBARAN.APR * RKT.TUKANG_MUAT_TOTAL)+
      (SEBARAN.MAY * RKT.TUKANG_MUAT_TOTAL)+(SEBARAN.JUN * RKT.TUKANG_MUAT_TOTAL)+
      (SEBARAN.JUL * RKT.TUKANG_MUAT_TOTAL)+(SEBARAN.AUG * RKT.TUKANG_MUAT_TOTAL)+
      (SEBARAN.SEP * RKT.TUKANG_MUAT_TOTAL)+(SEBARAN.OCT * RKT.TUKANG_MUAT_TOTAL)+
      (SEBARAN.NOV * RKT.TUKANG_MUAT_TOTAL)+(SEBARAN.DEC * RKT.TUKANG_MUAT_TOTAL)
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = '".$params['budgetperiod']."'
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = '".$params['budgetperiod']."' 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";


  $components['transport_tbs'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', 
    CASE WHEN SUMBER_BIAYA_UNIT = 'INTERNAL' THEN '5101030504-2' ELSE '5101030605' END, 
    CASE WHEN SUMBER_BIAYA_UNIT = 'INTERNAL' THEN 'TRANSPORT TBS INTERNAL - PANEN' ELSE 'TRANSPORT TBS EKSTERNAL' END, 
    NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT
      RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      0,0,0,0,0,0,0,0,0,0,0,0,
      (SEBARAN.JAN * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JAN,
      (SEBARAN.FEB * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_FEB,
      (SEBARAN.MAR * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAR,
      (SEBARAN.APR * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_APR,
      (SEBARAN.MAY * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAY,
      (SEBARAN.JUN * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUN,
      (SEBARAN.JUL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUL,
      (SEBARAN.AUG * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_AUG,
      (SEBARAN.SEP * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_SEP,
      (SEBARAN.OCT * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_OCT,
      (SEBARAN.NOV * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_NOV,
      (SEBARAN.DEC * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_DEC,
      (SEBARAN.JAN * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.FEB * RKT.ANGKUT_TBS_RP_ANGKUT)+
      (SEBARAN.MAR * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.APR * RKT.ANGKUT_TBS_RP_ANGKUT)+
      (SEBARAN.MAY * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.JUN * RKT.ANGKUT_TBS_RP_ANGKUT)+
      (SEBARAN.JUL * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.AUG * RKT.ANGKUT_TBS_RP_ANGKUT)+
      (SEBARAN.SEP * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.OCT * RKT.ANGKUT_TBS_RP_ANGKUT)+
      (SEBARAN.NOV * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.DEC * RKT.ANGKUT_TBS_RP_ANGKUT), 
      NVL(SUMBER_BIAYA_UNIT, 'INTERNAL') SUMBER_BIAYA_UNIT
    FROM TR_RKT_PANEN RKT
    LEFT JOIN(
      SELECT
        PERIOD_BUDGET,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        JAN / TOTAL AS JAN, FEB / TOTAL AS FEB, MAR / TOTAL AS MAR,
        APR / TOTAL AS APR, MAY / TOTAL AS MAY, JUN / TOTAL AS JUN,
        JUL / TOTAL AS JUL, AUG / TOTAL AS AUG, SEP / TOTAL AS SEP,
        OCT / TOTAL AS OCT, NOV / TOTAL AS NOV, DEC / TOTAL AS DEC,
        TOTAL
      FROM
        (
        SELECT
          norma.PERIOD_BUDGET PERIOD_BUDGET,
          norma.BA_CODE BA_CODE,
          norma.AFD_CODE AFD_CODE,
          norma.BLOCK_CODE BLOCK_CODE,
          SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
          SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
          SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
          SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
          SUM( 
            norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
            norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
          ) total
        FROM TR_PRODUKSI_PERIODE_BUDGET norma
        LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
          AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
          AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
        WHERE norma.DELETE_USER IS NULL 
        AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
        AND norma.ba_code = '".$params['key_find']."'
        GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
      )
    ) SEBARAN ON sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND sebaran.BA_CODE = RKT.BA_CODE
    AND sebaran.AFD_CODE = RKT.AFD_CODE AND sebaran.BLOCK_CODE = RKT.BLOCK_CODE
    LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    LEFT JOIN TR_RKT_CHECKROLL_SUM CHK ON CHK.PERIOD_BUDGET = RKT.PERIOD_BUDGET
      AND CHK.BA_CODE = RKT.BA_CODE AND CHK.JOB_CODE = 'FW040'
    WHERE RKT.DELETE_USER IS NULL AND RKT.FLAG_TEMP IS NULL 
    AND EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']." 
    AND rkt.BA_CODE = '".$params['key_find']."'
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, SUMBER_BIAYA_UNIT
  ";


  /*$components['tbs_internal_vra'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      INSERT_USER,INSERT_TIME, KETERANGAN,
      COST_JAN,
      COST_FEB,
      COST_MAR,
      COST_APR,
      COST_MAY,
      COST_JUN,
      COST_JUL,
      COST_AUG,
      COST_SEP,
      COST_OCT,
      COST_NOV,
      COST_DEC,
      COST_SETAHUN
    )
    SELECT 
    PERIOD_BUDGET, REGION_CODE, BA_CODE, 'TM', '5101030504-1', 'PENGANGKUTAN INTERNAL TBS - VRA', 
    NULL, NULL,
    '".$this->_userName."', CURRENT_TIMESTAMP, NULL,
    SUM(COST_JAN), SUM(COST_FEB), SUM(COST_MAR), SUM(COST_APR), SUM(COST_MAY), SUM(COST_JUN),
    SUM(COST_JUL), SUM(COST_AUG), SUM(COST_SEP), SUM(COST_OCT), SUM(COST_NOV), SUM(COST_DEC),
    SUM(COST_JAN)+SUM(COST_FEB)+SUM(COST_MAR)+SUM(COST_APR)+SUM(COST_MAY)+SUM(COST_JUN)+
    SUM(COST_JUL)+SUM(COST_AUG)+SUM(COST_SEP)+SUM(COST_OCT)+SUM(COST_NOV)+SUM(COST_DEC)
    FROM (
      SELECT PERIOD_BUDGET, REGION_CODE,BA_CODE,
      JAN/DIS_AFD*PRICE_HM_KM COST_JAN,
      FEB/DIS_AFD*PRICE_HM_KM COST_FEB,
      MAR/DIS_AFD*PRICE_HM_KM COST_MAR,
      APR/DIS_AFD*PRICE_HM_KM COST_APR,
      MAY/DIS_AFD*PRICE_HM_KM COST_MAY,
      JUN/DIS_AFD*PRICE_HM_KM COST_JUN,
      JUL/DIS_AFD*PRICE_HM_KM COST_JUL,
      AUG/DIS_AFD*PRICE_HM_KM COST_AUG,
      SEP/DIS_AFD*PRICE_HM_KM COST_SEP,
      OCT/DIS_AFD*PRICE_HM_KM COST_OCT,
      NOV/DIS_AFD*PRICE_HM_KM COST_NOV,
      DEC/DIS_AFD*PRICE_HM_KM COST_DEC,
      (JAN/DIS_AFD*PRICE_HM_KM)+(FEB/DIS_AFD*PRICE_HM_KM)+
      (MAR/DIS_AFD*PRICE_HM_KM)+(APR/DIS_AFD*PRICE_HM_KM)+
      (MAY/DIS_AFD*PRICE_HM_KM)+(JUN/DIS_AFD*PRICE_HM_KM)+
      (JUL/DIS_AFD*PRICE_HM_KM)+(AUG/DIS_AFD*PRICE_HM_KM)+
      (SEP/DIS_AFD*PRICE_HM_KM)+(OCT/DIS_AFD*PRICE_HM_KM)+
      (NOV/DIS_AFD*PRICE_HM_KM)+(DEC/DIS_AFD*PRICE_HM_KM)
      FROM (
        SELECT ORG.REGION_CODE,
        VRAD.ACTIVITY_CODE, VRAD.HM_KM, VRAD.PRICE_HM_KM, SEBARAN.*,
        SUM(SEBARAN.TOTAL) OVER(PARTITION BY SEBARAN.PERIOD_BUDGET, SEBARAN.BA_CODE, SEBARAN.AFD_CODE) DIS_AFD
        FROM (
          SELECT
            norma.PERIOD_BUDGET PERIOD_BUDGET,
            norma.BA_CODE BA_CODE,
            norma.AFD_CODE AFD_CODE,
            norma.BLOCK_CODE BLOCK_CODE,
            SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
            SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
            SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
            SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
            SUM( 
              norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
              norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
            ) total
          FROM TR_PRODUKSI_PERIODE_BUDGET norma
          LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
            AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
            AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
          WHERE norma.DELETE_USER IS NULL 
          AND extract(YEAR FROM norma.PERIOD_BUDGET) = ".$params['budgetperiod']."
          AND norma.ba_code = '".$params['key_find']."'
          GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
        ) SEBARAN
        JOIN TR_RKT_VRA_DISTRIBUSI VRAD ON VRAD.BA_CODE = SEBARAN.BA_CODE AND VRAD.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
          AND VRAD.LOCATION_CODE = SEBARAN.AFD_CODE
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = SEBARAN.BA_CODE
        WHERE VRAD.ACTIVITY_CODE = '5101030504'
      )
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
  ";*/


  // transport berdasarkan vra distribusi
  // 'MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI'
  // sumber biaya internal
  $components['vra_infra'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      QTY_JAN,QTY_FEB,QTY_MAR,QTY_APR,QTY_MAY,QTY_JUN,QTY_JUL,QTY_AUG,QTY_SEP,QTY_OCT,QTY_NOV,QTY_DEC,
      COST_JAN,COST_FEB,COST_MAR,COST_APR,COST_MAY,COST_JUN,COST_JUL,COST_AUG,COST_SEP,COST_OCT,COST_NOV,COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER,INSERT_TIME
    )
    SELECT 
      PERIOD_BUDGET, REGION_CODE, BA_CODE
      , 'TM', ACTIVITY_CODE, ACTIVITY_NAME||' - VRA'
      , 'TRANSPORT'
      , SUM((PC.PLAN_JAN/PC.PLAN_AFD)*HM_KM) PLAN_JAN
      , SUM((PC.PLAN_FEB/PC.PLAN_AFD)*HM_KM) PLAN_FEB
      , SUM((PC.PLAN_MAR/PC.PLAN_AFD)*HM_KM) PLAN_MAR
      , SUM((PC.PLAN_APR/PC.PLAN_AFD)*HM_KM) PLAN_APR
      , SUM((PC.PLAN_MAY/PC.PLAN_AFD)*HM_KM) PLAN_MAY
      , SUM((PC.PLAN_JUN/PC.PLAN_AFD)*HM_KM) PLAN_JUN
      , SUM((PC.PLAN_JUL/PC.PLAN_AFD)*HM_KM) PLAN_JUL
      , SUM((PC.PLAN_AUG/PC.PLAN_AFD)*HM_KM) PLAN_AUG
      , SUM((PC.PLAN_SEP/PC.PLAN_AFD)*HM_KM) PLAN_SEP
      , SUM((PC.PLAN_OCT/PC.PLAN_AFD)*HM_KM) PLAN_OCT
      , SUM((PC.PLAN_NOV/PC.PLAN_AFD)*HM_KM) PLAN_NOV
      , SUM((PC.PLAN_DEC/PC.PLAN_AFD)*HM_KM) PLAN_DEC
      , SUM((PC.PLAN_JAN/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_JAN, SUM((PC.PLAN_FEB/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_FEB
      , SUM((PC.PLAN_MAR/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_MAR, SUM((PC.PLAN_APR/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_APR
      , SUM((PC.PLAN_MAY/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_MAY, SUM((PC.PLAN_JUN/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_JUN
      , SUM((PC.PLAN_JUL/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_JUL, SUM((PC.PLAN_AUG/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_AUG
      , SUM((PC.PLAN_SEP/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_SEP, SUM((PC.PLAN_OCT/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_OCT
      , SUM((PC.PLAN_NOV/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_NOV, SUM((PC.PLAN_DEC/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_DEC
      , SUM(((PLAN_JAN+PLAN_FEB+PLAN_MAR+PLAN_APR+PLAN_MAY+PLAN_JUN+PLAN_JUL+PLAN_AUG+PLAN_SEP+PLAN_OCT+PLAN_NOV+PLAN_DEC)/PC.PLAN_AFD)*HM_KM)
      , SUM(((PLAN_JAN+PLAN_FEB+PLAN_MAR+PLAN_APR+PLAN_MAY+PLAN_JUN+PLAN_JUL+PLAN_AUG+PLAN_SEP+PLAN_OCT+PLAN_NOV+PLAN_DEC)/PC.PLAN_AFD)*PC.PRICE_HM_KM)
      , '".$this->_userName."', CURRENT_TIMESTAMP
    FROM (
      SELECT RKT.*
      , F_GET_RKT_PLAN_AFDELING(RKT.PERIOD_BUDGET, RKT.BA_CODE, RKT.AFD_CODE, RKT.ACTIVITY_CODE,RKT.SUMBER_BIAYA) PLAN_AFD
      , VRA.HM_KM, VRA.PRICE_HM_KM, VRA.VRA_CODE, VH.VRA_SUB_CAT_DESCRIPTION VH_NAME
      , ACT.DESCRIPTION ACTIVITY_NAME, VH.UOM
      , ORG.REGION_CODE
      FROM TR_RKT RKT
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
      JOIN TM_ACTIVITY ACT ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
      JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        AND RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET AND RKT.BA_CODE = VRA.BA_CODE
        AND RKT.AFD_CODE = VRA.LOCATION_CODE
      JOIN TM_VRA VH ON VH.VRA_CODE = VRA.VRA_CODE
      WHERE EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']."
      AND RKT.BA_CODE = '".$params['key_find']."'
      AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA')
      AND RKT.MATURITY_STAGE_SMS1 = 'TM'
      AND RKT.PLAN_SETAHUN != 0
      AND RKT.ACTIVITY_CODE NOT IN ('51600','42700') -- EXCLUDE SISIP DAN LANGSIR
    ) PC
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE , PC.ACTIVITY_CODE, ACTIVITY_NAME  
  ";


  $components['delete_transport_sisip_sebelumnya'] = "
    DELETE FROM TMP_RPT_EST_COST WHERE EXTRACT(YEAR FROM PERIOD_BUDGET) = ".$params['budgetperiod']."
      AND BA_CODE = '".$params['key_find']."' AND TIPE_TRANSAKSI = 'TM' AND ACTIVITY_CODE = '42700'
      AND COST_ELEMENT = 'TRANSPORT'
  ";

  $components['vra_infra_sisip'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      QTY_JAN,QTY_FEB,QTY_MAR,QTY_APR,QTY_MAY,QTY_JUN,QTY_JUL,QTY_AUG,QTY_SEP,QTY_OCT,QTY_NOV,QTY_DEC,
      COST_JAN,COST_FEB,COST_MAR,COST_APR,COST_MAY,COST_JUN,COST_JUL,COST_AUG,COST_SEP,COST_OCT,COST_NOV,COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER,INSERT_TIME
    )
    SELECT 
      PERIOD_BUDGET, REGION_CODE, BA_CODE
      , 'TM', ACTIVITY_CODE, ACTIVITY_NAME
      , 'TRANSPORT'
      , SUM((PC.PLAN_JAN/PC.PLAN_AFD)*HM_KM) PLAN_JAN
      , SUM((PC.PLAN_FEB/PC.PLAN_AFD)*HM_KM) PLAN_FEB
      , SUM((PC.PLAN_MAR/PC.PLAN_AFD)*HM_KM) PLAN_MAR
      , SUM((PC.PLAN_APR/PC.PLAN_AFD)*HM_KM) PLAN_APR
      , SUM((PC.PLAN_MAY/PC.PLAN_AFD)*HM_KM) PLAN_MAY
      , SUM((PC.PLAN_JUN/PC.PLAN_AFD)*HM_KM) PLAN_JUN
      , SUM((PC.PLAN_JUL/PC.PLAN_AFD)*HM_KM) PLAN_JUL
      , SUM((PC.PLAN_AUG/PC.PLAN_AFD)*HM_KM) PLAN_AUG
      , SUM((PC.PLAN_SEP/PC.PLAN_AFD)*HM_KM) PLAN_SEP
      , SUM((PC.PLAN_OCT/PC.PLAN_AFD)*HM_KM) PLAN_OCT
      , SUM((PC.PLAN_NOV/PC.PLAN_AFD)*HM_KM) PLAN_NOV
      , SUM((PC.PLAN_DEC/PC.PLAN_AFD)*HM_KM) PLAN_DEC
      , SUM((PC.PLAN_JAN/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_JAN, SUM((PC.PLAN_FEB/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_FEB
      , SUM((PC.PLAN_MAR/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_MAR, SUM((PC.PLAN_APR/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_APR
      , SUM((PC.PLAN_MAY/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_MAY, SUM((PC.PLAN_JUN/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_JUN
      , SUM((PC.PLAN_JUL/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_JUL, SUM((PC.PLAN_AUG/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_AUG
      , SUM((PC.PLAN_SEP/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_SEP, SUM((PC.PLAN_OCT/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_OCT
      , SUM((PC.PLAN_NOV/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_NOV, SUM((PC.PLAN_DEC/PC.PLAN_AFD)*PC.PRICE_HM_KM) COST_DEC
      , SUM(((PLAN_JAN+PLAN_FEB+PLAN_MAR+PLAN_APR+PLAN_MAY+PLAN_JUN+PLAN_JUL+PLAN_AUG+PLAN_SEP+PLAN_OCT+PLAN_NOV+PLAN_DEC)/PC.PLAN_AFD)*HM_KM)
      , SUM(((PLAN_JAN+PLAN_FEB+PLAN_MAR+PLAN_APR+PLAN_MAY+PLAN_JUN+PLAN_JUL+PLAN_AUG+PLAN_SEP+PLAN_OCT+PLAN_NOV+PLAN_DEC)/PC.PLAN_AFD)*PC.PRICE_HM_KM)
      , '".$this->_userName."', CURRENT_TIMESTAMP
    FROM (
      SELECT RKT.*
      , F_GET_RKT_PLAN_AFDELING(RKT.PERIOD_BUDGET, RKT.BA_CODE, RKT.AFD_CODE, RKT.ACTIVITY_CODE,RKT.SUMBER_BIAYA) PLAN_AFD
      , VRA.HM_KM, VRA.PRICE_HM_KM, VRA.VRA_CODE, VH.VRA_SUB_CAT_DESCRIPTION VH_NAME
      , ACT.DESCRIPTION ACTIVITY_NAME, VH.UOM
      , ORG.REGION_CODE
      FROM TR_RKT RKT
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
      JOIN TM_ACTIVITY ACT ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
      JOIN TR_RKT_VRA_DISTRIBUSI VRA ON VRA.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        AND RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET AND RKT.BA_CODE = VRA.BA_CODE
        AND RKT.AFD_CODE = VRA.LOCATION_CODE
      JOIN TM_VRA VH ON VH.VRA_CODE = VRA.VRA_CODE
      WHERE EXTRACT(YEAR FROM RKT.PERIOD_BUDGET) = ".$params['budgetperiod']."
      AND RKT.BA_CODE = '".$params['key_find']."'
      AND RKT.TIPE_TRANSAKSI IN ('MANUAL_SISIP')
      AND RKT.MATURITY_STAGE_SMS1 = 'TM'
      AND RKT.PLAN_SETAHUN != 0
    ) PC
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE , PC.ACTIVITY_CODE, ACTIVITY_NAME  
  ";


  // GAJI
  $components['GAJI'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
      COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER, INSERT_TIME
    )
    SELECT 
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
      'GAJI' AS ACTIVITY_CODE, 
      'GAJI' AS ACTIVITY_DESC,
      'LABOUR' AS COST_ELEMENT,
      '' UOM,
      SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
      SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
      SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
      SUM(NVL (QTY_APR,0)) AS QTY_APR,
      SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
      SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
      SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
      SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
      SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
      SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
      SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
      SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
      SUM(NVL (COST_JAN,0)) AS COST_JAN,
      SUM(NVL (COST_FEB,0)) AS COST_FEB,
      SUM(NVL (COST_MAR,0)) AS COST_MAR,
      SUM(NVL (COST_APR,0)) AS COST_APR,
      SUM(NVL (COST_MAY,0)) AS COST_MAY,
      SUM(NVL (COST_JUN,0)) AS COST_JUN,
      SUM(NVL (COST_JUL,0)) AS COST_JUL,
      SUM(NVL (COST_AUG,0)) AS COST_AUG,
      SUM(NVL (COST_SEP,0)) AS COST_SEP,
      SUM(NVL (COST_OCT,0)) AS COST_OCT,
      SUM(NVL (COST_NOV,0)) AS COST_NOV,
      SUM(NVL (COST_DEC,0)) AS COST_DEC,
      (SUM(NVL (QTY_JAN,0)) +
      SUM(NVL (QTY_FEB,0)) +
      SUM(NVL (QTY_MAR,0)) +
      SUM(NVL (QTY_APR,0)) +
      SUM(NVL (QTY_MAY,0)) +
      SUM(NVL (QTY_JUN,0)) +
      SUM(NVL (QTY_JUL,0)) +
      SUM(NVL (QTY_AUG,0)) +
      SUM(NVL (QTY_SEP,0)) +
      SUM(NVL (QTY_OCT,0)) +
      SUM(NVL (QTY_NOV,0)) +
      SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
      (SUM(NVL (COST_JAN,0)) +
      SUM(NVL (COST_FEB,0)) +
      SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) +
      SUM(NVL (COST_MAY,0)) +
      SUM(NVL (COST_JUN,0)) +
      SUM(NVL (COST_JUL,0)) +
      SUM(NVL (COST_AUG,0)) +
      SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) +
      SUM(NVL (COST_NOV,0)) +
      SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      SYSDATE AS INSERT_TIME
    FROM (   
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUN,
        ".$this->freeColumnQty('sm2').", 
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JUN,
        ".$this->freeColumnCost('sm2')."
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS1 IS NOT NULL
     AND MATURITY_STAGE_SMS1 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS1 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN(
        SELECT CR.PERIOD_BUDGET, CR.BA_CODE, SUM(CR.TOTAL_GP_MPP) GP_MPP, SUM(CR.MPP_PERIOD_BUDGET) MPP
        FROM TM_JOB_TYPE JT
        JOIN TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE AND JT.JOB_TYPE = 'OT'
        WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
        AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
        GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
      UNION ALL --HITUNG TUNJANGAN UNTUK SMS2
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        ".$this->freeColumnQty('sm1').", 
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_DEC,
        ".$this->freeColumnCost('sm1').",
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.GP_MPP) AS COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS2 IS NOT NULL
     AND MATURITY_STAGE_SMS2 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS2 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN (
        SELECT CR.PERIOD_BUDGET, CR.BA_CODE, SUM(CR.TOTAL_GP_MPP) GP_MPP, SUM(CR.MPP_PERIOD_BUDGET) MPP
        FROM TM_JOB_TYPE JT
        JOIN TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE AND JT.JOB_TYPE = 'OT'
        WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
        AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
        GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, MATURITY_STAGE_SMS1
  ";

  // ASTEK, CATU, JABATAN, KEHADIRAN, LAINNYA
  $components['komponen_gaji'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
      COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER, INSERT_TIME
    )
    SELECT
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
      TUNJANGAN_TYPE AS ACTIVITY_CODE, 
      TUNJANGAN_TYPE AS ACTIVITY_DESC,
      'LABOUR' AS COST_ELEMENT,
      '' UOM,
      SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
      SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
      SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
      SUM(NVL (QTY_APR,0)) AS QTY_APR,
      SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
      SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
      SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
      SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
      SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
      SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
      SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
      SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
      SUM(NVL (COST_JAN,0)) AS COST_JAN,
      SUM(NVL (COST_FEB,0)) AS COST_FEB,
      SUM(NVL (COST_MAR,0)) AS COST_MAR,
      SUM(NVL (COST_APR,0)) AS COST_APR,
      SUM(NVL (COST_MAY,0)) AS COST_MAY,
      SUM(NVL (COST_JUN,0)) AS COST_JUN,
      SUM(NVL (COST_JUL,0)) AS COST_JUL,
      SUM(NVL (COST_AUG,0)) AS COST_AUG,
      SUM(NVL (COST_SEP,0)) AS COST_SEP,
      SUM(NVL (COST_OCT,0)) AS COST_OCT,
      SUM(NVL (COST_NOV,0)) AS COST_NOV,
      SUM(NVL (COST_DEC,0)) AS COST_DEC,
      (SUM(NVL (QTY_JAN,0)) +
      SUM(NVL (QTY_FEB,0)) +
      SUM(NVL (QTY_MAR,0)) +
      SUM(NVL (QTY_APR,0)) +
      SUM(NVL (QTY_MAY,0)) +
      SUM(NVL (QTY_JUN,0)) +
      SUM(NVL (QTY_JUL,0)) +
      SUM(NVL (QTY_AUG,0)) +
      SUM(NVL (QTY_SEP,0)) +
      SUM(NVL (QTY_OCT,0)) +
      SUM(NVL (QTY_NOV,0)) +
      SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
      (SUM(NVL (COST_JAN,0)) +
      SUM(NVL (COST_FEB,0)) +
      SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) +
      SUM(NVL (COST_MAY,0)) +
      SUM(NVL (COST_JUN,0)) +
      SUM(NVL (COST_JUL,0)) +
      SUM(NVL (COST_AUG,0)) +
      SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) +
      SUM(NVL (COST_NOV,0)) +
      SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      CURRENT_TIMESTAMP AS INSERT_TIME
    FROM (
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1, TTL_COST.TUNJANGAN_TYPE,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUN,
        ".$this->freeColumnQty('sm2').",
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUN,
        ".$this->freeColumnCost('sm2')."
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
        (
          SELECT SUM (HA_PLANTED) AS HA
          FROM TM_HECTARE_STATEMENT
          WHERE 1 = 1 
          --AND MATURITY_STAGE_SMS1 IS NOT NULL
          AND MATURITY_STAGE_SMS1 = 'TM'
          AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
          AND BA_CODE = '".$ba_code."'
          GROUP BY PERIOD_BUDGET, BA_CODE
        ) HA
        FROM BPS_PROD.TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS1 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN(
        SELECT S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE
        , SUM(S.TOTAL_GP_MPP) GP_ALL
        , SUM(S.JUMLAH * S.MPP_PERIOD_BUDGET) COST_BA, S.MPP 
        FROM (
          SELECT CR.PERIOD_BUDGET, CR.BA_CODE
            , CD.TUNJANGAN_TYPE
            , JT.JOB_TYPE
            , CR.TOTAL_GP_MPP
            , CD.JUMLAH
            , CR.MPP_PERIOD_BUDGET
            , SUM(CR.MPP_PERIOD_BUDGET) OVER (PARTITION BY CR.PERIOD_BUDGET, CR.BA_CODE) MPP
          FROM BPS_PROD.TM_JOB_TYPE JT
          JOIN BPS_PROD.TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE
          JOIN BPS_PROD.TR_RKT_CHECKROLL_DETAIL CD ON CD.TRX_CR_CODE = CR.TRX_CR_CODE
          WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
          AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
          AND CD.TUNJANGAN_TYPE IN ('ASTEK', 'CATU', 'JABATAN', 'KEHADIRAN', 'LAINNYA')
          ORDER BY 2
        ) S WHERE JOB_TYPE = 'OT'
        GROUP BY S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE,S.MPP 
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
      UNION ALL --HITUNG TUNJANGAN UNTUK SMS2
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2, TTL_COST.TUNJANGAN_TYPE,
        ".$this->freeColumnQty('sm1').", 
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_DEC,
        ".$this->freeColumnCost('sm1').",
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
        (
          SELECT SUM (HA_PLANTED) AS HA
          FROM TM_HECTARE_STATEMENT
          WHERE 1 = 1 
          --AND MATURITY_STAGE_SMS1 IS NOT NULL
          AND MATURITY_STAGE_SMS2 = 'TM'
          AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
          AND BA_CODE = '".$ba_code."'
          GROUP BY PERIOD_BUDGET, BA_CODE
        ) HA
        FROM BPS_PROD.TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS2 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN (
        SELECT S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE
        , SUM(S.TOTAL_GP_MPP) GP_ALL
        , SUM(S.JUMLAH * S.MPP_PERIOD_BUDGET) COST_BA, S.MPP 
        FROM (
          SELECT CR.PERIOD_BUDGET, CR.BA_CODE
            , CD.TUNJANGAN_TYPE
            , JT.JOB_TYPE
            , CR.TOTAL_GP_MPP
            , CD.JUMLAH
            , CR.MPP_PERIOD_BUDGET
            , SUM(CR.MPP_PERIOD_BUDGET) OVER (PARTITION BY CR.PERIOD_BUDGET, CR.BA_CODE) MPP
          FROM BPS_PROD.TM_JOB_TYPE JT
          JOIN BPS_PROD.TR_RKT_CHECKROLL CR ON CR.JOB_CODE = JT.JOB_CODE
          JOIN BPS_PROD.TR_RKT_CHECKROLL_DETAIL CD ON CD.TRX_CR_CODE = CR.TRX_CR_CODE
          WHERE CR.DELETE_TIME IS NULL AND CR.BA_CODE = '".$ba_code."'
          AND EXTRACT(YEAR FROM CR.PERIOD_BUDGET) = '".$period_budget."'
          AND CD.TUNJANGAN_TYPE IN ('ASTEK', 'CATU', 'JABATAN', 'KEHADIRAN', 'LAINNYA')
          ORDER BY 2
        ) S WHERE JOB_TYPE = 'OT'
        GROUP BY S.PERIOD_BUDGET, S.BA_CODE, S.TUNJANGAN_TYPE,S.MPP 
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, MATURITY_STAGE_SMS1, TUNJANGAN_TYPE
  ";

  // OBAT
  $components['komponen_obat'] = "
  INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      COST_ELEMENT,
      UOM,
      QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
      COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER, INSERT_TIME
    )
SELECT
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
      TUNJANGAN_TYPE AS ACTIVITY_CODE, 
      TUNJANGAN_TYPE AS ACTIVITY_DESC,
      'LABOUR' AS COST_ELEMENT,
      '' UOM,
      SUM(NVL (QTY_JAN,0)) AS QTY_JAN,
      SUM(NVL (QTY_FEB,0)) AS QTY_FEB,
      SUM(NVL (QTY_MAR,0)) AS QTY_MAR,
      SUM(NVL (QTY_APR,0)) AS QTY_APR,
      SUM(NVL (QTY_MAY,0)) AS QTY_MAY,
      SUM(NVL (QTY_JUN,0)) AS QTY_JUN,
      SUM(NVL (QTY_JUL,0)) AS QTY_JUL,
      SUM(NVL (QTY_AUG,0)) AS QTY_AUG,
      SUM(NVL (QTY_SEP,0)) AS QTY_SEP,
      SUM(NVL (QTY_OCT,0)) AS QTY_OCT,
      SUM(NVL (QTY_NOV,0)) AS QTY_NOV,
      SUM(NVL (QTY_DEC,0)) AS QTY_DEC,
      SUM(NVL (COST_JAN,0)) AS COST_JAN,
      SUM(NVL (COST_FEB,0)) AS COST_FEB,
      SUM(NVL (COST_MAR,0)) AS COST_MAR,
      SUM(NVL (COST_APR,0)) AS COST_APR,
      SUM(NVL (COST_MAY,0)) AS COST_MAY,
      SUM(NVL (COST_JUN,0)) AS COST_JUN,
      SUM(NVL (COST_JUL,0)) AS COST_JUL,
      SUM(NVL (COST_AUG,0)) AS COST_AUG,
      SUM(NVL (COST_SEP,0)) AS COST_SEP,
      SUM(NVL (COST_OCT,0)) AS COST_OCT,
      SUM(NVL (COST_NOV,0)) AS COST_NOV,
      SUM(NVL (COST_DEC,0)) AS COST_DEC,
      (SUM(NVL (QTY_JAN,0)) +
      SUM(NVL (QTY_FEB,0)) +
      SUM(NVL (QTY_MAR,0)) +
      SUM(NVL (QTY_APR,0)) +
      SUM(NVL (QTY_MAY,0)) +
      SUM(NVL (QTY_JUN,0)) +
      SUM(NVL (QTY_JUL,0)) +
      SUM(NVL (QTY_AUG,0)) +
      SUM(NVL (QTY_SEP,0)) +
      SUM(NVL (QTY_OCT,0)) +
      SUM(NVL (QTY_NOV,0)) +
      SUM(NVL (QTY_DEC,0))) AS QTY_SETAHUN,
      (SUM(NVL (COST_JAN,0)) +
      SUM(NVL (COST_FEB,0)) +
      SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) +
      SUM(NVL (COST_MAY,0)) +
      SUM(NVL (COST_JUN,0)) +
      SUM(NVL (COST_JUL,0)) +
      SUM(NVL (COST_AUG,0)) +
      SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) +
      SUM(NVL (COST_NOV,0)) +
      SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      CURRENT_TIMESTAMP AS INSERT_TIME
    FROM (
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1, TTL_COST.TUNJANGAN_TYPE,
        HA_TM.HA_PLANTED, HA_TM.HA, TTL_COST.COST_BA,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUN,
        0 as QTY_JUL, 0 as QTY_AUG, 0 as QTY_SEP, 0 as QTY_OCT, 0 as QTY_NOV, 0 as QTY_DEC,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 as COST_JUL, 0 as COST_AUG, 0 as COST_SEP, 0 as COST_OCT, 0 as COST_NOV, 0 as COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS1 IS NOT NULL
     AND MATURITY_STAGE_SMS1 = 'TM'
     
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            
                AND BA_CODE = '".$ba_code."'
            
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM BPS_PROD.TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS1 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN(
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA,
        MPP
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             SUM(TRC.MPP_PERIOD_BUDGET) OVER (PARTITION BY TRC.PERIOD_BUDGET, TRC.BA_CODE) MPP,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
                AND TCR.TUNJANGAN_TYPE IS NOT NULL
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            
                AND TTJ.BA_CODE = '".$ba_code."'
             
  ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE, MPP 
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
      UNION ALL --HITUNG TUNJANGAN UNTUK SMS2
      SELECT
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2, TTL_COST.TUNJANGAN_TYPE,
        HA_TM.HA_PLANTED, HA_TM.HA, TTL_COST.COST_BA,
        0 as QTY_JAN, 0 as QTY_FEB, 0 as QTY_MAR, 0 as QTY_APR, 0 as QTY_MAY, 0 as QTY_JUN, 
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.MPP) AS QTY_DEC,
        0 as COST_JAN, 0 as COST_FEB, 0 as COST_MAR, 0 as COST_APR, 0 as COST_MAY, 0 as COST_JUN,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED / HA_TM.HA*TTL_COST.COST_BA) AS COST_DEC
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS2 IS NOT NULL
     AND MATURITY_STAGE_SMS2 = 'TM'
     
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            
                AND BA_CODE = '".$ba_code."'
            
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM BPS_PROD.TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS2 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HA_TM
      LEFT JOIN BPS_PROD.TM_ORGANIZATION ORG ON ORG.BA_CODE = HA_TM.BA_CODE
      LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA,
        MPP
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             SUM(TRC.MPP_PERIOD_BUDGET) OVER (PARTITION BY TRC.PERIOD_BUDGET, TRC.BA_CODE) MPP,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
                AND TCR.TUNJANGAN_TYPE IS NOT NULL
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            
                AND TTJ.BA_CODE = '".$ba_code."'
             
  ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE, MPP
      ) TTL_COST ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, MATURITY_STAGE_SMS1, TUNJANGAN_TYPE
  ";


  // BONUS, THR
  $components['komponen_gaji_tahunan'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      COST_ELEMENT,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      UOM,
      QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
      COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER, INSERT_TIME
    )
    SELECT 
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      MATURITY_STAGE AS TIPE_TRANSAKSI,
      'LABOUR' AS COST_ELEMENT,
      TUNJANGAN_TYPE AS ACTIVITY_CODE, 
      TUNJANGAN_TYPE AS ACTIVITY_DESC,
      '' UOM,
      SUM(NVL (DIS_JAN,0)) AS DIS_JAN, SUM(NVL (DIS_FEB,0)) AS DIS_FEB, SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
      SUM(NVL (DIS_APR,0)) AS DIS_APR, SUM(NVL (DIS_MAY,0)) AS DIS_MAY, SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
      SUM(NVL (DIS_JUL,0)) AS DIS_JUL, SUM(NVL (DIS_AUG,0)) AS DIS_AUG, SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
      SUM(NVL (DIS_OCT,0)) AS DIS_OCT, SUM(NVL (DIS_NOV,0)) AS DIS_NOV, SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
      SUM(NVL (COST_JAN,0)) AS COST_JAN, SUM(NVL (COST_FEB,0)) AS COST_FEB, SUM(NVL (COST_MAR,0)) AS COST_MAR,
      SUM(NVL (COST_APR,0)) AS COST_APR, SUM(NVL (COST_MAY,0)) AS COST_MAY, SUM(NVL (COST_JUN,0)) AS COST_JUN,
      SUM(NVL (COST_JUL,0)) AS COST_JUL, SUM(NVL (COST_AUG,0)) AS COST_AUG, SUM(NVL (COST_SEP,0)) AS COST_SEP,
      SUM(NVL (COST_OCT,0)) AS COST_OCT, SUM(NVL (COST_NOV,0)) AS COST_NOV, SUM(NVL (COST_DEC,0)) AS COST_DEC,
      (
      SUM(NVL (DIS_JAN,0)) + SUM(NVL (DIS_FEB,0)) + SUM(NVL (DIS_MAR,0)) +
      SUM(NVL (DIS_APR,0)) + SUM(NVL (DIS_MAY,0)) + SUM(NVL (DIS_JUN,0)) +
      SUM(NVL (DIS_JUL,0)) + SUM(NVL (DIS_AUG,0)) + SUM(NVL (DIS_SEP,0)) +
      SUM(NVL (DIS_OCT,0)) + SUM(NVL (DIS_NOV,0)) + SUM(NVL (DIS_DEC,0))
      ) AS DIS_SETAHUN,
      (
      SUM(NVL (COST_JAN,0)) + SUM(NVL (COST_FEB,0)) + SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) + SUM(NVL (COST_MAY,0)) + SUM(NVL (COST_JUN,0)) +
      SUM(NVL (COST_JUL,0)) + SUM(NVL (COST_AUG,0)) + SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) + SUM(NVL (COST_NOV,0)) + SUM(NVL (COST_DEC,0))
      ) AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      SYSDATE AS INSERT_TIME
    FROM (
      SELECT
        HS.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HS.BA_CODE,
        HS.AFD_CODE,
        HS.BLOCK_CODE,
        HS.MATURITY_STAGE_SMS1 MATURITY_STAGE,
        COST.TUNJANGAN_TYPE,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JAN,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_FEB,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAR,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_APR,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAY,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JAN,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_FEB,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAR,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_APR,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAY,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC, COST.MPP_BA, COST.COST_BA
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS1 IS NOT NULL
     AND MATURITY_STAGE_SMS1 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS1= 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN (
        SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        , SUM( COSTTYPE )/12 AS COST_BA
        , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
        FROM
          (
            SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
            TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
            JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
              AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
            JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
            WHERE
              TTJ.TUNJANGAN_TYPE IN ('THR', 'BONUS')
              AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET)= '".$period_budget."'
              AND TTJ.BA_CODE = '".$ba_code."'
          )
        GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
      ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
      UNION ALL 
      SELECT
        HS.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HS.BA_CODE,
        HS.AFD_CODE,
        HS.BLOCK_CODE,
        HS.MATURITY_STAGE_SMS2 MATURITY_STAGE,
        COST.TUNJANGAN_TYPE,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUL,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_AUG,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_SEP,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_OCT,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_NOV,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUL,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_AUG,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_SEP,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_OCT,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_NOV,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_DEC,
        COST.MPP_BA, COST.COST_BA
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
        , --BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
        (SELECT SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     --AND MATURITY_STAGE_SMS2 IS NOT NULL
     AND MATURITY_STAGE_SMS2 = 'TM'
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND BA_CODE = '".$ba_code."'
  GROUP BY PERIOD_BUDGET, BA_CODE) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS2= 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN (
        SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        , SUM( COSTTYPE )/12 AS COST_BA
        , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
        FROM
          (
            SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
            TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
            JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
              AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
            JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
            WHERE
              TTJ.TUNJANGAN_TYPE IN ('THR', 'BONUS')
              AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET)= '".$period_budget."'
              AND TTJ.BA_CODE = '".$ba_code."'
          )
        GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
      ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
    ) H
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, MATURITY_STAGE, TUNJANGAN_TYPE
  ";


  // 'HHR','OBAT','PPH_21'
  $components['komponen_gaji_bulanan'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      COST_ELEMENT,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      UOM,
      QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
      COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER, INSERT_TIME
    )
    SELECT 
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      MATURITY_STAGE AS TIPE_TRANSAKSI,
      'LABOUR' AS COST_ELEMENT,
      TUNJANGAN_TYPE AS ACTIVITY_CODE, 
      TUNJANGAN_TYPE AS ACTIVITY_DESC,
      '' UOM,
      SUM(NVL (DIS_JAN,0)) AS DIS_JAN, SUM(NVL (DIS_FEB,0)) AS DIS_FEB, SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
      SUM(NVL (DIS_APR,0)) AS DIS_APR, SUM(NVL (DIS_MAY,0)) AS DIS_MAY, SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
      SUM(NVL (DIS_JUL,0)) AS DIS_JUL, SUM(NVL (DIS_AUG,0)) AS DIS_AUG, SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
      SUM(NVL (DIS_OCT,0)) AS DIS_OCT, SUM(NVL (DIS_NOV,0)) AS DIS_NOV, SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
      SUM(NVL (COST_JAN,0)) AS COST_JAN, SUM(NVL (COST_FEB,0)) AS COST_FEB, SUM(NVL (COST_MAR,0)) AS COST_MAR,
      SUM(NVL (COST_APR,0)) AS COST_APR, SUM(NVL (COST_MAY,0)) AS COST_MAY, SUM(NVL (COST_JUN,0)) AS COST_JUN,
      SUM(NVL (COST_JUL,0)) AS COST_JUL, SUM(NVL (COST_AUG,0)) AS COST_AUG, SUM(NVL (COST_SEP,0)) AS COST_SEP,
      SUM(NVL (COST_OCT,0)) AS COST_OCT, SUM(NVL (COST_NOV,0)) AS COST_NOV, SUM(NVL (COST_DEC,0)) AS COST_DEC,
      (
      SUM(NVL (DIS_JAN,0)) + SUM(NVL (DIS_FEB,0)) + SUM(NVL (DIS_MAR,0)) +
      SUM(NVL (DIS_APR,0)) + SUM(NVL (DIS_MAY,0)) + SUM(NVL (DIS_JUN,0)) +
      SUM(NVL (DIS_JUL,0)) + SUM(NVL (DIS_AUG,0)) + SUM(NVL (DIS_SEP,0)) +
      SUM(NVL (DIS_OCT,0)) + SUM(NVL (DIS_NOV,0)) + SUM(NVL (DIS_DEC,0))
      ) AS DIS_SETAHUN,
      (
      SUM(NVL (COST_JAN,0)) + SUM(NVL (COST_FEB,0)) + SUM(NVL (COST_MAR,0)) +
      SUM(NVL (COST_APR,0)) + SUM(NVL (COST_MAY,0)) + SUM(NVL (COST_JUN,0)) +
      SUM(NVL (COST_JUL,0)) + SUM(NVL (COST_AUG,0)) + SUM(NVL (COST_SEP,0)) +
      SUM(NVL (COST_OCT,0)) + SUM(NVL (COST_NOV,0)) + SUM(NVL (COST_DEC,0))
      ) AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      SYSDATE AS INSERT_TIME
    FROM (
      SELECT
        HS.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HS.BA_CODE,
        HS.AFD_CODE,
        HS.BLOCK_CODE,
        HS.MATURITY_STAGE_SMS1 MATURITY_STAGE,
        COST.TUNJANGAN_TYPE,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JAN,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_FEB,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAR,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_APR,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_MAY,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JAN,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_FEB,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAR,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_APR,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_MAY,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC, COST.MPP_BA, COST.COST_BA
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS1, HA_PLANTED
        --, BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM1(PERIOD_BUDGET, BA_CODE) HA
        ,(
          SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            AND MATURITY_STAGE_SMS1 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS1 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN (
        SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        , SUM( COSTTYPE )/12 AS COST_BA
        , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
        FROM
          (
            SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
            TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
            JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
              AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
            JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
            WHERE
              --TTJ.TUNJANGAN_TYPE IN ('HHR','OBAT','PPH_21')
              TTJ.TUNJANGAN_TYPE IN ('HHR','PPH_21')
              AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET) = '".$period_budget."'
              AND TTJ.BA_CODE = '".$ba_code."'
          )
        GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
      ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
      UNION ALL 
      SELECT
        HS.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HS.BA_CODE,
        HS.AFD_CODE,
        HS.BLOCK_CODE,
        HS.MATURITY_STAGE_SMS2 MATURITY_STAGE,
        COST.TUNJANGAN_TYPE,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_JUL,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_AUG,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_SEP,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_OCT,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_NOV,
        (HS.HA_PLANTED / HS.HA) * COST.MPP_BA AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_JUL,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_AUG,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_SEP,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_OCT,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_NOV,
        (HS.HA_PLANTED / HS.HA) * COST.COST_BA AS COST_DEC,
        COST.MPP_BA, COST.COST_BA
      FROM (
        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, BLOCK_CODE, MATURITY_STAGE_SMS2, HA_PLANTED
        --, BPS_PROD.F_GET_HA_PLANTED_SUMMARY_SM2(PERIOD_BUDGET, BA_CODE) HA
        ,(
          SELECT SUM (HA_PLANTED) AS HA
            FROM TM_HECTARE_STATEMENT
            WHERE 1 = 1 
            AND MATURITY_STAGE_SMS2 = 'TM'
            AND to_char(PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND BA_CODE = '".$ba_code."'
            GROUP BY PERIOD_BUDGET, BA_CODE
          ) HA
        FROM TM_HECTARE_STATEMENT
        WHERE MATURITY_STAGE_SMS2 = 'TM'
        AND BA_CODE = '".$ba_code."' AND EXTRACT(YEAR FROM PERIOD_BUDGET) = '".$period_budget."'
      ) HS
      JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = HS.BA_CODE
      JOIN (
        SELECT PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        , SUM( COSTTYPE )/12 AS COST_BA
        , SUM(MPP_PERIOD_BUDGET) AS MPP_BA
        FROM
          (
            SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, TTJ.JOB_CODE, TCR.TUNJANGAN_TYPE, TCR.JUMLAH, 
            TRC.MPP_PERIOD_BUDGET, (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
            JOIN TR_RKT_CHECKROLL TRC ON TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
              AND TRC.BA_CODE = TTJ.BA_CODE AND TRC.JOB_CODE = TTJ.JOB_CODE AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
            JOIN TR_RKT_CHECKROLL_DETAIL TCR ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
            WHERE
              --TTJ.TUNJANGAN_TYPE IN ('HHR','OBAT','PPH_21')
              TTJ.TUNJANGAN_TYPE IN ('HHR','PPH_21')
              AND EXTRACT(YEAR FROM TTJ.PERIOD_BUDGET) = '".$period_budget."'
              AND TTJ.BA_CODE = '".$ba_code."'
          )
        GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
      ) COST ON COST.BA_CODE = HS.BA_CODE AND COST.PERIOD_BUDGET= HS.PERIOD_BUDGET
    ) H
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, MATURITY_STAGE, TUNJANGAN_TYPE
  ";

  // PENGANGKUTAN INTERNAL TBS - VRA
  $components['pengangkutan_internal_tbs_vra'] = "
    INSERT INTO TMP_RPT_EST_COST (
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      TIPE_TRANSAKSI,
      COST_ELEMENT,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      UOM,
      QTY_JAN,  QTY_FEB,  QTY_MAR,  QTY_APR,  QTY_MAY,  QTY_JUN,  QTY_JUL,  QTY_AUG,  QTY_SEP,  QTY_OCT,  QTY_NOV,  QTY_DEC,
      COST_JAN,  COST_FEB,  COST_MAR,  COST_APR,  COST_MAY,  COST_JUN,  COST_JUL,  COST_AUG,  COST_SEP,  COST_OCT,  COST_NOV,  COST_DEC,
      QTY_SETAHUN, COST_SETAHUN,
      INSERT_USER, INSERT_TIME
    )
    SELECT 
    PERIOD_BUDGET, 
    REGION_CODE, 
    BA_CODE, 
    'TM' TIPE_TRANSAKSI, 
    '' COST_ELEMENT,
    '5101030504-1' ACTIVITY_CODE, 
    'PENGANGKUTAN INTERNAL TBS - VRA' ACTIVITY_DESC, 
    '' UOM,
    0 QTY_JAN,
    0 QTY_FEB,
    0 QTY_MAR,
    0 QTY_APR,
    0 QTY_MAY,
    0 QTY_JUN,
    0 QTY_JUL,
    0 QTY_AUG,
    0 QTY_SEP,
    0 QTY_OCT,
    0 QTY_NOV,
    0 QTY_DEC,
    SUM(COST_JAN) COST_JAN, 
    SUM(COST_FEB) COST_FEB, 
    SUM(COST_MAR) COST_MAR, 
    SUM(COST_APR) COST_APR, 
    SUM(COST_MAY) COST_MAY, 
    SUM(COST_JUN) COST_JUN,
    SUM(COST_JUL) COST_JUL, 
    SUM(COST_AUG) COST_AUG, 
    SUM(COST_SEP) COST_SEP, 
    SUM(COST_OCT) COST_OCT, 
    SUM(COST_NOV) COST_NOV, 
    SUM(COST_DEC) COST_DEC,
    0 QTY_SETAHUN,
    SUM(COST_JAN) + SUM(COST_FEB) + SUM(COST_MAR) + SUM(COST_APR) + SUM(COST_MAY) + SUM(COST_JUN) + SUM(COST_JUL) + SUM(COST_AUG) + 
    SUM(COST_SEP) + SUM(COST_OCT) + SUM(COST_NOV) + SUM(COST_DEC) COST_SETAHUN,
    '".$this->_userName."' AS INSERT_USER,
    SYSDATE AS INSERT_TIME
    FROM (
      SELECT 
        PERIOD_BUDGET, 
        REGION_CODE,
        BA_CODE, 
        AFD_CODE,
        BLOCK_CODE,
        VRA_CODE,
        VRA_SUB_CAT_DESCRIPTION,
        UOM,
        JAN/DIS_AFD*PRICE_HM_KM COST_JAN,
        FEB/DIS_AFD*PRICE_HM_KM COST_FEB,
        MAR/DIS_AFD*PRICE_HM_KM COST_MAR,
        APR/DIS_AFD*PRICE_HM_KM COST_APR,
        MAY/DIS_AFD*PRICE_HM_KM COST_MAY,
        JUN/DIS_AFD*PRICE_HM_KM COST_JUN,
        JUL/DIS_AFD*PRICE_HM_KM COST_JUL,
        AUG/DIS_AFD*PRICE_HM_KM COST_AUG,
        SEP/DIS_AFD*PRICE_HM_KM COST_SEP,
        OCT/DIS_AFD*PRICE_HM_KM COST_OCT,
        NOV/DIS_AFD*PRICE_HM_KM COST_NOV,
        DEC/DIS_AFD*PRICE_HM_KM COST_DEC,
        (JAN/DIS_AFD*PRICE_HM_KM)+(FEB/DIS_AFD*PRICE_HM_KM)+
        (MAR/DIS_AFD*PRICE_HM_KM)+(APR/DIS_AFD*PRICE_HM_KM)+
        (MAY/DIS_AFD*PRICE_HM_KM)+(JUN/DIS_AFD*PRICE_HM_KM)+
        (JUL/DIS_AFD*PRICE_HM_KM)+(AUG/DIS_AFD*PRICE_HM_KM)+
        (SEP/DIS_AFD*PRICE_HM_KM)+(OCT/DIS_AFD*PRICE_HM_KM)+
        (NOV/DIS_AFD*PRICE_HM_KM)+(DEC/DIS_AFD*PRICE_HM_KM)
    FROM (
        SELECT 
            ORG.REGION_CODE,
            VRAD.ACTIVITY_CODE, 
            VRAD.HM_KM, 
            VRAD.PRICE_HM_KM, 
            VRAD.VRA_CODE,
            TV.VRA_SUB_CAT_DESCRIPTION,
            TV.UOM,
            SEBARAN.*,
            SUM(SEBARAN.TOTAL) OVER(PARTITION BY SEBARAN.PERIOD_BUDGET, SEBARAN.BA_CODE, SEBARAN.AFD_CODE) DIS_AFD
        FROM (
          SELECT
            norma.PERIOD_BUDGET PERIOD_BUDGET,
            norma.BA_CODE BA_CODE,
            norma.AFD_CODE AFD_CODE,
            norma.BLOCK_CODE BLOCK_CODE,
            SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
            SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
            SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
            SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
            SUM( 
              norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
              norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
            ) total
          FROM TR_PRODUKSI_PERIODE_BUDGET norma
          LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
            AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
            AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
          WHERE norma.DELETE_USER IS NULL 
          AND extract(YEAR FROM norma.PERIOD_BUDGET) = '".$period_budget."'
          AND norma.ba_code = '".$ba_code."'
          GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
        ) SEBARAN
        JOIN TR_RKT_VRA_DISTRIBUSI VRAD ON VRAD.BA_CODE = SEBARAN.BA_CODE AND VRAD.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
          AND VRAD.LOCATION_CODE = SEBARAN.AFD_CODE
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = SEBARAN.BA_CODE
            LEFT JOIN TM_VRA TV 
            ON TV.VRA_CODE = VRAD.VRA_CODE
        WHERE VRAD.ACTIVITY_CODE = '5101030504'
      )
    ) 
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE
    ";


  $i = 50;
  foreach ($components as $key => $sql_string) {
    //echo $sql_string; echo '<br /><br />';
    $this->_db->query($sql_string);
    $this->_db->commit();
    /*if ($this->_db->commit()) {
      echo $i . ' - components - ' . $key . ' - ' . $sql_string;
    }
    $i++;*/
  }

  $cmp['transport_tbs_internal_panen'] = "
    INSERT INTO TMP_RPT_EST_COST_AFD (
      PERIOD_BUDGET, 
      REGION_CODE, 
      BA_CODE, 
      AFD_CODE, 
      TIPE_TRANSAKSI, 
      ACTIVITY_CODE, 
      ACTIVITY_DESC, 
      COST_ELEMENT, 
      KETERANGAN,
      UOM, 
      QTY_JAN, 
      QTY_FEB, 
      QTY_MAR, 
      QTY_APR, 
      QTY_MAY, 
      QTY_JUN, 
      QTY_JUL, 
      QTY_AUG, 
      QTY_SEP, 
      QTY_OCT, 
      QTY_NOV, 
      QTY_DEC, 
      QTY_SMS1, 
      QTY_SMS2, 
      QTY_SETAHUN, 
      COST_JAN, 
      COST_FEB, 
      COST_MAR, 
      COST_APR, 
      COST_MAY, 
      COST_JUN, 
      COST_JUL, 
      COST_AUG, 
      COST_SEP, 
      COST_OCT, 
      COST_NOV, 
      COST_DEC, 
      COST_SMS1, 
      COST_SMS2, 
      COST_SETAHUN, 
      RP_ROTASI_SMS1, 
      RP_ROTASI_SMS2, 
      RP_ROTASI_TOTAL,
      INSERT_USER, 
      INSERT_TIME
    )
    SELECT
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      AFD_CODE,
      'TM' TIPE_TRANSAKSI,
      '5101030504-2' ACTIVITY_CODE,
      'TRANSPORT TBS INTERNAL - PANEN' ACTIVITY_DESC,
      '' COST_ELEMENT,
      '' KETERANGAN,
      '' UOM,
      SUM(QTY_JAN) QTY_JAN, 
      SUM(QTY_FEB) QTY_FEB, 
      SUM(QTY_MAR) QTY_MAR, 
      SUM(QTY_APR) QTY_APR, 
      SUM(QTY_MAY) QTY_MAY, 
      SUM(QTY_JUN) QTY_JUN, 
      SUM(QTY_JUL) QTY_JUL, 
      SUM(QTY_AUG) QTY_AUG, 
      SUM(QTY_SEP) QTY_SEP, 
      SUM(QTY_OCT) QTY_OCT, 
      SUM(QTY_NOV) QTY_NOV, 
      SUM(QTY_DEC) QTY_DEC, 
      SUM(QTY_JAN) + SUM(QTY_FEB) + SUM(QTY_MAR) + SUM(QTY_APR) + SUM(QTY_MAY) + SUM(QTY_JUN) QTY_SMS1,
      SUM(QTY_JUL) + SUM(QTY_AUG) + SUM(QTY_SEP) + SUM(QTY_OCT) + SUM(QTY_NOV) + SUM(QTY_DEC) QTY_SMS2, 
      SUM(QTY_JAN) + SUM(QTY_FEB) + SUM(QTY_MAR) + SUM(QTY_APR) + SUM(QTY_MAY) + SUM(QTY_JUN) +
      SUM(QTY_JUL) + SUM(QTY_AUG) + SUM(QTY_SEP) + SUM(QTY_OCT) + SUM(QTY_NOV) + SUM(QTY_DEC) QTY_SETAHUN, 
      SUM(COST_JAN) COST_JAN,
      SUM(COST_FEB) COST_FEB,
      SUM(COST_MAR) COST_MAR,
      SUM(COST_APR) COST_APR,
      SUM(COST_MAY) COST_MAY,
      SUM(COST_JUN) COST_JUN,
      SUM(COST_JUL) COST_JUL,
      SUM(COST_AUG) COST_AUG,
      SUM(COST_SEP) COST_SEP,
      SUM(COST_OCT) COST_OCT,
      SUM(COST_NOV) COST_NOV,
      SUM(COST_DEC) COST_DEC,
      SUM(COST_JAN) + SUM(COST_FEB) + SUM(COST_MAR) + SUM(COST_APR) + SUM(COST_MAY) + SUM(COST_JUN) COST_SMS1,
      SUM(COST_JUL) + SUM(COST_AUG) + SUM(COST_SEP) + SUM(COST_OCT) + SUM(COST_NOV) + SUM(COST_DEC) COST_SMS2, 
      SUM(COST_JAN) + SUM(COST_FEB) + SUM(COST_MAR) + SUM(COST_APR) + SUM(COST_MAY) + SUM(COST_JUN) +
      SUM(COST_JUL) + SUM(COST_AUG) + SUM(COST_SEP) + SUM(COST_OCT) + SUM(COST_NOV) + SUM(COST_DEC) COST_SETAHUN, 
      0 RP_ROTASI_SMS1,
      0 RP_ROTASI_SMS2,
      0 RP_ROTASI_TOTAL,
      '".$this->_userName."' INSERT_USER,
      SYSDATE INSERT_TIME
    FROM (
      SELECT
        RKT.PERIOD_BUDGET,
        ORG.REGION_CODE,
        RKT.BA_CODE,RKT.AFD_CODE,
        'TM' AS TIPE_TRANSAKSI,
        '5101030504-2' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
        'TRANSPORT TBS INTERNAL - PANEN' AS ACTIVITY_DESC,
        '' COST_ELEMENT,
        '' KETERANGAN,
        '' UOM,
        0 QTY_JAN,0 QTY_FEB,0 QTY_MAR,0 QTY_APR,0 QTY_MAY,0 QTY_JUN,
        0 QTY_JUL,0 QTY_AUG,0 QTY_SEP,0 QTY_OCT,0 QTY_NOV,0 QTY_DEC,
        (SEBARAN.JAN / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JAN,
        (SEBARAN.FEB / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_FEB,
        (SEBARAN.MAR / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAR,
        (SEBARAN.APR / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_APR,
        (SEBARAN.MAY / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAY,
        (SEBARAN.JUN / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUN,
        (SEBARAN.JUL / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUL,
        (SEBARAN.AUG / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_AUG,
        (SEBARAN.SEP / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_SEP,
        (SEBARAN.OCT / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_OCT,
        (SEBARAN.NOV / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_NOV,
        (SEBARAN.DEC / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_DEC,
        0 QTY_SETAHUN,
        (SEBARAN.JAN / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.FEB / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+
        (SEBARAN.MAR / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.APR / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+
        (SEBARAN.MAY / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.JUN / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+
        (SEBARAN.JUL / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.AUG / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+
        (SEBARAN.SEP / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.OCT / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+
        (SEBARAN.NOV / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT)+(SEBARAN.DEC / SEBARAN.TOTAL * RKT.ANGKUT_TBS_RP_ANGKUT) COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER, SYSDATE AS INSERT_TIME
      FROM TR_RKT_PANEN RKT
      LEFT JOIN (              
        SELECT
          RKT.PERIOD_BUDGET,
          RKT.BA_CODE,
          SUM(RKT.JAN) JAN, SUM(RKT.FEB) FEB, SUM(RKT.MAR) MAR,
          SUM(RKT.APR) APR, SUM(RKT.MAY) MAY, SUM(RKT.JUN) JUN,
          SUM(RKT.JUL) JUL, SUM(RKT.AUG) AUG, SUM(RKT.SEP) SEP,
          SUM(RKT.OCT) OCT, SUM(RKT.NOV) NOV, SUM(RKT.DEC) DEC,
          (
            SUM(RKT.JAN)+SUM(RKT.FEB)+SUM(RKT.MAR)+SUM(RKT.APR)+SUM(RKT.MAY)+SUM(RKT.JUN)+
            SUM(RKT.JUL)+SUM(RKT.AUG)+SUM(RKT.SEP)+SUM(RKT.OCT)+SUM(RKT.NOV)+SUM (RKT.DEC) 
          ) TOTAL
        FROM TR_PRODUKSI_PERIODE_BUDGET RKT
        LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
        LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRADIS ON VRADIS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND VRADIS.BA_CODE = RKT.BA_CODE AND VRADIS.LOCATION_CODE = RKT.AFD_CODE
          AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA' AND VRADIS.ACTIVITY_CODE = '5101030504'
        WHERE RKT.DELETE_USER IS NULL
          $where            
        GROUP BY RKT.PERIOD_BUDGET, RKT.BA_CODE
      ) SEBARAN ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET AND RKT.BA_CODE = SEBARAN.BA_CODE
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = RKT.BA_CODE
      WHERE RKT.DELETE_USER IS NULL
        AND RKT.FLAG_TEMP IS NULL
        AND RKT.SUMBER_BIAYA_UNIT = 'INTERNAL'
        $where
      ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE
  ";

  $cmp['pengangkutan_internal_tbs_vra'] = "
    INSERT INTO TMP_RPT_EST_COST_AFD (
      PERIOD_BUDGET, 
      REGION_CODE, 
      BA_CODE, 
      AFD_CODE, 
      TIPE_TRANSAKSI, 
      ACTIVITY_CODE, 
      ACTIVITY_DESC, 
      COST_ELEMENT, 
      KETERANGAN,
      UOM, 
      QTY_JAN, 
      QTY_FEB, 
      QTY_MAR, 
      QTY_APR, 
      QTY_MAY, 
      QTY_JUN, 
      QTY_JUL, 
      QTY_AUG, 
      QTY_SEP, 
      QTY_OCT, 
      QTY_NOV, 
      QTY_DEC, 
      QTY_SMS1, 
      QTY_SMS2, 
      QTY_SETAHUN, 
      COST_JAN, 
      COST_FEB, 
      COST_MAR, 
      COST_APR, 
      COST_MAY, 
      COST_JUN, 
      COST_JUL, 
      COST_AUG, 
      COST_SEP, 
      COST_OCT, 
      COST_NOV, 
      COST_DEC, 
      COST_SMS1, 
      COST_SMS2, 
      COST_SETAHUN, 
      RP_ROTASI_SMS1, 
      RP_ROTASI_SMS2, 
      RP_ROTASI_TOTAL,
      INSERT_USER, 
      INSERT_TIME
    )
    SELECT 
      PERIOD_BUDGET, 
      REGION_CODE, 
      BA_CODE, 
      AFD_CODE,
      'TM' TIPE_TRANSAKSI, 
      '5101030504-1' ACTIVITY_CODE, 
      'PENGANGKUTAN INTERNAL TBS - VRA' ACTIVITY_DESC, 
      '' COST_ELEMENT,
      '' KETERANGAN,
      '' UOM,
      SUM(QTY_JAN) QTY_JAN,
      SUM(QTY_FEB) QTY_FEB,
      SUM(QTY_MAR) QTY_MAR,
      SUM(QTY_APR) QTY_APR,
      SUM(QTY_MAY) QTY_MAY,
      SUM(QTY_JUN) QTY_JUN,
      SUM(QTY_JUL) QTY_JUL,
      SUM(QTY_AUG) QTY_AUG,
      SUM(QTY_SEP) QTY_SEP,
      SUM(QTY_OCT) QTY_OCT,
      SUM(QTY_NOV) QTY_NOV,
      SUM(QTY_DEC) QTY_DEC,
      SUM(QTY_JAN) + SUM(QTY_FEB) + SUM(QTY_MAR) + SUM(QTY_APR) + SUM(QTY_MAY) + SUM(QTY_JUN) QTY_SMS1,
      SUM(QTY_JUL) + SUM(QTY_AUG) + SUM(QTY_SEP) + SUM(QTY_OCT) + SUM(QTY_NOV) + SUM(QTY_DEC) QTY_SMS2, 
      SUM(QTY_JAN) + SUM(QTY_FEB) + SUM(QTY_MAR) + SUM(QTY_APR) + SUM(QTY_MAY) + SUM(QTY_JUN) +
      SUM(QTY_JUL) + SUM(QTY_AUG) + SUM(QTY_SEP) + SUM(QTY_OCT) + SUM(QTY_NOV) + SUM(QTY_DEC) QTY_SETAHUN, 
      SUM(COST_JAN) COST_JAN, 
      SUM(COST_FEB) COST_FEB, 
      SUM(COST_MAR) COST_MAR, 
      SUM(COST_APR) COST_APR, 
      SUM(COST_MAY) COST_MAY, 
      SUM(COST_JUN) COST_JUN,
      SUM(COST_JUL) COST_JUL, 
      SUM(COST_AUG) COST_AUG, 
      SUM(COST_SEP) COST_SEP, 
      SUM(COST_OCT) COST_OCT, 
      SUM(COST_NOV) COST_NOV, 
      SUM(COST_DEC) COST_DEC,
      SUM(COST_JAN) + SUM(COST_FEB) + SUM(COST_MAR) + SUM(COST_APR) + SUM(COST_MAY) + SUM(COST_JUN) COST_SMS1,
      SUM(COST_JUL) + SUM(COST_AUG) + SUM(COST_SEP) + SUM(COST_OCT) + SUM(COST_NOV) + SUM(COST_DEC) COST_SMS2,
      SUM(COST_JAN) + SUM(COST_FEB) + SUM(COST_MAR) + SUM(COST_APR) + SUM(COST_MAY) + SUM(COST_JUN) + 
      SUM(COST_JUL) + SUM(COST_AUG) + SUM(COST_SEP) + SUM(COST_OCT) + SUM(COST_NOV) + SUM(COST_DEC) COST_SETAHUN,
      0 RP_ROTASI_SMS1,
      0 RP_ROTASI_SMS2,
      0 RP_ROTASI_TOTAL,
      '".$this->_userName."' INSERT_USER,
      SYSDATE INSERT_TIME
    FROM (
      SELECT
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        AFD_CODE,
        'TM' TIPE_TRANSAKSI, 
        '5101030504-1' ACTIVITY_CODE, 
        'PENGANGKUTAN INTERNAL TBS - VRA' ACTIVITY_DESC, 
        '' COST_ELEMENT,
        '' KETERANGAN,
        '' UOM,
        0 QTY_JAN,
        0 QTY_FEB,
        0 QTY_MAR,
        0 QTY_APR,
        0 QTY_MAY,
        0 QTY_JUN,
        0 QTY_JUL,
        0 QTY_AUG,
        0 QTY_SEP,
        0 QTY_OCT,
        0 QTY_NOV,
        0 QTY_DEC,
        SUM(COST_JAN) COST_JAN, 
        SUM(COST_FEB) COST_FEB, 
        SUM(COST_MAR) COST_MAR, 
        SUM(COST_APR) COST_APR, 
        SUM(COST_MAY) COST_MAY, 
        SUM(COST_JUN) COST_JUN,
        SUM(COST_JUL) COST_JUL, 
        SUM(COST_AUG) COST_AUG, 
        SUM(COST_SEP) COST_SEP, 
        SUM(COST_OCT) COST_OCT, 
        SUM(COST_NOV) COST_NOV, 
        SUM(COST_DEC) COST_DEC,
        0 RP_ROTASI_SMS1,
        0 RP_ROTASI_SMS2
      FROM (
        SELECT
          PERIOD_BUDGET, 
          REGION_CODE,
          BA_CODE, 
          AFD_CODE,
          BLOCK_CODE,
          VRA_CODE,
          VRA_SUB_CAT_DESCRIPTION,
          UOM,
          JAN/DIS_AFD*PRICE_HM_KM COST_JAN,
          FEB/DIS_AFD*PRICE_HM_KM COST_FEB,
          MAR/DIS_AFD*PRICE_HM_KM COST_MAR,
          APR/DIS_AFD*PRICE_HM_KM COST_APR,
          MAY/DIS_AFD*PRICE_HM_KM COST_MAY,
          JUN/DIS_AFD*PRICE_HM_KM COST_JUN,
          JUL/DIS_AFD*PRICE_HM_KM COST_JUL,
          AUG/DIS_AFD*PRICE_HM_KM COST_AUG,
          SEP/DIS_AFD*PRICE_HM_KM COST_SEP,
          OCT/DIS_AFD*PRICE_HM_KM COST_OCT,
          NOV/DIS_AFD*PRICE_HM_KM COST_NOV,
          DEC/DIS_AFD*PRICE_HM_KM COST_DEC,
          (JAN/DIS_AFD*PRICE_HM_KM)+(FEB/DIS_AFD*PRICE_HM_KM)+
          (MAR/DIS_AFD*PRICE_HM_KM)+(APR/DIS_AFD*PRICE_HM_KM)+
          (MAY/DIS_AFD*PRICE_HM_KM)+(JUN/DIS_AFD*PRICE_HM_KM)+
          (JUL/DIS_AFD*PRICE_HM_KM)+(AUG/DIS_AFD*PRICE_HM_KM)+
          (SEP/DIS_AFD*PRICE_HM_KM)+(OCT/DIS_AFD*PRICE_HM_KM)+
          (NOV/DIS_AFD*PRICE_HM_KM)+(DEC/DIS_AFD*PRICE_HM_KM)
        FROM (
          SELECT 
            ORG.REGION_CODE,
            VRAD.ACTIVITY_CODE, 
            VRAD.HM_KM, 
            VRAD.PRICE_HM_KM, 
            VRAD.VRA_CODE,
            TV.VRA_SUB_CAT_DESCRIPTION,
            TV.UOM,
            SEBARAN.*,
            SUM(SEBARAN.TOTAL) OVER(PARTITION BY SEBARAN.PERIOD_BUDGET, SEBARAN.BA_CODE, SEBARAN.AFD_CODE) DIS_AFD
          FROM (
            SELECT
              norma.PERIOD_BUDGET PERIOD_BUDGET,
              norma.BA_CODE BA_CODE,
              norma.AFD_CODE AFD_CODE,
              norma.BLOCK_CODE BLOCK_CODE,
              SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
              SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
              SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
              SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
              SUM( 
                norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
                norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
              ) total
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            WHERE norma.DELETE_USER IS NULL 
              AND extract(YEAR FROM norma.PERIOD_BUDGET) = '".$period_budget."'
              AND norma.ba_code = '".$ba_code."'
            GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
          ) SEBARAN
          JOIN TR_RKT_VRA_DISTRIBUSI VRAD ON VRAD.BA_CODE = SEBARAN.BA_CODE AND VRAD.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
            AND VRAD.LOCATION_CODE = SEBARAN.AFD_CODE
          JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = SEBARAN.BA_CODE
          LEFT JOIN TM_VRA TV ON TV.VRA_CODE = VRAD.VRA_CODE
            WHERE VRAD.ACTIVITY_CODE = '5101030504'
        )
      ) 
      GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE
      ORDER BY AFD_CODE
    ) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE
  ";

  $ii = 60;
  foreach ($cmp as $key => $val_string) {
    $this->_db->query($val_string);
    $this->_db->commit();
    //if ($this->_db->commit()) {
      //echo $i . ' - components - ' . $key . ' - ' . $val_string;
    //}
    $ii++;
  }

    //generate estate cost per AFD
  //echo 'abcde';
    $query = "
      INSERT INTO TMP_RPT_EST_COST_AFD (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE, 
        AFD_CODE, 
        TIPE_TRANSAKSI, 
        ACTIVITY_CODE, 
        ACTIVITY_DESC, 
        COST_ELEMENT, 
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC, 
        QTY_SMS1, 
        QTY_SMS2, 
        QTY_SETAHUN, 
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC, 
        COST_SMS1, 
        COST_SMS2, 
        COST_SETAHUN, 
        RP_ROTASI_SMS1, 
        RP_ROTASI_SMS2, 
        RP_ROTASI_TOTAL,
        INSERT_USER, 
        INSERT_TIME
      )
      SELECT  PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          TIPE_TRANSAKSI,
          ACTIVITY_CODE,
          ACTIVITY_DESC,
          COST_ELEMENT,
          KETERANGAN,
          UOM,
          SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
          SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
          SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
          SUM (NVL (QTY_APR, 0)) AS QTY_APR,
          SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
          SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
          SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
          SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
          SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
          SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
          SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
          SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
          CASE
            WHEN ACTIVITY_CODE = 'HA_TM'
            THEN SUM (QTY_JAN)
            ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0)))
          END AS QTY_SMS1,
          CASE
            WHEN ACTIVITY_CODE = 'HA_TM'
            THEN SUM (QTY_JUL)
            ELSE (SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
          END AS QTY_SMS2,
          CASE
            WHEN ACTIVITY_CODE = 'HA_TM'
            THEN 0
            ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
                + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
          END AS QTY_SETAHUN,
          SUM (NVL (COST_JAN, 0)) COST_JAN,
          SUM (NVL (COST_FEB, 0)) COST_FEB,
          SUM (NVL (COST_MAR, 0)) COST_MAR,
          SUM (NVL (COST_APR, 0)) COST_APR,
          SUM (NVL (COST_MAY, 0)) COST_MAY,
          SUM (NVL (COST_JUN, 0)) COST_JUN,
          SUM (NVL (COST_JUL, 0)) COST_JUL,
          SUM (NVL (COST_AUG, 0)) COST_AUG,
          SUM (NVL (COST_SEP, 0)) COST_SEP,
          SUM (NVL (COST_OCT, 0)) COST_OCT,
          SUM (NVL (COST_NOV, 0)) COST_NOV,
          SUM (NVL (COST_DEC, 0)) COST_DEC,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
          (SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
          (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
           + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
          SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
          SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
          CASE
            WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
            THEN SUM (NVL (RP_ROTASI_SMS1, 0))
            ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
          END AS RP_ROTASI_TOTAL,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
      FROM (
        -- HECTARE TANAM TM - SMS 1
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            'HA_TM' ACTIVITY_CODE,
            'HEKTAR TM' AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            'HA' AS UOM,
            RKT.HA_PLANTED AS QTY_JAN,
            RKT.HA_PLANTED AS QTY_FEB,
            RKT.HA_PLANTED AS QTY_MAR,
            RKT.HA_PLANTED AS QTY_APR,
            RKT.HA_PLANTED AS QTY_MAY,
            RKT.HA_PLANTED AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TM_HECTARE_STATEMENT RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL 
          AND RKT.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS1 = 'TM'
          $where
        UNION ALL 
        -- HECTARE TANAM TM - SMS 2
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            'HA_TM' ACTIVITY_CODE,
            'HEKTAR TM' AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            'HA' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.HA_PLANTED AS QTY_JUL,
            RKT.HA_PLANTED AS QTY_AUG,
            RKT.HA_PLANTED AS QTY_SEP,
            RKT.HA_PLANTED AS QTY_OCT,
            RKT.HA_PLANTED AS QTY_NOV,
            RKT.HA_PLANTED AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TM_HECTARE_STATEMENT RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL  
          AND RKT.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 = 'TM'
          $where
        UNION ALL
        -- PRODUKSI TBS 
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' TIPE_TRANSAKSI,
            'PRODUKSI_TBS' ACTIVITY_CODE,
            'PRODUKSI TBS' ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            'TON' UOM,
            RKT.JAN QTY_JAN,
            RKT.FEB QTY_FEB,
            RKT.MAR QTY_MAR,
            RKT.APR QTY_APR,
            RKT.MAY QTY_MAY,
            RKT.JUN QTY_JUN,
            RKT.JUL QTY_JUL,
            RKT.AUG QTY_AUG,
            RKT.SEP QTY_SEP,
            RKT.OCT QTY_OCT,
            RKT.NOV QTY_NOV,
            RKT.DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_PRODUKSI_PERIODE_BUDGET RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          $where          
        UNION ALL 
        -- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 1 TM
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN AS QTY_JAN,
            RKT.PLAN_FEB AS QTY_FEB,
            RKT.PLAN_MAR AS QTY_MAR,
            RKT.PLAN_APR AS QTY_APR,
            RKT.PLAN_MAY AS QTY_MAY,
            RKT.PLAN_JUN AS QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN AS COST_JAN,
            RKT.DIS_FEB AS COST_FEB,
            RKT.DIS_MAR AS COST_MAR,
            RKT.DIS_APR AS COST_APR,
            RKT.DIS_MAY AS COST_MAY,
            RKT.DIS_JUN AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.RP_ROTASI_SMS1 AS RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI', 'MANUAL_SISIP')
          AND RKT.MATURITY_STAGE_SMS1 = 'TM'
          AND RKT.ACTIVITY_CODE <> '51110'
          $where
        UNION ALL 
        -- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 2 TM
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL AS QTY_JUL,
            RKT.PLAN_AUG AS QTY_AUG,
            RKT.PLAN_SEP AS QTY_SEP,
            RKT.PLAN_OCT AS QTY_OCT,
            RKT.PLAN_NOV AS QTY_NOV,
            RKT.PLAN_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL AS COST_JUL,
            RKT.DIS_AUG AS COST_AUG,
            RKT.DIS_SEP AS COST_SEP,
            RKT.DIS_OCT AS COST_OCT,
            RKT.DIS_NOV AS COST_NOV,
            RKT.DIS_DEC AS COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.RP_ROTASI_SMS2 AS RP_ROTASI_SMS2
        FROM TR_RKT_COST_ELEMENT RKT
        LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI', 'MANUAL_SISIP')
          AND RKT.MATURITY_STAGE_SMS2 = 'TM'
          AND RKT.ACTIVITY_CODE <> '51110'
          $where
        UNION ALL
        -- TRANSPORT AJK PEMANEN NBU 17.09.2015
        SELECT ANGKUT.PERIOD_BUDGET,
         ANGKUT.REGION_CODE,
         ANGKUT.BA_CODE,
         ANGKUT.AFD_CODE,
         'TM' AS TIPE_TRANSAKSI,
         ANGKUT.ACTIVITY_CODE AS ACTIVITY_CODE,
         TA.DESCRIPTION AS ACTIVITY_DETAIL,
         'TRANSPORT' AS COST_ELEMENT,
         '' KETERANGAN,
         '' AS UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         (SEBARAN.JAN * ANGKUT.TOTAL) COST_JAN,
         (SEBARAN.FEB * ANGKUT.TOTAL) COST_FEB,
         (SEBARAN.MAR * ANGKUT.TOTAL) COST_MAR,
         (SEBARAN.APR * ANGKUT.TOTAL) COST_APR,
         (SEBARAN.MAY * ANGKUT.TOTAL) COST_MAY,
         (SEBARAN.JUN * ANGKUT.TOTAL) COST_JUN,
         (SEBARAN.JUL * ANGKUT.TOTAL) COST_JUL,
         (SEBARAN.AUG * ANGKUT.TOTAL) COST_AUG,
         (SEBARAN.SEP * ANGKUT.TOTAL) COST_SEP,
         (SEBARAN.OCT * ANGKUT.TOTAL) COST_OCT,
         (SEBARAN.NOV * ANGKUT.TOTAL) COST_NOV,
         (SEBARAN.DEC * ANGKUT.TOTAL) COST_DEC,
         0 RP_ROTASI_SMS1,
         0 RP_ROTASI_SMS2
      FROM (SELECT ANGKUT.PERIOD_BUDGET,
             ANGKUT.BA_CODE,
             ANGKUT.AFD_CODE,
             ANGKUT.ACTIVITY_CODE,
             price_hm_km TOTAL,
             ANGKUT.REGION_CODE
          FROM (  SELECT RKT.PERIOD_BUDGET,
                 ORG.REGION_CODE,
                 RKT.BA_CODE,
                 RKT.location_code AFD_CODE,
                 RKT.ACTIVITY_CODE,
                 SUM (hm_km) hm_km,
                 SUM (price_hm_km) price_hm_km
              FROM    TR_RKT_VRA_DISTRIBUSI RKT
                 LEFT JOIN
                  TM_ORGANIZATION ORG
                 ON ORG.BA_CODE = RKT.BA_CODE
               WHERE RKT.ACTIVITY_CODE = '51110'
                 AND RKT.LOCATION_CODE NOT IN
                      ('UMUM', 'BIBITAN', 'BASECAMP', 'LAIN')
                 AND RKT.DELETE_USER IS NULL
                 $where
            GROUP BY RKT.PERIOD_BUDGET,
                 ORG.REGION_CODE,
                 RKT.BA_CODE,
                 RKT.location_code,
                 RKT.ACTIVITY_CODE) ANGKUT) ANGKUT
         LEFT JOIN (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 JAN / TOTAL AS JAN,
                 FEB / TOTAL AS FEB,
                 MAR / TOTAL AS MAR,
                 APR / TOTAL AS APR,
                 MAY / TOTAL AS MAY,
                 JUN / TOTAL AS JUN,
                 JUL / TOTAL AS JUL,
                 AUG / TOTAL AS AUG,
                 SEP / TOTAL AS SEP,
                 OCT / TOTAL AS OCT,
                 NOV / TOTAL AS NOV,
                 DEC / TOTAL AS DEC,
                 TOTAL
              FROM (  SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       MAX (total_BA) total
                    FROM TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                        ON norma.PERIOD_BUDGET =
                          thn_berjalan.PERIOD_BUDGET
                         AND norma.BA_CODE =
                             thn_berjalan.BA_CODE
                         AND norma.AFD_CODE =
                             thn_berjalan.AFD_CODE
                         AND norma.BLOCK_CODE =
                             thn_berjalan.BLOCK_CODE
                       LEFT JOIN (  SELECT PERIOD_BUDGET,
                                 BA_CODE,
                                 AFD_CODE,
                                 SUM( (  JAN
                                   + FEB
                                   + MAR
                                   + APR
                                   + MAY
                                   + JUN
                                   + JUL
                                   + AUG
                                   + SEP
                                   + OCT
                                   + NOV
                                   + DEC))
                                  TOTAL_BA
                              FROM TR_PRODUKSI_PERIODE_BUDGET
                            GROUP BY PERIOD_BUDGET,
                                 BA_CODE,
                                 AFD_CODE) ttl_afd
                        ON ttl_afd.PERIOD_BUDGET =
                          norma.PERIOD_BUDGET
                         AND ttl_afd.BA_CODE = norma.BA_CODE
                         AND ttl_afd.AFD_CODE = norma.AFD_CODE
                   WHERE norma.DELETE_USER IS NULL
                       $where1
                  GROUP BY norma.PERIOD_BUDGET,
                       norma.BA_CODE,
                       norma.AFD_CODE)) SEBARAN
          ON     sebaran.PERIOD_BUDGET = ANGKUT.PERIOD_BUDGET
           AND sebaran.BA_CODE = ANGKUT.BA_CODE
           AND sebaran.AFD_CODE = ANGKUT.AFD_CODE
         LEFT JOIN TM_ACTIVITY TA
          ON TA.ACTIVITY_CODE = ANGKUT.ACTIVITY_CODE
          UNION ALL
        -- BIAYA UMUM + RELATION (SELAIN COA 1212010101, 5101030504) UNTUK TM
        /*SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
            (HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
            (HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (*/
        SELECT
            RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.COA_CODE AS ACTIVITY_CODE,
            RKT.COA_DESC AS ACTIVITY_DESC,
            '' COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            COST_JAN,
            COST_FEB,
            COST_MAR,
            COST_APR,
            COST_MAY,
            COST_JUN,
            COST_JUL,
            COST_AUG,
            COST_SEP,
            COST_OCT,
            COST_NOV,
            COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT  SEBARAN_HA.PERIOD_BUDGET,
              SEBARAN_HA.BA_CODE,
              SEBARAN_HA.AFD_CODE,
              RKT.REPORT_TYPE,
              RKT.COA_CODE,
              RKT.COA_DESC,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
              (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
              (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
          FROM (
              SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
              FROM V_REPORT_SEBARAN_HS SUMHA_AFD
              LEFT JOIN (
                SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
                FROM V_REPORT_SEBARAN_HS
                GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
              ) SUMHA_BA
                ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
                SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
            --SELECT SUMHA_AFD.PERIOD_BUDGET,
            --      SUMHA_AFD.BA_CODE,
            --      SUMHA_AFD.AFD_CODE,
            --      SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
            --      SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
            --      SUMHA_BA.HA_BA_1,
            --      SUMHA_BA.HA_BA_2                                    
            --FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            --LEFT JOIN (
            --  SELECT PERIOD_BUDGET,
            --        BA_CODE,
            --        SUM(TOTAL_HA_SMS1) HA_BA_1,
            --        SUM(TOTAL_HA_SMS2) HA_BA_2
            --  FROM V_REPORT_SEBARAN_HS
            --  GROUP BY PERIOD_BUDGET,
            --        BA_CODE                                        
            --) SUMHA_BA
            --  ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
            --  AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
            --GROUP BY SUMHA_AFD.PERIOD_BUDGET,
            --      SUMHA_AFD.BA_CODE,
            --      SUMHA_AFD.AFD_CODE,
            --      SUMHA_BA.HA_BA_1,
            --      SUMHA_BA.HA_BA_2
          ) SEBARAN_HA
          LEFT JOIN V_TOTAL_RELATION_COST RKT
            ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
            AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        ) RKT
        LEFT JOIN (
          SELECT  HS.PERIOD_BUDGET,
              HS.BA_CODE,
              HS.AFD_CODE,
              HS.SMS1_TM,
              HS.TOTAL_HA_SMS1,
              HS.SMS2_TM,
              HS.TOTAL_HA_SMS2
          FROM V_REPORT_SEBARAN_HS HS
        ) HS
          ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HS.BA_CODE = RKT.BA_CODE
          AND HS.AFD_CODE = RKT.AFD_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.COA_CODE NOT IN ( '1212010101',  '5101030504')
          $where
        UNION ALL 
        -- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS1 = TM
        SELECT  HS.PERIOD_BUDGET,
            HS.REGION_CODE,
            HS.BA_CODE,
            HS.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020400' AS ACTIVITY_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            MATERIAL.MATERIAL_NAME AS  KETERANGAN,
            'KG' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '1' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_JAN,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '2' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_FEB,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '3' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_MAR,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '4' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_APR,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '5' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_MAY,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '6' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT RKT.*, ORG.REGION_CODE
          FROM TM_HECTARE_STATEMENT RKT
          LEFT JOIN TM_ORGANIZATION ORG
            ON ORG.BA_CODE = RKT.BA_CODE
          WHERE RKT.DELETE_USER IS NULL
            AND RKT.FLAG_TEMP IS NULL
            AND RKT.MATURITY_STAGE_SMS1 = 'TM'
            $where
        )HS
        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
          ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
          AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
          AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
          AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
          AND NORMA_PUPUK.DELETE_USER IS NULL
          AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (1, 2, 3, 4, 5, 6) -- SMS1
        LEFT JOIN TM_MATERIAL MATERIAL
          ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
          AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
          AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
          AND MATERIAL.DELETE_USER IS NULL
        WHERE MATERIAL.COA_CODE = '5101020400' -- UNTUK PUPUK  MAJEMUK
        UNION ALL 
        -- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS2 = TM
        SELECT  HS.PERIOD_BUDGET,
            HS.REGION_CODE,
            HS.BA_CODE,
            HS.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020400' AS ACTIVITY_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            MATERIAL.MATERIAL_NAME AS  KETERANGAN,
            'KG' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '7' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_JUL,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '8' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_AUG,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '9' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_SEP,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '10' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_OCT,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '11' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_NOV,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '12' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT RKT.*, ORG.REGION_CODE
          FROM TM_HECTARE_STATEMENT RKT
          LEFT JOIN TM_ORGANIZATION ORG
            ON ORG.BA_CODE = RKT.BA_CODE
          WHERE RKT.DELETE_USER IS NULL
            AND RKT.FLAG_TEMP IS NULL
            AND RKT.MATURITY_STAGE_SMS2 = 'TM'
            $where
        )HS
        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
          ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
          AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
          AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
          AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
          AND NORMA_PUPUK.DELETE_USER IS NULL
          AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (7, 8, 9, 10, 11, 12) -- SMS2
        LEFT JOIN TM_MATERIAL MATERIAL
          ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
          AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
          AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
          AND MATERIAL.DELETE_USER IS NULL
        WHERE MATERIAL.COA_CODE = '5101020400' -- UNTUK PUPUK  MAJEMUK
        UNION ALL 
        -- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS1 = TM
        SELECT  HS.PERIOD_BUDGET,
            HS.REGION_CODE,
            HS.BA_CODE,
            HS.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020300' AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            MATERIAL.MATERIAL_NAME AS  KETERANGAN,
            'KG' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '1' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_JAN,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '2' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_FEB,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '3' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_MAR,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '4' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_APR,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '5' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_MAY,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '6' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT RKT.*, ORG.REGION_CODE
          FROM TM_HECTARE_STATEMENT RKT
          LEFT JOIN TM_ORGANIZATION ORG
            ON ORG.BA_CODE = RKT.BA_CODE
          WHERE RKT.DELETE_USER IS NULL
            AND RKT.FLAG_TEMP IS NULL
            AND RKT.MATURITY_STAGE_SMS1 = 'TM'
            $where
        )HS
        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
          ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
          AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
          AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
          AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
          AND NORMA_PUPUK.DELETE_USER IS NULL
          AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (1, 2, 3, 4, 5, 6) -- SMS1
        LEFT JOIN TM_MATERIAL MATERIAL
          ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
          AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
          AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
          AND MATERIAL.DELETE_USER IS NULL
        WHERE MATERIAL.COA_CODE = '5101020300' -- UNTUK PUPUK  TUNGGAL
        UNION ALL 
        -- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS2 = TM
        SELECT  HS.PERIOD_BUDGET,
            HS.REGION_CODE,
            HS.BA_CODE,
            HS.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020300' AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            MATERIAL.MATERIAL_NAME AS  KETERANGAN,
            'KG' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '7' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_JUL,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '8' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_AUG,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '9' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_SEP,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '10' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_OCT,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '11' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_NOV,
            CASE NORMA_PUPUK.BULAN_PEMUPUKAN
               WHEN '12' THEN NORMA_PUPUK.BIAYA
               ELSE 0
            END AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM (
          SELECT RKT.*, ORG.REGION_CODE
          FROM TM_HECTARE_STATEMENT RKT
          LEFT JOIN TM_ORGANIZATION ORG
            ON ORG.BA_CODE = RKT.BA_CODE
          WHERE RKT.DELETE_USER IS NULL
            AND RKT.FLAG_TEMP IS NULL
            AND RKT.MATURITY_STAGE_SMS2 = 'TM'
            $where
        )HS
        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
          ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
          AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
          AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
          AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
          AND NORMA_PUPUK.DELETE_USER IS NULL
          AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (7, 8, 9, 10, 11, 12) -- SMS2
        LEFT JOIN TM_MATERIAL MATERIAL
          ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
          AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
          AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
          AND MATERIAL.DELETE_USER IS NULL
        WHERE MATERIAL.COA_CODE = '5101020300' -- UNTUK PUPUK  TUNGGAL
        UNION ALL 
        -- QTY KG PUPUK MAJEMUK - TM        
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020400' AS ACTIVITY_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS  KETERANGAN,
            'KG' AS UOM,
            RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
            RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
            RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
            RKT.QTY_MAJEMUK_APR AS QTY_APR,
            RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
            RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
            RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
            RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
            RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
            RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
            RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
            RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.MATURITY_STAGE = 'TM' 
          AND RKT.COA_CODE = '5101020400' -- UNTUK PUPUK MAJEMUK
          $where          
        UNION ALL 
        -- QTY KG PUPUK TUNGGAL - TM
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020300' AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            'MATERIAL' AS COST_ELEMENT,
            RKT.MATERIAL_NAME AS  KETERANGAN,
            'KG' AS UOM,
            RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
            RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
            RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
            RKT.QTY_TUNGGAL_APR AS QTY_APR,
            RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
            RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
            RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
            RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
            RKT.QTY_TUNGGAL_SEP AS QTY_SEP,
            RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
            RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
            RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.MATURITY_STAGE = 'TM' 
          AND RKT.COA_CODE = '5101020300' -- UNTUK PUPUK TUNGGAL
          $where
        UNION ALL 
        -- RKT PUPUK TUNGGAL SELAIN COST ELEMENT MATERIAL & LABOUR
        SELECT  COST.PERIOD_BUDGET,
            COST.REGION_CODE,
            COST.BA_CODE,
            COST.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020300' AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            COST.COST_ELEMENT,
            '' AS  KETERANGAN,
            'KG' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
              ELSE 0
            END AS COST_JAN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
              ELSE 0
            END AS COST_FEB,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
              ELSE 0
            END AS COST_MAR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
              ELSE 0
            END AS COST_APR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
              ELSE 0
            END AS COST_MAY,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
              ELSE 0
            END AS COST_JUN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
              ELSE 0
            END AS COST_JUL,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
              ELSE 0
            END AS COST_AUG,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
              ELSE 0
            END AS COST_SEP,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
              ELSE 0
            END AS COST_OCT,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
              ELSE 0
            END AS COST_NOV,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
              THEN (KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
              ELSE 0
            END AS COST_DEC,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS1,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS2
        FROM (  
          SELECT  PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
          FROM (  
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                0 DIS_COST_JUL,
                0 DIS_COST_AUG,
                0 DIS_COST_SEP,
                0 DIS_COST_OCT,
                0 DIS_COST_NOV,
                0 DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS1 = 'TM'
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS1
            UNION ALL
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2 AS MATURITY_STAGE,
                0 DIS_COST_JAN,
                0 DIS_COST_FEB,
                0 DIS_COST_MAR,
                0 DIS_COST_APR,
                0 DIS_COST_MAY,
                0 DIS_COST_JUN,
                SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS2 = 'TM'
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS2
          )
          GROUP BY PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            COST_ELEMENT,
            MATURITY_STAGE
        ) COST
        LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
          ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
        UNION ALL 
        -- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL & LABOUR
        SELECT  COST.PERIOD_BUDGET,
            COST.REGION_CODE,
            COST.BA_CODE,
            COST.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101020400' AS ACTIVITY_CODE,
            'PUPUK MAJEMUK' AS ACTIVITY_DESC,
            COST.COST_ELEMENT,
            '' AS  KETERANGAN,
            'KG' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
              ELSE 0
            END AS COST_JAN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
              ELSE 0
            END AS COST_FEB,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
              ELSE 0
            END AS COST_MAR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
              ELSE 0
            END AS COST_APR,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
              ELSE 0
            END AS COST_MAY,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
              ELSE 0
            END AS COST_JUN,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
              ELSE 0
            END AS COST_JUL,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
              ELSE 0
            END AS COST_AUG,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
              ELSE 0
            END AS COST_SEP,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
              ELSE 0
            END AS COST_OCT,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
              ELSE 0
            END AS COST_NOV,
            CASE
              WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
              THEN (KG_PUPUK.QTY_MAJEMUK_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
              ELSE 0
            END AS COST_DEC,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS1,
            CASE
              WHEN COST.COST_ELEMENT = 'LABOUR'
              THEN COST.COST_LABOUR_POKOK
              WHEN COST.COST_ELEMENT = 'TOOLS'
              THEN COST.COST_TOOLS_KG
              WHEN COST.COST_ELEMENT = 'TRANSPORT'
              THEN COST.COST_TRANSPORT_KG
              ELSE 0
            END AS RP_ROTASI_SMS2
        FROM (  
          SELECT  PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
          FROM (  
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                0 DIS_COST_JUL,
                0 DIS_COST_AUG,
                0 DIS_COST_SEP,
                0 DIS_COST_OCT,
                0 DIS_COST_NOV,
                0 DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS1 = 'TM'
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS1
            UNION ALL
            SELECT  RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2 AS MATURITY_STAGE,
                0 DIS_COST_JAN,
                0 DIS_COST_FEB,
                0 DIS_COST_MAR,
                0 DIS_COST_APR,
                0 DIS_COST_MAY,
                0 DIS_COST_JUN,
                SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
            FROM TR_RKT_PUPUK_COST_ELEMENT RKT
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
              AND RKT.MATURITY_STAGE_SMS2 = 'TM'
              AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'LABOUR')
              $where
            GROUP BY RKT.PERIOD_BUDGET,
              ORG.REGION_CODE,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.COST_ELEMENT,
              RKT.MATURITY_STAGE_SMS2
          )
          GROUP BY PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            COST_ELEMENT,
            MATURITY_STAGE
        ) COST
        LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
          ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
        UNION ALL
        -- PUPUK TUNGGAL LABOUR
            SELECT PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               AFD_CODE,
               TIPE_TRANSAKSI,
               ACTIVITY_CODE,
               ACTIVITY_DESC,
               COST_ELEMENT,
               '' KETERANGAN,
               UOM,
               SUM (QTY_JAN) QTY_JAN,
               SUM (QTY_FEB) QTY_FEB,
               SUM (QTY_MAR) QTY_MAR,
               SUM (QTY_APR) QTY_APR,
               SUM (QTY_MAY) QTY_MAY,
               SUM (QTY_JUN) QTY_JUN,
               SUM (QTY_JUL) QTY_JUL,
               SUM (QTY_AUG) QTY_AUG,
               SUM (QTY_SEP) QTY_SEP,
               SUM (QTY_OCT) QTY_OCT,
               SUM (QTY_NOV) QTY_NOV,
               SUM (QTY_DEC) QTY_DEC,
               SUM (COST_JAN) COST_JAN,
               SUM (COST_FEB) COST_FEB,
               SUM (COST_MAR) COST_MAR,
               SUM (COST_APR) COST_APR,
               SUM (COST_MAY) COST_MAY,
               SUM (COST_JUN) COST_JUN,
               SUM (COST_JUL) COST_JUL,
               SUM (COST_AUG) COST_AUG,
               SUM (COST_SEP) COST_SEP,
               SUM (COST_OCT) COST_OCT,
               SUM (COST_NOV) COST_NOV,
               SUM (COST_DEC) COST_DEC,
               RP_ROTASI_SMS1,
               RP_ROTASI_SMS2
            FROM (SELECT RKT.PERIOD_BUDGET,
               ORG.REGION_CODE,
               RKT.BA_CODE,
               RKT.AFD_CODE,
               RKT.MATURITY_STAGE TIPE_TRANSAKSI,
               RKT.COA_CODE ACTIVITY_CODE,
               'PUPUK TUNGGAL' AS ACTIVITY_DESC,
               'LABOUR' AS COST_ELEMENT,
               RKT.MATERIAL_NAME AS KETERANGAN,
               'HK' UOM,
               (RKT.QTY_TUNGGAL_JAN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JAN,
               (RKT.QTY_TUNGGAL_FEB * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_FEB,
               (RKT.QTY_TUNGGAL_MAR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAR,
               (RKT.QTY_TUNGGAL_APR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_APR,
               (RKT.QTY_TUNGGAL_MAY * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAY,
               (RKT.QTY_TUNGGAL_JUN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUN,
               (RKT.QTY_TUNGGAL_JUL * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUL,
               (RKT.QTY_TUNGGAL_AUG * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_AUG,
               (RKT.QTY_TUNGGAL_SEP * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_SEP,
               (RKT.QTY_TUNGGAL_OCT * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_OCT,
               (RKT.QTY_TUNGGAL_NOV * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_NOV,
               (RKT.QTY_TUNGGAL_DEC * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_DEC,
               (RKT.QTY_TUNGGAL_JAN * RP_QTY_INTERNAL) AS COST_JAN,
               (RKT.QTY_TUNGGAL_FEB * RP_QTY_INTERNAL) AS COST_FEB,
               (RKT.QTY_TUNGGAL_MAR * RP_QTY_INTERNAL) AS COST_MAR,
               (RKT.QTY_TUNGGAL_APR * RP_QTY_INTERNAL) AS COST_APR,
               (RKT.QTY_TUNGGAL_MAY * RP_QTY_INTERNAL) AS COST_MAY,
               (RKT.QTY_TUNGGAL_JUN * RP_QTY_INTERNAL) AS COST_JUN,
               (RKT.QTY_TUNGGAL_JUL * RP_QTY_INTERNAL) AS COST_JUL,
               (RKT.QTY_TUNGGAL_AUG * RP_QTY_INTERNAL) AS COST_AUG,
               (RKT.QTY_TUNGGAL_SEP * RP_QTY_INTERNAL) AS COST_SEP,
               (RKT.QTY_TUNGGAL_OCT * RP_QTY_INTERNAL) AS COST_OCT,
               (RKT.QTY_TUNGGAL_NOV * RP_QTY_INTERNAL) AS COST_NOV,
               (RKT.QTY_TUNGGAL_DEC * RP_QTY_INTERNAL) AS COST_DEC,
               0 RP_ROTASI_SMS1,
               0 RP_ROTASI_SMS2
            FROM V_PKK_PUPUK_PER_MATERIAL_AFD RKT
               LEFT JOIN TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
               LEFT JOIN TN_INFRASTRUKTUR TNI
                ON TNI.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND TNI.BA_CODE = RKT.BA_CODE
                 AND TNI.ACTIVITY_CODE =
                     CASE UPPER (RKT.FLAG)
                      WHEN 'MAKRO' THEN 43750
                      ELSE 43751
                     END
                 AND TNI.DELETE_USER IS NULL
            LEFT JOIN TR_RKT_CHECKROLL_SUM CHECKROLL
               ON CHECKROLL.PERIOD_BUDGET = TNI.PERIOD_BUDGET
                 AND CHECKROLL.BA_CODE = TNI.BA_CODE
                 AND CHECKROLL.JOB_CODE = TNI.SUB_COST_ELEMENT
            WHERE RKT.MATURITY_STAGE = 'TM'
               AND RKT.COA_CODE = '5101020300'
               $where) TOTAL
          GROUP BY PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               AFD_CODE,
               TIPE_TRANSAKSI,
               ACTIVITY_CODE,
               ACTIVITY_DESC,
               COST_ELEMENT,
               UOM,
               RP_ROTASI_SMS1,
               RP_ROTASI_SMS2
            UNION ALL
            -- PUPUK MAJEMUK LABOUR
              SELECT PERIOD_BUDGET,
                 REGION_CODE,
                 BA_CODE,
                 AFD_CODE,
                 TIPE_TRANSAKSI,
                 ACTIVITY_CODE,
                 ACTIVITY_DESC,
                 COST_ELEMENT,
                 '' KETERANGAN,
                 UOM,
                 SUM (QTY_JAN) QTY_JAN,
                 SUM (QTY_FEB) QTY_FEB,
                 SUM (QTY_MAR) QTY_MAR,
                 SUM (QTY_APR) QTY_APR,
                 SUM (QTY_MAY) QTY_MAY,
                 SUM (QTY_JUN) QTY_JUN,
                 SUM (QTY_JUL) QTY_JUL,
                 SUM (QTY_AUG) QTY_AUG,
                 SUM (QTY_SEP) QTY_SEP,
                 SUM (QTY_OCT) QTY_OCT,
                 SUM (QTY_NOV) QTY_NOV,
                 SUM (QTY_DEC) QTY_DEC,
                 SUM (COST_JAN) COST_JAN,
                 SUM (COST_FEB) COST_FEB,
                 SUM (COST_MAR) COST_MAR,
                 SUM (COST_APR) COST_APR,
                 SUM (COST_MAY) COST_MAY,
                 SUM (COST_JUN) COST_JUN,
                 SUM (COST_JUL) COST_JUL,
                 SUM (COST_AUG) COST_AUG,
                 SUM (COST_SEP) COST_SEP,
                 SUM (COST_OCT) COST_OCT,
                 SUM (COST_NOV) COST_NOV,
                 SUM (COST_DEC) COST_DEC,
                 RP_ROTASI_SMS1,
                 RP_ROTASI_SMS2
              FROM (SELECT RKT.PERIOD_BUDGET,
                 ORG.REGION_CODE,
                 RKT.BA_CODE,
                 RKT.AFD_CODE,
                 RKT.MATURITY_STAGE TIPE_TRANSAKSI,
                 RKT.COA_CODE ACTIVITY_CODE,
                 'PUPUK MAJEMUK' AS ACTIVITY_DESC,
                 'LABOUR' AS COST_ELEMENT,
                 RKT.MATERIAL_NAME AS KETERANGAN,
                 'HK' UOM,
                 (RKT.QTY_MAJEMUK_JAN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JAN,
                 (RKT.QTY_MAJEMUK_FEB * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_FEB,
                 (RKT.QTY_MAJEMUK_MAR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAR,
                 (RKT.QTY_MAJEMUK_APR * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_APR,
                 (RKT.QTY_MAJEMUK_MAY * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_MAY,
                 (RKT.QTY_MAJEMUK_JUN * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUN,
                 (RKT.QTY_MAJEMUK_JUL * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_JUL,
                 (RKT.QTY_MAJEMUK_AUG * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_AUG,
                 (RKT.QTY_MAJEMUK_SEP * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_SEP,
                 (RKT.QTY_MAJEMUK_OCT * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_OCT,
                 (RKT.QTY_MAJEMUK_NOV * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_NOV,
                 (RKT.QTY_MAJEMUK_DEC * RP_QTY_INTERNAL) / nvl(CHECKROLL.RP_HK,1) AS QTY_DEC,
                 (RKT.QTY_MAJEMUK_JAN * RP_QTY_INTERNAL) AS COST_JAN,
                 (RKT.QTY_MAJEMUK_FEB * RP_QTY_INTERNAL) AS COST_FEB,
                 (RKT.QTY_MAJEMUK_MAR * RP_QTY_INTERNAL) AS COST_MAR,
                 (RKT.QTY_MAJEMUK_APR * RP_QTY_INTERNAL) AS COST_APR,
                 (RKT.QTY_MAJEMUK_MAY * RP_QTY_INTERNAL) AS COST_MAY,
                 (RKT.QTY_MAJEMUK_JUN * RP_QTY_INTERNAL) AS COST_JUN,
                 (RKT.QTY_MAJEMUK_JUL * RP_QTY_INTERNAL) AS COST_JUL,
                 (RKT.QTY_MAJEMUK_AUG * RP_QTY_INTERNAL) AS COST_AUG,
                 (RKT.QTY_MAJEMUK_SEP * RP_QTY_INTERNAL) AS COST_SEP,
                 (RKT.QTY_MAJEMUK_OCT * RP_QTY_INTERNAL) AS COST_OCT,
                 (RKT.QTY_MAJEMUK_NOV * RP_QTY_INTERNAL) AS COST_NOV,
                 (RKT.QTY_MAJEMUK_DEC * RP_QTY_INTERNAL) AS COST_DEC,
                 0 RP_ROTASI_SMS1,
                 0 RP_ROTASI_SMS2
              FROM V_PKK_PUPUK_PER_MATERIAL_AFD RKT
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON ORG.BA_CODE = RKT.BA_CODE
                 LEFT JOIN TN_INFRASTRUKTUR TNI
                  ON TNI.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                   AND TNI.BA_CODE = RKT.BA_CODE
                   AND TNI.ACTIVITY_CODE =
                       CASE UPPER (RKT.FLAG)
                        WHEN 'MAKRO' THEN 43750
                        ELSE 43751
                       END
                   AND TNI.DELETE_USER IS NULL
              LEFT JOIN TR_RKT_CHECKROLL_SUM CHECKROLL
                ON CHECKROLL.PERIOD_BUDGET = TNI.PERIOD_BUDGET
                  AND CHECKROLL.BA_CODE = TNI.BA_CODE
                  AND CHECKROLL.JOB_CODE = TNI.SUB_COST_ELEMENT
             WHERE RKT.MATURITY_STAGE = 'TM'
                 AND RKT.COA_CODE = '5101020400'
                 $where) TOTAL
            GROUP BY PERIOD_BUDGET,
                 REGION_CODE,
                 BA_CODE,
                 AFD_CODE,
                 TIPE_TRANSAKSI,
                 ACTIVITY_CODE,
                 ACTIVITY_DESC,
                 COST_ELEMENT,
                 UOM,
                 RP_ROTASI_SMS1,
                 RP_ROTASI_SMS2
        UNION ALL       
        -- PANEN - BIAYA PEMANEN

        -- PANEN - PREMI PANEN JANJANG
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030201' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
            'PREMI PANEN JANJANG' AS ACTIVITY_DETAIL,
            '' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JAN,
            (SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_FEB,
            (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_MAR,
            (SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_APR,
            (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_MAY,
            (SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JUN,
            (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JUL,
            (SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_AUG,
            (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_SEP,
            (SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_OCT,
            (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_NOV,
            (SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE          
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL
          -- PANEN - PREMI PANEN BRD
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030301' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
            'PREMI PANEN BRD' AS ACTIVITY_DETAIL,
            '' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JAN,
            (SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_FEB,
            (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAR,
            (SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_APR,
            (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAY,
            (SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUN,
            (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUL,
            (SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_AUG,
            (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_SEP,
            (SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_OCT,
            (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_NOV,
            (SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE
           LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL 
        -- PANEN - KRANI BUAH
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030701-2' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
            'KRANI BUAH' AS ACTIVITY_DETAIL,
            '' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN * RKT.KRANI_BUAH_TOTAL) AS COST_JAN,
            (SEBARAN.FEB * RKT.KRANI_BUAH_TOTAL) AS COST_FEB,
            (SEBARAN.MAR * RKT.KRANI_BUAH_TOTAL) AS COST_MAR,
            (SEBARAN.APR * RKT.KRANI_BUAH_TOTAL) AS COST_APR,
            (SEBARAN.MAY * RKT.KRANI_BUAH_TOTAL) AS COST_MAY,
            (SEBARAN.JUN * RKT.KRANI_BUAH_TOTAL) AS COST_JUN,
            (SEBARAN.JUL * RKT.KRANI_BUAH_TOTAL) AS COST_JUL,
            (SEBARAN.AUG * RKT.KRANI_BUAH_TOTAL) AS COST_AUG,
            (SEBARAN.SEP * RKT.KRANI_BUAH_TOTAL) AS COST_SEP,
            (SEBARAN.OCT * RKT.KRANI_BUAH_TOTAL) AS COST_OCT,
            (SEBARAN.NOV * RKT.KRANI_BUAH_TOTAL) AS COST_NOV,
            (SEBARAN.DEC * RKT.KRANI_BUAH_TOTAL) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE           
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL 
        -- PANEN - ALAT PANEN
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030103' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
            'ALAT PANEN' AS ACTIVITY_DETAIL,
            '' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JAN,
            (SEBARAN.FEB * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_FEB,
            (SEBARAN.MAR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAR,
            (SEBARAN.APR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_APR,
            (SEBARAN.MAY * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAY,
            (SEBARAN.JUN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUN,
            (SEBARAN.JUL * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUL,
            (SEBARAN.AUG * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_AUG,
            (SEBARAN.SEP * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_SEP,
            (SEBARAN.OCT * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_OCT,
            (SEBARAN.NOV * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_NOV,
            (SEBARAN.DEC * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE           
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL 
        -- PANEN - SUPERVISI PEMANEN
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030701-1' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
            'SUPERVISI PEMANEN' AS ACTIVITY_DETAIL,
            '' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JAN,
            (SEBARAN.FEB * RKT.BIAYA_SPV_RP_TOTAL) AS COST_FEB,
            (SEBARAN.MAR * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAR,
            (SEBARAN.APR * RKT.BIAYA_SPV_RP_TOTAL) AS COST_APR,
            (SEBARAN.MAY * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAY,
            (SEBARAN.JUN * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUN,
            (SEBARAN.JUL * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUL,
            (SEBARAN.AUG * RKT.BIAYA_SPV_RP_TOTAL) AS COST_AUG,
            (SEBARAN.SEP * RKT.BIAYA_SPV_RP_TOTAL) AS COST_SEP,
            (SEBARAN.OCT * RKT.BIAYA_SPV_RP_TOTAL) AS COST_OCT,
            (SEBARAN.NOV * RKT.BIAYA_SPV_RP_TOTAL) AS COST_NOV,
            (SEBARAN.DEC * RKT.BIAYA_SPV_RP_TOTAL) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE           
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL
        -- PENGANGKUTAN INTERVAL TBS - INFRA
        /*SELECT 
    PERIOD_BUDGET, 
    REGION_CODE, 
    BA_CODE, 
    AFD_CODE,
    TIPE_TRANSAKSI, 
    ACTIVITY_CODE, 
    ACTIVITY_DETAIL, 
    COST_ELEMENT,
    KETERANGAN,
    UOM,
    0 QTY_JAN,
    0 QTY_FEB,
    0 QTY_MAR,
    0 QTY_APR,
    0 QTY_MAY,
    0 QTY_JUN,
    0 QTY_JUL,
    0 QTY_AUG,
    0 QTY_SEP,
    0 QTY_OCT,
    0 QTY_NOV,
    0 QTY_DEC,
    COST_JAN, 
    COST_FEB, 
    COST_MAR, 
    COST_APR, 
    COST_MAY, 
    COST_JUN,
    COST_JUL, 
    COST_AUG, 
    COST_SEP, 
    COST_OCT, 
    COST_NOV, 
    COST_DEC,
    RP_ROTASI_SMS1,
    RP_ROTASI_SMS2
    FROM (
        SELECT 
    PERIOD_BUDGET, 
    REGION_CODE, 
    BA_CODE, 
    AFD_CODE,
    'TM' TIPE_TRANSAKSI, 
    '5101030504-1' ACTIVITY_CODE, 
    'PENGANGKUTAN INTERNAL TBS - VRA' ACTIVITY_DETAIL, 
    '' COST_ELEMENT,
    '' KETERANGAN,
    '' UOM,
    0 QTY_JAN,
    0 QTY_FEB,
    0 QTY_MAR,
    0 QTY_APR,
    0 QTY_MAY,
    0 QTY_JUN,
    0 QTY_JUL,
    0 QTY_AUG,
    0 QTY_SEP,
    0 QTY_OCT,
    0 QTY_NOV,
    0 QTY_DEC,
    SUM(COST_JAN) COST_JAN, 
    SUM(COST_FEB) COST_FEB, 
    SUM(COST_MAR) COST_MAR, 
    SUM(COST_APR) COST_APR, 
    SUM(COST_MAY) COST_MAY, 
    SUM(COST_JUN) COST_JUN,
    SUM(COST_JUL) COST_JUL, 
    SUM(COST_AUG) COST_AUG, 
    SUM(COST_SEP) COST_SEP, 
    SUM(COST_OCT) COST_OCT, 
    SUM(COST_NOV) COST_NOV, 
    SUM(COST_DEC) COST_DEC,
    0 RP_ROTASI_SMS1,
    0 RP_ROTASI_SMS2
    FROM (
      SELECT 
        PERIOD_BUDGET, 
        REGION_CODE,
        BA_CODE, 
        AFD_CODE,
        BLOCK_CODE,
        VRA_CODE,
        VRA_SUB_CAT_DESCRIPTION,
        UOM,
        JAN/DIS_AFD*PRICE_HM_KM COST_JAN,
        FEB/DIS_AFD*PRICE_HM_KM COST_FEB,
        MAR/DIS_AFD*PRICE_HM_KM COST_MAR,
        APR/DIS_AFD*PRICE_HM_KM COST_APR,
        MAY/DIS_AFD*PRICE_HM_KM COST_MAY,
        JUN/DIS_AFD*PRICE_HM_KM COST_JUN,
        JUL/DIS_AFD*PRICE_HM_KM COST_JUL,
        AUG/DIS_AFD*PRICE_HM_KM COST_AUG,
        SEP/DIS_AFD*PRICE_HM_KM COST_SEP,
        OCT/DIS_AFD*PRICE_HM_KM COST_OCT,
        NOV/DIS_AFD*PRICE_HM_KM COST_NOV,
        DEC/DIS_AFD*PRICE_HM_KM COST_DEC,
        (JAN/DIS_AFD*PRICE_HM_KM)+(FEB/DIS_AFD*PRICE_HM_KM)+
        (MAR/DIS_AFD*PRICE_HM_KM)+(APR/DIS_AFD*PRICE_HM_KM)+
        (MAY/DIS_AFD*PRICE_HM_KM)+(JUN/DIS_AFD*PRICE_HM_KM)+
        (JUL/DIS_AFD*PRICE_HM_KM)+(AUG/DIS_AFD*PRICE_HM_KM)+
        (SEP/DIS_AFD*PRICE_HM_KM)+(OCT/DIS_AFD*PRICE_HM_KM)+
        (NOV/DIS_AFD*PRICE_HM_KM)+(DEC/DIS_AFD*PRICE_HM_KM)
    FROM (
        SELECT 
            ORG.REGION_CODE,
            VRAD.ACTIVITY_CODE, 
            VRAD.HM_KM, 
            VRAD.PRICE_HM_KM, 
            VRAD.VRA_CODE,
            TV.VRA_SUB_CAT_DESCRIPTION,
            TV.UOM,
            SEBARAN.*,
            SUM(SEBARAN.TOTAL) OVER(PARTITION BY SEBARAN.PERIOD_BUDGET, SEBARAN.BA_CODE, SEBARAN.AFD_CODE) DIS_AFD
        FROM (
          SELECT
            norma.PERIOD_BUDGET PERIOD_BUDGET,
            norma.BA_CODE BA_CODE,
            norma.AFD_CODE AFD_CODE,
            norma.BLOCK_CODE BLOCK_CODE,
            SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
            SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
            SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
            SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
            SUM( 
              norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
              norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
            ) total
          FROM TR_PRODUKSI_PERIODE_BUDGET norma
          LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
            AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
            AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
          WHERE norma.DELETE_USER IS NULL 
          AND extract(YEAR FROM norma.PERIOD_BUDGET) = '".$period_budget."'
          AND norma.ba_code = '".$ba_code."'
          GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
        ) SEBARAN
        JOIN TR_RKT_VRA_DISTRIBUSI VRAD ON VRAD.BA_CODE = SEBARAN.BA_CODE AND VRAD.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
          AND VRAD.LOCATION_CODE = SEBARAN.AFD_CODE
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = SEBARAN.BA_CODE
            LEFT JOIN TM_VRA TV 
            ON TV.VRA_CODE = VRAD.VRA_CODE
        WHERE VRAD.ACTIVITY_CODE = '5101030504'
      )
    ) 
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE
    ORDER BY AFD_CODE)
        UNION ALL */
        -- PANEN - PREMI SUPIR
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030504-3' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
            'PREMI SUPIR' AS ACTIVITY_DETAIL,
            '' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN * RKT.SUPIR_PREMI) AS COST_JAN,
            (SEBARAN.FEB * RKT.SUPIR_PREMI) AS COST_FEB,
            (SEBARAN.MAR * RKT.SUPIR_PREMI) AS COST_MAR,
            (SEBARAN.APR * RKT.SUPIR_PREMI) AS COST_APR,
            (SEBARAN.MAY * RKT.SUPIR_PREMI) AS COST_MAY,
            (SEBARAN.JUN * RKT.SUPIR_PREMI) AS COST_JUN,
            (SEBARAN.JUL * RKT.SUPIR_PREMI) AS COST_JUL,
            (SEBARAN.AUG * RKT.SUPIR_PREMI) AS COST_AUG,
            (SEBARAN.SEP * RKT.SUPIR_PREMI) AS COST_SEP,
            (SEBARAN.OCT * RKT.SUPIR_PREMI) AS COST_OCT,
            (SEBARAN.NOV * RKT.SUPIR_PREMI) AS COST_NOV,
            (SEBARAN.DEC * RKT.SUPIR_PREMI) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE           
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL 
        -- PANEN - ANGKUT - LANGSIR (TRANSPORT)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030404-2' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
            'LANGSIR' AS ACTIVITY_DETAIL,
            'TRANSPORT' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN *  RKT.LANGSIR_RP) AS COST_JAN,  -- By Aries (13-07-15) 
            (SEBARAN.FEB *  RKT.LANGSIR_RP) AS COST_FEB,
            (SEBARAN.MAR *  RKT.LANGSIR_RP) AS COST_MAR,
            (SEBARAN.APR *  RKT.LANGSIR_RP) AS COST_APR,
            (SEBARAN.MAY *  RKT.LANGSIR_RP) AS COST_MAY,
            (SEBARAN.JUN *  RKT.LANGSIR_RP) AS COST_JUN,
            (SEBARAN.JUL *  RKT.LANGSIR_RP) AS COST_JUL,
            (SEBARAN.AUG *  RKT.LANGSIR_RP) AS COST_AUG,
            (SEBARAN.SEP *  RKT.LANGSIR_RP) AS COST_SEP,
            (SEBARAN.OCT *  RKT.LANGSIR_RP) AS COST_OCT,
            (SEBARAN.NOV *  RKT.LANGSIR_RP) AS COST_NOV,
            (SEBARAN.DEC *  RKT.LANGSIR_RP) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE           
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL 
        -- PANEN - ANGKUT - LANGSIR (LABOUR)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030404-2' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
            'LANGSIR' AS ACTIVITY_DETAIL,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN *  RKT.LANGSIR_TUKANG_MUAT) AS COST_JAN, -- By Aries (13-07-15) 
            (SEBARAN.FEB *  RKT.LANGSIR_TUKANG_MUAT) AS COST_FEB,
            (SEBARAN.MAR *  RKT.LANGSIR_TUKANG_MUAT) AS COST_MAR,
            (SEBARAN.APR *  RKT.LANGSIR_TUKANG_MUAT) AS COST_APR,
            (SEBARAN.MAY *  RKT.LANGSIR_TUKANG_MUAT) AS COST_MAY,
            (SEBARAN.JUN *  RKT.LANGSIR_TUKANG_MUAT) AS COST_JUN,
            (SEBARAN.JUL *  RKT.LANGSIR_TUKANG_MUAT) AS COST_JUL,
            (SEBARAN.AUG *  RKT.LANGSIR_TUKANG_MUAT) AS COST_AUG,
            (SEBARAN.SEP *  RKT.LANGSIR_TUKANG_MUAT) AS COST_SEP,
            (SEBARAN.OCT *  RKT.LANGSIR_TUKANG_MUAT) AS COST_OCT,
            (SEBARAN.NOV *  RKT.LANGSIR_TUKANG_MUAT) AS COST_NOV,
            (SEBARAN.DEC *  RKT.LANGSIR_TUKANG_MUAT) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE           
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where  
        UNION ALL 
        -- PANEN - TRANSPORT TBS - BONGKAR MUAT
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            '5101030404-1' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
            'BONGKAR MUAT' AS ACTIVITY_DETAIL,
            '' AS COST_ELEMENT,
            '' KETERANGAN,
            '' AS UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN.JAN * RKT.TUKANG_MUAT_TOTAL) AS COST_JAN,
            (SEBARAN.FEB * RKT.TUKANG_MUAT_TOTAL) AS COST_FEB,
            (SEBARAN.MAR * RKT.TUKANG_MUAT_TOTAL) AS COST_MAR,
            (SEBARAN.APR * RKT.TUKANG_MUAT_TOTAL) AS COST_APR,
            (SEBARAN.MAY * RKT.TUKANG_MUAT_TOTAL) AS COST_MAY,
            (SEBARAN.JUN * RKT.TUKANG_MUAT_TOTAL) AS COST_JUN,
            (SEBARAN.JUL * RKT.TUKANG_MUAT_TOTAL) AS COST_JUL,
            (SEBARAN.AUG * RKT.TUKANG_MUAT_TOTAL) AS COST_AUG,
            (SEBARAN.SEP * RKT.TUKANG_MUAT_TOTAL) AS COST_SEP,
            (SEBARAN.OCT * RKT.TUKANG_MUAT_TOTAL) AS COST_OCT,
            (SEBARAN.NOV * RKT.TUKANG_MUAT_TOTAL) AS COST_NOV,
            (SEBARAN.DEC * RKT.TUKANG_MUAT_TOTAL) AS COST_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PANEN RKT
        LEFT JOIN (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   JAN / TOTAL AS JAN,
                   FEB / TOTAL AS FEB,
                   MAR / TOTAL AS MAR,
                   APR / TOTAL AS APR,
                   MAY / TOTAL AS MAY, 
                   JUN / TOTAL AS JUN,
                   JUL / TOTAL AS JUL,
                   AUG / TOTAL AS AUG,
                   SEP / TOTAL AS SEP,
                   OCT / TOTAL AS OCT,
                   NOV / TOTAL AS NOV,
                   DEC / TOTAL AS DEC,
                   TOTAL
                FROM (  
                SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                       norma.BA_CODE BA_CODE,
                       norma.AFD_CODE AFD_CODE,
                       norma.BLOCK_CODE BLOCK_CODE,
                       SUM (norma.JAN) JAN,
                       SUM (norma.FEB) FEB,
                       SUM (norma.MAR) MAR,
                       SUM (norma.APR) APR,
                       SUM (norma.MAY) MAY,
                       SUM (norma.JUN) JUN,
                       SUM (norma.JUL) JUL,
                       SUM (norma.AUG) AUG,
                       SUM (norma.SEP) SEP,
                       SUM (norma.OCT) OCT,
                       SUM (norma.NOV) NOV,
                       SUM (norma.DEC) DEC,
                       SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN
                           + norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total,
                        SUM( (  norma.JAN
                           + norma.FEB
                           + norma.MAR
                           + norma.APR
                           + norma.MAY
                           + norma.JUN))
                        total_sms1,
                        SUM( (norma.JUL
                           + norma.AUG
                           + norma.SEP
                           + norma.OCT
                           + norma.NOV
                           + norma.DEC))
                        total_sms2
                    FROM    TR_PRODUKSI_PERIODE_BUDGET norma
                       LEFT JOIN
                        TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                       ON norma.PERIOD_BUDGET =
                           thn_berjalan.PERIOD_BUDGET
                        AND norma.BA_CODE =
                            thn_berjalan.BA_CODE
                        AND norma.AFD_CODE =
                            thn_berjalan.AFD_CODE
                        AND norma.BLOCK_CODE =
                            thn_berjalan.BLOCK_CODE
                     WHERE norma.DELETE_USER IS NULL
                $where1
              group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE )
          )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
           and sebaran.BLOCK_CODE = RKT.BLOCK_CODE           
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where

        UNION ALL
        -- ALOKASI ASTEK
        SELECT  SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        --LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
        --  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        --  AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA
        FROM (            
        SELECT CR.PERIOD_BUDGET,CR.BA_CODE, CRD.TUNJANGAN_TYPE ,  SUM  (MPP_PERIOD_BUDGET * JUMLAH )  COSTTYPE -- TUNJANGAN OT
                FROM TM_JOB_TYPE JT
                LEFT JOIN TR_RKT_CHECKROLL CR
                    ON JT.JOB_CODE = CR.JOB_CODE
                LEFT JOIN TR_RKT_CHECKROLL_DETAIL CRD
                    ON CRD.TRX_CR_CODE = CR.TRX_CR_CODE
                WHERE JOB_TYPE = 'OT'
                    AND TUNJANGAN_TYPE IN (
                        SELECT TUNJANGAN_TYPE
                        FROM TM_TUNJANGAN 
                        WHERE DELETE_TIME IS NULL 
                        AND FLAG_RP_HK = 'YES'
                    )
                    AND CRD.TUNJANGAN_TYPE = 'ASTEK'
                AND to_char(CR.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND CR.BA_CODE = '".$ba_code."'
                    AND CR.DELETE_TIME IS NULL
                    AND CRD.DELETE_TIME IS NULL
                    AND JT.DELETE_TIME IS NULL
                GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE, CRD.TUNJANGAN_TYPE                  
                ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) RKT ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 
          --RKT.REPORT_TYPE = 'CR_ALOKASI'
          --AND RKT.DELETE_USER IS NULL
          RKT.TUNJANGAN_TYPE IN ('ASTEK')
          --AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        -- ALOKASI CATU
        SELECT  SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        --LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
        --  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        --  AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA
        FROM (            
        SELECT CR.PERIOD_BUDGET,CR.BA_CODE, CRD.TUNJANGAN_TYPE ,  SUM  (MPP_PERIOD_BUDGET * JUMLAH )  COSTTYPE -- TUNJANGAN OT
                FROM TM_JOB_TYPE JT
                LEFT JOIN TR_RKT_CHECKROLL CR
                    ON JT.JOB_CODE = CR.JOB_CODE
                LEFT JOIN TR_RKT_CHECKROLL_DETAIL CRD
                    ON CRD.TRX_CR_CODE = CR.TRX_CR_CODE
                WHERE JOB_TYPE = 'OT'
                    AND TUNJANGAN_TYPE IN (
                        SELECT TUNJANGAN_TYPE
                        FROM TM_TUNJANGAN 
                        WHERE DELETE_TIME IS NULL 
                        AND FLAG_RP_HK = 'YES'
                    )
                    AND CRD.TUNJANGAN_TYPE = 'CATU'
                AND to_char(CR.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND CR.BA_CODE = '".$ba_code."'
                    AND CR.DELETE_TIME IS NULL
                    AND CRD.DELETE_TIME IS NULL
                    AND JT.DELETE_TIME IS NULL
                GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE, CRD.TUNJANGAN_TYPE                  
                ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) RKT ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 
          --RKT.REPORT_TYPE = 'CR_ALOKASI'
          --AND RKT.DELETE_USER IS NULL
          RKT.TUNJANGAN_TYPE IN ('CATU')
          --AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        -- ALOKASI JABATAN
        SELECT  SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        --LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
        --  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        --  AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA
        FROM (            
        SELECT CR.PERIOD_BUDGET,CR.BA_CODE, CRD.TUNJANGAN_TYPE ,  SUM  (MPP_PERIOD_BUDGET * JUMLAH )  COSTTYPE -- TUNJANGAN OT
                FROM TM_JOB_TYPE JT
                LEFT JOIN TR_RKT_CHECKROLL CR
                    ON JT.JOB_CODE = CR.JOB_CODE
                LEFT JOIN TR_RKT_CHECKROLL_DETAIL CRD
                    ON CRD.TRX_CR_CODE = CR.TRX_CR_CODE
                WHERE JOB_TYPE = 'OT'
                    AND TUNJANGAN_TYPE IN (
                        SELECT TUNJANGAN_TYPE
                        FROM TM_TUNJANGAN 
                        WHERE DELETE_TIME IS NULL 
                        AND FLAG_RP_HK = 'YES'
                    )
                    AND CRD.TUNJANGAN_TYPE = 'JABATAN'
                AND to_char(CR.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND CR.BA_CODE = '".$ba_code."'
                    AND CR.DELETE_TIME IS NULL
                    AND CRD.DELETE_TIME IS NULL
                    AND JT.DELETE_TIME IS NULL
                GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE, CRD.TUNJANGAN_TYPE                  
                ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) RKT ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 
          --RKT.REPORT_TYPE = 'CR_ALOKASI'
          --AND RKT.DELETE_USER IS NULL
          RKT.TUNJANGAN_TYPE IN ('JABATAN')
          --AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        -- ALOKASI KEHADIRAN
        SELECT  SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        --LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
        --  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        --  AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA
        FROM (            
        SELECT CR.PERIOD_BUDGET,CR.BA_CODE, CRD.TUNJANGAN_TYPE ,  SUM  (MPP_PERIOD_BUDGET * JUMLAH )  COSTTYPE -- TUNJANGAN OT
                FROM TM_JOB_TYPE JT
                LEFT JOIN TR_RKT_CHECKROLL CR
                    ON JT.JOB_CODE = CR.JOB_CODE
                LEFT JOIN TR_RKT_CHECKROLL_DETAIL CRD
                    ON CRD.TRX_CR_CODE = CR.TRX_CR_CODE
                WHERE JOB_TYPE = 'OT'
                    AND TUNJANGAN_TYPE IN (
                        SELECT TUNJANGAN_TYPE
                        FROM TM_TUNJANGAN 
                        WHERE DELETE_TIME IS NULL 
                        AND FLAG_RP_HK = 'YES'
                    )
                    AND CRD.TUNJANGAN_TYPE = 'KEHADIRAN'
                AND to_char(CR.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND CR.BA_CODE = '".$ba_code."'
                    AND CR.DELETE_TIME IS NULL
                    AND CRD.DELETE_TIME IS NULL
                    AND JT.DELETE_TIME IS NULL
                GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE, CRD.TUNJANGAN_TYPE                  
                ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) RKT ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 
          --RKT.REPORT_TYPE = 'CR_ALOKASI'
          --AND RKT.DELETE_USER IS NULL
          RKT.TUNJANGAN_TYPE IN ('KEHADIRAN')
          --AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        -- ALOKASI LAINNYA
        SELECT  SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        --LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
        --  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        --  AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA
        FROM (            
        SELECT CR.PERIOD_BUDGET,CR.BA_CODE, CRD.TUNJANGAN_TYPE ,  SUM  (MPP_PERIOD_BUDGET * JUMLAH )  COSTTYPE -- TUNJANGAN OT
                FROM TM_JOB_TYPE JT
                LEFT JOIN TR_RKT_CHECKROLL CR
                    ON JT.JOB_CODE = CR.JOB_CODE
                LEFT JOIN TR_RKT_CHECKROLL_DETAIL CRD
                    ON CRD.TRX_CR_CODE = CR.TRX_CR_CODE
                WHERE JOB_TYPE = 'OT'
                    AND TUNJANGAN_TYPE IN (
                        SELECT TUNJANGAN_TYPE
                        FROM TM_TUNJANGAN 
                        WHERE DELETE_TIME IS NULL 
                        AND FLAG_RP_HK = 'YES'
                    )
                    AND CRD.TUNJANGAN_TYPE = 'LAINNYA'
                AND to_char(CR.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
                AND CR.BA_CODE = '".$ba_code."'
                    AND CR.DELETE_TIME IS NULL
                    AND CRD.DELETE_TIME IS NULL
                    AND JT.DELETE_TIME IS NULL
                GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE, CRD.TUNJANGAN_TYPE                  
                ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) RKT ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 
          --RKT.REPORT_TYPE = 'CR_ALOKASI'
          --AND RKT.DELETE_USER IS NULL
          RKT.TUNJANGAN_TYPE IN ('LAINNYA')
          --AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        --ALOKASI OBAT
        SELECT  
            SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        --LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
        --  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        --  AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
                AND TCR.TUNJANGAN_TYPE IS NOT NULL
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            
                AND TTJ.BA_CODE = '".$ba_code."'
             
  ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) RKT ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 
          --RKT.REPORT_TYPE = 'CR_ALOKASI'
          --AND RKT.DELETE_USER IS NULL
          RKT.TUNJANGAN_TYPE IN ('OBAT')
          --AND RKT.MATURITY_STAGE = 'TM'
          $where


        UNION ALL
        --ALOKASI THR
        SELECT  
            SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        --LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
        --  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        --  AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
        SELECT PERIOD_BUDGET,
        BA_CODE,
        TUNJANGAN_TYPE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
                AND TCR.TUNJANGAN_TYPE IS NOT NULL
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            
                AND TTJ.BA_CODE = '".$ba_code."'
             
  ) GROUP BY PERIOD_BUDGET, BA_CODE, TUNJANGAN_TYPE
        ) RKT ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 
          --RKT.REPORT_TYPE = 'CR_ALOKASI'
          --AND RKT.DELETE_USER IS NULL
          RKT.TUNJANGAN_TYPE IN ('THR')
          --AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        --ALOKASI GAJI
        SELECT  SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * COST_TTL.COST_BA) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * COST_TTL.COST_BA) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * COST_TTL.COST_BA) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * COST_TTL.COST_BA) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * COST_TTL.COST_BA) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * COST_TTL.COST_BA) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * COST_TTL.COST_BA) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * COST_TTL.COST_BA) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * COST_TTL.COST_BA) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * COST_TTL.COST_BA) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * COST_TTL.COST_BA) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * COST_TTL.COST_BA) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
              WHERE SUMHA_AFD.BA_CODE = SUMHA_BA.BA_CODE AND 
              SUMHA_AFD.PERIOD_BUDGET = SUMHA_BA.PERIOD_BUDGET
        ) SEBARAN_HA
        LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
          ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN (
          SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
          FROM (
            SELECT CR.PERIOD_BUDGET, CR.BA_CODE, 'GAJI', SUM(GP_INFLASI * MPP_PERIOD_BUDGET ) COSTTYPE
            FROM TM_JOB_TYPE JT
            LEFT JOIN TR_RKT_CHECKROLL CR 
              ON CR.JOB_CODE = JT.JOB_CODE
            WHERE CR.DELETE_TIME IS NULL
            AND to_char(CR.PERIOD_BUDGET,'RRRR') = '".$period_budget."'
            AND CR.BA_CODE = '".$ba_code."'
            AND JT.JOB_TYPE = 'OT'
            GROUP BY CR.PERIOD_BUDGET, CR.BA_CODE
          ) GROUP BY PERIOD_BUDGET, BA_CODE
        ) COST_TTL
        ON COST_TTL.PERIOD_BUDGET = RKT.PERIOD_BUDGET 
        AND COST_TTL.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.REPORT_TYPE = 'CR_ALOKASI'
          AND RKT.DELETE_USER IS NULL
          AND RKT.TUNJANGAN_TYPE = 'GAJI'
          AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        -- ALOKASI CHECKROLL
        SELECT  SEBARAN_HA.PERIOD_BUDGET,
            ORG.REGION_CODE,
            SEBARAN_HA.BA_CODE,
            SEBARAN_HA.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
            RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
            'LABOUR' AS COST_ELEMENT,
            '' KETERANGAN,
            '' UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_JAN) DIS_JAN,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_FEB) DIS_FEB,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_MAR) DIS_MAR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_APR) DIS_APR,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_MAY) DIS_MAY,
            (SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_JUN) DIS_JUN,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_JUL) DIS_JUL,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_AUG) DIS_AUG,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_SEP) DIS_SEP,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_OCT) DIS_OCT,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_NOV) DIS_NOV,
            (SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_DEC) DIS_DEC,
            0 RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                  SUMHA_AFD.BA_CODE,
                  SUMHA_AFD.AFD_CODE,
                  SUMHA_AFD.SMS1_TM as HA_AFD_1,
                  SUMHA_AFD.SMS2_TM as HA_AFD_2,
                  SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                  SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
            FROM V_REPORT_SEBARAN_HS SUMHA_AFD
            LEFT JOIN (
              SELECT PERIOD_BUDGET,
                    BA_CODE,
                    SUM(SMS1_TM) TOTAL_SMS1_TM,
                    SUM(SMS2_TM) TOTAL_SMS2_TM
              FROM V_REPORT_SEBARAN_HS
              GROUP BY PERIOD_BUDGET,
                    BA_CODE                                        
            ) SUMHA_BA
              ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
              AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
        ) SEBARAN_HA
        LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
          ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.REPORT_TYPE = 'CR_ALOKASI'
          AND RKT.DELETE_USER IS NULL
          AND RKT.TUNJANGAN_TYPE NOT IN ('GAJI', 'THR', 'OBAT', 'ASTEK', 'CATU', 'JABATAN', 'KEHADIRAN', 'LAINNYA')
          AND RKT.MATURITY_STAGE = 'TM'
          $where

        UNION ALL
        -- RKT PERKERASAN JALAN : SMS 1 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.DIS_JAN COST_JAN,
            RKT.DIS_FEB COST_FEB,
            RKT.DIS_MAR COST_MAR,
            RKT.DIS_APR COST_APR,
            RKT.DIS_MAY COST_MAY,
            RKT.DIS_JUN COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
            0 RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS1 = 'TM'
          AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
          $where
        UNION ALL
        -- RKT PERKERASAN JALAN : SMS 2 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            'TM' AS TIPE_TRANSAKSI,
            RKT.ACTIVITY_CODE,
            ACT.DESCRIPTION AS ACTIVITY_DESC,
            RKT.COST_ELEMENT,
            '' KETERANGAN,
            ACT.UOM,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.DIS_JUL COST_JUL,
            RKT.DIS_AUG COST_AUG,
            RKT.DIS_SEP COST_SEP,
            RKT.DIS_OCT COST_OCT,
            RKT.DIS_NOV COST_NOV,
            RKT.DIS_DEC COST_DEC,
            0 RP_ROTASI_SMS1,
            RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
        FROM TR_RKT_PK_COST_ELEMENT RKT
        LEFT JOIN TR_RKT_PK RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT_INDUK.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 = 'TM'
          AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
          $where
      ) REPORT
      GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        TIPE_TRANSAKSI,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        COST_ELEMENT,
        KETERANGAN,
        UOM
    ";
    
    //echo $query;
    $this->_db->query($query);
    $this->_db->commit();
    //if ($this->_db->commit()) {
      //echo '98 . ' . $query;
    //}

    return true;
  }
  
  //hapus temp table untuk estate cost
  public function delTmpRptEstCost($params = array())
  {
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    //hapus estate cost per BA
    $query = "
      DELETE FROM TMP_RPT_EST_COST 
      WHERE 1 = 1
      $where 
    ";
    $this->_db->query($query);
    $this->_db->commit();
    
    //hapus estate cost per afd
    $query = "
      DELETE FROM TMP_RPT_EST_COST_AFD 
      WHERE 1 = 1
      $where 
    ";
    
    $this->_db->query($query);
    $this->_db->commit();

    return true;
  }
  


  //ARIES 15-JUN-2015
  // start of tmpRptKebActEstCostBlock
  public function tmpRptKebActEstCostBlock($params = array())
  {
    $where = "";
    $where1 = ""; $where2 = ""; $where3 = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where1 .= "
        AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where2 .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where3 .= "
          AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $where1 .= "
        AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";  
      $where2 .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $where3 .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";      
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
      $where1 .= "
        AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
      ";
      $where2 .= "
        AND UPPER(BA_CODE) LIKE UPPER('%".$params['key_find']."%')
      ";
      $where3 .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
    }
    //generate estate cost per BLOCK
    $query = "
      INSERT INTO TMP_RPT_KEB_EST_COST_BLOCK (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        TIPE_TRANSAKSI, 
        COST_ELEMENT,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        SUB_COST_ELEMENT,
        SUB_COST_ELEMENT_DESC,
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC,
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC,
        QTY_SETAHUN,
        COST_SETAHUN,
        INSERT_USER, 
        INSERT_TIME
      )
    SELECT PERIOD_BUDGET,
     REGION_CODE,   
     BA_CODE,
     AFD_CODE,
     BLOCK_CODE,
     ACTIVITY_GROUP,
     COST_ELEMENT,
     ACTIVITY_CODE,
     ACTIVITY_DESC,
     SUB_COST_ELEMENT,
     MATERIAL_NAME,
     '' KETERANGAN,
     UOM,
     SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
     SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
     SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
     SUM (NVL (QTY_APR, 0)) AS QTY_APR,
     SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
     SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
     SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
     SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
     SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
     SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
     SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
     SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
     SUM (NVL (COST_JAN, 0)) AS COST_JAN,
     SUM (NVL (COST_FEB, 0)) AS COST_FEB,
     SUM (NVL (COST_MAR, 0)) AS COST_MAR,
     SUM (NVL (COST_APR, 0)) AS COST_APR,
     SUM (NVL (COST_MAY, 0)) AS COST_MAY,
     SUM (NVL (COST_JUN, 0)) AS COST_JUN,
     SUM (NVL (COST_JUL, 0)) AS COST_JUL,
     SUM (NVL (COST_AUG, 0)) AS COST_AUG,
     SUM (NVL (COST_SEP, 0)) AS COST_SEP,
     SUM (NVL (COST_OCT, 0)) AS COST_OCT,
     SUM (NVL (COST_NOV, 0)) AS COST_NOV,
     SUM (NVL (COST_DEC, 0)) AS COST_DEC,
     (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
                + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
     AS QTY_SETAHUN,
     (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
           + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) 
     AS COST_SETAHUN,
     '".$this->_userName."' AS INSERT_USER,
     SYSDATE AS INSERT_TIME
  FROM (-- MANUAL_NON_INFRA SM 1
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                  (RKT.PLAN_JAN * BIAYA.QTY_HA) AS QTY_JAN,
                  (RKT.PLAN_FEB * BIAYA.QTY_HA) AS QTY_FEB,
                  (RKT.PLAN_MAR * BIAYA.QTY_HA) AS QTY_MAR,
                  (RKT.PLAN_APR * BIAYA.QTY_HA) AS QTY_APR,
                  (RKT.PLAN_MAY * BIAYA.QTY_HA) AS QTY_MAY,
                  (RKT.PLAN_JUN * BIAYA.QTY_HA) AS QTY_JUN,
                   0 QTY_JUL,
                   0 QTY_AUG,
                   0 QTY_SEP,
                   0 QTY_OCT,
                   0 QTY_NOV,
                   0 QTY_DEC,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JAN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JAN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JAN,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_FEB * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_FEB * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_FEB,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_APR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_APR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_APR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAY * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAY * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAY,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JUN,
                   0 COST_JUL,
                   0 COST_AUG,
                   0 COST_SEP,
                   0 COST_OCT,
                   0 COST_NOV,
                   0 COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE =
                        RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE =
                        RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS1 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                   AND RKT.TIPE_TRANSAKSI IN ('MANUAL_NON_INFRA', 'MANUAL_SISIP')
                   AND RKT.COST_ELEMENT <> 'TRANSPORT'
                   $where
      UNION ALL -- MANUAL_NON_INFRA SM 2
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   0 AS QTY_JAN,
                   0 AS QTY_FEB,
                   0 AS QTY_MAR,
                   0 AS QTY_APR,
                   0 AS QTY_MAY,
                   0 AS QTY_JUN,
                   (RKT.PLAN_JUL * BIAYA.QTY_HA) AS QTY_JUL,
                   (RKT.PLAN_AUG * BIAYA.QTY_HA) AS QTY_AUG,
                   (RKT.PLAN_SEP * BIAYA.QTY_HA) AS QTY_SEP,
                   (RKT.PLAN_OCT * BIAYA.QTY_HA) AS QTY_OCT,
                   (RKT.PLAN_NOV * BIAYA.QTY_HA) AS QTY_NOV,
                   (RKT.PLAN_DEC * BIAYA.QTY_HA) AS QTY_DEC,
                   0 COST_JAN,
                   0 COST_FEB,
                   0 COST_MAR,
                   0 COST_APR,
                   0 COST_MAY,
                   0 COST_JUN,
                   CASE
                   WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUL * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUL * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_AUG * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_AUG * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_SEP * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_SEP * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_SEP,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_OCT * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_OCT * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_OCT,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_NOV * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_NOV * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_NOV,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_DEC * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_DEC * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE =
                        RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE =
                        RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET =
                        RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE =
                         RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS2 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET =
                        BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE =
                         BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                   AND RKT.TIPE_TRANSAKSI IN ('MANUAL_NON_INFRA', 'MANUAL_SISIP')
                   AND RKT.COST_ELEMENT <> 'TRANSPORT'
                   $where
      UNION ALL
      -- MANUAL_NON_INFRA_OPSI SMS1
       SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   (RKT.PLAN_JAN * BIAYA.QTY_HA) AS QTY_JAN,
                   (RKT.PLAN_FEB * BIAYA.QTY_HA) AS QTY_FEB,
                   (RKT.PLAN_MAR * BIAYA.QTY_HA) AS QTY_MAR,
                   (RKT.PLAN_APR * BIAYA.QTY_HA) AS QTY_APR,
                   (RKT.PLAN_MAY * BIAYA.QTY_HA) AS QTY_MAY,
                   (RKT.PLAN_JUN * BIAYA.QTY_HA) AS QTY_JUN,
                   0 QTY_JUL,
                   0 QTY_AUG,
                   0 QTY_SEP,
                   0 QTY_OCT,
                   0 QTY_NOV,
                   0 QTY_DEC,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JAN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JAN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JAN,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_FEB * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_FEB * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_FEB,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_APR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_APR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_APR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAY * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAY * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAY,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JUN,
                   0 COST_JUL,
                   0 COST_AUG,
                   0 COST_SEP,
                   0 COST_OCT,
                   0 COST_NOV,
                   0 COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS1 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ATRIBUT = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET =
                        BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE =
                         BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
                   AND RKT.COST_ELEMENT <> 'TRANSPORT'
                   $where
      UNION ALL                              
      -- MANUAL_NON_INFRA_OPSI SMS2
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   0 AS QTY_JAN,
                   0 AS QTY_FEB,
                   0 AS QTY_MAR,
                   0 AS QTY_APR,
                   0 AS QTY_MAY,
                   0 AS QTY_JUN,
                   (RKT.PLAN_JUL * BIAYA.QTY_HA) AS QTY_JUL,
                   (RKT.PLAN_AUG * BIAYA.QTY_HA) AS QTY_AUG,
                   (RKT.PLAN_SEP * BIAYA.QTY_HA) AS QTY_SEP,
                   (RKT.PLAN_OCT * BIAYA.QTY_HA) AS QTY_OCT,
                   (RKT.PLAN_NOV * BIAYA.QTY_HA) AS QTY_NOV,
                   (RKT.PLAN_DEC * BIAYA.QTY_HA) AS QTY_DEC,
                   0 COST_JAN,
                   0 COST_FEB,
                   0 COST_MAR,
                   0 COST_APR,
                   0 COST_MAY,
                   0 COST_JUN,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUL * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUL * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_AUG * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_AUG * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_SEP * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_SEP * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_SEP,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_OCT * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_OCT * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_OCT,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_NOV * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_NOV * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_NOV,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_DEC * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_DEC * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS2 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ATRIBUT = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
                   AND RKT.COST_ELEMENT <> 'TRANSPORT'
                   $where
      UNION ALL
      -- MANUAL_INFRA SMS1
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   (RKT.PLAN_JAN * BIAYA.QTY_HA) AS QTY_JAN,
                   (RKT.PLAN_FEB * BIAYA.QTY_HA) AS QTY_FEB,
                   (RKT.PLAN_MAR * BIAYA.QTY_HA) AS QTY_MAR,
                   (RKT.PLAN_APR * BIAYA.QTY_HA) AS QTY_APR,
                   (RKT.PLAN_MAY * BIAYA.QTY_HA) AS QTY_MAY,
                   (RKT.PLAN_JUN * BIAYA.QTY_HA) AS QTY_JUN,
                   0 QTY_JUL,
                   0 QTY_AUG,
                   0 QTY_SEP,
                   0 QTY_OCT,
                   0 QTY_NOV,
                   0 QTY_DEC,
                   (RKT.PLAN_JAN * BIAYA.RP_HA_INTERNAL) AS COST_JAN,
                   (RKT.PLAN_FEB * BIAYA.RP_HA_INTERNAL) AS COST_FEB,
                   (RKT.PLAN_MAR * BIAYA.RP_HA_INTERNAL) AS COST_MAR,
                   (RKT.PLAN_APR * BIAYA.RP_HA_INTERNAL) AS COST_APR,
                   (RKT.PLAN_MAY * BIAYA.RP_HA_INTERNAL) AS COST_MAY,
                   (RKT.PLAN_JUN * BIAYA.RP_HA_INTERNAL) AS COST_JUN,
                   0 COST_JUL,
                   0 COST_AUG,
                   0 COST_SEP,
                   0 COST_OCT,
                   0 COST_NOV,
                   0 COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_INFRASTRUKTUR BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                   AND RKT.COST_ELEMENT <> 'TRANSPORT'
                   $where
      UNION ALL                                       
      -- MANUAL INFRA SMS2
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   0 AS QTY_JAN,
                   0 AS QTY_FEB,
                   0 AS QTY_MAR,
                   0 AS QTY_APR,
                   0 AS QTY_MAY,
                   0 AS QTY_JUN,
                   (RKT.PLAN_JUL * BIAYA.QTY_HA) AS QTY_JUL,
                   (RKT.PLAN_AUG * BIAYA.QTY_HA) AS QTY_AUG,
                   (RKT.PLAN_SEP * BIAYA.QTY_HA) AS QTY_SEP,
                   (RKT.PLAN_OCT * BIAYA.QTY_HA) AS QTY_OCT,
                   (RKT.PLAN_NOV * BIAYA.QTY_HA) AS QTY_NOV,
                   (RKT.PLAN_DEC * BIAYA.QTY_HA) AS QTY_DEC,
                   0 COST_JAN,
                   0 COST_FEB,
                   0 COST_MAR,
                   0 COST_APR,
                   0 COST_MAY,
                   0 COST_JUN,
                   (RKT.PLAN_JUL * BIAYA.RP_HA_INTERNAL) AS COST_JUL,
                   (RKT.PLAN_AUG * BIAYA.RP_HA_INTERNAL) AS COST_AUG,
                   (RKT.PLAN_SEP * BIAYA.RP_HA_INTERNAL) AS COST_SEP,
                   (RKT.PLAN_OCT * BIAYA.RP_HA_INTERNAL) AS COST_OCT,
                   (RKT.PLAN_NOV * BIAYA.RP_HA_INTERNAL) AS COST_NOV,
                   (RKT.PLAN_DEC * BIAYA.RP_HA_INTERNAL) AS COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_INFRASTRUKTUR BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                   AND RKT.COST_ELEMENT <> 'TRANSPORT'
                   $where
      UNION ALL
      -- HITUNG INFRA UNTUK CONTRACT sms 1
      SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
         RKT.ACTIVITY_CODE,
         RKT.TIPE_TRANSAKSI,
         ACT.DESCRIPTION AS ACTIVITY_DESC,
         RKT.COST_ELEMENT,
         BIAYA.ACTIVITY_CLASS,
         BIAYA.LAND_TYPE,
         BIAYA.TOPOGRAPHY,
         BIAYA.SUB_COST_ELEMENT,
         BIAYA.QTY_HA,
         TM_MAT.MATERIAL_NAME,
         (SELECT ACT.UOM
            FROM TM_ACTIVITY ACT
             WHERE ACT.ACTIVITY_CODE = BIAYA.SUB_COST_ELEMENT) AS UOM,
         RKT.PLAN_JAN AS QTY_JAN,
         RKT.PLAN_FEB AS QTY_FEB,
         RKT.PLAN_MAR AS QTY_MAR,
         RKT.PLAN_APR AS QTY_APR,
         RKT.PLAN_MAY AS QTY_MAY,
         RKT.PLAN_JUN AS QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         DIS_JAN AS COST_JAN,
         DIS_FEB AS COST_FEB,
         DIS_MAR AS COST_MAR,
         DIS_APR AS COST_APR,
         DIS_MAY AS COST_MAY,
         DIS_JUN AS COST_JUN,
         0 COST_JUL,
         0 COST_AUG,
         0 COST_SEP,
         0 COST_OCT,
         0 COST_NOV,
         0 COST_DEC
      FROM TR_RKT_COST_ELEMENT RKT
         LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
         LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
         LEFT JOIN TM_HECTARE_STATEMENT TM_HS
          ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
           AND TM_HS.BA_CODE = RKT.BA_CODE
           AND TM_HS.AFD_CODE = RKT.AFD_CODE
           AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
         LEFT JOIN TN_INFRASTRUKTUR BIAYA
          ON     RKT.BA_CODE = BIAYA.BA_CODE
           AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
           AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
           AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
           AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
           AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
         LEFT JOIN TM_MATERIAL TM_MAT
          ON     TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
           AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
     WHERE     RKT.DELETE_USER IS NULL
         AND RKT_INDUK.FLAG_TEMP IS NULL
         AND RKT.MATURITY_STAGE_SMS1 = 'TM'
         AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
         AND RKT.SUMBER_BIAYA = 'EXTERNAL'
         AND RKT.COST_ELEMENT = 'CONTRACT'
         $where
    UNION ALL
    --untuk sms 2
    SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
         RKT.ACTIVITY_CODE,
         RKT.TIPE_TRANSAKSI,
         ACT.DESCRIPTION AS ACTIVITY_DESC,
         RKT.COST_ELEMENT,
         BIAYA.ACTIVITY_CLASS,
         BIAYA.LAND_TYPE,
         BIAYA.TOPOGRAPHY,
         BIAYA.SUB_COST_ELEMENT,
         BIAYA.QTY_HA,
         TM_MAT.MATERIAL_NAME,
         CASE
          WHEN RKT.COST_ELEMENT = 'LABOUR'
          THEN
           'HK'
          WHEN RKT.COST_ELEMENT = 'CONTRACT'
          THEN
           (SELECT ACT.UOM
            FROM TM_ACTIVITY ACT
             WHERE ACT.ACTIVITY_CODE = BIAYA.SUB_COST_ELEMENT)
          ELSE
           (SELECT material.UOM
            FROM TM_MATERIAL material
             WHERE     material.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
               AND material.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
               AND material.BA_CODE = BIAYA.BA_CODE)
         END
          AS UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         RKT.PLAN_JUL AS QTY_JUL,
         RKT.PLAN_AUG AS QTY_AUG,
         RKT.PLAN_SEP AS QTY_SEP,
         RKT.PLAN_OCT AS QTY_OCT,
         RKT.PLAN_NOV AS QTY_NOV,
         RKT.PLAN_DEC AS QTY_DEC,
         0 COST_JAN,
         0 COST_FEB,
         0 COST_MAR,
         0 COST_APR,
         0 COST_MAY,
         0 COST_JUN,
         DIS_JUL AS COST_JUL,
         DIS_AUG AS COST_AUG,
         DIS_SEP AS COST_SEP,
         DIS_OCT AS COST_OCT,
         DIS_NOV AS COST_NOV,
         DIS_DEC AS COST_DEC
      FROM TR_RKT_COST_ELEMENT RKT
         LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
         LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
         LEFT JOIN TM_HECTARE_STATEMENT TM_HS
          ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
           AND TM_HS.BA_CODE = RKT.BA_CODE
           AND TM_HS.AFD_CODE = RKT.AFD_CODE
           AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
         LEFT JOIN TN_INFRASTRUKTUR BIAYA
          ON     RKT.BA_CODE = BIAYA.BA_CODE
           AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
           AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
           AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
           AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
           AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
         LEFT JOIN TM_MATERIAL TM_MAT
          ON     TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
           AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
     WHERE     RKT.DELETE_USER IS NULL
         AND RKT_INDUK.FLAG_TEMP IS NULL
         AND RKT.MATURITY_STAGE_SMS2 = 'TM'
         AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
         AND RKT.COST_ELEMENT = 'CONTRACT'
         $where
    UNION ALL
    --COST ELEMENT TRANSPORT UNTUK RAWAT 
      --SMS1
          SELECT RKT.PERIOD_BUDGET,
               ORG.REGION_CODE,
               RKT.BA_CODE,
               RKT.AFD_CODE,
               RKT.BLOCK_CODE,
               RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
               RKT.ACTIVITY_CODE,
               RKT.TIPE_TRANSAKSI,
               ACT.DESCRIPTION AS ACTIVITY_DESC,
               RKT.COST_ELEMENT,
               '' AS ACTIVITY_CLASS,
               '' AS LAND_TYPE,
               '' AS TOPOGRAPHY,
               VRA.VRA_CODE,
               RKT_DIS.HM_KM,
               VRA.VRA_SUB_CAT_DESCRIPTION,
               VRA.UOM,
               (RKT.PLAN_JAN
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_JAN,
               (RKT.PLAN_FEB
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_FEB,
               (RKT.PLAN_MAR
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_MAR,
               (RKT.PLAN_APR
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_APR,
               (RKT.PLAN_MAY
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_MAY,
               (RKT.PLAN_JUN
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_JUN,
               0 QTY_JUL,
               0 QTY_AUG,
               0 QTY_SEP,
               0 QTY_OCT,
               0 QTY_NOV,
               0 QTY_DEC,
               ( (RKT.PLAN_JAN
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_JAN,
               ( (RKT.PLAN_FEB
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_FEB,
               ( (RKT.PLAN_MAR
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_MAR,
               ( (RKT.PLAN_APR
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_APR,
               ( (RKT.PLAN_MAY
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_MAY,
               ( (RKT.PLAN_JUN
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_JUN,
               0 COST_JUL,
               0 COST_AUG,
               0 COST_SEP,
               0 COST_OCT,
               0 COST_NOV,
               0 COST_DEC
            FROM TR_RKT_COST_ELEMENT RKT
               LEFT JOIN TR_RKT RKT_INDUK
                ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
               LEFT JOIN TR_RKT_VRA_DISTRIBUSI RKT_DIS
                ON     RKT_DIS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND RKT_DIS.BA_CODE = RKT.BA_CODE
                 AND RKT_DIS.LOCATION_CODE = RKT.AFD_CODE
                 AND RKT_DIS.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               INNER JOIN TR_RKT_VRA_DISTRIBUSI_SUM RKT_DIS_SUM
                ON     RKT_DIS_SUM.PERIOD_BUDGET = RKT_DIS.PERIOD_BUDGET
                 AND RKT_DIS_SUM.BA_CODE = RKT_DIS.BA_CODE
                 AND RKT_DIS_SUM.ACTIVITY_CODE = RKT_DIS.ACTIVITY_CODE
                 AND RKT_DIS_SUM.VRA_CODE = RKT_DIS.VRA_CODE
               LEFT JOIN TM_ACTIVITY ACT
                ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               LEFT JOIN TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
               LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND TM_HS.BA_CODE = RKT.BA_CODE
                 AND TM_HS.AFD_CODE = RKT.AFD_CODE
                 AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
               LEFT JOIN TM_VRA VRA
                ON VRA.VRA_CODE = RKT_DIS_SUM.VRA_CODE
           WHERE     RKT.DELETE_USER IS NULL
               AND RKT_INDUK.FLAG_TEMP IS NULL
               AND RKT.MATURITY_STAGE_SMS1 = 'TM'
               AND RKT.COST_ELEMENT = 'TRANSPORT'
               AND RKT.TIPE_TRANSAKSI <> 'MANUAL_INFRA'
               $where
          UNION ALL
          --SMS2       
          SELECT RKT.PERIOD_BUDGET,
               ORG.REGION_CODE,
               RKT.BA_CODE,
               RKT.AFD_CODE,
               RKT.BLOCK_CODE,
               RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
               RKT.ACTIVITY_CODE,
               RKT.TIPE_TRANSAKSI,
               ACT.DESCRIPTION AS ACTIVITY_DESC,
               RKT.COST_ELEMENT,
               '' AS ACTIVITY_CLASS,
               '' AS LAND_TYPE,
               '' AS TOPOGRAPHY,
               VRA.VRA_CODE,
               RKT_DIS.HM_KM,
               VRA.VRA_SUB_CAT_DESCRIPTION,
               VRA.UOM,
               0 QTY_JAN,
               0 QTY_FEB,
               0 QTY_MAR,
               0 QTY_APR,
               0 QTY_MAY,
               0 QTY_JUN,
               (RKT.PLAN_JUL
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_JUL,
               (RKT.PLAN_AUG
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_AUG,
               (RKT.PLAN_SEP
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_SEP,
               (RKT.PLAN_OCT
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_OCT,
               (RKT.PLAN_NOV
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_NOV,
               (RKT.PLAN_DEC
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_DEC,
               0 COST_JAN,
               0 COST_FEB,
               0 COST_MAR,
               0 COST_APR,
               0 COST_MAY,
               0 COST_JUN,
               ( (RKT.PLAN_JUL
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_JUL,
               ( (RKT.PLAN_AUG
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_AUG,
               ( (RKT.PLAN_SEP
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_SEP,
               ( (RKT.PLAN_OCT
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_OCT,
               ( (RKT.PLAN_NOV
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_NOV,
               ( (RKT.PLAN_DEC
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_DEC
            FROM TR_RKT_COST_ELEMENT RKT
               LEFT JOIN TR_RKT RKT_INDUK
                ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
               LEFT JOIN TR_RKT_VRA_DISTRIBUSI RKT_DIS
                ON     RKT_DIS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND RKT_DIS.BA_CODE = RKT.BA_CODE
                 AND RKT_DIS.LOCATION_CODE = RKT.AFD_CODE
                 AND RKT_DIS.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               INNER JOIN TR_RKT_VRA_DISTRIBUSI_SUM RKT_DIS_SUM
                ON     RKT_DIS_SUM.PERIOD_BUDGET = RKT_DIS.PERIOD_BUDGET
                 AND RKT_DIS_SUM.BA_CODE = RKT_DIS.BA_CODE
                 AND RKT_DIS_SUM.ACTIVITY_CODE = RKT_DIS.ACTIVITY_CODE
                 AND RKT_DIS_SUM.VRA_CODE = RKT_DIS.VRA_CODE
               LEFT JOIN TM_ACTIVITY ACT
                ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               LEFT JOIN TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
               LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND TM_HS.BA_CODE = RKT.BA_CODE
                 AND TM_HS.AFD_CODE = RKT.AFD_CODE
                 AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
               LEFT JOIN TM_VRA VRA
                ON VRA.VRA_CODE = RKT_DIS_SUM.VRA_CODE
           WHERE     RKT.DELETE_USER IS NULL
               AND RKT_INDUK.FLAG_TEMP IS NULL
               AND RKT.MATURITY_STAGE_SMS2 = 'TM'
               AND RKT.COST_ELEMENT = 'TRANSPORT'
               AND RKT.TIPE_TRANSAKSI <> 'MANUAL_INFRA'
               $where
          UNION ALL
          SELECT PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             AFD_CODE,
             BLOCK_CODE,
             MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
             ACTIVITY_CODE,
             TIPE_TRANSAKSI,
             DESCRIPTION AS ACTIVITY_DESC,
             COST_ELEMENT,
             ACTIVITY_CLASS,
             LAND_TYPE,
             TOPOGRAPHY,
             SUB_COST_ELEMENT,
             QTY_HA,
             VRA_SUB_CAT_DESCRIPTION,
             UOM,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JAN / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_JAN,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_FEB / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_FEB,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAR / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_MAR,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_APR / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_APR,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAY / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_MAY,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUN / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_JUN,
             0 QTY_JUL,
             0 QTY_AUG,
             0 QTY_SEP,
             0 QTY_OCT,
             0 QTY_NOV,
             0 QTY_DEC,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JAN ELSE 0 END
              AS COST_JAN,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_FEB ELSE 0 END
              AS COST_FEB,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAR ELSE 0 END
              AS COST_MAR,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_APR ELSE 0 END
              AS COST_APR,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAY ELSE 0 END
              AS COST_MAY,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUN ELSE 0 END
              AS COST_JUN,
             0 COST_JUL,
             0 COST_AUG,
             0 COST_SEP,
             0 COST_OCT,
             0 COST_NOV,
             0 COST_DEC
          FROM (SELECT RKT_INDUK.*,
                 RKT.COST_ELEMENT,
                 BIAYA.LAND_TYPE,
                 BIAYA.TOPOGRAPHY,
                 BIAYA.SUB_COST_ELEMENT,
                 BIAYA.QTY_HA,
                 ORG.REGION_CODE,
                 ACT.DESCRIPTION,
                 VRA.VRA_SUB_CAT_DESCRIPTION,
                 VRA.UOM,
                 ( (SELECT RKTVRAS.VALUE
                  FROM TR_RKT_VRA_SUM RKTVRAS
                   WHERE     RKTVRAS.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                     AND RKTVRAS.BA_CODE = BIAYA.BA_CODE
                     AND RKTVRAS.VRA_CODE = BIAYA.SUB_COST_ELEMENT)
                UNION
                (SELECT NVRAPINJAM.RP_QTY AS VALUE
                   FROM TN_VRA_PINJAM NVRAPINJAM
                  WHERE     NVRAPINJAM.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                    AND NVRAPINJAM.REGION_CODE = BIAYA.REGION_CODE
                    AND NVRAPINJAM.VRA_CODE = BIAYA.SUB_COST_ELEMENT))
                  AS HARGA_INTERNAL,
                 (1 / BIAYA.QTY_HA) * RP_HA_EXTERNAL AS HARGA_EXTERNAL
              FROM TR_RKT_COST_ELEMENT RKT
                 LEFT JOIN TR_RKT RKT_INDUK
                  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                 LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                  ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                   AND TM_HS.BA_CODE = RKT.BA_CODE
                   AND TM_HS.AFD_CODE = RKT.AFD_CODE
                   AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                 INNER JOIN TN_INFRASTRUKTUR BIAYA
                  ON     RKT.BA_CODE = BIAYA.BA_CODE
                   AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                   AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                   AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                   AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                   AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                   AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                 LEFT JOIN TM_ACTIVITY ACT
                  ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                 LEFT JOIN TM_VRA VRA
                  ON VRA.VRA_CODE = BIAYA.SUB_COST_ELEMENT  
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON ORG.BA_CODE = RKT.BA_CODE
             WHERE     RKT.DELETE_USER IS NULL
                 AND RKT_INDUK.FLAG_TEMP IS NULL
                 AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                 AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                 AND RKT.COST_ELEMENT = 'TRANSPORT'
                 $where)
        UNION ALL
        SELECT PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             AFD_CODE,
             BLOCK_CODE,
             MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
             ACTIVITY_CODE,
             TIPE_TRANSAKSI,
             DESCRIPTION AS ACTIVITY_DESC,
             COST_ELEMENT,
             ACTIVITY_CLASS,
             LAND_TYPE,
             TOPOGRAPHY,
             SUB_COST_ELEMENT,
             QTY_HA,
             VRA_SUB_CAT_DESCRIPTION,
             UOM,
             0 QTY_JAN,
             0 QTY_FEB,
             0 QTY_MAR,
             0 QTY_APR,
             0 QTY_MAY,
             0 QTY_JUN,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUL / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_JUL,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_AUG / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_AUG,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_SEP / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_SEP,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_OCT / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_OCT,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_NOV / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_NOV,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_DEC / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_DEC,
             0 COST_JAN,
             0 COST_FEB,
             0 COST_MAR,
             0 COST_APR,
             0 COST_MAY,
             0 COST_JUN,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUL ELSE 0 END
              AS COST_JUL,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_AUG ELSE 0 END
              AS COST_AUG,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_SEP ELSE 0 END
              AS COST_SEP,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_OCT ELSE 0 END
              AS COST_OCT,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_NOV ELSE 0 END
              AS COST_NOV,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_DEC ELSE 0 END
              AS COST_DEC
          FROM (SELECT RKT_INDUK.*,
                 RKT.COST_ELEMENT,
                 BIAYA.LAND_TYPE,
                 BIAYA.TOPOGRAPHY,
                 BIAYA.SUB_COST_ELEMENT,
                 BIAYA.QTY_HA,
                 ORG.REGION_CODE,
                 ACT.DESCRIPTION,
                 VRA.VRA_SUB_CAT_DESCRIPTION,
                 VRA.UOM,
                 ( (SELECT RKTVRAS.VALUE
                  FROM TR_RKT_VRA_SUM RKTVRAS
                   WHERE     RKTVRAS.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                     AND RKTVRAS.BA_CODE = BIAYA.BA_CODE
                     AND RKTVRAS.VRA_CODE = BIAYA.SUB_COST_ELEMENT)
                UNION
                (SELECT NVRAPINJAM.RP_QTY AS VALUE
                   FROM TN_VRA_PINJAM NVRAPINJAM
                  WHERE     NVRAPINJAM.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                    AND NVRAPINJAM.REGION_CODE = BIAYA.REGION_CODE
                    AND NVRAPINJAM.VRA_CODE = BIAYA.SUB_COST_ELEMENT))
                  AS HARGA_INTERNAL,
                 (1 / BIAYA.QTY_HA) * RP_HA_EXTERNAL AS HARGA_EXTERNAL
              FROM TR_RKT_COST_ELEMENT RKT
                 LEFT JOIN TR_RKT RKT_INDUK
                  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                 LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                  ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                   AND TM_HS.BA_CODE = RKT.BA_CODE
                   AND TM_HS.AFD_CODE = RKT.AFD_CODE
                   AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                 INNER JOIN TN_INFRASTRUKTUR BIAYA
                  ON     RKT.BA_CODE = BIAYA.BA_CODE
                   AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                   AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                   AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                   AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                   AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                   AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                 LEFT JOIN TM_ACTIVITY ACT
                  ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                 LEFT JOIN TM_VRA VRA
                  ON VRA.VRA_CODE = BIAYA.SUB_COST_ELEMENT    
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON ORG.BA_CODE = RKT.BA_CODE
             WHERE     RKT.DELETE_USER IS NULL
                 AND RKT_INDUK.FLAG_TEMP IS NULL
                 AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                 AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                 AND RKT.COST_ELEMENT = 'TRANSPORT'
                 $where)
            ) REPORT
    GROUP BY PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         ACTIVITY_GROUP,
         COST_ELEMENT,
         ACTIVITY_CODE,
         TIPE_TRANSAKSI,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         UOM
    UNION ALL --PERHITUNGAN UNTUK PANEN LABOUR     
    SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         'TM' ACTIVITY_GROUP,
         RKT.COST_ELEMENT,
         RKT.ACTIVITY_CODE,
         'BIAYA PEMANEN' ACTIVITY_DESC,
         '' SUB_COST_ELEMENT,
         '' MATERIAL_NAME,
         '' KETERANGAN,
         'HK' UOM,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JAN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JAN,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT FEB
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_FEB,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT MAR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_MAR,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT APR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_APR,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT MAY
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_MAY,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JUN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JUN,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JUL
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JUL,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT AUG
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_AUG,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT SEP
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_SEP,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT OCT
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_OCT,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT NOV
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_NOV,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT DEC
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_DEC,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT JAN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JAN,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT FEB
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_FEB,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT MAR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_MAR,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT APR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_APR,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT MAY
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_MAY,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT JUN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JUN,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT JUL
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JUL,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT AUG
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_AUG,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT SEP
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_SEP,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT OCT
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_OCT,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT NOV
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_NOV,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
          * (SELECT DEC
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_DEC,
         RKT_INDUK.BIAYA_PEMANEN_HK AS QTY_SETAHUN,   
         RKT_INDUK.BIAYA_PEMANEN_RP_BASIS AS COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
      FROM TR_RKT_PANEN_COST_ELEMENT RKT
         LEFT JOIN TR_RKT_PANEN RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
    WHERE     RKT.COST_ELEMENT = 'LABOUR'
    $where
    UNION ALL
    --INI BUAT PREMI PANEN JANJANG
    SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         'TM' ACTIVITY_GROUP,
         RKT.COST_ELEMENT,
         RKT.ACTIVITY_CODE,
         'PREMI PANEN JANJANG' ACTIVITY_DESC,
         '' SUB_COST_ELEMENT,
         '' MATERIAL_NAME,
         '' KETERANGAN,
         'HK' UOM,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JAN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JAN,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT FEB
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_FEB,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT MAR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_MAR,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT APR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_APR,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT MAY
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_MAY,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JUN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JUN,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JUL
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JUL,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT AUG
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_AUG,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT SEP
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_SEP,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT OCT
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_OCT,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT NOV
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_NOV,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT DEC
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_DEC,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT JAN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JAN,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT FEB
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_FEB,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT MAR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_MAR,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT APR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_APR,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT MAY
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_MAY,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT JUN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JUN,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT JUL
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JUL,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT AUG
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_AUG,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT SEP
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_SEP,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT OCT
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_OCT,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT NOV
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_NOV,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
          * (SELECT DEC
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_DEC,
         RKT_INDUK.BIAYA_PEMANEN_HK AS QTY_SETAHUN,   
         RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG AS COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
      FROM TR_RKT_PANEN_COST_ELEMENT RKT
         LEFT JOIN TR_RKT_PANEN RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
    WHERE     RKT.COST_ELEMENT = 'LABOUR'
    $where
    UNION ALL
    -- INI UNTUK PREMI PANEN BRD
    SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         'TM' ACTIVITY_GROUP,
         RKT.COST_ELEMENT,
         RKT.ACTIVITY_CODE,
         'PREMI PANEN BRD' ACTIVITY_DESC,
         '' SUB_COST_ELEMENT,
         '' MATERIAL_NAME,
         '' KETERANGAN,
         'HK' UOM,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JAN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JAN,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT FEB
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_FEB,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT MAR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_MAR,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT APR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_APR,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT MAY
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_MAY,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JUN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JUN,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT JUL
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_JUL,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT AUG
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_AUG,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT SEP
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_SEP,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT OCT
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_OCT,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT NOV
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_NOV,
         ( (RKT_INDUK.BIAYA_PEMANEN_HK
          * (SELECT DEC
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS QTY_DEC,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT JAN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JAN,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT FEB
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_FEB,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT MAR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_MAR,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT APR
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_APR,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT MAY
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_MAY,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT JUN
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JUN,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT JUL
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_JUL,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT AUG
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_AUG,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT SEP
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_SEP,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT OCT
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_OCT,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT NOV
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_NOV,
         ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
          * (SELECT DEC
             FROM TM_SEBARAN_PRODUKSI
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
              AND BA_CODE = RKT.BA_CODE))
        / 100)
          AS COST_DEC,
         RKT_INDUK.BIAYA_PEMANEN_HK AS QTY_SETAHUN,   
         RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG AS COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
      FROM TR_RKT_PANEN_COST_ELEMENT RKT
         LEFT JOIN TR_RKT_PANEN RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
    WHERE     RKT.COST_ELEMENT = 'LABOUR'
    $where
    UNION ALL
    -- UNTUK PERHITUGAN ALAT PANEN (TOOLS)
    SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         'TM' ACTIVITY_GROUP,
         COST_ELEMENT,
         ACTIVITY_CODE,
         'ALAT PANEN' ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         '' KETERANGAN,
         UOM,
         ((PERSEN_JAN/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_JAN,
         ((PERSEN_FEB/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_FEB,
         ((PERSEN_MAR/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_MAR,
         ((PERSEN_APR/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_APR,
         ((PERSEN_MAY/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_MAY,
         ((PERSEN_JUN/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_JUN,
         ((PERSEN_JUL/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_JUL,
         ((PERSEN_AUG/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_AUG,
         ((PERSEN_SEP/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_SEP,
         ((PERSEN_OCT/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_OCT,
         ((PERSEN_NOV/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_NOV,
         ((PERSEN_DEC/100 * TON * 1000 * RP_KG_ALAT) / PRICE) QTY_DEC,
         (PERSEN_JAN/100 * TON * 1000 * RP_KG_ALAT) AS COST_JAN,
         (PERSEN_FEB/100 * TON * 1000 * RP_KG_ALAT) AS COST_FEB,
         (PERSEN_MAR/100 * TON * 1000 * RP_KG_ALAT) AS COST_MAR,
         (PERSEN_APR/100 * TON * 1000 * RP_KG_ALAT) AS COST_APR,
         (PERSEN_MAY/100 * TON * 1000 * RP_KG_ALAT) AS COST_MAY,
         (PERSEN_JUN/100 * TON * 1000 * RP_KG_ALAT) AS COST_JUN,
         (PERSEN_JUL/100 * TON * 1000 * RP_KG_ALAT) AS COST_JUL,
         (PERSEN_AUG/100 * TON * 1000 * RP_KG_ALAT) AS COST_AUG,
         (PERSEN_SEP/100 * TON * 1000 * RP_KG_ALAT) AS COST_SEP,
         (PERSEN_OCT/100 * TON * 1000 * RP_KG_ALAT) AS COST_OCT,
         (PERSEN_NOV/100 * TON * 1000 * RP_KG_ALAT) AS COST_NOV,
         (PERSEN_DEC/100 * TON * 1000 * RP_KG_ALAT) AS COST_DEC,
         (((PERSEN_JAN/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_FEB/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_MAR/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_APR/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_MAY/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_JUN/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_JUL/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_AUG/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_SEP/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_OCT/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_NOV/100 * TON * 1000 * RP_KG_ALAT) / PRICE) +
         ((PERSEN_DEC/100 * TON * 1000 * RP_KG_ALAT) / PRICE))
         AS QTY_SETAHUN,
         ((PERSEN_JAN/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_FEB/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_MAR/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_APR/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_MAY/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_JUN/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_JUL/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_AUG/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_SEP/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_OCT/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_NOV/100 * TON * 1000 * RP_KG_ALAT) +
         (PERSEN_DEC/100 * TON * 1000 * RP_KG_ALAT) ) AS COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
         FROM (
        SELECT RKT.PERIOD_BUDGET,
           ORG.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           'TM' ACTIVITY_GROUP,
           RKT.ACTIVITY_CODE,
           RKT.COST_ELEMENT,
           ALAT.MATERIAL_CODE AS SUB_COST_ELEMENT,
           MATERIAL.MATERIAL_NAME,
           '' KETERANGAN,
           MATERIAL.UOM,
           ALAT.PRICE,
           ALAT.TOTAL,
           RKT_INDUK.TON,
           RKT_INDUK.BIAYA_ALAT_PANEN_RP_KG,
           (TOTAL / (SELECT SUM (TOTAL)
            FROM TN_ALAT_KERJA_PANEN
            WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) * RKT_INDUK.BIAYA_ALAT_PANEN_RP_KG) AS RP_KG_ALAT, 
              ((ALAT.TOTAL/(SELECT SUM (PRICE) FROM TN_ALAT_KERJA_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE)*
              (SELECT SUM (BIAYA_ALAT_PANEN_RP_TOTAL) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE))/ALAT.PRICE) AS BANYAK_ALAT,
              (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_JAN,
              (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_FEB,
              (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_MAR,
              (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_APR,
              (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_MAY,
              (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_JUN,
              (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_JUL,
              (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_AUG,
              (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_SEP,
              (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_OCT,
              (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_NOV,
              (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_DEC
            FROM TR_RKT_PANEN_COST_ELEMENT RKT
               LEFT JOIN TR_RKT_PANEN RKT_INDUK
                ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
               LEFT JOIN TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
               LEFT JOIN  TN_ALAT_KERJA_PANEN ALAT
                ON RKT.PERIOD_BUDGET = ALAT.PERIOD_BUDGET
                AND RKT.BA_CODE = ALAT.BA_CODE
               LEFT JOIN TM_MATERIAL MATERIAL
                ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND MATERIAL.BA_CODE = RKT.BA_CODE
                AND MATERIAL.MATERIAL_CODE = ALAT.MATERIAL_CODE   
          WHERE     RKT.COST_ELEMENT = 'TOOLS'
          $where
    )
    UNION ALL
    -- INI UNTUK PERHITUNGAN SUPERVISI  5101030701 SUPERVISI PEMANEN LABOUR
    SELECT 
      PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      AFD_CODE,
      BLOCK_CODE,
      ACTIVITY_GROUP,
      COST_ELEMENT,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      '' SUB_COST_ELEMENT,
      '' MATERIAL_NAME,
      '' KETERANGAN,
      'MPP' UOM,
      (TON/TOTAL_TON * JUMLAH * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JAN,
      (TON/TOTAL_TON * JUMLAH * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_FEB,
      (TON/TOTAL_TON * JUMLAH * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAR,
      (TON/TOTAL_TON * JUMLAH * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_APR,
      (TON/TOTAL_TON * JUMLAH * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAY,
      (TON/TOTAL_TON * JUMLAH * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUN,
      (TON/TOTAL_TON * JUMLAH * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUL,
      (TON/TOTAL_TON * JUMLAH * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_AUG,
      (TON/TOTAL_TON * JUMLAH * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_SEP,
      (TON/TOTAL_TON * JUMLAH * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_OCT,
      (TON/TOTAL_TON * JUMLAH * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_NOV,
      (TON/TOTAL_TON * JUMLAH * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_DEC,
      (BIAYA_SPV_RP_TOTAL * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JAN,
      (BIAYA_SPV_RP_TOTAL * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_FEB,
      (BIAYA_SPV_RP_TOTAL * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAR,
      (BIAYA_SPV_RP_TOTAL * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_APR,
      (BIAYA_SPV_RP_TOTAL * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAY,
      (BIAYA_SPV_RP_TOTAL * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUN,
      (BIAYA_SPV_RP_TOTAL * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUL,
      (BIAYA_SPV_RP_TOTAL * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_AUG,
      (BIAYA_SPV_RP_TOTAL * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_SEP,
      (BIAYA_SPV_RP_TOTAL * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_OCT,
      (BIAYA_SPV_RP_TOTAL * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_NOV,
      (BIAYA_SPV_RP_TOTAL * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_DEC,
      (TON/TOTAL_TON * JUMLAH) AS QTY_SETAHUN,
      BIAYA_SPV_RP_TOTAL AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
       SYSDATE AS INSERT_TIME
    FROM (
  SELECT
       RKT.PERIOD_BUDGET,
       ORG.REGION_CODE,
       RKT.BA_CODE,
       RKT.AFD_CODE,
       RKT.BLOCK_CODE,
       'TM' ACTIVITY_GROUP,
       RKT.COST_ELEMENT,
       '5101030701-1' ACTIVITY_CODE,
       'SUPERVISI PEMANEN' ACTIVITY_DESC,
       RKT.TON,
       (SELECT SUM(TON) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
         AND BA_CODE = RKT.BA_CODE) TOTAL_TON,
       (SELECT SUM(MPP_PERIOD_BUDGET) FROM TR_RKT_CHECKROLL 
        WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
         AND BA_CODE = RKT.BA_CODE
         AND JOB_CODE IN ('FX140', 'FX230')) AS JUMLAH,
       RKT.BIAYA_SPV_RP_TOTAL
    FROM TR_RKT_PANEN_COST_ELEMENT RKT
       LEFT JOIN TR_RKT_PANEN RKT_INDUK
        ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
       LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = RKT.BA_CODE
   WHERE  RKT.COST_ELEMENT = 'LABOUR'
    $where
       ) SS 
  UNION ALL
  -- INI UNTUK PERHITUNGAN SUPERVISI  5101030701 KRANI BUAH LABOUR
       SELECT 
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        ACTIVITY_GROUP,
        COST_ELEMENT,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        '' SUB_COST_ELEMENT,
        '' MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        (TON/TOTAL_TON * JUMLAH * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JAN,
        (TON/TOTAL_TON * JUMLAH * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_FEB,
        (TON/TOTAL_TON * JUMLAH * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAR,
        (TON/TOTAL_TON * JUMLAH * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_APR,
        (TON/TOTAL_TON * JUMLAH * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAY,
        (TON/TOTAL_TON * JUMLAH * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUN,
        (TON/TOTAL_TON * JUMLAH * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUL,
        (TON/TOTAL_TON * JUMLAH * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_AUG,
        (TON/TOTAL_TON * JUMLAH * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_SEP,
        (TON/TOTAL_TON * JUMLAH * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_OCT,
        (TON/TOTAL_TON * JUMLAH * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_NOV,
        (TON/TOTAL_TON * JUMLAH * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_DEC,
        (KRANI_BUAH_TOTAL * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JAN,
        (KRANI_BUAH_TOTAL * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_FEB,
        (KRANI_BUAH_TOTAL * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAR,
        (KRANI_BUAH_TOTAL * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_APR,
        (KRANI_BUAH_TOTAL * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAY,
        (KRANI_BUAH_TOTAL * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUN,
        (KRANI_BUAH_TOTAL * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUL,
        (KRANI_BUAH_TOTAL * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_AUG,
        (KRANI_BUAH_TOTAL * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_SEP,
        (KRANI_BUAH_TOTAL * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_OCT,
        (KRANI_BUAH_TOTAL * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_NOV,
        (KRANI_BUAH_TOTAL * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_DEC,
        (TON/TOTAL_TON * JUMLAH) AS QTY_SETAHUN,
        KRANI_BUAH_TOTAL AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
    FROM (
  SELECT RKT.PERIOD_BUDGET,
       ORG.REGION_CODE,
       RKT.BA_CODE,
       RKT.AFD_CODE,
       RKT.BLOCK_CODE,
       'TM' ACTIVITY_GROUP,
       RKT.COST_ELEMENT,
       '5101030701-2' ACTIVITY_CODE,
       'KRANI BUAH' ACTIVITY_DESC,
       RKT.TON,
       (SELECT SUM(TON) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
         AND BA_CODE = RKT.BA_CODE) TOTAL_TON,
       (SELECT SUM(MPP_PERIOD_BUDGET) FROM TR_RKT_CHECKROLL 
        WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
         AND BA_CODE = RKT.BA_CODE
         AND JOB_CODE IN ('FX160')) AS JUMLAH,
       RKT.KRANI_BUAH_TOTAL
    FROM TR_RKT_PANEN_COST_ELEMENT RKT
       LEFT JOIN TR_RKT_PANEN RKT_INDUK
        ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
       LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = RKT.BA_CODE
   WHERE RKT.COST_ELEMENT = 'LABOUR'
    $where
       ) SS      
  UNION ALL
  -- INI UNTUK PERHITUNGAN SUPERVISI  5101030701 BONGKAR MUAT LABOUR
       SELECT 
        PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        ACTIVITY_GROUP,
        COST_ELEMENT,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        '' SUB_COST_ELEMENT,
        '' MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        (TON/TOTAL_TON * JUMLAH * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JAN,
        (TON/TOTAL_TON * JUMLAH * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_FEB,
        (TON/TOTAL_TON * JUMLAH * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAR,
        (TON/TOTAL_TON * JUMLAH * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_APR,
        (TON/TOTAL_TON * JUMLAH * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAY,
        (TON/TOTAL_TON * JUMLAH * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUN,
        (TON/TOTAL_TON * JUMLAH * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUL,
        (TON/TOTAL_TON * JUMLAH * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_AUG,
        (TON/TOTAL_TON * JUMLAH * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_SEP,
        (TON/TOTAL_TON * JUMLAH * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_OCT,
        (TON/TOTAL_TON * JUMLAH * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_NOV,
        (TON/TOTAL_TON * JUMLAH * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_DEC,
        (TUKANG_MUAT_TOTAL * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JAN,
        (TUKANG_MUAT_TOTAL * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_FEB,
        (TUKANG_MUAT_TOTAL * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAR,
        (TUKANG_MUAT_TOTAL * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_APR,
        (TUKANG_MUAT_TOTAL * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAY,
        (TUKANG_MUAT_TOTAL * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUN,
        (TUKANG_MUAT_TOTAL * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUL,
        (TUKANG_MUAT_TOTAL * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_AUG,
        (TUKANG_MUAT_TOTAL * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_SEP,
        (TUKANG_MUAT_TOTAL * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_OCT,
        (TUKANG_MUAT_TOTAL * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_NOV,
        (TUKANG_MUAT_TOTAL * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_DEC,
        (TON/TOTAL_TON * JUMLAH) AS QTY_SETAHUN,
        TUKANG_MUAT_TOTAL AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
    FROM (
  SELECT RKT.PERIOD_BUDGET,
       ORG.REGION_CODE,
       RKT.BA_CODE,
       RKT.AFD_CODE,
       RKT.BLOCK_CODE,
       'TM' ACTIVITY_GROUP,
       RKT.COST_ELEMENT,
       '5101030404-1' ACTIVITY_CODE,
       'BONGKAR MUAT' ACTIVITY_DESC,
       RKT.TON,
       (SELECT SUM(TON) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
         AND BA_CODE = RKT.BA_CODE) TOTAL_TON,
       (SELECT SUM(MPP_PERIOD_BUDGET) FROM TR_RKT_CHECKROLL 
        WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
         AND BA_CODE = RKT.BA_CODE
         AND JOB_CODE IN ('FW041')) AS JUMLAH,
       RKT.TUKANG_MUAT_TOTAL
    FROM TR_RKT_PANEN_COST_ELEMENT RKT
       LEFT JOIN TR_RKT_PANEN RKT_INDUK
        ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
       LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = RKT.BA_CODE
   WHERE  RKT.COST_ELEMENT = 'LABOUR'
      $where
       ) SS      
       UNION ALL
       --untuk BIAYA lain lain supervisi perawatan
       SELECT RKT.PERIOD_BUDGET,
       ORG.REGION_CODE,
      RKT.BA_CODE,
           HS.AFD_CODE,
           HS.BLOCK_CODE,
           'TM' TIPE_TRANSAKSI,
          '' COST_ELEMENT,
          RKT.COA_CODE AS ACTIVITY_CODE,
          RKT.COA_DESC AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT,
          '' AS SUB_COST_ELEMENT_DESC,
           '' AS KETERANGAN,
          'MPP' UOM,
          0 QTY_JAN,
          0 QTY_FEB,
          0 QTY_MAR,
          0 QTY_APR,
          0 QTY_MAY,
          0 QTY_JUN,
          0 QTY_JUL,
          0 QTY_AUG,
          0 QTY_SEP,
          0 QTY_OCT,
          0 QTY_NOV,
          0 QTY_DEC,
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
          0 QTY_SETAHUN,
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JAN)+
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_FEB)+
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAR)+
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_APR)+
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAY)+
          (HS.SMS1_TM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JUN)+
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_JUL)+
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_AUG)+
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_SEP)+
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_OCT)+
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_NOV)+
          (HS.SMS2_TM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
          FROM V_TOTAL_RELATION_COST RKT
           LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
                     HS.BA_CODE,
                     HS.AFD_CODE,
                     HS.BLOCK_CODE,
                     SUM (HS.SMS1_TM) SMS1_TM,
                     SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
                     SUM (HS.SMS2_TM) SMS2_TM,
                     SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
                  FROM V_REPORT_SEBARAN_HS_BLOCK HS
                GROUP BY HS.PERIOD_BUDGET,
                     HS.BA_CODE,
                     HS.AFD_CODE,
                     HS.BLOCK_CODE) HS
            ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
             AND HS.BA_CODE = RKT.BA_CODE
           LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
                     HS.BA_CODE,
                     SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
                     SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
                  FROM V_REPORT_SEBARAN_HS_BLOCK HS
                GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE) HS2
            ON HS2.PERIOD_BUDGET = RKT.PERIOD_BUDGET
             AND HS2.BA_CODE = RKT.BA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
          LEFT JOIN (
           SELECT TRC.PERIOD_BUDGET, TRC.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
            FROM TR_RKT_CHECKROLL TRC
           WHERE TRC.JOB_CODE in ('FX130','FX110')
          GROUP BY  TRC.PERIOD_BUDGET, TRC.BA_CODE 
           )MPP_ALL 
         ON MPP_ALL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
         AND MPP_ALL.BA_CODE = RKT.BA_CODE
       WHERE     RKT.COA_CODE = '43800'
           $where      
    ";
    $this->_db->query($query);
    $this->_db->commit();
    //if ($this->_db->commit()) {
      //echo '99 . ' . $query;
    //}
    
    //labour pemupukan (majemuk tunggal)
    $xquery = "INSERT INTO TMP_RPT_KEB_EST_COST_BLOCK (PERIOD_BUDGET,
                    REGION_CODE,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    TIPE_TRANSAKSI,
                    COST_ELEMENT,
                    ACTIVITY_CODE,
                    ACTIVITY_DESC,
                    SUB_COST_ELEMENT,
                    SUB_COST_ELEMENT_DESC,
                    KETERANGAN,
                    UOM,
                    QTY_JAN,
                    QTY_FEB,
                    QTY_MAR,
                    QTY_APR,
                    QTY_MAY,
                    QTY_JUN,
                    QTY_JUL,
                    QTY_AUG,
                    QTY_SEP,
                    QTY_OCT,
                    QTY_NOV,
                    QTY_DEC,
                    COST_JAN,
                    COST_FEB,
                    COST_MAR,
                    COST_APR,
                    COST_MAY,
                    COST_JUN,
                    COST_JUL,
                    COST_AUG,
                    COST_SEP,
                    COST_OCT,
                    COST_NOV,
                    COST_DEC,
                    QTY_SETAHUN,
                    COST_SETAHUN,
                    INSERT_USER,
                    INSERT_TIME)                
       SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          TIPE_TRANSAKSI,
          COST_ELEMENT,
          ACTIVITY_CODE,
          ACTIVITY_DESC,
          SUB_COST_ELEMENT,
          MATERIAL_NAME,
          '' KETERANGAN,
          UOM,
          SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
          SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
          SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
          SUM (NVL (QTY_APR, 0)) AS QTY_APR,
          SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
          SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
          SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
          SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
          SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
          SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
          SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
          SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
          SUM (NVL (COST_JAN, 0)) AS COST_JAN,
          SUM (NVL (COST_FEB, 0)) AS COST_FEB,
          SUM (NVL (COST_MAR, 0)) AS COST_MAR,
          SUM (NVL (COST_APR, 0)) AS COST_APR,
          SUM (NVL (COST_MAY, 0)) AS COST_MAY,
          SUM (NVL (COST_JUN, 0)) AS COST_JUN,
          SUM (NVL (COST_JUL, 0)) AS COST_JUL,
          SUM (NVL (COST_AUG, 0)) AS COST_AUG,
          SUM (NVL (COST_SEP, 0)) AS COST_SEP,
          SUM (NVL (COST_OCT, 0)) AS COST_OCT,
          SUM (NVL (COST_NOV, 0)) AS COST_NOV,
          SUM (NVL (COST_DEC, 0)) AS COST_DEC,
          (  SUM (NVL (QTY_JAN, 0))
           + SUM (NVL (QTY_FEB, 0))
           + SUM (NVL (QTY_MAR, 0))
           + SUM (NVL (QTY_APR, 0))
           + SUM (NVL (QTY_MAY, 0))
           + SUM (NVL (QTY_JUN, 0))
           + SUM (NVL (QTY_JUL, 0))
           + SUM (NVL (QTY_AUG, 0))
           + SUM (NVL (QTY_SEP, 0))
           + SUM (NVL (QTY_OCT, 0))
           + SUM (NVL (QTY_NOV, 0))
           + SUM (NVL (QTY_DEC, 0)))
             AS QTY_SETAHUN,
          (  SUM (NVL (COST_JAN, 0))
           + SUM (NVL (COST_FEB, 0))
           + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0))
           + SUM (NVL (COST_MAY, 0))
           + SUM (NVL (COST_JUN, 0))
           + SUM (NVL (COST_JUL, 0))
           + SUM (NVL (COST_AUG, 0))
           + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0))
           + SUM (NVL (COST_NOV, 0))
           + SUM (NVL (COST_DEC, 0)))
             AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
         FROM (
           -- INI UNTUK PERHITUNGAN PEMUPUKAN (MAJEMUK TUNGGAL)
           SELECT PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              BLOCK_CODE,
              ACTIVITY_GROUP AS TIPE_TRANSAKSI,
              COST_ELEMENT,
              ACTIVITY_CODE,
              ACTIVITY_DESC,
              SUB_COST_ELEMENT,
              MATERIAL_NAME,
              '' RANK_Z,
              UOM,
              JAN_QTY AS QTY_JAN,
              FEB_QTY AS QTY_FEB,
              MAR_QTY AS QTY_MAR,
              APR_QTY AS QTY_APR,
              MAY_QTY AS QTY_MAY,
              JUN_QTY AS QTY_JUN,
              JUL_QTY AS QTY_JUL,
              AUG_QTY AS QTY_AUG,
              SEP_QTY AS QTY_SEP,
              OCT_QTY AS QTY_OCT,
              NOV_QTY AS QTY_NOV,
              DEC_QTY AS QTY_DEC,
              JAN_COST AS COST_JAN,
              FEB_COST AS COST_FEB,
              MAR_COST AS COST_MAR,
              APR_COST AS COST_APR,
              MAY_COST AS COST_MAY,
              JUN_COST AS COST_JUN,
              JUL_COST AS COST_JUL,
              AUG_COST AS COST_AUG,
              SEP_COST AS COST_SEP,
              OCT_COST AS COST_OCT,
              NOV_COST AS COST_NOV,
              DEC_COST AS COST_DEC
             FROM (SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  MAJEMUK
                 FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS1
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS1,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK MAJEMUK' DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                $where
                            )HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020400' -- UNTUK PUPUK  MAJEMUK
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('1' JAN,
                         '2' FEB,
                         '3' MAR,
                         '4' APR,
                         '5' MAY,
                         '6' JUN,
                         '91' JUL,
                         '92' AUG,
                         '93' SEP,
                         '94' OCT,
                         '95' NOV,
                         '96' DEC)))
           UNION ALL
           SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  MAJEMUK
             FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS2
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS2,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK MAJEMUK' DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                $where
                            )HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020400' -- UNTUK PUPUK  MAJEMUK
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('91' JAN,
                         '92' FEB,
                         '93' MAR,
                         '94' APR,
                         '95' MAY,
                         '96' JUN,
                         '7' JUL,
                         '8' AUG,
                         '9' SEP,
                         '10' OCT,
                         '11' NOV,
                         '12' DEC)))
           UNION ALL
           SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  TUNGGAL
             FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS1
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS1,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK TUNGGAL' DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                $where
                            )HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020300' -- UNTUK PUPUK  TUNGGAL
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('1' JAN,
                         '2' FEB,
                         '3' MAR,
                         '4' APR,
                         '5' MAY,
                         '6' JUN,
                         '97' JUL,
                         '98' AUG,
                         '99' SEP,
                         '90' OCT,
                         '91' NOV,
                         '92' DEC)))
           UNION ALL
           SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  TUNGGAL
             FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS2
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS2,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK TUNGGAL' DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                $where
                            )HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020300' -- UNTUK PUPUK  TUNGGAL
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('91' JAN,
                         '92' FEB,
                         '93' MAR,
                         '94' APR,
                         '95' MAY,
                         '96' JUN,
                         '7' JUL,
                         '8' AUG,
                         '9' SEP,
                         '10' OCT,
                         '11' NOV,
                         '12' DEC))))
                         ) REPORT
           GROUP BY PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              BLOCK_CODE,
              TIPE_TRANSAKSI,
              COST_ELEMENT,
              ACTIVITY_CODE,
              ACTIVITY_DESC,
              SUB_COST_ELEMENT,
              MATERIAL_NAME,
              UOM
        UNION ALL --PERHITUNGAN PUPUK MAJEMUK & TUNGGAL (MATERIAL)
   SELECT RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      RKT.MATURITY_STAGE TIPE_TRANSAKSI,
      'MATERIAL' AS COST_ELEMENT,
      RKT.COA_CODE AS ACTIVITY_CODE,
      'PUPUK MAJEMUK' AS ACTIVITY_DESC,
      RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
      RKT.MATERIAL_NAME,
      '' KETERANGAN,
      'KG' UOM,
      RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
      RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
      RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
      RKT.QTY_MAJEMUK_APR AS QTY_APR,
      RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
      RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
      RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
      RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
      RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
      RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
      RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
      RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
      (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
      (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
      (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
      (RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
      (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
      (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
      (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
      (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
      (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
      (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
      (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
      (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
      (  RKT.QTY_MAJEMUK_JAN
       + RKT.QTY_MAJEMUK_FEB
       + RKT.QTY_MAJEMUK_MAR
       + RKT.QTY_MAJEMUK_APR
       + RKT.QTY_MAJEMUK_MAY
       + RKT.QTY_MAJEMUK_JUN
       + RKT.QTY_MAJEMUK_JUL
       + RKT.QTY_MAJEMUK_AUG
       + RKT.QTY_MAJEMUK_SEP
       + RKT.QTY_MAJEMUK_OCT
       + RKT.QTY_MAJEMUK_NOV
       + RKT.QTY_MAJEMUK_DEC)
       AS QTY_SETAHUN,
      (  (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_APR * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE))
       AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      SYSDATE AS INSERT_TIME
   FROM (  SELECT PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE MATERIAL_CODE,
          ACTIVITY_NAME MATERIAL_NAME,
          SUM (QTY_MAJEMUK_JAN) QTY_MAJEMUK_JAN,
          SUM (QTY_MAJEMUK_FEB) QTY_MAJEMUK_FEB,
          SUM (QTY_MAJEMUK_MAR) QTY_MAJEMUK_MAR,
          SUM (QTY_MAJEMUK_APR) QTY_MAJEMUK_APR,
          SUM (QTY_MAJEMUK_MAY) QTY_MAJEMUK_MAY,
          SUM (QTY_MAJEMUK_JUN) QTY_MAJEMUK_JUN,
          SUM (QTY_MAJEMUK_JUL) QTY_MAJEMUK_JUL,
          SUM (QTY_MAJEMUK_AUG) QTY_MAJEMUK_AUG,
          SUM (QTY_MAJEMUK_SEP) QTY_MAJEMUK_SEP,
          SUM (QTY_MAJEMUK_OCT) QTY_MAJEMUK_OCT,
          SUM (QTY_MAJEMUK_NOV) QTY_MAJEMUK_NOV,
          SUM (QTY_MAJEMUK_DEC) QTY_MAJEMUK_DEC
         FROM (SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              RKT.DIS_JAN QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_JAN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              RKT.DIS_FEB QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_FEB
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              RKT.DIS_MAR QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_MAR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              RKT.DIS_APR QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_APR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              RKT.DIS_MAY QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_MAY
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              RKT.DIS_JUN QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_JUN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              RKT.DIS_JUL QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_JUL
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              RKT.DIS_AUG QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_AUG
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              RKT.DIS_SEP QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_SEP
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              RKT.DIS_OCT QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_OCT
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              RKT.DIS_NOV QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_NOV
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              RKT.DIS_DEC QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_DEC
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400')
       GROUP BY PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE,
          ACTIVITY_NAME
       ORDER BY PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE) RKT
      LEFT JOIN TN_HARGA_BARANG HARGA
       ON     HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        AND HARGA.BA_CODE = RKT.BA_CODE
        AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
        AND HARGA.DELETE_USER IS NULL
        AND HARGA.FLAG_TEMP IS NULL
      LEFT JOIN TM_ORGANIZATION ORG
       ON ORG.BA_CODE = RKT.BA_CODE
  WHERE     1 = 1
      AND RKT.MATURITY_STAGE = 'TM'
      $where
  UNION ALL
  SELECT     RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.BLOCK_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            'MATERIAL' AS COST_ELEMENT,
            RKT.COA_CODE AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
            RKT.MATERIAL_NAME,
            '' KETERANGAN,
            'KG' UOM,
            RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
            RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
            RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
            RKT.QTY_TUNGGAL_APR AS QTY_APR,
            RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
            RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
            RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
            RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
            RKT.QTY_TUNGGAL_SEP AS  QTY_SEP,
            RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
            RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
            RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
            (RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
            (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
            (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
            (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
            (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
            (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
            (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
            (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
            (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
            (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
            (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
            (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
            (RKT.QTY_TUNGGAL_JAN +
            RKT.QTY_TUNGGAL_FEB +
            RKT.QTY_TUNGGAL_MAR +
            RKT.QTY_TUNGGAL_APR +
            RKT.QTY_TUNGGAL_MAY +
            RKT.QTY_TUNGGAL_JUN +
            RKT.QTY_TUNGGAL_JUL +
            RKT.QTY_TUNGGAL_AUG +
            RKT.QTY_TUNGGAL_SEP +
            RKT.QTY_TUNGGAL_OCT +
            RKT.QTY_TUNGGAL_NOV +
            RKT.QTY_TUNGGAL_DEC)
            AS QTY_SETAHUN,
            ((RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE)) 
            AS COST_SETAHUN,
            '".$this->_userName."' AS INSERT_USER,
            SYSDATE AS INSERT_TIME
      FROM (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE MATERIAL_CODE,
          ACTIVITY_NAME MATERIAL_NAME,
          SUM (QTY_TUNGGAL_JAN) QTY_TUNGGAL_JAN,
          SUM (QTY_TUNGGAL_FEB) QTY_TUNGGAL_FEB,
          SUM (QTY_TUNGGAL_MAR) QTY_TUNGGAL_MAR,
          SUM (QTY_TUNGGAL_APR) QTY_TUNGGAL_APR,
          SUM (QTY_TUNGGAL_MAY) QTY_TUNGGAL_MAY,
          SUM (QTY_TUNGGAL_JUN) QTY_TUNGGAL_JUN,
          SUM (QTY_TUNGGAL_JUL) QTY_TUNGGAL_JUL,
          SUM (QTY_TUNGGAL_AUG) QTY_TUNGGAL_AUG,
          SUM (QTY_TUNGGAL_SEP) QTY_TUNGGAL_SEP,
          SUM (QTY_TUNGGAL_OCT) QTY_TUNGGAL_OCT,
          SUM (QTY_TUNGGAL_NOV) QTY_TUNGGAL_NOV,
          SUM (QTY_TUNGGAL_DEC) QTY_TUNGGAL_DEC
         FROM (
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              RKT.DIS_JAN QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JAN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              RKT.DIS_FEB QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_FEB
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300' 
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              RKT.DIS_MAR QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              RKT.DIS_APR QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_APR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              RKT.DIS_MAY QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAY
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              RKT.DIS_JUN QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              RKT.DIS_JUL QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUL
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              RKT.DIS_AUG QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_AUG
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              RKT.DIS_SEP QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_SEP
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              RKT.DIS_OCT QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_OCT
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              RKT.DIS_NOV QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_NOV
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              RKT.DIS_DEC QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_DEC
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
              )
       GROUP BY PERIOD_BUDGET,
          BA_CODE,
          BLOCK_CODE,
          AFD_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE,
          ACTIVITY_NAME
       ORDER BY PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE
    )RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 1 = 1
          AND RKT.MATURITY_STAGE = 'TM'
          $where  
    UNION ALL 
    --PERHITUNGAN PUPUK MAJEMUK / TUNGGAL SELAIN COST ELEMENT LABOUR DAN MATERIAL
       SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         QTY_JAN,
         QTY_FEB,
         QTY_MAR,
         QTY_APR,
         QTY_MAY,
         QTY_JUN,
         QTY_JUL,
         QTY_AUG,
         QTY_SEP,
         QTY_OCT,
         QTY_NOV,
         QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC,
         (  QTY_JAN
        + QTY_FEB
        + QTY_MAR
        + QTY_APR
        + QTY_MAY
        + QTY_JUN
        + QTY_JUL
        + QTY_AUG
        + QTY_SEP
        + QTY_OCT
        + QTY_NOV
        + QTY_DEC)
          AS QTY_SETAHUN,
         (  COST_JAN
        + COST_FEB
        + COST_MAR
        + COST_APR
        + COST_MAY
        + COST_JUN
        + COST_JUL
        + COST_AUG
        + COST_SEP
        + COST_OCT
        + COST_NOV
        + COST_DEC)
          AS COST_SETAHUN,
           '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
      FROM (SELECT COST.PERIOD_BUDGET,
         COST.REGION_CODE,
         COST.BA_CODE,
         COST.AFD_CODE,
         COST.BLOCK_CODE,
         KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
         COST.COST_ELEMENT,
         '5101020300' AS ACTIVITY_CODE,
         'PUPUK TUNGGAL' AS ACTIVITY_DESC,
         '' AS SUB_COST_ELEMENT,
         '' AS MATERIAL_NAME,
         '' AS KETERANGAN,
         'KG' UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_JAN
            / KG_PUPUK.QTY_TOTAL_JAN
            * COST.DIS_COST_JAN)
          ELSE
           0
         END
          AS COST_JAN,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_FEB
            / KG_PUPUK.QTY_TOTAL_FEB
            * COST.DIS_COST_FEB)
          ELSE
           0
         END
          AS COST_FEB,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_MAR
            / KG_PUPUK.QTY_TOTAL_MAR
            * COST.DIS_COST_MAR)
          ELSE
           0
         END
          AS COST_MAR,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_APR
            / KG_PUPUK.QTY_TOTAL_APR
            * COST.DIS_COST_APR)
          ELSE
           0
         END
          AS COST_APR,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_MAY
            / KG_PUPUK.QTY_TOTAL_MAY
            * COST.DIS_COST_MAY)
          ELSE
           0
         END
          AS COST_MAY,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_JUN
            / KG_PUPUK.QTY_TOTAL_JUN
            * COST.DIS_COST_JUN)
          ELSE
           0
         END
          AS COST_JUN,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_JUL
            / KG_PUPUK.QTY_TOTAL_JUL
            * COST.DIS_COST_JUL)
          ELSE
           0
         END
          AS COST_JUL,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_AUG
            / KG_PUPUK.QTY_TOTAL_AUG
            * COST.DIS_COST_AUG)
          ELSE
           0
         END
          AS COST_AUG,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_SEP
            / KG_PUPUK.QTY_TOTAL_SEP
            * COST.DIS_COST_SEP)
          ELSE
           0
         END
          AS COST_SEP,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_OCT
            / KG_PUPUK.QTY_TOTAL_OCT
            * COST.DIS_COST_OCT)
          ELSE
           0
         END
          AS COST_OCT,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_NOV
            / KG_PUPUK.QTY_TOTAL_NOV
            * COST.DIS_COST_NOV)
          ELSE
           0
         END
          AS COST_NOV,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
          THEN
           (  KG_PUPUK.QTY_TUNGGAL_DEC
            / KG_PUPUK.QTY_TOTAL_DEC
            * COST.DIS_COST_DEC)
          ELSE
           0
         END
          AS COST_DEC
      FROM    (  SELECT PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              BLOCK_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
             FROM (  SELECT RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                    SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                    SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                    SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                    SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                    SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                    SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                    0 DIS_COST_JUL,
                    0 DIS_COST_AUG,
                    0 DIS_COST_SEP,
                    0 DIS_COST_OCT,
                    0 DIS_COST_NOV,
                    0 DIS_COST_DEC,
                    MAX (RKT.COST_LABOUR_POKOK)
                     AS COST_LABOUR_POKOK,
                    MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                    MAX (RKT.COST_TRANSPORT_KG)
                     AS COST_TRANSPORT_KG
                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                    LEFT JOIN
                     TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                WHERE RKT.DELETE_USER IS NULL
                    AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                    AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'TRANSPORT')
                    $where
               GROUP BY RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS1
               UNION ALL
                 SELECT RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                    0 DIS_COST_JAN,
                    0 DIS_COST_FEB,
                    0 DIS_COST_MAR,
                    0 DIS_COST_APR,
                    0 DIS_COST_MAY,
                    0 DIS_COST_JUN,
                    SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                    SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                    SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                    SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                    SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                    SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                    MAX (RKT.COST_LABOUR_POKOK)
                     AS COST_LABOUR_POKOK,
                    MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                    MAX (RKT.COST_TRANSPORT_KG)
                     AS COST_TRANSPORT_KG
                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                    LEFT JOIN
                     TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                WHERE RKT.DELETE_USER IS NULL
                    AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                    AND RKT.COST_ELEMENT NOT IN ('MATERIAL', 'TRANSPORT')
                    $where
               GROUP BY RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS2)
           GROUP BY PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              BLOCK_CODE,
              COST_ELEMENT,
              MATURITY_STAGE) COST
         LEFT JOIN
          V_KG_PUPUK_AFD KG_PUPUK
         ON     COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
    UNION ALL
    -- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
    SELECT COST.PERIOD_BUDGET,
         COST.REGION_CODE,
         COST.BA_CODE,
         COST.AFD_CODE,
         COST.BLOCK_CODE,
         KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
         COST.COST_ELEMENT,
         '5101020400' AS ACTIVITY_CODE,
         'PUPUK MAJEMUK' AS ACTIVITY_NAME,
         '' AS SUB_COST_ELEMENT,
         '' AS MATERIAL_NAME,
         '' AS KETERANGAN,
         'HK' UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_JAN
            / KG_PUPUK.QTY_TOTAL_JAN
            * COST.DIS_COST_JAN)
          ELSE
           0
         END
          AS COST_JAN,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_FEB
            / KG_PUPUK.QTY_TOTAL_FEB
            * COST.DIS_COST_FEB)
          ELSE
           0
         END
          AS COST_FEB,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_MAR
            / KG_PUPUK.QTY_TOTAL_MAR
            * COST.DIS_COST_MAR)
          ELSE
           0
         END
          AS COST_MAR,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_APR
            / KG_PUPUK.QTY_TOTAL_APR
            * COST.DIS_COST_APR)
          ELSE
           0
         END
          AS COST_APR,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_MAY
            / KG_PUPUK.QTY_TOTAL_MAY
            * COST.DIS_COST_MAY)
          ELSE
           0
         END
          AS COST_MAY,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_JUN
            / KG_PUPUK.QTY_TOTAL_JUN
            * COST.DIS_COST_JUN)
          ELSE
           0
         END
          AS COST_JUN,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_JUL
            / KG_PUPUK.QTY_TOTAL_JUL
            * COST.DIS_COST_JUL)
          ELSE
           0
         END
          AS COST_JUL,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_AUG
            / KG_PUPUK.QTY_TOTAL_AUG
            * COST.DIS_COST_AUG)
          ELSE
           0
         END
          AS COST_AUG,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_SEP
            / KG_PUPUK.QTY_TOTAL_SEP
            * COST.DIS_COST_SEP)
          ELSE
           0
         END
          AS COST_SEP,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_OCT
            / KG_PUPUK.QTY_TOTAL_OCT
            * COST.DIS_COST_OCT)
          ELSE
           0
         END
          AS COST_OCT,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_NOV
            / KG_PUPUK.QTY_TOTAL_NOV
            * COST.DIS_COST_NOV)
          ELSE
           0
         END
          AS COST_NOV,
         CASE
          WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
          THEN
           (  KG_PUPUK.QTY_MAJEMUK_DEC
            / KG_PUPUK.QTY_TOTAL_DEC
            * COST.DIS_COST_DEC)
          ELSE
           0
         END
          AS COST_DEC
      FROM    (  SELECT PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              BLOCK_CODE,
              COST_ELEMENT,
              MATURITY_STAGE,
              SUM (DIS_COST_JAN) DIS_COST_JAN,
              SUM (DIS_COST_FEB) DIS_COST_FEB,
              SUM (DIS_COST_MAR) DIS_COST_MAR,
              SUM (DIS_COST_APR) DIS_COST_APR,
              SUM (DIS_COST_MAY) DIS_COST_MAY,
              SUM (DIS_COST_JUN) DIS_COST_JUN,
              SUM (DIS_COST_JUL) DIS_COST_JUL,
              SUM (DIS_COST_AUG) DIS_COST_AUG,
              SUM (DIS_COST_SEP) DIS_COST_SEP,
              SUM (DIS_COST_OCT) DIS_COST_OCT,
              SUM (DIS_COST_NOV) DIS_COST_NOV,
              SUM (DIS_COST_DEC) DIS_COST_DEC,
              MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
              MAX (COST_TOOLS_KG) COST_TOOLS_KG,
              MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
             FROM (  SELECT RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                    SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                    SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                    SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                    SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                    SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                    SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                    0 DIS_COST_JUL,
                    0 DIS_COST_AUG,
                    0 DIS_COST_SEP,
                    0 DIS_COST_OCT,
                    0 DIS_COST_NOV,
                    0 DIS_COST_DEC,
                    MAX (RKT.COST_LABOUR_POKOK)
                     AS COST_LABOUR_POKOK,
                    MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                    MAX (RKT.COST_TRANSPORT_KG)
                     AS COST_TRANSPORT_KG
                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                    LEFT JOIN
                     TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                WHERE RKT.DELETE_USER IS NULL
                    AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                    AND RKT.COST_ELEMENT NOT IN('MATERIAL', 'TRANSPORT')
                    $where
               GROUP BY RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS1
               UNION ALL
                 SELECT RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                    0 DIS_COST_JAN,
                    0 DIS_COST_FEB,
                    0 DIS_COST_MAR,
                    0 DIS_COST_APR,
                    0 DIS_COST_MAY,
                    0 DIS_COST_JUN,
                    SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                    SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                    SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                    SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                    SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                    SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                    MAX (RKT.COST_LABOUR_POKOK)
                     AS COST_LABOUR_POKOK,
                    MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                    MAX (RKT.COST_TRANSPORT_KG)
                     AS COST_TRANSPORT_KG
                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                    LEFT JOIN
                     TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                WHERE RKT.DELETE_USER IS NULL
                    AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                    AND RKT.COST_ELEMENT NOT IN('MATERIAL', 'TRANSPORT')
                    $where
               GROUP BY RKT.PERIOD_BUDGET,
                    ORG.REGION_CODE,
                    RKT.BA_CODE,
                    RKT.AFD_CODE,
                    RKT.BLOCK_CODE,
                    RKT.COST_ELEMENT,
                    RKT.MATURITY_STAGE_SMS2)
           GROUP BY PERIOD_BUDGET,
              REGION_CODE,
              BA_CODE,
              AFD_CODE,
              BLOCK_CODE,
              COST_ELEMENT,
              MATURITY_STAGE) COST
         LEFT JOIN
          V_KG_PUPUK_AFD KG_PUPUK
         ON     COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE)
  UNION ALL
    -- INI UNTUK PERHITUNGAN PUPUK MAJEMUK TRANSPORT
    SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       '' KETERANGAN,
       UOM,
       SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
       SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
       SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
       SUM (NVL (QTY_APR, 0)) AS QTY_APR,
       SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
       SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
       SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
       SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
       SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
       SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
       SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
       SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
       SUM (NVL (COST_JAN, 0)) AS COST_JAN,
       SUM (NVL (COST_FEB, 0)) AS COST_FEB,
       SUM (NVL (COST_MAR, 0)) AS COST_MAR,
       SUM (NVL (COST_APR, 0)) AS COST_APR,
       SUM (NVL (COST_MAY, 0)) AS COST_MAY,
       SUM (NVL (COST_JUN, 0)) AS COST_JUN,
       SUM (NVL (COST_JUL, 0)) AS COST_JUL,
       SUM (NVL (COST_AUG, 0)) AS COST_AUG,
       SUM (NVL (COST_SEP, 0)) AS COST_SEP,
       SUM (NVL (COST_OCT, 0)) AS COST_OCT,
       SUM (NVL (COST_NOV, 0)) AS COST_NOV,
       SUM (NVL (COST_DEC, 0)) AS COST_DEC,
       (  SUM (NVL (QTY_JAN, 0))
        + SUM (NVL (QTY_FEB, 0))
        + SUM (NVL (QTY_MAR, 0))
        + SUM (NVL (QTY_APR, 0))
        + SUM (NVL (QTY_MAY, 0))
        + SUM (NVL (QTY_JUN, 0))
        + SUM (NVL (QTY_JUL, 0))
        + SUM (NVL (QTY_AUG, 0))
        + SUM (NVL (QTY_SEP, 0))
        + SUM (NVL (QTY_OCT, 0))
        + SUM (NVL (QTY_NOV, 0))
        + SUM (NVL (QTY_DEC, 0)))
        AS QTY_SETAHUN,
       (  SUM (NVL (COST_JAN, 0))
        + SUM (NVL (COST_FEB, 0))
        + SUM (NVL (COST_MAR, 0))
        + SUM (NVL (COST_APR, 0))
        + SUM (NVL (COST_MAY, 0))
        + SUM (NVL (COST_JUN, 0))
        + SUM (NVL (COST_JUL, 0))
        + SUM (NVL (COST_AUG, 0))
        + SUM (NVL (COST_SEP, 0))
        + SUM (NVL (COST_OCT, 0))
        + SUM (NVL (COST_NOV, 0))
        + SUM (NVL (COST_DEC, 0)))
        AS COST_SETAHUN,
       '".$this->_userName."' AS INSERT_USER,
       SYSDATE AS INSERT_TIME
    FROM (SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         (COST_JAN / NULLIF (PRICE_QTY_VRA,0)) AS QTY_JAN,
         (COST_FEB / NULLIF (PRICE_QTY_VRA,0)) AS QTY_FEB,
         (COST_MAR / NULLIF (PRICE_QTY_VRA,0)) AS QTY_MAR,
         (COST_APR / NULLIF (PRICE_QTY_VRA,0)) AS QTY_APR,
         (COST_MAY / NULLIF (PRICE_QTY_VRA,0)) AS QTY_MAY,
         (COST_JUN / NULLIF (PRICE_QTY_VRA,0)) AS QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020400' AS ACTIVITY_CODE,
             'PUPUK MAJEMUK' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JAN) =
                  '5101020400'
              THEN
                 (RKT.DIS_JAN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JAN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_FEB) =
                  '5101020400'
              THEN
                 (RKT.DIS_FEB
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_FEB,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAR) =
                  '5101020400'
              THEN
                 (RKT.DIS_MAR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_APR) =
                  '5101020400'
              THEN
                 (RKT.DIS_APR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_APR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAY) =
                  '5101020400'
              THEN
                 (RKT.DIS_MAY
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAY,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUN) =
                  '5101020400'
              THEN
                 (RKT.DIS_JUN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUN,
             0 COST_JUL,
             0 COST_AUG,
             0 COST_SEP,
             0 COST_OCT,
             0 COST_NOV,
             0 COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS1,
                 MATERIAL_CODE_JAN,
                 DIS_JAN,
                 MATERIAL_CODE_FEB,
                 DIS_FEB,
                 MATERIAL_CODE_MAR,
                 DIS_MAR,
                 MATERIAL_CODE_APR,
                 DIS_APR,
                 MATERIAL_CODE_MAY,
                 DIS_MAY,
                 MATERIAL_CODE_JUN,
                 DIS_JUN
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS1 = 'TM'
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                    $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE)
      UNION ALL
      SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         (COST_JUL / NULLIF(PRICE_QTY_VRA,0)) AS QTY_JUL,
         (COST_AUG / NULLIF(PRICE_QTY_VRA,0)) AS QTY_AUG,
         (COST_SEP / NULLIF(PRICE_QTY_VRA,0)) AS QTY_SEP,
         (COST_OCT / NULLIF(PRICE_QTY_VRA,0)) AS QTY_OCT,
         (COST_NOV / NULLIF(PRICE_QTY_VRA,0)) AS QTY_NOV,
         (COST_DEC / NULLIF(PRICE_QTY_VRA,0)) AS QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020400' AS ACTIVITY_CODE,
             'PUPUK MAJEMUK' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             0 COST_JAN,
             0 COST_FEB,
             0 COST_MAR,
             0 COST_APR,
             0 COST_MAY,
             0 COST_JUN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUL) =
                  '5101020400'
              THEN
                 (RKT.DIS_JUL
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUL,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_AUG) =
                  '5101020400'
              THEN
                 (RKT.DIS_AUG
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_AUG,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_SEP) =
                  '5101020400'
              THEN
                 (RKT.DIS_SEP
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_SEP,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_OCT) =
                  '5101020400'
              THEN
                 (RKT.DIS_OCT
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_OCT,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_NOV) =
                  '5101020400'
              THEN
                 (RKT.DIS_NOV
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_NOV,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_DEC) =
                  '5101020400'
              THEN
                 (RKT.DIS_DEC
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS2,
                 MATERIAL_CODE_JUL,
                 DIS_JUL,
                 MATERIAL_CODE_AUG,
                 DIS_AUG,
                 MATERIAL_CODE_SEP,
                 DIS_SEP,
                 MATERIAL_CODE_OCT,
                 DIS_OCT,
                 MATERIAL_CODE_NOV,
                 DIS_NOV,
                 MATERIAL_CODE_DEC,
                 DIS_DEC
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS2 = 'TM'
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                    $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE))
          GROUP BY PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               AFD_CODE,
               BLOCK_CODE,
               TIPE_TRANSAKSI,
               COST_ELEMENT,
               ACTIVITY_CODE,
               ACTIVITY_DESC,
               SUB_COST_ELEMENT,
               MATERIAL_NAME,
               UOM
  UNION ALL
    -- INI UNTUK PERHITUNGAN PUPUK TUNGGAL TRANSPORT
    SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       '' KETERANGAN,
       UOM,
       SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
       SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
       SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
       SUM (NVL (QTY_APR, 0)) AS QTY_APR,
       SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
       SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
       SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
       SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
       SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
       SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
       SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
       SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
       SUM (NVL (COST_JAN, 0)) AS COST_JAN,
       SUM (NVL (COST_FEB, 0)) AS COST_FEB,
       SUM (NVL (COST_MAR, 0)) AS COST_MAR,
       SUM (NVL (COST_APR, 0)) AS COST_APR,
       SUM (NVL (COST_MAY, 0)) AS COST_MAY,
       SUM (NVL (COST_JUN, 0)) AS COST_JUN,
       SUM (NVL (COST_JUL, 0)) AS COST_JUL,
       SUM (NVL (COST_AUG, 0)) AS COST_AUG,
       SUM (NVL (COST_SEP, 0)) AS COST_SEP,
       SUM (NVL (COST_OCT, 0)) AS COST_OCT,
       SUM (NVL (COST_NOV, 0)) AS COST_NOV,
       SUM (NVL (COST_DEC, 0)) AS COST_DEC,
       (  SUM (NVL (QTY_JAN, 0))
        + SUM (NVL (QTY_FEB, 0))
        + SUM (NVL (QTY_MAR, 0))
        + SUM (NVL (QTY_APR, 0))
        + SUM (NVL (QTY_MAY, 0))
        + SUM (NVL (QTY_JUN, 0))
        + SUM (NVL (QTY_JUL, 0))
        + SUM (NVL (QTY_AUG, 0))
        + SUM (NVL (QTY_SEP, 0))
        + SUM (NVL (QTY_OCT, 0))
        + SUM (NVL (QTY_NOV, 0))
        + SUM (NVL (QTY_DEC, 0)))
        AS QTY_SETAHUN,
       (  SUM (NVL (COST_JAN, 0))
        + SUM (NVL (COST_FEB, 0))
        + SUM (NVL (COST_MAR, 0))
        + SUM (NVL (COST_APR, 0))
        + SUM (NVL (COST_MAY, 0))
        + SUM (NVL (COST_JUN, 0))
        + SUM (NVL (COST_JUL, 0))
        + SUM (NVL (COST_AUG, 0))
        + SUM (NVL (COST_SEP, 0))
        + SUM (NVL (COST_OCT, 0))
        + SUM (NVL (COST_NOV, 0))
        + SUM (NVL (COST_DEC, 0)))
        AS COST_SETAHUN,
       '".$this->_userName."' AS INSERT_USER,
       SYSDATE AS INSERT_TIME
    FROM (SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         (COST_JAN / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_JAN,
         (COST_FEB / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_FEB,
         (COST_MAR / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_MAR,
         (COST_APR / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_APR,
         (COST_MAY / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_MAY,
         (COST_JUN / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020300' AS ACTIVITY_CODE,
             'PUPUK TUNGGAL' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JAN) =
                  '5101020300'
              THEN
                 (RKT.DIS_JAN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JAN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_FEB) =
                  '5101020300'
              THEN
                 (RKT.DIS_FEB
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_FEB,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAR) =
                  '5101020300'
              THEN
                 (RKT.DIS_MAR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_APR) =
                  '5101020300'
              THEN
                 (RKT.DIS_APR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_APR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAY) =
                  '5101020300'
              THEN
                 (RKT.DIS_MAY
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAY,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUN) =
                  '5101020300'
              THEN
                 (RKT.DIS_JUN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUN,
             0 COST_JUL,
             0 COST_AUG,
             0 COST_SEP,
             0 COST_OCT,
             0 COST_NOV,
             0 COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS1,
                 MATERIAL_CODE_JAN,
                 DIS_JAN,
                 MATERIAL_CODE_FEB,
                 DIS_FEB,
                 MATERIAL_CODE_MAR,
                 DIS_MAR,
                 MATERIAL_CODE_APR,
                 DIS_APR,
                 MATERIAL_CODE_MAY,
                 DIS_MAY,
                 MATERIAL_CODE_JUN,
                 DIS_JUN
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS1 = 'TM'
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                     $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE)
      UNION ALL
      SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         (COST_JUL / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_JUL,
         (COST_AUG / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_AUG,
         (COST_SEP / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_SEP,
         (COST_OCT / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_OCT,
         (COST_NOV / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_NOV,
         (COST_DEC / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020300' AS ACTIVITY_CODE,
             'PUPUK TUNGGAL' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             0 COST_JAN,
             0 COST_FEB,
             0 COST_MAR,
             0 COST_APR,
             0 COST_MAY,
             0 COST_JUN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUL) =
                  '5101020300'
              THEN
                 (RKT.DIS_JUL
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUL,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_AUG) =
                  '5101020300'
              THEN
                 (RKT.DIS_AUG
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_AUG,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_SEP) =
                  '5101020300'
              THEN
                 (RKT.DIS_SEP
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_SEP,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_OCT) =
                  '5101020300'
              THEN
                 (RKT.DIS_OCT
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_OCT,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_NOV) =
                  '5101020300'
              THEN
                 (RKT.DIS_NOV
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_NOV,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_DEC) =
                  '5101020300'
              THEN
                 (RKT.DIS_DEC
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS2,
                 MATERIAL_CODE_JUL,
                 DIS_JUL,
                 MATERIAL_CODE_AUG,
                 DIS_AUG,
                 MATERIAL_CODE_SEP,
                 DIS_SEP,
                 MATERIAL_CODE_OCT,
                 DIS_OCT,
                 MATERIAL_CODE_NOV,
                 DIS_NOV,
                 MATERIAL_CODE_DEC,
                 DIS_DEC
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS2 = 'TM'
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                     $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE))
    GROUP BY PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         UOM         
  UNION ALL 
  -- INI UNTUK PERHITUNGAN PUPUK TUNGGAL TOOLS
    SELECT PERIOD_BUDGET,
     REGION_CODE,
     BA_CODE,
     AFD_CODE,
     BLOCK_CODE,
     TIPE_TRANSAKSI,
     COST_ELEMENT,
     ACTIVITY_CODE,
     ACTIVITY_DESC,
     SUB_COST_ELEMENT,
     MATERIAL_NAME,
     KETERANGAN,
     UOM,
     MAX (QTY_JAN) QTY_JAN,
     MAX (QTY_FEB) QTY_FEB,
     MAX (QTY_MAR) QTY_MAR,
     MAX (QTY_APR) QTY_APR,
     MAX (QTY_MAY) QTY_MAY,
     MAX (QTY_JUN) QTY_JUN,
     MAX (QTY_JUL) QTY_JUL,
     MAX (QTY_AUG) QTY_AUG,
     MAX (QTY_SEP) QTY_SEP,
     MAX (QTY_OCT) QTY_OCT,
     MAX (QTY_NOV) QTY_NOV,
     MAX (QTY_DEC) QTY_DEC,
     SUM (COST_JAN) AS COST_JAN,
     SUM (COST_FEB) AS COST_FEB,
     SUM (COST_MAR) AS COST_MAR,
     SUM (COST_APR) AS COST_APR,
     SUM (COST_MAY) AS COST_MAY,
     SUM (COST_JUN) AS COST_JUN,
     SUM (COST_JUL) AS COST_JUL,
     SUM (COST_AUG) AS COST_AUG,
     SUM (COST_SEP) AS COST_SEP,
     SUM (COST_OCT) AS COST_OCT,
     SUM (COST_NOV) AS COST_NOV,
     SUM (COST_DEC) AS COST_DEC,
     MAX (QTY_JAN) + 
     MAX (QTY_FEB) +
     MAX (QTY_MAR) +
     MAX (QTY_APR) +
     MAX (QTY_MAY) +
     MAX (QTY_JUN) +
     MAX (QTY_JUL) +
     MAX (QTY_AUG) +
     MAX (QTY_SEP) +
     MAX (QTY_OCT) +
     MAX (QTY_NOV) +
     MAX (QTY_DEC) QTY_SETAHUN,         
     SUM (COST_JAN) +
     SUM (COST_FEB) +
     SUM (COST_MAR) +
     SUM (COST_APR) +
     SUM (COST_MAY) +
     SUM (COST_JUN) +
     SUM (COST_JUL) +
     SUM (COST_AUG) +
     SUM (COST_SEP) +
     SUM (COST_OCT) +
     SUM (COST_NOV) +
     SUM (COST_DEC) AS COST_SETAHUN,
     '".$this->_userName."' AS INSERT_USER,
     SYSDATE AS INSERT_TIME
    FROM (SELECT RKT.PERIOD_BUDGET,
           ORG.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
           'TOOLS' AS COST_ELEMENT,
           '5101020300' AS ACTIVITY_CODE,
           'PUPUK TUNGGAL' AS ACTIVITY_DESC,
           TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
           TM.MATERIAL_NAME,
           '' AS KETERANGAN,
           'POKOK' AS UOM,
           NVL (DIS_JAN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_JAN,
           NVL (DIS_FEB, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_FEB,
           NVL (DIS_MAR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_MAR,
           NVL (DIS_APR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_APR,
           NVL (DIS_MAY, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_MAY,
           NVL (DIS_JUN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_JUN,
           0 AS QTY_JUL,
           0 AS QTY_AUG,
           0 AS QTY_SEP,
           0 AS QTY_OCT,
           0 AS QTY_NOV,
           0 AS QTY_DEC,
           NVL (DIS_JAN, 0) * RP_QTY_INTERNAL AS COST_JAN,
           NVL (DIS_FEB, 0) * RP_QTY_INTERNAL AS COST_FEB,
           NVL (DIS_MAR, 0) * RP_QTY_INTERNAL AS COST_MAR,
           NVL (DIS_APR, 0) * RP_QTY_INTERNAL AS COST_APR,
           NVL (DIS_MAY, 0) * RP_QTY_INTERNAL AS COST_MAY,
           NVL (DIS_JUN, 0) * RP_QTY_INTERNAL AS COST_JUN,
           0 AS COST_JUL,
           0 AS COST_AUG,
           0 AS COST_SEP,
           0 AS COST_OCT,
           0 AS COST_NOV,
           0 AS COST_DEC
        FROM TR_RKT_PUPUK_DISTRIBUSI RKT
           LEFT JOIN TM_HECTARE_STATEMENT THS
            ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND RKT.BA_CODE = THS.BA_CODE
               AND RKT.AFD_CODE = THS.AFD_CODE
               AND RKT.BLOCK_CODE = THS.BLOCK_CODE
           LEFT JOIN TN_INFRASTRUKTUR TNI
            ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND TNI.BA_CODE = THS.BA_CODE
               AND ACTIVITY_CODE = '43750'
           LEFT JOIN TM_MATERIAL TM
            ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND TM.BA_CODE = TNI.BA_CODE
               AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TN_HARGA_BARANG THB
            ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND THB.BA_CODE = TNI.BA_CODE
               AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TM_ORGANIZATION ORG
            ON     ORG.BA_CODE = RKT.BA_CODE
         WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
           AND RKT.MATURITY_STAGE_SMS1 = 'TM'
           AND TNI.COST_ELEMENT = 'TOOLS'
           AND TM.COA_CODE = '5101020300'
           $where3
        UNION ALL
        SELECT RKT.PERIOD_BUDGET,
           ORG.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
           'TOOLS' AS COST_ELEMENT,
           '5101020300' AS ACTIVITY_CODE,
           'PUPUK TUNGGAL' AS ACTIVITY_DESC,
           TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
           TM.MATERIAL_NAME,
           '' AS KETERANGAN,
           'POKOK' AS UOM,
           0 AS QTY_JAN,
           0 AS QTY_FEB,
           0 AS QTY_MAR,
           0 AS QTY_APR,
           0 AS QTY_MAY,
           0 AS QTY_JUN,
           NVL (DIS_JUL, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_JUL,
           NVL (DIS_AUG, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_AUG,
           NVL (DIS_SEP, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_SEP,
           NVL (DIS_OCT, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_OCT,
           NVL (DIS_NOV, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_NOV,
           NVL (DIS_DEC, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_DEC,
           0 AS COST_JAN,
           0 AS COST_FEB,
           0 AS COST_MAR,
           0 AS COST_APR,
           0 AS COST_MAY,
           0 AS COST_JUN,
           NVL (DIS_JUL, 0) * RP_QTY_INTERNAL AS COST_JUL,
           NVL (DIS_AUG, 0) * RP_QTY_INTERNAL AS COST_AUG,
           NVL (DIS_SEP, 0) * RP_QTY_INTERNAL AS COST_SEP,
           NVL (DIS_OCT, 0) * RP_QTY_INTERNAL AS COST_OCT,
           NVL (DIS_NOV, 0) * RP_QTY_INTERNAL AS COST_NOV,
           NVL (DIS_DEC, 0) * RP_QTY_INTERNAL AS COST_DEC
        FROM TR_RKT_PUPUK_DISTRIBUSI RKT
           LEFT JOIN TM_HECTARE_STATEMENT THS
            ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND RKT.BA_CODE = THS.BA_CODE
               AND RKT.AFD_CODE = THS.AFD_CODE
               AND RKT.BLOCK_CODE = THS.BLOCK_CODE
           LEFT JOIN TN_INFRASTRUKTUR TNI
            ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND TNI.BA_CODE = THS.BA_CODE
               AND ACTIVITY_CODE = '43750'
           LEFT JOIN TM_MATERIAL TM
            ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND TM.BA_CODE = TNI.BA_CODE
               AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TN_HARGA_BARANG THB
            ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND THB.BA_CODE = TNI.BA_CODE
               AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TM_ORGANIZATION ORG
            ON     ORG.BA_CODE = RKT.BA_CODE
         WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
           AND RKT.MATURITY_STAGE_SMS1 = 'TM'
           AND TNI.COST_ELEMENT = 'TOOLS'
           AND TM.COA_CODE = '5101020300'          
           $where3)
  GROUP BY PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       KETERANGAN,
       UOM
  UNION ALL
  -- INI UNTUK PERHITUNGAN PUPUK MAJEMUK TOOLS
  SELECT PERIOD_BUDGET,
     REGION_CODE,
     BA_CODE,
     AFD_CODE,
     BLOCK_CODE,
     TIPE_TRANSAKSI,
     COST_ELEMENT,
     ACTIVITY_CODE,
     ACTIVITY_DESC,
     SUB_COST_ELEMENT,
     MATERIAL_NAME,
     KETERANGAN,
     UOM,
     MAX (QTY_JAN) QTY_JAN,
     MAX (QTY_FEB) QTY_FEB,
     MAX (QTY_MAR) QTY_MAR,
     MAX (QTY_APR) QTY_APR,
     MAX (QTY_MAY) QTY_MAY,
     MAX (QTY_JUN) QTY_JUN,
     MAX (QTY_JUL) QTY_JUL,
     MAX (QTY_AUG) QTY_AUG,
     MAX (QTY_SEP) QTY_SEP,
     MAX (QTY_OCT) QTY_OCT,
     MAX (QTY_NOV) QTY_NOV,
     MAX (QTY_DEC) QTY_DEC,
     SUM (COST_JAN) AS COST_JAN,
     SUM (COST_FEB) AS COST_FEB,
     SUM (COST_MAR) AS COST_MAR,
     SUM (COST_APR) AS COST_APR,
     SUM (COST_MAY) AS COST_MAY,
     SUM (COST_JUN) AS COST_JUN,
     SUM (COST_JUL) AS COST_JUL,
     SUM (COST_AUG) AS COST_AUG,
     SUM (COST_SEP) AS COST_SEP,
     SUM (COST_OCT) AS COST_OCT,
     SUM (COST_NOV) AS COST_NOV,
     SUM (COST_DEC) AS COST_DEC,
     MAX (QTY_JAN) + 
     MAX (QTY_FEB) +
     MAX (QTY_MAR) +
     MAX (QTY_APR) +
     MAX (QTY_MAY) +
     MAX (QTY_JUN) +
     MAX (QTY_JUL) +
     MAX (QTY_AUG) +
     MAX (QTY_SEP) +
     MAX (QTY_OCT) +
     MAX (QTY_NOV) +
     MAX (QTY_DEC) QTY_SETAHUN,         
     SUM (COST_JAN) +
     SUM (COST_FEB) +
     SUM (COST_MAR) +
     SUM (COST_APR) +
     SUM (COST_MAY) +
     SUM (COST_JUN) +
     SUM (COST_JUL) +
     SUM (COST_AUG) +
     SUM (COST_SEP) +
     SUM (COST_OCT) +
     SUM (COST_NOV) +
     SUM (COST_DEC) AS COST_SETAHUN,
     '".$this->_userName."' AS INSERT_USER,
     SYSDATE AS INSERT_TIME
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
             'TOOLS' AS COST_ELEMENT,
             '5101020400' AS ACTIVITY_CODE,
             'PUPUK MAJEMUK' AS ACTIVITY_DESC,
             TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
             TM.MATERIAL_NAME,
             '' AS KETERANGAN,
             'POKOK' AS UOM,
             NVL (DIS_JAN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_JAN,
             NVL (DIS_FEB, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_FEB,
             NVL (DIS_MAR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_MAR,
             NVL (DIS_APR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_APR,
             NVL (DIS_MAY, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_MAY,
             NVL (DIS_JUN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_JUN,
             0 AS QTY_JUL,
             0 AS QTY_AUG,
             0 AS QTY_SEP,
             0 AS QTY_OCT,
             0 AS QTY_NOV,
             0 AS QTY_DEC,
             NVL (DIS_JAN, 0) * RP_QTY_INTERNAL AS COST_JAN,
             NVL (DIS_FEB, 0) * RP_QTY_INTERNAL AS COST_FEB,
             NVL (DIS_MAR, 0) * RP_QTY_INTERNAL AS COST_MAR,
             NVL (DIS_APR, 0) * RP_QTY_INTERNAL AS COST_APR,
             NVL (DIS_MAY, 0) * RP_QTY_INTERNAL AS COST_MAY,
             NVL (DIS_JUN, 0) * RP_QTY_INTERNAL AS COST_JUN,
             0 AS COST_JUL,
             0 AS COST_AUG,
             0 AS COST_SEP,
             0 AS COST_OCT,
             0 AS COST_NOV,
             0 AS COST_DEC
          FROM TR_RKT_PUPUK_DISTRIBUSI RKT
             LEFT JOIN TM_HECTARE_STATEMENT THS
              ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
                 AND RKT.BA_CODE = THS.BA_CODE
                 AND RKT.AFD_CODE = THS.AFD_CODE
                 AND RKT.BLOCK_CODE = THS.BLOCK_CODE
             LEFT JOIN TN_INFRASTRUKTUR TNI
              ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
                 AND TNI.BA_CODE = THS.BA_CODE
                 AND ACTIVITY_CODE = '43750'
             LEFT JOIN TM_MATERIAL TM
              ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
                 AND TM.BA_CODE = TNI.BA_CODE
                 AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
             LEFT JOIN TN_HARGA_BARANG THB
              ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
                 AND THB.BA_CODE = TNI.BA_CODE
                 AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
             LEFT JOIN TM_ORGANIZATION ORG
              ON     ORG.BA_CODE = RKT.BA_CODE
           WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
             AND RKT.MATURITY_STAGE_SMS1 = 'TM'
             AND TNI.COST_ELEMENT = 'TOOLS'
             AND TM.COA_CODE = '5101020400'
             $where3
          UNION
          SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
             'TOOLS' AS COST_ELEMENT,
             '5101020400' AS ACTIVITY_CODE,
             'PUPUK MAJEMUK' AS ACTIVITY_DESC,
             TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
             TM.MATERIAL_NAME,
             '' AS KETERANGAN,
             'POKOK' AS UOM,
             0 AS QTY_JAN,
             0 AS QTY_FEB,
             0 AS QTY_MAR,
             0 AS QTY_APR,
             0 AS QTY_MAY,
             0 AS QTY_JUN,
             NVL (DIS_JUL, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_JUL,
             NVL (DIS_AUG, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_AUG,
             NVL (DIS_SEP, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_SEP,
             NVL (DIS_OCT, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_OCT,
             NVL (DIS_NOV, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_NOV,
             NVL (DIS_DEC, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
              AS QTY_DEC,
             0 AS COST_JAN,
             0 AS COST_FEB,
             0 AS COST_MAR,
             0 AS COST_APR,
             0 AS COST_MAY,
             0 AS COST_JUN,
             NVL (DIS_JUL, 0) * RP_QTY_INTERNAL AS COST_JUL,
             NVL (DIS_AUG, 0) * RP_QTY_INTERNAL AS COST_AUG,
             NVL (DIS_SEP, 0) * RP_QTY_INTERNAL AS COST_SEP,
             NVL (DIS_OCT, 0) * RP_QTY_INTERNAL AS COST_OCT,
             NVL (DIS_NOV, 0) * RP_QTY_INTERNAL AS COST_NOV,
             NVL (DIS_DEC, 0) * RP_QTY_INTERNAL AS COST_DEC
          FROM TR_RKT_PUPUK_DISTRIBUSI RKT
             LEFT JOIN TM_HECTARE_STATEMENT THS
              ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
                 AND RKT.BA_CODE = THS.BA_CODE
                 AND RKT.AFD_CODE = THS.AFD_CODE
                 AND RKT.BLOCK_CODE = THS.BLOCK_CODE
             LEFT JOIN TN_INFRASTRUKTUR TNI
              ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
                 AND TNI.BA_CODE = THS.BA_CODE
                 AND ACTIVITY_CODE = '43750'
             LEFT JOIN TM_MATERIAL TM
              ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
                 AND TM.BA_CODE = TNI.BA_CODE
                 AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
             LEFT JOIN TN_HARGA_BARANG THB
              ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
                 AND THB.BA_CODE = TNI.BA_CODE
                 AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
             LEFT JOIN TM_ORGANIZATION ORG
              ON     ORG.BA_CODE = RKT.BA_CODE
           WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
             AND RKT.MATURITY_STAGE_SMS1 = 'TM'
             AND TNI.COST_ELEMENT = 'TOOLS'
             AND TM.COA_CODE = '5101020400'                 
             $where3)
    GROUP BY PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM         
  UNION ALL
    -- INI UNTUK DISTRIBUSI NON INFRA PENGANKUTAN INTERNAL TBS(5101030504-1)
    SELECT 
    PERIOD_BUDGET, 
    REGION_CODE, 
    BA_CODE, 
    AFD_CODE, 
    'TM' TIPE_TRANSAKSI, 
    '5101030504-1' ACTIVITY_CODE, 
    'PENGANGKUTAN INTERNAL TBS - VRA' ACTIVITY_DETAIL, 
    '' COST_ELEMENT,
    '' KETERANGAN,
    '' UOM,
    0 QTY_JAN,
    0 QTY_FEB,
    0 QTY_MAR,
    0 QTY_APR,
    0 QTY_MAY,
    0 QTY_JUN,
    0 QTY_JUL,
    0 QTY_AUG,
    0 QTY_SEP,
    0 QTY_OCT,
    0 QTY_NOV,
    0 QTY_DEC,
    SUM(COST_JAN) COST_JAN, 
    SUM(COST_FEB) COST_FEB, 
    SUM(COST_MAR) COST_MAR, 
    SUM(COST_APR) COST_APR, 
    SUM(COST_MAY) COST_MAY, 
    SUM(COST_JUN) COST_JUN,
    SUM(COST_JUL) COST_JUL, 
    SUM(COST_AUG) COST_AUG, 
    SUM(COST_SEP) COST_SEP, 
    SUM(COST_OCT) COST_OCT, 
    SUM(COST_NOV) COST_NOV, 
    SUM(COST_DEC) COST_DEC,
    0 RP_ROTASI_SMS1,
    0 RP_ROTASI_SMS2
    FROM (
      SELECT 
        PERIOD_BUDGET, 
        REGION_CODE,
        BA_CODE, 
        AFD_CODE,
        BLOCK_CODE,
        VRA_CODE,
        VRA_SUB_CAT_DESCRIPTION,
        UOM,
        JAN/DIS_AFD*PRICE_HM_KM COST_JAN,
        FEB/DIS_AFD*PRICE_HM_KM COST_FEB,
        MAR/DIS_AFD*PRICE_HM_KM COST_MAR,
        APR/DIS_AFD*PRICE_HM_KM COST_APR,
        MAY/DIS_AFD*PRICE_HM_KM COST_MAY,
        JUN/DIS_AFD*PRICE_HM_KM COST_JUN,
        JUL/DIS_AFD*PRICE_HM_KM COST_JUL,
        AUG/DIS_AFD*PRICE_HM_KM COST_AUG,
        SEP/DIS_AFD*PRICE_HM_KM COST_SEP,
        OCT/DIS_AFD*PRICE_HM_KM COST_OCT,
        NOV/DIS_AFD*PRICE_HM_KM COST_NOV,
        DEC/DIS_AFD*PRICE_HM_KM COST_DEC,
        (JAN/DIS_AFD*PRICE_HM_KM)+(FEB/DIS_AFD*PRICE_HM_KM)+
        (MAR/DIS_AFD*PRICE_HM_KM)+(APR/DIS_AFD*PRICE_HM_KM)+
        (MAY/DIS_AFD*PRICE_HM_KM)+(JUN/DIS_AFD*PRICE_HM_KM)+
        (JUL/DIS_AFD*PRICE_HM_KM)+(AUG/DIS_AFD*PRICE_HM_KM)+
        (SEP/DIS_AFD*PRICE_HM_KM)+(OCT/DIS_AFD*PRICE_HM_KM)+
        (NOV/DIS_AFD*PRICE_HM_KM)+(DEC/DIS_AFD*PRICE_HM_KM)
    FROM (
        SELECT 
            ORG.REGION_CODE,
            VRAD.ACTIVITY_CODE, 
            VRAD.HM_KM, 
            VRAD.PRICE_HM_KM, 
            VRAD.VRA_CODE,
            TV.VRA_SUB_CAT_DESCRIPTION,
            TV.UOM,
            SEBARAN.*,
            SUM(SEBARAN.TOTAL) OVER(PARTITION BY SEBARAN.PERIOD_BUDGET, SEBARAN.BA_CODE, SEBARAN.AFD_CODE) DIS_AFD
        FROM (
          SELECT
            norma.PERIOD_BUDGET PERIOD_BUDGET,
            norma.BA_CODE BA_CODE,
            norma.AFD_CODE AFD_CODE,
            norma.BLOCK_CODE BLOCK_CODE,
            SUM( norma.JAN ) JAN, SUM( norma.FEB ) FEB, SUM( norma.MAR ) MAR,
            SUM( norma.APR ) APR, SUM( norma.MAY ) MAY, SUM( norma.JUN ) JUN,
            SUM( norma.JUL ) JUL, SUM( norma.AUG ) AUG, SUM( norma.SEP ) SEP,
            SUM( norma.OCT ) OCT, SUM( norma.NOV ) NOV, SUM( norma.DEC ) DEC,
            SUM( 
              norma.JAN + norma.FEB + norma.MAR + norma.APR + norma.MAY + norma.JUN + 
              norma.JUL + norma.AUG + norma.SEP + norma.OCT + norma.NOV + norma.DEC 
            ) total
          FROM TR_PRODUKSI_PERIODE_BUDGET norma
          LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
            AND norma.BA_CODE = thn_berjalan.BA_CODE AND norma.AFD_CODE = thn_berjalan.AFD_CODE
            AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
          WHERE norma.DELETE_USER IS NULL 
          AND extract(YEAR FROM norma.PERIOD_BUDGET) = '".$params['budgetperiod']."'
          AND norma.ba_code = '".$params['key_find']."'
          GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE, norma.BLOCK_CODE
        ) SEBARAN
        JOIN TR_RKT_VRA_DISTRIBUSI VRAD ON VRAD.BA_CODE = SEBARAN.BA_CODE AND VRAD.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
          AND VRAD.LOCATION_CODE = SEBARAN.AFD_CODE
        JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = SEBARAN.BA_CODE
            LEFT JOIN TM_VRA TV 
            ON TV.VRA_CODE = VRAD.VRA_CODE
        WHERE VRAD.ACTIVITY_CODE = '5101030504'
      )
    ) 
    GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE, VRA_CODE, VRA_SUB_CAT_DESCRIPTION, UOM
    ORDER BY VRA_CODE, AFD_CODE
          
  UNION ALL
  -- INI UNTUK PERHITUNGAN LANGSIR TRANSPORT & LABOUR (5101030404-2)
    -- INI UNTUK LANGSIR TRANSPORT
    SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         'TM' AS TIPE_TRANSAKSI,
         'TRANSPORT' COST_ELEMENT,
         '5101030404-2' ACTIVITY_CODE,
         'LANGSIR' ACTIVITY_DESC,
         '' SUB_COST_ELEMENT,
         '' SUB_COST_ELEMENT_DESC,
         '' KETERANGAN,
         'HM' UOM,
         RQTY.QTY_JAN AS QTY_JAN,
         RQTY.QTY_FEB AS QTY_FEB,
         RQTY.QTY_MAR AS QTY_MAR,
         RQTY.QTY_APR AS QTY_APR,
         RQTY.QTY_MAY AS QTY_MAY,
         RQTY.QTY_JUN AS QTY_JUN,
         RQTY.QTY_JUL AS QTY_JUL,
         RQTY.QTY_AUG AS QTY_AUG,
         RQTY.QTY_SEP AS QTY_SEP,
         RQTY.QTY_OCT AS QTY_OCT,
         RQTY.QTY_NOV AS QTY_NOV,
         RQTY.QTY_DEC AS QTY_DEC,
         (BUD.JAN / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_JAN,
         (BUD.FEB / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_FEB,
         (BUD.MAR / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_MAR,
         (BUD.APR / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_APR,
         (BUD.MAY / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_MAY,
         (BUD.JUN / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_JUN,
         (BUD.JUL / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_JUL,
         (BUD.AUG / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_AUG,
         (BUD.SEP / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_SEP,
         (BUD.OCT / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_OCT,
         (BUD.NOV / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_NOV,
         (BUD.DEC / TTL.TOTAL * RKT.LANGSIR_RP) AS COST_DEC,
         (RQTY.QTY_JAN +
         RQTY.QTY_FEB +
         RQTY.QTY_MAR +
         RQTY.QTY_APR +
         RQTY.QTY_MAY +
         RQTY.QTY_JUN +
         RQTY.QTY_JUL +
         RQTY.QTY_AUG +
         RQTY.QTY_SEP +
         RQTY.QTY_OCT +
         RQTY.QTY_NOV +
         RQTY.QTY_DEC) QTY_SETAHUN,
         ((BUD.JAN / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.FEB / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.MAR / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.APR / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.MAY / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.JUN / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.JUL / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.AUG / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.SEP / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.OCT / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.NOV / TTL.TOTAL * RKT.LANGSIR_RP) +
         (BUD.DEC / TTL.TOTAL * RKT.LANGSIR_RP)) COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
      FROM TR_RKT_PANEN RKT
         LEFT JOIN TR_PRODUKSI_PERIODE_BUDGET BUD
          ON     RKT.PERIOD_BUDGET = BUD.PERIOD_BUDGET
           AND RKT.BA_CODE = BUD.BA_CODE
           AND RKT.AFD_CODE = BUD.AFD_CODE
           AND RKT.BLOCK_CODE = BUD.BLOCK_CODE
         LEFT JOIN (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 (  JAN
                  + FEB
                  + MAR
                  + APR
                  + MAY
                  + JUN
                  + JUL
                  + AUG
                  + SEP
                  + OCT
                  + NOV
                  + DEC)
                  AS TOTAL
              FROM TR_PRODUKSI_PERIODE_BUDGET) TTL
          ON     RKT.PERIOD_BUDGET = TTL.PERIOD_BUDGET
           AND RKT.BA_CODE = TTL.BA_CODE
           AND RKT.AFD_CODE = TTL.AFD_CODE
           AND RKT.BLOCK_CODE = TTL.BLOCK_CODE
        LEFT JOIN (SELECT RKT.PERIOD_BUDGET,
                 RKT.BA_CODE,
                 RKT.AFD_CODE,
                 RKT.BLOCK_CODE,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.JAN) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_JAN,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.FEB) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_FEB,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.MAR) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_MAR,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.APR) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_APR,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.MAY) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_MAY,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.JUN) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_JUN,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.JUL) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_JUL,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.AUG) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_AUG,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.SEP) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_SEP,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.OCT) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_OCT,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.NOV) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_NOV,
                 SUM ((RKT.PERSEN_LANGSIR/100*RKT.DEC) / PREMI.TON_TRIP * PREMI.HM_TRIP) AS QTY_DEC
              FROM    TR_PRODUKSI_PERIODE_BUDGET RKT
                 LEFT JOIN
                  TN_PANEN_PREMI_LANGSIR PREMI
                 ON RKT.PERIOD_BUDGET = PREMI.PERIOD_BUDGET
                  AND RKT.BA_CODE = PREMI.BA_CODE
             GROUP BY 
              RKT.PERIOD_BUDGET,
                 RKT.BA_CODE,
                 RKT.AFD_CODE,
                 RKT.BLOCK_CODE)  RQTY    
       ON     RKT.PERIOD_BUDGET = RQTY.PERIOD_BUDGET
       AND RKT.BA_CODE = RQTY.BA_CODE
       AND RKT.AFD_CODE = RQTY.AFD_CODE
       AND RKT.BLOCK_CODE = RQTY.BLOCK_CODE              
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 1=1
        $where
    UNION ALL
    -- INI UNTUK LANGSIR LABOUR
    SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         'TM' AS TIPE_TRANSAKSI,
         'LABOUR' COST_ELEMENT,
         '5101030404-2' ACTIVITY_CODE,
         'LANGSIR' ACTIVITY_DESC,
         '' SUB_COST_ELEMENT,
         '' SUB_COST_ELEMENT_DESC,
         '' KETERANGAN,
         'MPP' UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         (BUD.JAN / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_JAN,
         (BUD.FEB / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_FEB,
         (BUD.MAR / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_MAR,
         (BUD.APR / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_APR,
         (BUD.MAY / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_MAY,
         (BUD.JUN / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_JUN,
         (BUD.JUL / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_JUL,
         (BUD.AUG / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_AUG,
         (BUD.SEP / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_SEP,
         (BUD.OCT / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_OCT,
         (BUD.NOV / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_NOV,
         (BUD.DEC / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) AS COST_DEC,
         0 AS QTY_SETAHUN,
         ((BUD.JAN / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.FEB / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.MAR / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.APR / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.MAY / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.JUN / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.JUL / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.AUG / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.SEP / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.OCT / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.NOV / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT) + 
         (BUD.DEC / TTL.TOTAL * RKT.LANGSIR_TUKANG_MUAT)) AS COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
         SYSDATE AS INSERT_TIME
      FROM TR_RKT_PANEN RKT
         LEFT JOIN TR_PRODUKSI_PERIODE_BUDGET BUD
          ON     RKT.PERIOD_BUDGET = BUD.PERIOD_BUDGET
           AND RKT.BA_CODE = BUD.BA_CODE
           AND RKT.AFD_CODE = BUD.AFD_CODE
           AND RKT.BLOCK_CODE = BUD.BLOCK_CODE
         LEFT JOIN (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 (  JAN
                  + FEB
                  + MAR
                  + APR
                  + MAY
                  + JUN
                  + JUL
                  + AUG
                  + SEP
                  + OCT
                  + NOV
                  + DEC)
                  AS TOTAL
              FROM TR_PRODUKSI_PERIODE_BUDGET) TTL
          ON     RKT.PERIOD_BUDGET = TTL.PERIOD_BUDGET
           AND RKT.BA_CODE = TTL.BA_CODE
           AND RKT.AFD_CODE = TTL.AFD_CODE
           AND RKT.BLOCK_CODE = TTL.BLOCK_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
      WHERE 1=1
      $where
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (ASTEK)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'ASTEK' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1 
   $xwhere
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
       $twhere
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
             $twhere
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
    $xwhere
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
   $twhere
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
             $twhere
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (BONUS)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'BONUS' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
       $twhere
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
             $twhere
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
       $twhere
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
             $twhere
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1             
  UNION ALL 
  -- INI UNTUK PERHITUNGAN TUNJANGAN (CATU)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'CATU' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_CATU TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
   WHERE  1 = 1
      $twhere 
       AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
            TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_CATU TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
         WHERE   1=1  
          $twhere 
             AND TCR.TUNJANGAN_TYPE = 'CATU'
             AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_CATU TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
   WHERE  1 = 1
    $twhere 
       AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
            TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_CATU TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
         WHERE  1 = 1
            $xwhere 
             AND TCR.TUNJANGAN_TYPE = 'CATU'
             AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (HHR)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'HHR' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
   $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
      $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
          $xwhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1
  UNION ALL
  -- INI UNTUK PERHITUGAN TUNJANGAN (JABATAN)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'JABATAN' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE  1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
    $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
    $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (KEHADIRAN)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'KEHADIRAN' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
   $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE  1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN LAINNYA
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'LAINNYA' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE  1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE  1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (OBAT)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'OBAT' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
   $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'OBATG'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'OBATH'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
   $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'OBATI'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'OBATJ'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (PPH21)
   SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'PPH_21' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
   $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
   $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
   $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
     $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (PPH_21)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'PPH_21' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
    $xwhere 
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
    $twhere 
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
          $twhere 
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere 
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
       $twhere
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
             $twhere
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 
  UNION ALL
  -- INI UNTUK PERHITUNGAN TUNJANGAN (THR)
  SELECT PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
        '' AS COST_ELEMENT,
        '' AS ACTIVITY_CODE, 
        'THR' AS ACTIVITY_DESC,
        '' AS SUB_COST_ELEMENT, 
        '' AS MATERIAL_NAME,
        '' KETERANGAN,
        'MPP' UOM,
        SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
        SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
        SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
        SUM(NVL (DIS_APR,0)) AS DIS_APR,
        SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
        SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
        SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
        SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
        SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
        SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
        SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
        SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
        SUM(NVL (COST_JAN,0)) AS COST_JAN,
        SUM(NVL (COST_FEB,0)) AS COST_FEB,
        SUM(NVL (COST_MAR,0)) AS COST_MAR,
        SUM(NVL (COST_APR,0)) AS COST_APR,
        SUM(NVL (COST_MAY,0)) AS COST_MAY,
        SUM(NVL (COST_JUN,0)) AS COST_JUN,
        SUM(NVL (COST_JUL,0)) AS COST_JUL,
        SUM(NVL (COST_AUG,0)) AS COST_AUG,
        SUM(NVL (COST_SEP,0)) AS COST_SEP,
        SUM(NVL (COST_OCT,0)) AS COST_OCT,
        SUM(NVL (COST_NOV,0)) AS COST_NOV,
        SUM(NVL (COST_DEC,0)) AS COST_DEC,
        (SUM(NVL (DIS_JAN,0)) +
        SUM(NVL (DIS_FEB,0)) +
        SUM(NVL (DIS_MAR,0)) +
        SUM(NVL (DIS_APR,0)) +
        SUM(NVL (DIS_MAY,0)) +
        SUM(NVL (DIS_JUN,0)) +
        SUM(NVL (DIS_JUL,0)) +
        SUM(NVL (DIS_AUG,0)) +
        SUM(NVL (DIS_SEP,0)) +
        SUM(NVL (DIS_OCT,0)) +
        SUM(NVL (DIS_NOV,0)) +
        SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
        (SUM(NVL (COST_JAN,0)) +
        SUM(NVL (COST_FEB,0)) +
        SUM(NVL (COST_MAR,0)) +
        SUM(NVL (COST_APR,0)) +
        SUM(NVL (COST_MAY,0)) +
        SUM(NVL (COST_JUN,0)) +
        SUM(NVL (COST_JUL,0)) +
        SUM(NVL (COST_AUG,0)) +
        SUM(NVL (COST_SEP,0)) +
        SUM(NVL (COST_OCT,0)) +
        SUM(NVL (COST_NOV,0)) +
        SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
        '".$this->_userName."' AS INSERT_USER,
        SYSDATE AS INSERT_TIME
  FROM (            
  --HITUNG TUNJANGAN UNTUK SMS1
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS1,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
        0 AS DIS_JUL,
        0 AS DIS_AUG,
        0 AS DIS_SEP,
        0 AS DIS_OCT,
        0 AS DIS_NOV,
        0 AS DIS_DEC,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
        0 AS COST_JUL,
        0 AS COST_AUG,
        0 AS COST_SEP,
        0 AS COST_OCT,
        0 AS COST_NOV,
        0 AS COST_DEC       
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS1,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere
   AND MATURITY_STAGE_SMS1 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE  1 = 1
   $xwhere
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
   $twhere
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
          $twhere
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  UNION ALL
  --HITUNG TUNJANGAN UNTUK SMS2
  SELECT 
        HA_TM.PERIOD_BUDGET,
        ORG.REGION_CODE,
        HA_TM.BA_CODE,
        HA_TM.AFD_CODE,
        HA_TM.BLOCK_CODE,
        HA_TM.MATURITY_STAGE_SMS2,
        0 AS DIS_JAN,
        0 AS DIS_FEB,
        0 AS DIS_MAR,
        0 AS DIS_APR,
        0 AS DIS_MAY,
        0 AS DIS_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
        0 AS COST_JAN,
        0 AS COST_FEB,
        0 AS COST_MAR,
        0 AS COST_APR,
        0 AS COST_MAY,
        0 AS COST_JUN,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
        (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
  FROM (
  SELECT PERIOD_BUDGET,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE_SMS2,
       HA_PLANTED
    FROM TM_HECTARE_STATEMENT
   WHERE 1 = 1
   $xwhere
   AND MATURITY_STAGE_SMS2 = 'TM'
  ) HA_TM
  LEFT JOIN (       
  SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
     FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
    $xwhere
  GROUP BY PERIOD_BUDGET, BA_CODE
  ) HA_BA
  ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND HA_TM.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN (
  SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
    FROM    TM_TARIF_TUNJANGAN TTJ
       LEFT JOIN
        TR_RKT_CHECKROLL TRC
       ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
        AND TRC.BA_CODE = TTJ.BA_CODE
        AND TRC.JOB_CODE = TTJ.JOB_CODE
        AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
   WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
   $twhere
  GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
  ) ALL_MPP
  ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
  AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
  LEFT JOIN TM_ORGANIZATION ORG
  ON ORG.BA_CODE = HA_TM.BA_CODE
  LEFT JOIN (
  SELECT PERIOD_BUDGET,
        BA_CODE,
        SUM(COSTTYPE) AS COST_BA
  FROM (            
        SELECT TTJ.PERIOD_BUDGET,
             TTJ.BA_CODE,
             TTJ.JOB_CODE,
             TCR.TUNJANGAN_TYPE,
             TCR.JUMLAH,
             TRC.MPP_PERIOD_BUDGET,
             (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
          FROM TM_TARIF_TUNJANGAN TTJ
             LEFT JOIN TR_RKT_CHECKROLL TRC
              ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
               AND TRC.BA_CODE = TTJ.BA_CODE
               AND TRC.JOB_CODE = TTJ.JOB_CODE
               AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
             LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
              ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
               AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
         WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
          $twhere
  ) GROUP BY PERIOD_BUDGET, BA_CODE
  ) TTL_COST
  ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
  AND HA_TM.BA_CODE = TTL_COST.BA_CODE
  )
  GROUP BY PERIOD_BUDGET,
        REGION_CODE,
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        MATURITY_STAGE_SMS1   
  UNION ALL     
  --PERHITUNGAN UNUTUK KEBUTUHAN UMUM
    SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       'TM' TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       '' KETERANGAN,
       UOM,
       SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
       SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
       SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
       SUM (NVL (QTY_APR, 0)) AS QTY_APR,
       SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
       SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
       SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
       SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
       SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
       SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
       SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
       SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
       SUM (NVL (COST_JAN, 0)) AS COST_JAN,
       SUM (NVL (COST_FEB, 0)) AS COST_FEB,
       SUM (NVL (COST_MAR, 0)) AS COST_MAR,
       SUM (NVL (COST_APR, 0)) AS COST_APR,
       SUM (NVL (COST_MAY, 0)) AS COST_MAY,
       SUM (NVL (COST_JUN, 0)) AS COST_JUN,
       SUM (NVL (COST_JUL, 0)) AS COST_JUL,
       SUM (NVL (COST_AUG, 0)) AS COST_AUG,
       SUM (NVL (COST_SEP, 0)) AS COST_SEP,
       SUM (NVL (COST_OCT, 0)) AS COST_OCT,
       SUM (NVL (COST_NOV, 0)) AS COST_NOV,
       SUM (NVL (COST_DEC, 0)) AS COST_DEC,
       (  SUM (NVL (QTY_JAN, 0))
        + SUM (NVL (QTY_FEB, 0))
        + SUM (NVL (QTY_MAR, 0))
        + SUM (NVL (QTY_APR, 0))
        + SUM (NVL (QTY_MAY, 0))
        + SUM (NVL (QTY_JUN, 0))
        + SUM (NVL (QTY_JUL, 0))
        + SUM (NVL (QTY_AUG, 0))
        + SUM (NVL (QTY_SEP, 0))
        + SUM (NVL (QTY_OCT, 0))
        + SUM (NVL (QTY_NOV, 0))
        + SUM (NVL (QTY_DEC, 0)))
        AS QTY_SETAHUN,
       (  SUM (NVL (COST_JAN, 0))
        + SUM (NVL (COST_FEB, 0))
        + SUM (NVL (COST_MAR, 0))
        + SUM (NVL (COST_APR, 0))
        + SUM (NVL (COST_MAY, 0))
        + SUM (NVL (COST_JUN, 0))
        + SUM (NVL (COST_JUL, 0))
        + SUM (NVL (COST_AUG, 0))
        + SUM (NVL (COST_SEP, 0))
        + SUM (NVL (COST_OCT, 0))
        + SUM (NVL (COST_NOV, 0))
        + SUM (NVL (COST_DEC, 0)))
        AS COST_SETAHUN,
       '".$this->_userName."' AS INSERT_USER,
       SYSDATE AS INSERT_TIME
    FROM (SELECT RKT.PERIOD_BUDGET,
           OPEX.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
           '' AS COST_ELEMENT,
           OPEX.COA_CODE AS ACTIVITY_CODE,
           COA.DESCRIPTION AS ACTIVITY_DESC,
           '' AS SUB_COST_ELEMENT,
           '' AS MATERIAL_NAME,
           '' AS KETERANGAN,
           'HA' AS UOM,
           0 QTY_JAN,
           0 QTY_FEB,
           0 QTY_MAR,
           0 QTY_APR,
           0 QTY_MAY,
           0 QTY_JUN,
           0 QTY_JUL,
           0 QTY_AUG,
           0 QTY_SEP,
           0 QTY_OCT,
           0 QTY_NOV,
           0 QTY_DEC,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM1(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_JAN) AS COST_JAN,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM1(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_FEB) AS COST_FEB,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM1(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_MAR) AS COST_MAR,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM1(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_APR) AS COST_APR,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM1(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_MAY) AS COST_MAY,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM1(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_JUN) AS COST_JUN,
           0 COST_JUL,
           0 COST_AUG,
           0 COST_SEP,
           0 COST_OCT,
           0 COST_NOV,
           0 COST_DEC
        FROM TM_HECTARE_STATEMENT RKT
           LEFT JOIN TR_RKT_OPEX OPEX
            ON OPEX.PERIOD_BUDGET = RKT.PERIOD_BUDGET
               AND OPEX.BA_CODE = RKT.BA_CODE
           LEFT JOIN TM_COA COA
            ON COA.COA_CODE = OPEX.COA_CODE
         WHERE OPEX.COA_CODE NOT IN ('1212010101', '5101030504')
           AND RKT.MATURITY_STAGE_SMS1 = 'TM'
           $where3
        UNION ALL
        SELECT RKT.PERIOD_BUDGET,
           OPEX.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
           '' AS COST_ELEMENT,
           OPEX.COA_CODE AS ACTIVITY_CODE,
           COA.DESCRIPTION AS ACTIVITY_DESC,
           '' AS SUB_COST_ELEMENT,
           '' AS MATERIAL_NAME,
           '' AS KETERANGAN,
           'HA' AS UOM,
           0 QTY_JAN,
           0 QTY_FEB,
           0 QTY_MAR,
           0 QTY_APR,
           0 QTY_MAY,
           0 QTY_JUN,
           0 QTY_JUL,
           0 QTY_AUG,
           0 QTY_SEP,
           0 QTY_OCT,
           0 QTY_NOV,
           0 QTY_DEC,
           0 COST_JAN,
           0 COST_FEB,
           0 COST_MAR,
           0 COST_APR,
           0 COST_MAY,
           0 COST_JUN,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM2(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_JUL) AS COST_JUL,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM2(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_AUG) AS COST_AUG,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM2(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_SEP) AS COST_SEP,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM2(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_OCT) AS COST_OCT,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM2(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_NOV) AS COST_NOV,
           (RKT.HA_PLANTED / F_GET_HA_PLANTED_SUMMARY_SM2(RKT.PERIOD_BUDGET, RKT.BA_CODE) * OPEX.DIS_DEC) AS COST_DEC
        FROM TM_HECTARE_STATEMENT RKT
        LEFT JOIN TR_RKT_OPEX OPEX ON OPEX.PERIOD_BUDGET = RKT.PERIOD_BUDGET AND OPEX.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_COA COA ON COA.COA_CODE = OPEX.COA_CODE
        WHERE OPEX.COA_CODE NOT IN ('1212010101', '5101030504')
           AND RKT.MATURITY_STAGE_SMS2 = 'TM'
           $where3
        )
  GROUP BY PERIOD_BUDGET,REGION_CODE,BA_CODE,AFD_CODE,BLOCK_CODE,TIPE_TRANSAKSI,
  COST_ELEMENT,ACTIVITY_CODE,ACTIVITY_DESC,SUB_COST_ELEMENT,MATERIAL_NAME,UOM";

    //echo 'ccccc : xquery';
    $this->_db->query($xquery);
    $this->_db->commit();
    /*if ($this->_db->commit()) {
      echo '100 . ' . $xquery;
    }*/
    return true;     
  }
  // end of tmpRptKebActEstCostBlock
  
  //hapus temp table untuk kebutuhan activity estate cost
  public function delTmpRptKebActEstCostBlock($params = array())
  {
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    //hapus estate cost per BLOCK
    $query = "
      DELETE FROM TMP_RPT_KEB_EST_COST_BLOCK 
      WHERE 1 = 1
      $where 
    ";
    
    $this->_db->query($query);
    $this->_db->commit();
    
    return true;
  }
  
  
  //ARIES 15-JUN-2015
public function tmpRptKebActDevCostBlock($params = array())
  {
    $where = "";
    $where1 = "";
    $where2 = "";
    $where3 = "";
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where1 .= "
        AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where2 .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where3 .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $where1 .= "
        AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";  
      $where2 .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      "; 
      $where3 .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
      $where1 .= "
        AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
      ";
      $where2 .= "
        AND UPPER(BA_CODE) LIKE UPPER('%".$params['key_find']."%')
      ";
      $where3 .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
    }
    //generate dev cost per BLOCK
    $query = "
      INSERT INTO TMP_RPT_KEB_DEV_COST_BLOCK (
        PERIOD_BUDGET, 
        REGION_CODE, 
        BA_CODE,
        AFD_CODE,
        BLOCK_CODE,
        TIPE_TRANSAKSI, 
        COST_ELEMENT,
        ACTIVITY_CODE,
        ACTIVITY_DESC,
        SUB_COST_ELEMENT,
        SUB_COST_ELEMENT_DESC,
        KETERANGAN,
        UOM, 
        QTY_JAN, 
        QTY_FEB, 
        QTY_MAR, 
        QTY_APR, 
        QTY_MAY, 
        QTY_JUN, 
        QTY_JUL, 
        QTY_AUG, 
        QTY_SEP, 
        QTY_OCT, 
        QTY_NOV, 
        QTY_DEC,
        COST_JAN, 
        COST_FEB, 
        COST_MAR, 
        COST_APR, 
        COST_MAY, 
        COST_JUN, 
        COST_JUL, 
        COST_AUG, 
        COST_SEP, 
        COST_OCT, 
        COST_NOV, 
        COST_DEC,
        QTY_SETAHUN,
        COST_SETAHUN,
        INSERT_USER, 
        INSERT_TIME
      )
    SELECT PERIOD_BUDGET,
     REGION_CODE,   
     BA_CODE,
     AFD_CODE,
     BLOCK_CODE,
     ACTIVITY_GROUP,
     COST_ELEMENT,
     ACTIVITY_CODE,
     ACTIVITY_DESC,
     SUB_COST_ELEMENT,
     MATERIAL_NAME,
     '' KETERANGAN,
     UOM,
     SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
     SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
     SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
     SUM (NVL (QTY_APR, 0)) AS QTY_APR,
     SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
     SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
     SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
     SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
     SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
     SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
     SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
     SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
     SUM (NVL (COST_JAN, 0)) AS COST_JAN,
     SUM (NVL (COST_FEB, 0)) AS COST_FEB,
     SUM (NVL (COST_MAR, 0)) AS COST_MAR,
     SUM (NVL (COST_APR, 0)) AS COST_APR,
     SUM (NVL (COST_MAY, 0)) AS COST_MAY,
     SUM (NVL (COST_JUN, 0)) AS COST_JUN,
     SUM (NVL (COST_JUL, 0)) AS COST_JUL,
     SUM (NVL (COST_AUG, 0)) AS COST_AUG,
     SUM (NVL (COST_SEP, 0)) AS COST_SEP,
     SUM (NVL (COST_OCT, 0)) AS COST_OCT,
     SUM (NVL (COST_NOV, 0)) AS COST_NOV,
     SUM (NVL (COST_DEC, 0)) AS COST_DEC,
     (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
                + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
     AS QTY_SETAHUN,
     (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
           + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
           + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
           + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) 
     AS COST_SETAHUN,
     '".$this->_userName."' AS INSERT_USER,
     SYSDATE AS INSERT_TIME
  FROM (-- MANUAL_NON_INFRA SM 1
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                  (RKT.PLAN_JAN * BIAYA.QTY_HA) AS QTY_JAN,
                  (RKT.PLAN_FEB * BIAYA.QTY_HA) AS QTY_FEB,
                  (RKT.PLAN_MAR * BIAYA.QTY_HA) AS QTY_MAR,
                  (RKT.PLAN_APR * BIAYA.QTY_HA) AS QTY_APR,
                  (RKT.PLAN_MAY * BIAYA.QTY_HA) AS QTY_MAY,
                  (RKT.PLAN_JUN * BIAYA.QTY_HA) AS QTY_JUN,
                   0 QTY_JUL,
                   0 QTY_AUG,
                   0 QTY_SEP,
                   0 QTY_OCT,
                   0 QTY_NOV,
                   0 QTY_DEC,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JAN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JAN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JAN,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_FEB * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_FEB * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_FEB,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_APR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_APR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_APR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAY * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAY * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAY,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JUN,
                   0 COST_JUL,
                   0 COST_AUG,
                   0 COST_SEP,
                   0 COST_OCT,
                   0 COST_NOV,
                   0 COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE =
                        RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE =
                        RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS1 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                       AND BIAYA.DELETE_USER IS NULL
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                   AND RKT.TIPE_TRANSAKSI IN ('MANUAL_NON_INFRA', 'MANUAL_SISIP')
                   $where
      UNION ALL -- MANUAL_NON_INFRA SM 2
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   0 AS QTY_JAN,
                   0 AS QTY_FEB,
                   0 AS QTY_MAR,
                   0 AS QTY_APR,
                   0 AS QTY_MAY,
                   0 AS QTY_JUN,
                   (RKT.PLAN_JUL * BIAYA.QTY_HA) AS QTY_JUL,
                   (RKT.PLAN_AUG * BIAYA.QTY_HA) AS QTY_AUG,
                   (RKT.PLAN_SEP * BIAYA.QTY_HA) AS QTY_SEP,
                   (RKT.PLAN_OCT * BIAYA.QTY_HA) AS QTY_OCT,
                   (RKT.PLAN_NOV * BIAYA.QTY_HA) AS QTY_NOV,
                   (RKT.PLAN_DEC * BIAYA.QTY_HA) AS QTY_DEC,
                   0 COST_JAN,
                   0 COST_FEB,
                   0 COST_MAR,
                   0 COST_APR,
                   0 COST_MAY,
                   0 COST_JUN,
                   CASE
                   WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUL * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUL * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_AUG * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_AUG * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_SEP * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_SEP * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_SEP,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_OCT * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_OCT * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_OCT,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_NOV * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_NOV * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_NOV,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_DEC * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_DEC * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE =
                        RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE =
                        RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET =
                        RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE =
                         RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS2 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                       AND BIAYA.DELETE_USER IS NULL
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET =
                        BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE =
                         BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                   AND RKT.TIPE_TRANSAKSI IN ('MANUAL_NON_INFRA', 'MANUAL_SISIP')
                   $where
      UNION ALL
      -- MANUAL_NON_INFRA_OPSI SMS1
       SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   (RKT.PLAN_JAN * BIAYA.QTY_HA) AS QTY_JAN,
                   (RKT.PLAN_FEB * BIAYA.QTY_HA) AS QTY_FEB,
                   (RKT.PLAN_MAR * BIAYA.QTY_HA) AS QTY_MAR,
                   (RKT.PLAN_APR * BIAYA.QTY_HA) AS QTY_APR,
                   (RKT.PLAN_MAY * BIAYA.QTY_HA) AS QTY_MAY,
                   (RKT.PLAN_JUN * BIAYA.QTY_HA) AS QTY_JUN,
                   0 QTY_JUL,
                   0 QTY_AUG,
                   0 QTY_SEP,
                   0 QTY_OCT,
                   0 QTY_NOV,
                   0 QTY_DEC,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JAN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JAN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JAN,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_FEB * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_FEB * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_FEB,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_APR * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_APR * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_APR,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_MAY * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_MAY * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_MAY,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUN * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUN * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_JUN,
                   0 COST_JUL,
                   0 COST_AUG,
                   0 COST_SEP,
                   0 COST_OCT,
                   0 COST_NOV,
                   0 COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS1 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ATRIBUT = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                       AND BIAYA.DELETE_USER IS NULL
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET =
                        BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE =
                         BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
                   $where       
      UNION ALL                              
      -- MANUAL_NON_INFRA_OPSI SMS2
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   0 AS QTY_JAN,
                   0 AS QTY_FEB,
                   0 AS QTY_MAR,
                   0 AS QTY_APR,
                   0 AS QTY_MAY,
                   0 AS QTY_JUN,
                   (RKT.PLAN_JUL * BIAYA.QTY_HA) AS QTY_JUL,
                   (RKT.PLAN_AUG * BIAYA.QTY_HA) AS QTY_AUG,
                   (RKT.PLAN_SEP * BIAYA.QTY_HA) AS QTY_SEP,
                   (RKT.PLAN_OCT * BIAYA.QTY_HA) AS QTY_OCT,
                   (RKT.PLAN_NOV * BIAYA.QTY_HA) AS QTY_NOV,
                   (RKT.PLAN_DEC * BIAYA.QTY_HA) AS QTY_DEC,
                   0 COST_JAN,
                   0 COST_FEB,
                   0 COST_MAR,
                   0 COST_APR,
                   0 COST_MAY,
                   0 COST_JUN,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_JUL * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_JUL * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_AUG * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_AUG * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_AUG,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_SEP * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_SEP * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_SEP,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_OCT * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_OCT * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_OCT,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_NOV * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_NOV * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_NOV,
                   CASE
                    WHEN RKT.TIPE_NORMA = 'UMUM' THEN RKT.PLAN_DEC * BIAYA.PRICE_ROTASI
                    ELSE RKT.PLAN_DEC * BIAYA.PRICE_ROTASI_SITE
                   END
                   AS COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_BIAYA BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.MATURITY_STAGE_SMS2 = BIAYA.ACTIVITY_GROUP
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.ATRIBUT = BIAYA.ACTIVITY_CODE
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                       AND BIAYA.DELETE_USER IS NULL
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
                   $where
      UNION ALL
      -- MANUAL_INFRA SMS1
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   (RKT.PLAN_JAN * BIAYA.QTY_HA) AS QTY_JAN,
                   (RKT.PLAN_FEB * BIAYA.QTY_HA) AS QTY_FEB,
                   (RKT.PLAN_MAR * BIAYA.QTY_HA) AS QTY_MAR,
                   (RKT.PLAN_APR * BIAYA.QTY_HA) AS QTY_APR,
                   (RKT.PLAN_MAY * BIAYA.QTY_HA) AS QTY_MAY,
                   (RKT.PLAN_JUN * BIAYA.QTY_HA) AS QTY_JUN,
                   0 QTY_JUL,
                   0 QTY_AUG,
                   0 QTY_SEP,
                   0 QTY_OCT,
                   0 QTY_NOV,
                   0 QTY_DEC,
                   (RKT.PLAN_JAN * BIAYA.RP_HA_INTERNAL) AS COST_JAN,
                   (RKT.PLAN_FEB * BIAYA.RP_HA_INTERNAL) AS COST_FEB,
                   (RKT.PLAN_MAR * BIAYA.RP_HA_INTERNAL) AS COST_MAR,
                   (RKT.PLAN_APR * BIAYA.RP_HA_INTERNAL) AS COST_APR,
                   (RKT.PLAN_MAY * BIAYA.RP_HA_INTERNAL) AS COST_MAY,
                   (RKT.PLAN_JUN * BIAYA.RP_HA_INTERNAL) AS COST_JUN,
                   0 COST_JUL,
                   0 COST_AUG,
                   0 COST_SEP,
                   0 COST_OCT,
                   0 COST_NOV,
                   0 COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_INFRASTRUKTUR BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                       AND BIAYA.DELETE_USER IS NULL
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                   $where
      UNION ALL                                       
      -- MANUAL INFRA SMS2
      SELECT RKT.PERIOD_BUDGET,
                   ORG.REGION_CODE,
                   RKT.BA_CODE,
                   RKT.AFD_CODE,
                   RKT.BLOCK_CODE,
                   RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                   RKT.ACTIVITY_CODE,
                   RKT.TIPE_TRANSAKSI,
                   ACT.DESCRIPTION AS ACTIVITY_DESC,
                   RKT.COST_ELEMENT,
                   BIAYA.ACTIVITY_CLASS,
                   BIAYA.LAND_TYPE,
                   BIAYA.TOPOGRAPHY,
                   BIAYA.SUB_COST_ELEMENT,
                   BIAYA.QTY_HA,
                   TM_MAT.MATERIAL_NAME,
                   CASE
                    WHEN RKT.COST_ELEMENT = 'LABOUR'
                    THEN
                       'HK'
                    WHEN RKT.COST_ELEMENT = 'CONTRACT'
                    THEN
                       (SELECT ACT.UOM
                        FROM TM_ACTIVITY ACT
                       WHERE ACT.ACTIVITY_CODE =
                            BIAYA.SUB_COST_ELEMENT)
                    ELSE
                       (SELECT material.UOM
                        FROM TM_MATERIAL material
                       WHERE material.MATERIAL_CODE =
                            BIAYA.SUB_COST_ELEMENT
                           AND material.PERIOD_BUDGET =
                             BIAYA.PERIOD_BUDGET
                           AND material.BA_CODE =
                             BIAYA.BA_CODE)
                   END
                    AS UOM,
                   0 AS QTY_JAN,
                   0 AS QTY_FEB,
                   0 AS QTY_MAR,
                   0 AS QTY_APR,
                   0 AS QTY_MAY,
                   0 AS QTY_JUN,
                   (RKT.PLAN_JUL * BIAYA.QTY_HA) AS QTY_JUL,
                   (RKT.PLAN_AUG * BIAYA.QTY_HA) AS QTY_AUG,
                   (RKT.PLAN_SEP * BIAYA.QTY_HA) AS QTY_SEP,
                   (RKT.PLAN_OCT * BIAYA.QTY_HA) AS QTY_OCT,
                   (RKT.PLAN_NOV * BIAYA.QTY_HA) AS QTY_NOV,
                   (RKT.PLAN_DEC * BIAYA.QTY_HA) AS QTY_DEC,
                   0 COST_JAN,
                   0 COST_FEB,
                   0 COST_MAR,
                   0 COST_APR,
                   0 COST_MAY,
                   0 COST_JUN,
                   (RKT.PLAN_JUL * BIAYA.RP_HA_INTERNAL) AS COST_JUL,
                   (RKT.PLAN_AUG * BIAYA.RP_HA_INTERNAL) AS COST_AUG,
                   (RKT.PLAN_SEP * BIAYA.RP_HA_INTERNAL) AS COST_SEP,
                   (RKT.PLAN_OCT * BIAYA.RP_HA_INTERNAL) AS COST_OCT,
                   (RKT.PLAN_NOV * BIAYA.RP_HA_INTERNAL) AS COST_NOV,
                   (RKT.PLAN_DEC * BIAYA.RP_HA_INTERNAL) AS COST_DEC
                FROM TR_RKT_COST_ELEMENT RKT
                   LEFT JOIN TR_RKT RKT_INDUK
                    ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                   LEFT JOIN TM_ACTIVITY ACT
                    ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                   LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                   LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                    ON TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                       AND TM_HS.BA_CODE = RKT.BA_CODE
                       AND TM_HS.AFD_CODE = RKT.AFD_CODE
                       AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                   LEFT JOIN TN_INFRASTRUKTUR BIAYA
                    ON RKT.BA_CODE = BIAYA.BA_CODE
                       AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                       AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                       AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                       AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                       AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                       AND BIAYA.DELETE_USER IS NULL
                   LEFT JOIN TM_MATERIAL TM_MAT
                    ON TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                       AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                       AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
                 WHERE     RKT.DELETE_USER IS NULL
                   AND RKT_INDUK.FLAG_TEMP IS NULL
                   AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                   AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                   $where
    UNION ALL
    -- HITUNG INFRA UNTUK CONTRACT sms 1
      SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
         RKT.ACTIVITY_CODE,
         RKT.TIPE_TRANSAKSI,
         ACT.DESCRIPTION AS ACTIVITY_DESC,
         RKT.COST_ELEMENT,
         BIAYA.ACTIVITY_CLASS,
         BIAYA.LAND_TYPE,
         BIAYA.TOPOGRAPHY,
         BIAYA.SUB_COST_ELEMENT,
         BIAYA.QTY_HA,
         TM_MAT.MATERIAL_NAME,
         (SELECT ACT.UOM
            FROM TM_ACTIVITY ACT
             WHERE ACT.ACTIVITY_CODE = BIAYA.SUB_COST_ELEMENT) AS UOM,
         RKT.PLAN_JAN AS QTY_JAN,
         RKT.PLAN_FEB AS QTY_FEB,
         RKT.PLAN_MAR AS QTY_MAR,
         RKT.PLAN_APR AS QTY_APR,
         RKT.PLAN_MAY AS QTY_MAY,
         RKT.PLAN_JUN AS QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         DIS_JAN AS COST_JAN,
         DIS_FEB AS COST_FEB,
         DIS_MAR AS COST_MAR,
         DIS_APR AS COST_APR,
         DIS_MAY AS COST_MAY,
         DIS_JUN AS COST_JUN,
         0 COST_JUL,
         0 COST_AUG,
         0 COST_SEP,
         0 COST_OCT,
         0 COST_NOV,
         0 COST_DEC
      FROM TR_RKT_COST_ELEMENT RKT
         LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
         LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
         LEFT JOIN TM_HECTARE_STATEMENT TM_HS
          ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
           AND TM_HS.BA_CODE = RKT.BA_CODE
           AND TM_HS.AFD_CODE = RKT.AFD_CODE
           AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
         LEFT JOIN TN_INFRASTRUKTUR BIAYA
          ON     RKT.BA_CODE = BIAYA.BA_CODE
           AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
           AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
           AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
           AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
           AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
           AND BIAYA.DELETE_USER IS NULL
         LEFT JOIN TM_MATERIAL TM_MAT
          ON     TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
           AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
     WHERE     RKT.DELETE_USER IS NULL
         AND RKT_INDUK.FLAG_TEMP IS NULL
         AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
         AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
         AND RKT.SUMBER_BIAYA = 'EXTERNAL'
         AND RKT.COST_ELEMENT = 'CONTRACT'
         $where
    UNION ALL
    --untuk sms 2
    SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
         RKT.ACTIVITY_CODE,
         RKT.TIPE_TRANSAKSI,
         ACT.DESCRIPTION AS ACTIVITY_DESC,
         RKT.COST_ELEMENT,
         BIAYA.ACTIVITY_CLASS,
         BIAYA.LAND_TYPE,
         BIAYA.TOPOGRAPHY,
         BIAYA.SUB_COST_ELEMENT,
         BIAYA.QTY_HA,
         TM_MAT.MATERIAL_NAME,
         CASE
          WHEN RKT.COST_ELEMENT = 'LABOUR'
          THEN
           'HK'
          WHEN RKT.COST_ELEMENT = 'CONTRACT'
          THEN
           (SELECT ACT.UOM
            FROM TM_ACTIVITY ACT
             WHERE ACT.ACTIVITY_CODE = BIAYA.SUB_COST_ELEMENT)
          ELSE
           (SELECT material.UOM
            FROM TM_MATERIAL material
             WHERE     material.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
               AND material.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
               AND material.BA_CODE = BIAYA.BA_CODE)
         END
          AS UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         RKT.PLAN_JUL AS QTY_JUL,
         RKT.PLAN_AUG AS QTY_AUG,
         RKT.PLAN_SEP AS QTY_SEP,
         RKT.PLAN_OCT AS QTY_OCT,
         RKT.PLAN_NOV AS QTY_NOV,
         RKT.PLAN_DEC AS QTY_DEC,
         0 COST_JAN,
         0 COST_FEB,
         0 COST_MAR,
         0 COST_APR,
         0 COST_MAY,
         0 COST_JUN,
         DIS_JUL AS COST_JUL,
         DIS_AUG AS COST_AUG,
         DIS_SEP AS COST_SEP,
         DIS_OCT AS COST_OCT,
         DIS_NOV AS COST_NOV,
         DIS_DEC AS COST_DEC
      FROM TR_RKT_COST_ELEMENT RKT
         LEFT JOIN TR_RKT RKT_INDUK
          ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
         LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
         LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
         LEFT JOIN TM_HECTARE_STATEMENT TM_HS
          ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
           AND TM_HS.BA_CODE = RKT.BA_CODE
           AND TM_HS.AFD_CODE = RKT.AFD_CODE
           AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
         LEFT JOIN TN_INFRASTRUKTUR BIAYA
          ON     RKT.BA_CODE = BIAYA.BA_CODE
           AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
           AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
           AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
           AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
           AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
           AND BIAYA.DELETE_USER IS NULL
         LEFT JOIN TM_MATERIAL TM_MAT
          ON     TM_MAT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
           AND TM_MAT.MATERIAL_CODE = BIAYA.SUB_COST_ELEMENT
     WHERE     RKT.DELETE_USER IS NULL
         AND RKT_INDUK.FLAG_TEMP IS NULL
         AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
         AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
         AND RKT.COST_ELEMENT = 'CONTRACT'
         $where
    UNION ALL
    --COST ELEMENT TRANSPORT UNTUK RAWAT
      --SMS1
          SELECT RKT.PERIOD_BUDGET,
               ORG.REGION_CODE,
               RKT.BA_CODE,
               RKT.AFD_CODE,
               RKT.BLOCK_CODE,
               RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
               RKT.ACTIVITY_CODE,
               RKT.TIPE_TRANSAKSI,
               ACT.DESCRIPTION AS ACTIVITY_DESC,
               RKT.COST_ELEMENT,
               '' AS ACTIVITY_CLASS,
               '' AS LAND_TYPE,
               '' AS TOPOGRAPHY,
               VRA.VRA_CODE,
               RKT_DIS.HM_KM,
               VRA.VRA_SUB_CAT_DESCRIPTION,
               VRA.UOM,
               (RKT.PLAN_JAN
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_JAN,
               (RKT.PLAN_FEB
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_FEB,
               (RKT.PLAN_MAR
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_MAR,
               (RKT.PLAN_APR
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_APR,
               (RKT.PLAN_MAY
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_MAY,
               (RKT.PLAN_JUN
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_JUN,
               0 QTY_JUL,
               0 QTY_AUG,
               0 QTY_SEP,
               0 QTY_OCT,
               0 QTY_NOV,
               0 QTY_DEC,
               ( (RKT.PLAN_JAN
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_JAN,
               ( (RKT.PLAN_FEB
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_FEB,
               ( (RKT.PLAN_MAR
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_MAR,
               ( (RKT.PLAN_APR
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_APR,
               ( (RKT.PLAN_MAY
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_MAY,
               ( (RKT.PLAN_JUN
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_JUN,
               0 COST_JUL,
               0 COST_AUG,
               0 COST_SEP,
               0 COST_OCT,
               0 COST_NOV,
               0 COST_DEC
            FROM TR_RKT_COST_ELEMENT RKT
               LEFT JOIN TR_RKT RKT_INDUK
                ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
               LEFT JOIN TR_RKT_VRA_DISTRIBUSI RKT_DIS
                ON     RKT_DIS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND RKT_DIS.BA_CODE = RKT.BA_CODE
                 AND RKT_DIS.LOCATION_CODE = RKT.AFD_CODE
                 AND RKT_DIS.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               LEFT JOIN TR_RKT_VRA_DISTRIBUSI_SUM RKT_DIS_SUM
                ON     RKT_DIS_SUM.PERIOD_BUDGET = RKT_DIS.PERIOD_BUDGET
                 AND RKT_DIS_SUM.BA_CODE = RKT_DIS.BA_CODE
                 AND RKT_DIS_SUM.ACTIVITY_CODE = RKT_DIS.ACTIVITY_CODE
                 AND RKT_DIS_SUM.VRA_CODE = RKT_DIS.VRA_CODE
               LEFT JOIN TM_ACTIVITY ACT
                ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               LEFT JOIN TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
               LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND TM_HS.BA_CODE = RKT.BA_CODE
                 AND TM_HS.AFD_CODE = RKT.AFD_CODE
                 AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
               LEFT JOIN TM_VRA VRA
                ON VRA.VRA_CODE = RKT_DIS_SUM.VRA_CODE
           WHERE     RKT.DELETE_USER IS NULL
               AND RKT_INDUK.FLAG_TEMP IS NULL
               AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
               AND RKT.COST_ELEMENT = 'TRANSPORT'
               AND RKT.TIPE_TRANSAKSI <> 'MANUAL_INFRA'
               $where
          UNION ALL
          --SMS2       
          SELECT RKT.PERIOD_BUDGET,
               ORG.REGION_CODE,
               RKT.BA_CODE,
               RKT.AFD_CODE,
               RKT.BLOCK_CODE,
               RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
               RKT.ACTIVITY_CODE,
               RKT.TIPE_TRANSAKSI,
               ACT.DESCRIPTION AS ACTIVITY_DESC,
               RKT.COST_ELEMENT,
               '' AS ACTIVITY_CLASS,
               '' AS LAND_TYPE,
               '' AS TOPOGRAPHY,
               VRA.VRA_CODE,
               RKT_DIS.HM_KM,
               VRA.VRA_SUB_CAT_DESCRIPTION,
               VRA.UOM,
               0 QTY_JAN,
               0 QTY_FEB,
               0 QTY_MAR,
               0 QTY_APR,
               0 QTY_MAY,
               0 QTY_JUN,
               (RKT.PLAN_JUL
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_JUL,
               (RKT.PLAN_AUG
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_AUG,
               (RKT.PLAN_SEP
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_SEP,
               (RKT.PLAN_OCT
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_OCT,
               (RKT.PLAN_NOV
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_NOV,
               (RKT.PLAN_DEC
              / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                 FROM TR_RKT
                WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
              * RKT_DIS.HM_KM)
                AS QTY_DEC,
               0 COST_JAN,
               0 COST_FEB,
               0 COST_MAR,
               0 COST_APR,
               0 COST_MAY,
               0 COST_JUN,
               ( (RKT.PLAN_JUL
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_JUL,
               ( (RKT.PLAN_AUG
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_AUG,
               ( (RKT.PLAN_SEP
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_SEP,
               ( (RKT.PLAN_OCT
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_OCT,
               ( (RKT.PLAN_NOV
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_NOV,
               ( (RKT.PLAN_DEC
                / NULLIF((SELECT SUM (PLAN_SETAHUN) AS TTL
                   FROM TR_RKT
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND BA_CODE = RKT.BA_CODE
                    AND AFD_CODE = RKT.AFD_CODE
                    AND ACTIVITY_CODE = RKT.ACTIVITY_CODE),0)
                * RKT_DIS.HM_KM))
               * (RKT_DIS_SUM.TOTAL_PRICE_HM_KM / NULLIF(RKT_DIS_SUM.TOTAL_HM_KM,0))
                AS COST_DEC
            FROM TR_RKT_COST_ELEMENT RKT
               LEFT JOIN TR_RKT RKT_INDUK
                ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
               LEFT JOIN TR_RKT_VRA_DISTRIBUSI RKT_DIS
                ON     RKT_DIS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND RKT_DIS.BA_CODE = RKT.BA_CODE
                 AND RKT_DIS.LOCATION_CODE = RKT.AFD_CODE
                 AND RKT_DIS.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               LEFT JOIN TR_RKT_VRA_DISTRIBUSI_SUM RKT_DIS_SUM
                ON     RKT_DIS_SUM.PERIOD_BUDGET = RKT_DIS.PERIOD_BUDGET
                 AND RKT_DIS_SUM.BA_CODE = RKT_DIS.BA_CODE
                 AND RKT_DIS_SUM.ACTIVITY_CODE = RKT_DIS.ACTIVITY_CODE
                 AND RKT_DIS_SUM.VRA_CODE = RKT_DIS.VRA_CODE
               LEFT JOIN TM_ACTIVITY ACT
                ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
               LEFT JOIN TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
               LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND TM_HS.BA_CODE = RKT.BA_CODE
                 AND TM_HS.AFD_CODE = RKT.AFD_CODE
                 AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
               LEFT JOIN TM_VRA VRA
                ON VRA.VRA_CODE = RKT_DIS_SUM.VRA_CODE
           WHERE     RKT.DELETE_USER IS NULL
               AND RKT_INDUK.FLAG_TEMP IS NULL
               AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
               AND RKT.COST_ELEMENT = 'TRANSPORT'
               AND RKT.TIPE_TRANSAKSI <> 'MANUAL_INFRA'
               $where
        UNION ALL
          SELECT PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             AFD_CODE,
             BLOCK_CODE,
             MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
             ACTIVITY_CODE,
             TIPE_TRANSAKSI,
             DESCRIPTION AS ACTIVITY_DESC,
             COST_ELEMENT,
             ACTIVITY_CLASS,
             LAND_TYPE,
             TOPOGRAPHY,
             SUB_COST_ELEMENT,
             QTY_HA,
             VRA_SUB_CAT_DESCRIPTION,
             UOM,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JAN / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_JAN,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_FEB / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_FEB,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAR / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_MAR,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_APR / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_APR,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAY / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_MAY,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUN / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_JUN,
             0 QTY_JUL,
             0 QTY_AUG,
             0 QTY_SEP,
             0 QTY_OCT,
             0 QTY_NOV,
             0 QTY_DEC,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JAN ELSE 0 END
              AS COST_JAN,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_FEB ELSE 0 END
              AS COST_FEB,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAR ELSE 0 END
              AS COST_MAR,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_APR ELSE 0 END
              AS COST_APR,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_MAY ELSE 0 END
              AS COST_MAY,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUN ELSE 0 END
              AS COST_JUN,
             0 COST_JUL,
             0 COST_AUG,
             0 COST_SEP,
             0 COST_OCT,
             0 COST_NOV,
             0 COST_DEC
          FROM (SELECT RKT_INDUK.*,
                 RKT.COST_ELEMENT,
                 BIAYA.LAND_TYPE,
                 BIAYA.TOPOGRAPHY,
                 BIAYA.SUB_COST_ELEMENT,
                 BIAYA.QTY_HA,
                 ORG.REGION_CODE,
                 ACT.DESCRIPTION,
                 VRA.VRA_SUB_CAT_DESCRIPTION,
                 VRA.UOM,
                 ( (SELECT RKTVRAS.VALUE
                  FROM TR_RKT_VRA_SUM RKTVRAS
                   WHERE     RKTVRAS.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                     AND RKTVRAS.BA_CODE = BIAYA.BA_CODE
                     AND RKTVRAS.VRA_CODE = BIAYA.SUB_COST_ELEMENT)
                UNION
                (SELECT NVRAPINJAM.RP_QTY AS VALUE
                   FROM TN_VRA_PINJAM NVRAPINJAM
                  WHERE     NVRAPINJAM.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                    AND NVRAPINJAM.REGION_CODE = BIAYA.REGION_CODE
                    AND NVRAPINJAM.VRA_CODE = BIAYA.SUB_COST_ELEMENT))
                  AS HARGA_INTERNAL,
                 (1 / BIAYA.QTY_HA) * RP_HA_EXTERNAL AS HARGA_EXTERNAL
              FROM TR_RKT_COST_ELEMENT RKT
                 LEFT JOIN TR_RKT RKT_INDUK
                  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                 LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                  ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                   AND TM_HS.BA_CODE = RKT.BA_CODE
                   AND TM_HS.AFD_CODE = RKT.AFD_CODE
                   AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                 INNER JOIN TN_INFRASTRUKTUR BIAYA
                  ON     RKT.BA_CODE = BIAYA.BA_CODE
                   AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                   AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                   AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                   AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                   AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                   AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   AND BIAYA.DELETE_USER IS NULL
                 LEFT JOIN TM_ACTIVITY ACT
                  ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                 LEFT JOIN TM_VRA VRA
                  ON VRA.VRA_CODE = BIAYA.SUB_COST_ELEMENT  
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON ORG.BA_CODE = RKT.BA_CODE
             WHERE     RKT.DELETE_USER IS NULL
                 AND RKT_INDUK.FLAG_TEMP IS NULL
                 AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                 AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                 AND RKT.COST_ELEMENT = 'TRANSPORT'
                 $where)
        UNION ALL
-- biaya lain lain TBM0 supervisi perawatan
SELECT RKT.PERIOD_BUDGET,
     ORG.REGION_CODE,
     RKT.BA_CODE,
     HS.AFD_CODE,
     HS.BLOCK_CODE,
     'TBM0' TIPE_TRANSAKSI,
    RKT.COA_CODE AS ACTIVITY_CODE,
    'TBM0' TIPE_TRANSAKSI2,
    RKT.COA_DESC AS ACTIVITY_DESC,
    '' COST_ELEMENT,
    '' AS ACTIVITY_CLASS,
         '' AS LAND_TYPE,
         '' AS TOPOGRAPHY,
    '' AS SUB_COST_ELEMENT,
    0 AS SUB_COST_ELEMENT_DESC,
    '' AS KETERANGAN,
     'MPP' UOM,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_DEC,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JAN)
      AS COST_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_FEB)
      AS COST_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAR)
      AS COST_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_APR)
      AS COST_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAY)
      AS COST_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JUN)
      AS COST_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_JUL)
      AS COST_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_AUG)
      AS COST_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_SEP)
      AS COST_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_OCT)
      AS COST_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_NOV)
      AS COST_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_DEC)
      AS COST_DEC
  FROM V_TOTAL_RELATION_COST RKT
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE,
               SUM (HS.SMS1_TBM0) SMS1_TBM,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.SMS2_TBM0) SMS2_TBM,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE) HS
      ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE) HS2
      ON HS2.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS2.BA_CODE = RKT.BA_CODE
     LEFT JOIN TM_ORGANIZATION ORG
      ON ORG.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT TRC.PERIOD_BUDGET,
               TRC.BA_CODE,
               SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
            FROM TR_RKT_CHECKROLL TRC
           WHERE TRC.JOB_CODE IN ('FX130', 'FX110')
          GROUP BY TRC.PERIOD_BUDGET, TRC.BA_CODE) MPP_ALL
      ON MPP_ALL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND MPP_ALL.BA_CODE = RKT.BA_CODE
 WHERE     RKT.COA_CODE = '43800'
     $where
UNION ALL
-- biaya lain lain TBM1 supervisi perawatan
SELECT RKT.PERIOD_BUDGET,
     ORG.REGION_CODE,
     RKT.BA_CODE,
     HS.AFD_CODE,
     HS.BLOCK_CODE,
     'TBM1' TIPE_TRANSAKSI,
          RKT.COA_CODE AS ACTIVITY_CODE,
          'TBM1' TIPE_TRANSAKSI2,
          RKT.COA_DESC AS ACTIVITY_DESC,
          '' COST_ELEMENT,
          '' AS ACTIVITY_CLASS,
               '' AS LAND_TYPE,
               '' AS TOPOGRAPHY,
          '' AS SUB_COST_ELEMENT,
          0 AS SUB_COST_ELEMENT_DESC,
          '' AS KETERANGAN,
     'MPP' UOM,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_DEC,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JAN)
      AS COST_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_FEB)
      AS COST_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAR)
      AS COST_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_APR)
      AS COST_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAY)
      AS COST_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JUN)
      AS COST_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_JUL)
      AS COST_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_AUG)
      AS COST_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_SEP)
      AS COST_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_OCT)
      AS COST_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_NOV)
      AS COST_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_DEC)
      AS COST_DEC
  FROM V_TOTAL_RELATION_COST RKT
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE,
               SUM (HS.SMS1_TBM1) SMS1_TBM,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.SMS2_TBM1) SMS2_TBM,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE) HS
      ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE) HS2
      ON HS2.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS2.BA_CODE = RKT.BA_CODE
     LEFT JOIN TM_ORGANIZATION ORG
      ON ORG.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT TRC.PERIOD_BUDGET,
               TRC.BA_CODE,
               SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
            FROM TR_RKT_CHECKROLL TRC
           WHERE TRC.JOB_CODE IN ('FX130', 'FX110')
          GROUP BY TRC.PERIOD_BUDGET, TRC.BA_CODE) MPP_ALL
      ON MPP_ALL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND MPP_ALL.BA_CODE = RKT.BA_CODE
 WHERE     RKT.COA_CODE = '43800'
     $where
UNION ALL
-- biaya lain lain TBM2 supervisi perawatan
SELECT RKT.PERIOD_BUDGET,
     ORG.REGION_CODE,
     RKT.BA_CODE,
     HS.AFD_CODE,
     HS.BLOCK_CODE,
     'TBM2' TIPE_TRANSAKSI,
    RKT.COA_CODE AS ACTIVITY_CODE,
    'TBM2' TIPE_TRANSAKSI2,
    RKT.COA_DESC AS ACTIVITY_DESC,
    '' COST_ELEMENT,
    '' AS ACTIVITY_CLASS,
         '' AS LAND_TYPE,
         '' AS TOPOGRAPHY,
    '' AS SUB_COST_ELEMENT,
    0 AS SUB_COST_ELEMENT_DESC,
    '' AS KETERANGAN,
     'MPP' UOM,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_DEC,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JAN)
      AS COST_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_FEB)
      AS COST_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAR)
      AS COST_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_APR)
      AS COST_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAY)
      AS COST_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JUN)
      AS COST_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_JUL)
      AS COST_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_AUG)
      AS COST_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_SEP)
      AS COST_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_OCT)
      AS COST_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_NOV)
      AS COST_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_DEC)
      AS COST_DEC
  FROM V_TOTAL_RELATION_COST RKT
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE,
               SUM (HS.SMS1_TBM2) SMS1_TBM,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.SMS2_TBM2) SMS2_TBM,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE) HS
      ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE) HS2
      ON HS2.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS2.BA_CODE = RKT.BA_CODE
     LEFT JOIN TM_ORGANIZATION ORG
      ON ORG.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT TRC.PERIOD_BUDGET,
               TRC.BA_CODE,
               SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
            FROM TR_RKT_CHECKROLL TRC
           WHERE TRC.JOB_CODE IN ('FX130', 'FX110')
          GROUP BY TRC.PERIOD_BUDGET, TRC.BA_CODE) MPP_ALL
      ON MPP_ALL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND MPP_ALL.BA_CODE = RKT.BA_CODE
 WHERE     RKT.COA_CODE = '43800'
     $where
UNION ALL
-- biaya lain lain TBM3 supervisi perawatan
SELECT RKT.PERIOD_BUDGET,
     ORG.REGION_CODE,
     RKT.BA_CODE,
     HS.AFD_CODE,
     HS.BLOCK_CODE,
     'TBM3' TIPE_TRANSAKSI,
    RKT.COA_CODE AS ACTIVITY_CODE,
    'TBM3' TIPE_TRANSAKSI2,
    RKT.COA_DESC AS ACTIVITY_DESC,
    '' COST_ELEMENT,
    '' AS ACTIVITY_CLASS,
         '' AS LAND_TYPE,
         '' AS TOPOGRAPHY,
    '' AS SUB_COST_ELEMENT,
    0 AS SUB_COST_ELEMENT_DESC,
    '' AS KETERANGAN,
     'MPP' UOM,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * MPP_ALL.MPP) QTY_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * MPP_ALL.MPP) QTY_DEC,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JAN)
      AS COST_JAN,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_FEB)
      AS COST_FEB,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAR)
      AS COST_MAR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_APR)
      AS COST_APR,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_MAY)
      AS COST_MAY,
     (HS.SMS1_TBM / NULLIF (HS2.TOTAL_HA_SMS1, 0) * RKT.COST_JUN)
      AS COST_JUN,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_JUL)
      AS COST_JUL,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_AUG)
      AS COST_AUG,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_SEP)
      AS COST_SEP,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_OCT)
      AS COST_OCT,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_NOV)
      AS COST_NOV,
     (HS.SMS2_TBM / NULLIF (HS2.TOTAL_HA_SMS2, 0) * RKT.COST_DEC)
      AS COST_DEC
  FROM V_TOTAL_RELATION_COST RKT
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE,
               SUM (HS.SMS1_TBM3) SMS1_TBM,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.SMS2_TBM3) SMS2_TBM,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET,
               HS.BA_CODE,
               HS.AFD_CODE,
               HS.BLOCK_CODE) HS
      ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT HS.PERIOD_BUDGET,
               HS.BA_CODE,
               SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
               SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
            FROM V_REPORT_SEBARAN_HS_BLOCK HS
          GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE) HS2
      ON HS2.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND HS2.BA_CODE = RKT.BA_CODE
     LEFT JOIN TM_ORGANIZATION ORG
      ON ORG.BA_CODE = RKT.BA_CODE
     LEFT JOIN (  SELECT TRC.PERIOD_BUDGET,
               TRC.BA_CODE,
               SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
            FROM TR_RKT_CHECKROLL TRC
           WHERE TRC.JOB_CODE IN ('FX130', 'FX110')
          GROUP BY TRC.PERIOD_BUDGET, TRC.BA_CODE) MPP_ALL
      ON MPP_ALL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
       AND MPP_ALL.BA_CODE = RKT.BA_CODE
 WHERE     RKT.COA_CODE = '43800'
    $where
     UNION ALL
        SELECT PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             AFD_CODE,
             BLOCK_CODE,
             MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
             ACTIVITY_CODE,
             TIPE_TRANSAKSI,
             DESCRIPTION AS ACTIVITY_DESC,
             COST_ELEMENT,
             ACTIVITY_CLASS,
             LAND_TYPE,
             TOPOGRAPHY,
             SUB_COST_ELEMENT,
             QTY_HA,
             VRA_SUB_CAT_DESCRIPTION,
             UOM,
             0 QTY_JAN,
             0 QTY_FEB,
             0 QTY_MAR,
             0 QTY_APR,
             0 QTY_MAY,
             0 QTY_JUN,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUL / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_JUL,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_AUG / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_AUG,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_SEP / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_SEP,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_OCT / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_OCT,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_NOV / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_NOV,
             CASE
              WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_DEC / HARGA_INTERNAL
              ELSE 0
             END
              AS QTY_DEC,
             0 COST_JAN,
             0 COST_FEB,
             0 COST_MAR,
             0 COST_APR,
             0 COST_MAY,
             0 COST_JUN,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_JUL ELSE 0 END
              AS COST_JUL,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_AUG ELSE 0 END
              AS COST_AUG,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_SEP ELSE 0 END
              AS COST_SEP,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_OCT ELSE 0 END
              AS COST_OCT,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_NOV ELSE 0 END
              AS COST_NOV,
             CASE WHEN SUMBER_BIAYA = 'INTERNAL' THEN COST_DEC ELSE 0 END
              AS COST_DEC
          FROM (SELECT RKT_INDUK.*,
                 RKT.COST_ELEMENT,
                 BIAYA.LAND_TYPE,
                 BIAYA.TOPOGRAPHY,
                 BIAYA.SUB_COST_ELEMENT,
                 BIAYA.QTY_HA,
                 ORG.REGION_CODE,
                 ACT.DESCRIPTION,
                 VRA.VRA_SUB_CAT_DESCRIPTION,
                 VRA.UOM,
                 ( (SELECT RKTVRAS.VALUE
                  FROM TR_RKT_VRA_SUM RKTVRAS
                   WHERE     RKTVRAS.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                     AND RKTVRAS.BA_CODE = BIAYA.BA_CODE
                     AND RKTVRAS.VRA_CODE = BIAYA.SUB_COST_ELEMENT)
                UNION
                (SELECT NVRAPINJAM.RP_QTY AS VALUE
                   FROM TN_VRA_PINJAM NVRAPINJAM
                  WHERE     NVRAPINJAM.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                    AND NVRAPINJAM.VRA_CODE = BIAYA.SUB_COST_ELEMENT))
                  AS HARGA_INTERNAL,
                 (1 / BIAYA.QTY_HA) * RP_HA_EXTERNAL AS HARGA_EXTERNAL
              FROM TR_RKT_COST_ELEMENT RKT
                 LEFT JOIN TR_RKT RKT_INDUK
                  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
                 LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                  ON     TM_HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                   AND TM_HS.BA_CODE = RKT.BA_CODE
                   AND TM_HS.AFD_CODE = RKT.AFD_CODE
                   AND TM_HS.BLOCK_CODE = RKT.BLOCK_CODE
                 INNER JOIN TN_INFRASTRUKTUR BIAYA
                  ON     RKT.BA_CODE = BIAYA.BA_CODE
                   AND RKT.PERIOD_BUDGET = BIAYA.PERIOD_BUDGET
                   AND RKT.ACTIVITY_CODE = BIAYA.ACTIVITY_CODE
                   AND RKT_INDUK.ACTIVITY_CLASS = BIAYA.ACTIVITY_CLASS
                   AND RKT.COST_ELEMENT = BIAYA.COST_ELEMENT
                   AND BIAYA.LAND_TYPE IN ('ALL', TM_HS.LAND_TYPE)
                   AND BIAYA.TOPOGRAPHY IN ('ALL', TM_HS.TOPOGRAPHY)
                   AND BIAYA.DELETE_USER IS NULL
                 LEFT JOIN TM_ACTIVITY ACT
                  ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
                 LEFT JOIN TM_VRA VRA
                  ON VRA.VRA_CODE = BIAYA.SUB_COST_ELEMENT    
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON ORG.BA_CODE = RKT.BA_CODE
             WHERE     RKT.DELETE_USER IS NULL
                 AND RKT_INDUK.FLAG_TEMP IS NULL
                 AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                 AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                 AND RKT.COST_ELEMENT = 'TRANSPORT'
                 $where)       
      ) REPORT
    GROUP BY PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         ACTIVITY_GROUP,
         COST_ELEMENT,
         ACTIVITY_CODE,
         TIPE_TRANSAKSI,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         UOM";
    
    $this->_db->query($query);
    $this->_db->commit();
    /*if ($this->_db->commit()) {
      echo '101 . ' . $query;  
    }*/
    
    //QUERY INSERT UNTUK PUPUK (LABOUR & MATERIAL)
    $xquery = "INSERT INTO TMP_RPT_KEB_DEV_COST_BLOCK (PERIOD_BUDGET,
                    REGION_CODE,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    TIPE_TRANSAKSI,
                    COST_ELEMENT,
                    ACTIVITY_CODE,
                    ACTIVITY_DESC,
                    SUB_COST_ELEMENT,
                    SUB_COST_ELEMENT_DESC,
                    UOM,
                    QTY_JAN,
                    QTY_FEB,
                    QTY_MAR,
                    QTY_APR,
                    QTY_MAY,
                    QTY_JUN,
                    QTY_JUL,
                    QTY_AUG,
                    QTY_SEP,
                    QTY_OCT,
                    QTY_NOV,
                    QTY_DEC,
                    COST_JAN,
                    COST_FEB,
                    COST_MAR,
                    COST_APR,
                    COST_MAY,
                    COST_JUN,
                    COST_JUL,
                    COST_AUG,
                    COST_SEP,
                    COST_OCT,
                    COST_NOV,
                    COST_DEC,
                    QTY_SETAHUN,
                    COST_SETAHUN,
                    INSERT_USER,
                    INSERT_TIME)
   SELECT PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      AFD_CODE,
      TIPE_TRANSAKSI,
      SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
      SUM (NVL (QTY_APR, 0)) AS QTY_APR,
      SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
      SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
      SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
      SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
      SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
      SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
      SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
      SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
      SUM (NVL (COST_JAN, 0)) AS COST_JAN,
      SUM (NVL (COST_FEB, 0)) AS COST_FEB,
      SUM (NVL (COST_MAR, 0)) AS COST_MAR,
      SUM (NVL (COST_APR, 0)) AS COST_APR,
      SUM (NVL (COST_MAY, 0)) AS COST_MAY,
      SUM (NVL (COST_JUN, 0)) AS COST_JUN,
      SUM (NVL (COST_JUL, 0)) AS COST_JUL,
      SUM (NVL (COST_AUG, 0)) AS COST_AUG,
      SUM (NVL (COST_SEP, 0)) AS COST_SEP,
      SUM (NVL (COST_OCT, 0)) AS COST_OCT,
      SUM (NVL (COST_NOV, 0)) AS COST_NOV,
      SUM (NVL (COST_DEC, 0)) AS COST_DEC,
      (  SUM (NVL (QTY_JAN, 0))
       + SUM (NVL (QTY_FEB, 0))
       + SUM (NVL (QTY_MAR, 0))
       + SUM (NVL (QTY_APR, 0))
       + SUM (NVL (QTY_MAY, 0))
       + SUM (NVL (QTY_JUN, 0))
       + SUM (NVL (QTY_JUL, 0))
       + SUM (NVL (QTY_AUG, 0))
       + SUM (NVL (QTY_SEP, 0))
       + SUM (NVL (QTY_OCT, 0))
       + SUM (NVL (QTY_NOV, 0))
       + SUM (NVL (QTY_DEC, 0)))
         AS QTY_SETAHUN,
      (  SUM (NVL (COST_JAN, 0))
       + SUM (NVL (COST_FEB, 0))
       + SUM (NVL (COST_MAR, 0))
       + SUM (NVL (COST_APR, 0))
       + SUM (NVL (COST_MAY, 0))
       + SUM (NVL (COST_JUN, 0))
       + SUM (NVL (COST_JUL, 0))
       + SUM (NVL (COST_AUG, 0))
       + SUM (NVL (COST_SEP, 0))
       + SUM (NVL (COST_OCT, 0))
       + SUM (NVL (COST_NOV, 0))
       + SUM (NVL (COST_DEC, 0)))
         AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      SYSDATE AS INSERT_TIME
     FROM (-- INI UNTUK PERHITUNGAN PEMUPUKAN (MAJEMUK TUNGGAL)
       SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          ACTIVITY_GROUP AS TIPE_TRANSAKSI,
          COST_ELEMENT,
          ACTIVITY_CODE,
          ACTIVITY_DESC,
          SUB_COST_ELEMENT,
          MATERIAL_NAME,
          '' RANK_Z,
          UOM,
          JAN_QTY AS QTY_JAN,
          FEB_QTY AS QTY_FEB,
          MAR_QTY AS QTY_MAR,
          APR_QTY AS QTY_APR,
          MAY_QTY AS QTY_MAY,
          JUN_QTY AS QTY_JUN,
          JUL_QTY AS QTY_JUL,
          AUG_QTY AS QTY_AUG,
          SEP_QTY AS QTY_SEP,
          OCT_QTY AS QTY_OCT,
          NOV_QTY AS QTY_NOV,
          DEC_QTY AS QTY_DEC,
          JAN_COST AS COST_JAN,
          FEB_COST AS COST_FEB,
          MAR_COST AS COST_MAR,
          APR_COST AS COST_APR,
          MAY_COST AS COST_MAY,
          JUN_COST AS COST_JUN,
          JUL_COST AS COST_JUL,
          AUG_COST AS COST_AUG,
          SEP_COST AS COST_SEP,
          OCT_COST AS COST_OCT,
          NOV_COST AS COST_NOV,
          DEC_COST AS COST_DEC
         FROM (SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  MAJEMUK
             FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS1
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS1,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK MAJEMUK'
                               DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS1 IN
                                     ('TBM0',
                                      'TBM1',
                                      'TBM2',
                                      'TBM3')
                                $where
                              )
                            HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020400' -- UNTUK PUPUK  MAJEMUK
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('1' JAN,
                         '2' FEB,
                         '3' MAR,
                         '4' APR,
                         '5' MAY,
                         '6' JUN,
                         '91' JUL,
                         '92' AUG,
                         '93' SEP,
                         '94' OCT,
                         '95' NOV,
                         '96' DEC)))
           UNION ALL
           SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  MAJEMUK
             FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS2
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS2,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK MAJEMUK'
                               DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS2 IN
                                     ('TBM0',
                                      'TBM1',
                                      'TBM2',
                                      'TBM3')
                                $where
                              )
                            HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020400' -- UNTUK PUPUK  MAJEMUK
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('91' JAN,
                         '92' FEB,
                         '93' MAR,
                         '94' APR,
                         '95' MAY,
                         '96' JUN,
                         '7' JUL,
                         '8' AUG,
                         '9' SEP,
                         '10' OCT,
                         '11' NOV,
                         '12' DEC)))
           UNION ALL
           SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  TUNGGAL
             FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS1
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS1,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK TUNGGAL'
                               DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS1 IN
                                     ('TBM0',
                                      'TBM1',
                                      'TBM2',
                                      'TBM3')
                                $where
                              )
                            HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020300' -- UNTUK PUPUK  TUNGGAL
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('1' JAN,
                         '2' FEB,
                         '3' MAR,
                         '4' APR,
                         '5' MAY,
                         '6' JUN,
                         '97' JUL,
                         '98' AUG,
                         '99' SEP,
                         '90' OCT,
                         '91' NOV,
                         '92' DEC)))
           UNION ALL
           SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  TUNGGAL
             FROM (WITH PIVOT_BLOK
                   AS (SELECT PERIOD_BUDGET,
                        REGION_CODE,
                        BA_CODE,
                        AFD_CODE,
                        BLOCK_CODE,
                        MATURITY_STAGE_SMS2
                           AS ACTIVITY_GROUP,
                        'LABOUR' AS COST_ELEMENT,
                        COA_CODE AS ACTIVITY_CODE,
                        DESCRIPTION AS ACTIVITY_DESC,
                        '' SUB_COST_ELEMENT,
                        '' MATERIAL_NAME,
                        UOM,
                        QTY_BLN,
                        COST_BLN,
                        BULAN_PEMUPUKAN AS BLN
                       FROM (SELECT HS.PERIOD_BUDGET,
                            HS.REGION_CODE,
                            HS.BA_CODE,
                            HS.AFD_CODE,
                            HS.BLOCK_CODE,
                            HS.HA_PLANTED,
                            HS.MATURITY_STAGE_SMS2,
                            MATERIAL.FLAG,
                            MATERIAL.UOM,
                            MATERIAL.COA_CODE,
                            'PUPUK TUNGGAL'
                               DESCRIPTION,
                            HS.TAHUN_TANAM,
                            BULAN_PEMUPUKAN,
                            (HS.HA_PLANTED
                             * INFRA.QTY_HA)
                               AS QTY_BLN,
                            (HS.HA_PLANTED
                             * INFRA.HARGA_INTERNAL)
                               AS COST_BLN
                           FROM (SELECT RKT.*,
                                ORG.REGION_CODE
                               FROM    TM_HECTARE_STATEMENT RKT
                                LEFT JOIN
                                   TM_ORGANIZATION ORG
                                ON ORG.BA_CODE =
                                    RKT.BA_CODE
                              WHERE RKT.DELETE_USER IS NULL
                                AND RKT.FLAG_TEMP IS NULL
                                AND RKT.MATURITY_STAGE_SMS2 IN
                                     ('TBM0',
                                      'TBM1',
                                      'TBM2',
                                      'TBM3')
                                $where
                              )
                            HS
                            LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                               ON HS.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND HS.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND HS.AFD_CODE =
                                  NORMA_PUPUK.AFD_CODE
                                AND HS.BLOCK_CODE =
                                  NORMA_PUPUK.BLOCK_CODE
                                AND NORMA_PUPUK.DELETE_USER IS NULL
                            LEFT JOIN TM_MATERIAL MATERIAL
                               ON NORMA_PUPUK.PERIOD_BUDGET =
                                 MATERIAL.PERIOD_BUDGET
                                AND NORMA_PUPUK.BA_CODE =
                                  MATERIAL.BA_CODE
                                AND NORMA_PUPUK.MATERIAL_CODE =
                                  MATERIAL.MATERIAL_CODE
                                AND MATERIAL.DELETE_USER IS NULL
                            LEFT JOIN TN_INFRASTRUKTUR INFRA
                               ON INFRA.PERIOD_BUDGET =
                                 NORMA_PUPUK.PERIOD_BUDGET
                                AND INFRA.BA_CODE =
                                  NORMA_PUPUK.BA_CODE
                                AND INFRA.ACTIVITY_CODE =
                                  CASE MATERIAL.FLAG
                                     WHEN 'MAKRO'
                                     THEN
                                      43751
                                     ELSE
                                      43750
                                  END
                          WHERE MATERIAL.COA_CODE =
                               '5101020300' -- UNTUK PUPUK  TUNGGAL
                                     ))
               SELECT *
                 FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                           SUM (NVL (COST_BLN, 0)) AS COST
                         FOR BLN
                         IN ('91' JAN,
                         '92' FEB,
                         '93' MAR,
                         '94' APR,
                         '95' MAY,
                         '96' JUN,
                         '7' JUL,
                         '8' AUG,
                         '9' SEP,
                         '10' OCT,
                         '11' NOV,
                         '12' DEC))))) REPORT
   GROUP BY PERIOD_BUDGET,
      REGION_CODE,
      BA_CODE,
      AFD_CODE,
      BLOCK_CODE,
      TIPE_TRANSAKSI,
      COST_ELEMENT,
      ACTIVITY_CODE,
      ACTIVITY_DESC,
      SUB_COST_ELEMENT,
      MATERIAL_NAME,
      UOM   
   UNION ALL
   --ini untuk PUPUK TUNGGAL TOOLS
   SELECT PERIOD_BUDGET,
     REGION_CODE,
     BA_CODE,
     AFD_CODE,
     BLOCK_CODE,
     TIPE_TRANSAKSI,
     COST_ELEMENT,
     ACTIVITY_CODE,
     ACTIVITY_DESC,
     SUB_COST_ELEMENT,
     MATERIAL_NAME,
     KETERANGAN,
     UOM,
     MAX (QTY_JAN) QTY_JAN,
     MAX (QTY_FEB) QTY_FEB,
     MAX (QTY_MAR) QTY_MAR,
     MAX (QTY_APR) QTY_APR,
     MAX (QTY_MAY) QTY_MAY,
     MAX (QTY_JUN) QTY_JUN,
     MAX (QTY_JUL) QTY_JUL,
     MAX (QTY_AUG) QTY_AUG,
     MAX (QTY_SEP) QTY_SEP,
     MAX (QTY_OCT) QTY_OCT,
     MAX (QTY_NOV) QTY_NOV,
     MAX (QTY_DEC) QTY_DEC,
     SUM (COST_JAN) AS COST_JAN,
     SUM (COST_FEB) AS COST_FEB,
     SUM (COST_MAR) AS COST_MAR,
     SUM (COST_APR) AS COST_APR,
     SUM (COST_MAY) AS COST_MAY,
     SUM (COST_JUN) AS COST_JUN,
     SUM (COST_JUL) AS COST_JUL,
     SUM (COST_AUG) AS COST_AUG,
     SUM (COST_SEP) AS COST_SEP,
     SUM (COST_OCT) AS COST_OCT,
     SUM (COST_NOV) AS COST_NOV,
     SUM (COST_DEC) AS COST_DEC,
     MAX (QTY_JAN) + 
     MAX (QTY_FEB) +
     MAX (QTY_MAR) +
     MAX (QTY_APR) +
     MAX (QTY_MAY) +
     MAX (QTY_JUN) +
     MAX (QTY_JUL) +
     MAX (QTY_AUG) +
     MAX (QTY_SEP) +
     MAX (QTY_OCT) +
     MAX (QTY_NOV) +
     MAX (QTY_DEC) QTY_SETAHUN,         
     SUM (COST_JAN) +
     SUM (COST_FEB) +
     SUM (COST_MAR) +
     SUM (COST_APR) +
     SUM (COST_MAY) +
     SUM (COST_JUN) +
     SUM (COST_JUL) +
     SUM (COST_AUG) +
     SUM (COST_SEP) +
     SUM (COST_OCT) +
     SUM (COST_NOV) +
     SUM (COST_DEC) AS COST_SETAHUN,
     '".$this->_userName."' AS INSERT_USER,
     SYSDATE AS INSERT_TIME
  FROM (    
    SELECT RKT.PERIOD_BUDGET,
           ORG.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
           'TOOLS' AS COST_ELEMENT,
           '5101020300' AS ACTIVITY_CODE,
           'PUPUK TUNGGAL' AS ACTIVITY_DESC,
           TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
           TM.MATERIAL_NAME,
           '' AS KETERANGAN,
           'POKOK' AS UOM,                 
           NVL (DIS_JAN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_JAN,
           NVL (DIS_FEB, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_FEB,
           NVL (DIS_MAR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_MAR,
           NVL (DIS_APR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_APR,
           NVL (DIS_MAY, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_MAY,
           NVL (DIS_JUN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_JUN,
           0 AS QTY_JUL,
           0 AS QTY_AUG,
           0 AS QTY_SEP,
           0 AS QTY_OCT,
           0 AS QTY_NOV,
           0 AS QTY_DEC,
           NVL (DIS_JAN, 0) * RP_QTY_INTERNAL AS COST_JAN,
           NVL (DIS_FEB, 0) * RP_QTY_INTERNAL AS COST_FEB,
           NVL (DIS_MAR, 0) * RP_QTY_INTERNAL AS COST_MAR,
           NVL (DIS_APR, 0) * RP_QTY_INTERNAL AS COST_APR,
           NVL (DIS_MAY, 0) * RP_QTY_INTERNAL AS COST_MAY,
           NVL (DIS_JUN, 0) * RP_QTY_INTERNAL AS COST_JUN,
           0 AS COST_JUL,
           0 AS COST_AUG,
           0 AS COST_SEP,
           0 AS COST_OCT,
           0 AS COST_NOV,
           0 AS COST_DEC
        FROM TR_RKT_PUPUK_DISTRIBUSI RKT
           LEFT JOIN TM_HECTARE_STATEMENT THS
            ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND RKT.BA_CODE = THS.BA_CODE
               AND RKT.AFD_CODE = THS.AFD_CODE
               AND RKT.BLOCK_CODE = THS.BLOCK_CODE
           LEFT JOIN TN_INFRASTRUKTUR TNI
            ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND TNI.BA_CODE = THS.BA_CODE
               AND ACTIVITY_CODE = '43750'
           LEFT JOIN TM_MATERIAL TM
            ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND TM.BA_CODE = TNI.BA_CODE
               AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TN_HARGA_BARANG THB
            ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND THB.BA_CODE = TNI.BA_CODE
               AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TM_ORGANIZATION ORG
            ON     ORG.BA_CODE = RKT.BA_CODE
         WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
           AND RKT.MATURITY_STAGE_SMS1 <> 'TM'
           AND TNI.COST_ELEMENT = 'TOOLS'
           AND TM.COA_CODE = '5101020300'
           $where3
        UNION
        SELECT RKT.PERIOD_BUDGET,
           ORG.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
           'TOOLS' AS COST_ELEMENT,
           '5101020300' AS ACTIVITY_CODE,
           'PUPUK TUNGGAL' AS ACTIVITY_DESC,
           TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
           TM.MATERIAL_NAME,
           '' AS KETERANGAN,
           'POKOK' AS UOM,                 
           0 AS QTY_JAN,
           0 AS QTY_FEB,
           0 AS QTY_MAR,
           0 AS QTY_APR,
           0 AS QTY_MAY,
           0 AS QTY_JUN,
           NVL (DIS_JUL, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_JUL,
           NVL (DIS_AUG, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_AUG,
           NVL (DIS_SEP, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_SEP,
           NVL (DIS_OCT, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_OCT,
           NVL (DIS_NOV, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_NOV,
           NVL (DIS_DEC, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
            AS QTY_DEC,
           0 AS COST_JAN,
           0 AS COST_FEB,
           0 AS COST_MAR,
           0 AS COST_APR,
           0 AS COST_MAY,
           0 AS COST_JUN,
           NVL (DIS_JUL, 0) * RP_QTY_INTERNAL AS COST_JUL,
           NVL (DIS_AUG, 0) * RP_QTY_INTERNAL AS COST_AUG,
           NVL (DIS_SEP, 0) * RP_QTY_INTERNAL AS COST_SEP,
           NVL (DIS_OCT, 0) * RP_QTY_INTERNAL AS COST_OCT,
           NVL (DIS_NOV, 0) * RP_QTY_INTERNAL AS COST_NOV,
           NVL (DIS_DEC, 0) * RP_QTY_INTERNAL AS COST_DEC
        FROM TR_RKT_PUPUK_DISTRIBUSI RKT
           LEFT JOIN TM_HECTARE_STATEMENT THS
            ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND RKT.BA_CODE = THS.BA_CODE
               AND RKT.AFD_CODE = THS.AFD_CODE
               AND RKT.BLOCK_CODE = THS.BLOCK_CODE
           LEFT JOIN TN_INFRASTRUKTUR TNI
            ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
               AND TNI.BA_CODE = THS.BA_CODE
               AND ACTIVITY_CODE = '43750'
           LEFT JOIN TM_MATERIAL TM
            ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND TM.BA_CODE = TNI.BA_CODE
               AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TN_HARGA_BARANG THB
            ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
               AND THB.BA_CODE = TNI.BA_CODE
               AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
           LEFT JOIN TM_ORGANIZATION ORG
            ON     ORG.BA_CODE = RKT.BA_CODE
         WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
           AND RKT.MATURITY_STAGE_SMS1 <> 'TM'
           AND TNI.COST_ELEMENT = 'TOOLS'
           AND TM.COA_CODE = '5101020300'
           $where3)
  GROUP BY PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       KETERANGAN,
       UOM
UNION ALL
   --ini untuk PUPUK MAJEMUK TOOLS
   SELECT PERIOD_BUDGET,
     REGION_CODE,
     BA_CODE,
     AFD_CODE,
     BLOCK_CODE,
     TIPE_TRANSAKSI,
     COST_ELEMENT,
     ACTIVITY_CODE,
     ACTIVITY_DESC,
     SUB_COST_ELEMENT,
     MATERIAL_NAME,
     KETERANGAN,
     UOM,
     MAX (QTY_JAN) QTY_JAN,
     MAX (QTY_FEB) QTY_FEB,
     MAX (QTY_MAR) QTY_MAR,
     MAX (QTY_APR) QTY_APR,
     MAX (QTY_MAY) QTY_MAY,
     MAX (QTY_JUN) QTY_JUN,
     MAX (QTY_JUL) QTY_JUL,
     MAX (QTY_AUG) QTY_AUG,
     MAX (QTY_SEP) QTY_SEP,
     MAX (QTY_OCT) QTY_OCT,
     MAX (QTY_NOV) QTY_NOV,
     MAX (QTY_DEC) QTY_DEC,
     SUM (COST_JAN) AS COST_JAN,
     SUM (COST_FEB) AS COST_FEB,
     SUM (COST_MAR) AS COST_MAR,
     SUM (COST_APR) AS COST_APR,
     SUM (COST_MAY) AS COST_MAY,
     SUM (COST_JUN) AS COST_JUN,
     SUM (COST_JUL) AS COST_JUL,
     SUM (COST_AUG) AS COST_AUG,
     SUM (COST_SEP) AS COST_SEP,
     SUM (COST_OCT) AS COST_OCT,
     SUM (COST_NOV) AS COST_NOV,
     SUM (COST_DEC) AS COST_DEC,
     MAX (QTY_JAN) + 
     MAX (QTY_FEB) +
     MAX (QTY_MAR) +
     MAX (QTY_APR) +
     MAX (QTY_MAY) +
     MAX (QTY_JUN) +
     MAX (QTY_JUL) +
     MAX (QTY_AUG) +
     MAX (QTY_SEP) +
     MAX (QTY_OCT) +
     MAX (QTY_NOV) +
     MAX (QTY_DEC) QTY_SETAHUN,         
     SUM (COST_JAN) +
     SUM (COST_FEB) +
     SUM (COST_MAR) +
     SUM (COST_APR) +
     SUM (COST_MAY) +
     SUM (COST_JUN) +
     SUM (COST_JUL) +
     SUM (COST_AUG) +
     SUM (COST_SEP) +
     SUM (COST_OCT) +
     SUM (COST_NOV) +
     SUM (COST_DEC) AS COST_SETAHUN,
     '".$this->_userName."' AS INSERT_USER,
     SYSDATE AS INSERT_TIME
  FROM (    
  SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
         'TOOLS' AS COST_ELEMENT,
         '5101020300' AS ACTIVITY_CODE,
         'PUPUK TUNGGAL' AS ACTIVITY_DESC,
         TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
         TM.MATERIAL_NAME,
         '' AS KETERANGAN,
         'POKOK' AS UOM,                 
         NVL (DIS_JAN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_JAN,
         NVL (DIS_FEB, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_FEB,
         NVL (DIS_MAR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_MAR,
         NVL (DIS_APR, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_APR,
         NVL (DIS_MAY, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_MAY,
         NVL (DIS_JUN, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_JUN,
         0 AS QTY_JUL,
         0 AS QTY_AUG,
         0 AS QTY_SEP,
         0 AS QTY_OCT,
         0 AS QTY_NOV,
         0 AS QTY_DEC,
         NVL (DIS_JAN, 0) * RP_QTY_INTERNAL AS COST_JAN,
         NVL (DIS_FEB, 0) * RP_QTY_INTERNAL AS COST_FEB,
         NVL (DIS_MAR, 0) * RP_QTY_INTERNAL AS COST_MAR,
         NVL (DIS_APR, 0) * RP_QTY_INTERNAL AS COST_APR,
         NVL (DIS_MAY, 0) * RP_QTY_INTERNAL AS COST_MAY,
         NVL (DIS_JUN, 0) * RP_QTY_INTERNAL AS COST_JUN,
         0 AS COST_JUL,
         0 AS COST_AUG,
         0 AS COST_SEP,
         0 AS COST_OCT,
         0 AS COST_NOV,
         0 AS COST_DEC
      FROM TR_RKT_PUPUK_DISTRIBUSI RKT
         LEFT JOIN TM_HECTARE_STATEMENT THS
          ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
             AND RKT.BA_CODE = THS.BA_CODE
             AND RKT.AFD_CODE = THS.AFD_CODE
             AND RKT.BLOCK_CODE = THS.BLOCK_CODE
         LEFT JOIN TN_INFRASTRUKTUR TNI
          ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
             AND TNI.BA_CODE = THS.BA_CODE
             AND ACTIVITY_CODE = '43750'
         LEFT JOIN TM_MATERIAL TM
          ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
             AND TM.BA_CODE = TNI.BA_CODE
             AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
         LEFT JOIN TN_HARGA_BARANG THB
          ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
             AND THB.BA_CODE = TNI.BA_CODE
             AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
         LEFT JOIN TM_ORGANIZATION ORG
          ON     ORG.BA_CODE = RKT.BA_CODE
       WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
         AND RKT.MATURITY_STAGE_SMS1 <> 'TM'
         AND TNI.COST_ELEMENT = 'TOOLS'
         AND TM.COA_CODE = '5101020400'                 
         $where3                 
      UNION
      SELECT RKT.PERIOD_BUDGET,
         ORG.REGION_CODE,
         RKT.BA_CODE,
         RKT.AFD_CODE,
         RKT.BLOCK_CODE,
         RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
         'TOOLS' AS COST_ELEMENT,
         '5101020400' AS ACTIVITY_CODE,
         'PUPUK MAJEMUK' AS ACTIVITY_DESC,
         TNI.SUB_COST_ELEMENT SUB_COST_ELEMENT,
         TM.MATERIAL_NAME,
         '' AS KETERANGAN,
         'POKOK' AS UOM,                 
         0 AS QTY_JAN,
         0 AS QTY_FEB,
         0 AS QTY_MAR,
         0 AS QTY_APR,
         0 AS QTY_MAY,
         0 AS QTY_JUN,
         NVL (DIS_JUL, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_JUL,
         NVL (DIS_AUG, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_AUG,
         NVL (DIS_SEP, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_SEP,
         NVL (DIS_OCT, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_OCT,
         NVL (DIS_NOV, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_NOV,
         NVL (DIS_DEC, 0) * RP_QTY_INTERNAL / NVL (THB.PRICE, 1)
          AS QTY_DEC,
         0 AS COST_JAN,
         0 AS COST_FEB,
         0 AS COST_MAR,
         0 AS COST_APR,
         0 AS COST_MAY,
         0 AS COST_JUN,
         NVL (DIS_JUL, 0) * RP_QTY_INTERNAL AS COST_JUL,
         NVL (DIS_AUG, 0) * RP_QTY_INTERNAL AS COST_AUG,
         NVL (DIS_SEP, 0) * RP_QTY_INTERNAL AS COST_SEP,
         NVL (DIS_OCT, 0) * RP_QTY_INTERNAL AS COST_OCT,
         NVL (DIS_NOV, 0) * RP_QTY_INTERNAL AS COST_NOV,
         NVL (DIS_DEC, 0) * RP_QTY_INTERNAL AS COST_DEC
      FROM TR_RKT_PUPUK_DISTRIBUSI RKT
         LEFT JOIN TM_HECTARE_STATEMENT THS
          ON     RKT.PERIOD_BUDGET = THS.PERIOD_BUDGET
             AND RKT.BA_CODE = THS.BA_CODE
             AND RKT.AFD_CODE = THS.AFD_CODE
             AND RKT.BLOCK_CODE = THS.BLOCK_CODE
         LEFT JOIN TN_INFRASTRUKTUR TNI
          ON     TNI.PERIOD_BUDGET = THS.PERIOD_BUDGET
             AND TNI.BA_CODE = THS.BA_CODE
             AND ACTIVITY_CODE = '43750'
         LEFT JOIN TM_MATERIAL TM
          ON     TM.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
             AND TM.BA_CODE = TNI.BA_CODE
             AND TM.PERIOD_BUDGET = TNI.PERIOD_BUDGET
         LEFT JOIN TN_HARGA_BARANG THB
          ON     THB.MATERIAL_CODE = TNI.SUB_COST_ELEMENT
             AND THB.BA_CODE = TNI.BA_CODE
             AND THB.PERIOD_BUDGET = TNI.PERIOD_BUDGET
          LEFT JOIN TM_ORGANIZATION ORG
          ON     ORG.BA_CODE = RKT.BA_CODE
       WHERE     RKT.TIPE_TRANSAKSI LIKE '%POKOK%'
         AND RKT.MATURITY_STAGE_SMS1 <> 'TM'
         AND TNI.COST_ELEMENT = 'TOOLS'
         AND TM.COA_CODE = '5101020400'
         $where3)
GROUP BY PERIOD_BUDGET,
     REGION_CODE,
     BA_CODE,
     AFD_CODE,
     BLOCK_CODE,
     TIPE_TRANSAKSI,
     COST_ELEMENT,
     ACTIVITY_CODE,
     ACTIVITY_DESC,
     SUB_COST_ELEMENT,
     MATERIAL_NAME,
     KETERANGAN,
     UOM
UNION ALL
   SELECT RKT.PERIOD_BUDGET,
      ORG.REGION_CODE,
      RKT.BA_CODE,
      RKT.AFD_CODE,
      RKT.BLOCK_CODE,
      RKT.MATURITY_STAGE TIPE_TRANSAKSI,
      'MATERIAL' AS COST_ELEMENT,
      RKT.COA_CODE AS ACTIVITY_CODE,
      'PUPUK MAJEMUK' AS ACTIVITY_DESC,
      RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
      RKT.MATERIAL_NAME,
      '' KETERANGAN,
      'KG' UOM,
      RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
      RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
      RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
      RKT.QTY_MAJEMUK_APR AS QTY_APR,
      RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
      RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
      RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
      RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
      RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
      RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
      RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
      RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
      (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
      (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
      (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
      (RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
      (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
      (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
      (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
      (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
      (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
      (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
      (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
      (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
      (  RKT.QTY_MAJEMUK_JAN
       + RKT.QTY_MAJEMUK_FEB
       + RKT.QTY_MAJEMUK_MAR
       + RKT.QTY_MAJEMUK_APR
       + RKT.QTY_MAJEMUK_MAY
       + RKT.QTY_MAJEMUK_JUN
       + RKT.QTY_MAJEMUK_JUL
       + RKT.QTY_MAJEMUK_AUG
       + RKT.QTY_MAJEMUK_SEP
       + RKT.QTY_MAJEMUK_OCT
       + RKT.QTY_MAJEMUK_NOV
       + RKT.QTY_MAJEMUK_DEC)
       AS QTY_SETAHUN,
      (  (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_APR * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE)
       + (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE))
       AS COST_SETAHUN,
      '".$this->_userName."' AS INSERT_USER,
      SYSDATE AS INSERT_TIME
   FROM (  SELECT PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE MATERIAL_CODE,
          ACTIVITY_NAME MATERIAL_NAME,
          SUM (QTY_MAJEMUK_JAN) QTY_MAJEMUK_JAN,
          SUM (QTY_MAJEMUK_FEB) QTY_MAJEMUK_FEB,
          SUM (QTY_MAJEMUK_MAR) QTY_MAJEMUK_MAR,
          SUM (QTY_MAJEMUK_APR) QTY_MAJEMUK_APR,
          SUM (QTY_MAJEMUK_MAY) QTY_MAJEMUK_MAY,
          SUM (QTY_MAJEMUK_JUN) QTY_MAJEMUK_JUN,
          SUM (QTY_MAJEMUK_JUL) QTY_MAJEMUK_JUL,
          SUM (QTY_MAJEMUK_AUG) QTY_MAJEMUK_AUG,
          SUM (QTY_MAJEMUK_SEP) QTY_MAJEMUK_SEP,
          SUM (QTY_MAJEMUK_OCT) QTY_MAJEMUK_OCT,
          SUM (QTY_MAJEMUK_NOV) QTY_MAJEMUK_NOV,
          SUM (QTY_MAJEMUK_DEC) QTY_MAJEMUK_DEC
         FROM (SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              RKT.DIS_JAN QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_JAN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              RKT.DIS_FEB QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_FEB
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              RKT.DIS_MAR QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_MAR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              RKT.DIS_APR QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_APR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              RKT.DIS_MAY QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_MAY
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              RKT.DIS_JUN QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_JUN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              RKT.DIS_JUL QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_JUL
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              RKT.DIS_AUG QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_AUG
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              RKT.DIS_SEP QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_SEP
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              RKT.DIS_OCT QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_OCT
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              RKT.DIS_NOV QTY_MAJEMUK_NOV,
              0 QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_NOV
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_MAJEMUK_JAN,
              0 QTY_MAJEMUK_FEB,
              0 QTY_MAJEMUK_MAR,
              0 QTY_MAJEMUK_APR,
              0 QTY_MAJEMUK_MAY,
              0 QTY_MAJEMUK_JUN,
              0 QTY_MAJEMUK_JUL,
              0 QTY_MAJEMUK_AUG,
              0 QTY_MAJEMUK_SEP,
              0 QTY_MAJEMUK_OCT,
              0 QTY_MAJEMUK_NOV,
              RKT.DIS_DEC QTY_MAJEMUK_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE =
                   RKT.MATERIAL_CODE_DEC
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020400')
       GROUP BY PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE,
          ACTIVITY_NAME
       ORDER BY PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE) RKT
      LEFT JOIN TN_HARGA_BARANG HARGA
       ON     HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
        AND HARGA.BA_CODE = RKT.BA_CODE
        AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
        AND HARGA.DELETE_USER IS NULL
        AND HARGA.FLAG_TEMP IS NULL
      LEFT JOIN TM_ORGANIZATION ORG
       ON ORG.BA_CODE = RKT.BA_CODE
  WHERE     1 = 1
      AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
      $where
  UNION ALL
  SELECT     RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.AFD_CODE,
            RKT.BLOCK_CODE,
            RKT.MATURITY_STAGE TIPE_TRANSAKSI,
            'MATERIAL' AS COST_ELEMENT,
            RKT.COA_CODE AS ACTIVITY_CODE,
            'PUPUK TUNGGAL' AS ACTIVITY_DESC,
            RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
            RKT.MATERIAL_NAME,
            '' KETERANGAN,
            'KG' UOM,
            RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
            RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
            RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
            RKT.QTY_TUNGGAL_APR AS QTY_APR,
            RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
            RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
            RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
            RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
            RKT.QTY_TUNGGAL_SEP AS  QTY_SEP,
            RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
            RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
            RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
            (RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
            (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
            (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
            (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
            (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
            (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
            (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
            (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
            (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
            (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
            (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
            (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
            (RKT.QTY_TUNGGAL_JAN +
            RKT.QTY_TUNGGAL_FEB +
            RKT.QTY_TUNGGAL_MAR +
            RKT.QTY_TUNGGAL_APR +
            RKT.QTY_TUNGGAL_MAY +
            RKT.QTY_TUNGGAL_JUN +
            RKT.QTY_TUNGGAL_JUL +
            RKT.QTY_TUNGGAL_AUG +
            RKT.QTY_TUNGGAL_SEP +
            RKT.QTY_TUNGGAL_OCT +
            RKT.QTY_TUNGGAL_NOV +
            RKT.QTY_TUNGGAL_DEC)
            AS QTY_SETAHUN,
            ((RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) +
            (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE)) 
            AS COST_SETAHUN,
            '".$this->_userName."' AS INSERT_USER,
            SYSDATE AS INSERT_TIME
      FROM (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE MATERIAL_CODE,
          ACTIVITY_NAME MATERIAL_NAME,
          SUM (QTY_TUNGGAL_JAN) QTY_TUNGGAL_JAN,
          SUM (QTY_TUNGGAL_FEB) QTY_TUNGGAL_FEB,
          SUM (QTY_TUNGGAL_MAR) QTY_TUNGGAL_MAR,
          SUM (QTY_TUNGGAL_APR) QTY_TUNGGAL_APR,
          SUM (QTY_TUNGGAL_MAY) QTY_TUNGGAL_MAY,
          SUM (QTY_TUNGGAL_JUN) QTY_TUNGGAL_JUN,
          SUM (QTY_TUNGGAL_JUL) QTY_TUNGGAL_JUL,
          SUM (QTY_TUNGGAL_AUG) QTY_TUNGGAL_AUG,
          SUM (QTY_TUNGGAL_SEP) QTY_TUNGGAL_SEP,
          SUM (QTY_TUNGGAL_OCT) QTY_TUNGGAL_OCT,
          SUM (QTY_TUNGGAL_NOV) QTY_TUNGGAL_NOV,
          SUM (QTY_TUNGGAL_DEC) QTY_TUNGGAL_DEC
         FROM (
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              RKT.DIS_JAN QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JAN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              RKT.DIS_FEB QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_FEB
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300' 
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              RKT.DIS_MAR QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              RKT.DIS_APR QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_APR
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              RKT.DIS_MAY QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAY
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '1' SEMESTER,
              RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              RKT.DIS_JUN QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUN
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              RKT.DIS_JUL QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUL
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              RKT.DIS_AUG QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_AUG
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              RKT.DIS_SEP QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_SEP
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              RKT.DIS_OCT QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_OCT
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              RKT.DIS_NOV QTY_TUNGGAL_NOV,
              0 QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_NOV
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
           UNION ALL
           SELECT RKT.PERIOD_BUDGET,
              RKT.BA_CODE,
              RKT.AFD_CODE,
              RKT.BLOCK_CODE,
              '2' SEMESTER,
              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
              MATERIAL.COA_CODE COA_CODE,
              MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
              MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
              0 QTY_TUNGGAL_JAN,
              0 QTY_TUNGGAL_FEB,
              0 QTY_TUNGGAL_MAR,
              0 QTY_TUNGGAL_APR,
              0 QTY_TUNGGAL_MAY,
              0 QTY_TUNGGAL_JUN,
              0 QTY_TUNGGAL_JUL,
              0 QTY_TUNGGAL_AUG,
              0 QTY_TUNGGAL_SEP,
              0 QTY_TUNGGAL_OCT,
              0 QTY_TUNGGAL_NOV,
              RKT.DIS_DEC QTY_TUNGGAL_DEC
             FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
              LEFT JOIN
                 TM_MATERIAL MATERIAL
              ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND MATERIAL.BA_CODE = RKT.BA_CODE
                 AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_DEC
            WHERE     RKT.DELETE_USER IS NULL
              AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
              AND MATERIAL.COA_CODE = '5101020300'
              )
       GROUP BY PERIOD_BUDGET,
          BA_CODE,
          BLOCK_CODE,
          AFD_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE,
          ACTIVITY_NAME
       ORDER BY PERIOD_BUDGET,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          SEMESTER,
          MATURITY_STAGE,
          COA_CODE,
          ACTIVITY_CODE
    )RKT
        LEFT JOIN TN_HARGA_BARANG HARGA
          ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
          AND HARGA.BA_CODE = RKT.BA_CODE
          AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
          AND HARGA.DELETE_USER IS NULL
          AND HARGA.FLAG_TEMP IS NULL
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE 1 = 1
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          $where 
        UNION ALL 
        SELECT PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE, TIPE_TRANSAKSI, COST_ELEMENT, ACTIVITY_CODE, ACTIVITY_DESC, SUB_COST_ELEMENT,
    MATERIAL_NAME, KETERANGAN, UOM, QTY_JAN, QTY_FEB, QTY_MAR, QTY_APR, QTY_MAY, QTY_JUN, QTY_JUL, QTY_AUG, QTY_SEP, QTY_OCT, QTY_NOV, QTY_DEC, ( QTY_JAN
    + QTY_FEB + QTY_MAR + QTY_APR + QTY_MAY + QTY_JUN + QTY_JUL + QTY_AUG + QTY_SEP + QTY_OCT + QTY_NOV + QTY_DEC) AS QTY_SETAHUN, COST_JAN, COST_FEB,
    COST_MAR, COST_APR, COST_MAY, COST_JUN, COST_JUL, COST_AUG, COST_SEP, COST_OCT, COST_NOV, COST_DEC, ( COST_JAN + COST_FEB + COST_MAR + COST_APR +
    COST_MAY + COST_JUN + COST_JUL + COST_AUG + COST_SEP + COST_OCT + COST_NOV + COST_DEC) AS COST_SETAHUN, '".$this->_userName."' AS INSERT_USER, SYSDATE
    AS INSERT_TIME
    FROM (
    SELECT COST.PERIOD_BUDGET, COST.REGION_CODE, COST.BA_CODE, COST.AFD_CODE, COST.BLOCK_CODE, KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI, COST.
    COST_ELEMENT, '5101020300' AS ACTIVITY_CODE, 'PUPUK TUNGGAL' AS ACTIVITY_DESC, '' AS SUB_COST_ELEMENT, '' AS MATERIAL_NAME, '' AS KETERANGAN, 'KG' UOM
    , 0 QTY_JAN, 0 QTY_FEB, 0 QTY_MAR, 0 QTY_APR, 0 QTY_MAY, 0 QTY_JUN, 0 QTY_JUL, 0 QTY_AUG, 0 QTY_SEP, 0 QTY_OCT, 0 QTY_NOV, 0 QTY_DEC,
    CASE WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
    ELSE 0
    END AS COST_JAN,
    CASE WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
    ELSE 0
    END AS COST_FEB,
    CASE WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
    ELSE 0
    END AS COST_MAR,
    CASE WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
    ELSE 0
    END AS COST_APR,
    CASE WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
    ELSE 0
    END AS COST_MAY,
    CASE WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
    ELSE 0
    END AS COST_JUN,
    CASE WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
    ELSE 0
    END AS COST_JUL,
    CASE WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
    ELSE 0
    END AS COST_AUG,
    CASE WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
    ELSE 0
    END AS COST_SEP,
    CASE WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
    ELSE 0
    END AS COST_OCT,
    CASE WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
    ELSE 0
    END AS COST_NOV,
    CASE WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
    THEN ( KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
    ELSE 0
    END AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE, COST_ELEMENT, MATURITY_STAGE, SUM (DIS_COST_JAN) DIS_COST_JAN, SUM (DIS_COST_FEB)
    DIS_COST_FEB, SUM (DIS_COST_MAR) DIS_COST_MAR, SUM (DIS_COST_APR) DIS_COST_APR, SUM (DIS_COST_MAY) DIS_COST_MAY, SUM (DIS_COST_JUN) DIS_COST_JUN, SUM
    (DIS_COST_JUL) DIS_COST_JUL, SUM (DIS_COST_AUG) DIS_COST_AUG, SUM (DIS_COST_SEP) DIS_COST_SEP, SUM (DIS_COST_OCT) DIS_COST_OCT, SUM (DIS_COST_NOV)
    DIS_COST_NOV, SUM (DIS_COST_DEC) DIS_COST_DEC, MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK, MAX (COST_TOOLS_KG) COST_TOOLS_KG, MAX (COST_TRANSPORT_KG)
    COST_TRANSPORT_KG
    FROM (
    SELECT RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE, SUM
    (RKT.DIS_COST_JAN) AS DIS_COST_JAN, SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB, SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR, SUM (RKT.DIS_COST_APR) AS
    DIS_COST_APR, SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY, SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN, 0 DIS_COST_JUL, 0 DIS_COST_AUG, 0 DIS_COST_SEP, 0
    DIS_COST_OCT, 0 DIS_COST_NOV, 0 DIS_COST_DEC, MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK, MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG, MAX (RKT.
    COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
    FROM TR_RKT_PUPUK_COST_ELEMENT RKT LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    WHERE RKT.DELETE_USER IS NULL
    AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
    AND RKT.COST_ELEMENT <> 'MATERIAL'
    $where
    GROUP BY RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.
    MATURITY_STAGE_SMS1 UNION ALL
    SELECT RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE, 0
    DIS_COST_JAN, 0 DIS_COST_FEB, 0 DIS_COST_MAR, 0 DIS_COST_APR, 0 DIS_COST_MAY, 0 DIS_COST_JUN, SUM (RKT.DIS_COST_JUL) DIS_COST_JUL, SUM (RKT.
    DIS_COST_AUG) DIS_COST_AUG, SUM (RKT.DIS_COST_SEP) DIS_COST_SEP, SUM (RKT.DIS_COST_OCT) DIS_COST_OCT, SUM (RKT.DIS_COST_NOV) DIS_COST_NOV, SUM (RKT.
    DIS_COST_DEC) DIS_COST_DEC, MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK, MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG, MAX (RKT.COST_TRANSPORT_KG) AS
    COST_TRANSPORT_KG
    FROM TR_RKT_PUPUK_COST_ELEMENT RKT LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
    WHERE RKT.DELETE_USER IS NULL
    AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
    AND RKT.COST_ELEMENT <> 'MATERIAL'
    $where
    GROUP BY RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.
    MATURITY_STAGE_SMS2) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE, COST_ELEMENT, MATURITY_STAGE) COST LEFT JOIN V_KG_PUPUK_AFD
    KG_PUPUK ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
    AND COST.BA_CODE = KG_PUPUK.BA_CODE
    AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
    AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE 
    UNION ALL
    -- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
SELECT COST.PERIOD_BUDGET,
     COST.REGION_CODE,
     COST.BA_CODE,
     COST.AFD_CODE,
     COST.BLOCK_CODE,
     KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
     COST.COST_ELEMENT,
     '5101020400' AS ACTIVITY_CODE,
     'PUPUK MAJEMUK' AS ACTIVITY_NAME,
     '' AS SUB_COST_ELEMENT,
     '' AS MATERIAL_NAME,
     '' AS KETERANGAN,
     'KG' UOM,
     0 QTY_JAN,
     0 QTY_FEB,
     0 QTY_MAR,
     0 QTY_APR,
     0 QTY_MAY,
     0 QTY_JUN,
     0 QTY_JUL,
     0 QTY_AUG,
     0 QTY_SEP,
     0 QTY_OCT,
     0 QTY_NOV,
     0 QTY_DEC,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_JAN
        / KG_PUPUK.QTY_TOTAL_JAN
        * COST.DIS_COST_JAN)
      ELSE
       0
     END
      AS COST_JAN,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_FEB
        / KG_PUPUK.QTY_TOTAL_FEB
        * COST.DIS_COST_FEB)
      ELSE
       0
     END
      AS COST_FEB,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_MAR
        / KG_PUPUK.QTY_TOTAL_MAR
        * COST.DIS_COST_MAR)
      ELSE
       0
     END
      AS COST_MAR,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_APR
        / KG_PUPUK.QTY_TOTAL_APR
        * COST.DIS_COST_APR)
      ELSE
       0
     END
      AS COST_APR,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_MAY
        / KG_PUPUK.QTY_TOTAL_MAY
        * COST.DIS_COST_MAY)
      ELSE
       0
     END
      AS COST_MAY,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_JUN
        / KG_PUPUK.QTY_TOTAL_JUN
        * COST.DIS_COST_JUN)
      ELSE
       0
     END
      AS COST_JUN,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_JUL
        / KG_PUPUK.QTY_TOTAL_JUL
        * COST.DIS_COST_JUL)
      ELSE
       0
     END
      AS COST_JUL,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_AUG
        / KG_PUPUK.QTY_TOTAL_AUG
        * COST.DIS_COST_AUG)
      ELSE
       0
     END
      AS COST_AUG,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_SEP
        / KG_PUPUK.QTY_TOTAL_SEP
        * COST.DIS_COST_SEP)
      ELSE
       0
     END
      AS COST_SEP,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_OCT
        / KG_PUPUK.QTY_TOTAL_OCT
        * COST.DIS_COST_OCT)
      ELSE
       0
     END
      AS COST_OCT,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_NOV
        / KG_PUPUK.QTY_TOTAL_NOV
        * COST.DIS_COST_NOV)
      ELSE
       0
     END
      AS COST_NOV,
     CASE
      WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
      THEN
       (  KG_PUPUK.QTY_MAJEMUK_DEC
        / KG_PUPUK.QTY_TOTAL_DEC
        * COST.DIS_COST_DEC)
      ELSE
       0
     END
      AS COST_DEC
  FROM    (  SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          COST_ELEMENT,
          MATURITY_STAGE,
          SUM (DIS_COST_JAN) DIS_COST_JAN,
          SUM (DIS_COST_FEB) DIS_COST_FEB,
          SUM (DIS_COST_MAR) DIS_COST_MAR,
          SUM (DIS_COST_APR) DIS_COST_APR,
          SUM (DIS_COST_MAY) DIS_COST_MAY,
          SUM (DIS_COST_JUN) DIS_COST_JUN,
          SUM (DIS_COST_JUL) DIS_COST_JUL,
          SUM (DIS_COST_AUG) DIS_COST_AUG,
          SUM (DIS_COST_SEP) DIS_COST_SEP,
          SUM (DIS_COST_OCT) DIS_COST_OCT,
          SUM (DIS_COST_NOV) DIS_COST_NOV,
          SUM (DIS_COST_DEC) DIS_COST_DEC,
          MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
          MAX (COST_TOOLS_KG) COST_TOOLS_KG,
          MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
         FROM (  SELECT RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.BLOCK_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                0 DIS_COST_JUL,
                0 DIS_COST_AUG,
                0 DIS_COST_SEP,
                0 DIS_COST_OCT,
                0 DIS_COST_NOV,
                0 DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
             FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                LEFT JOIN
                 TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
                AND RKT.MATURITY_STAGE_SMS1 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                AND RKT.COST_ELEMENT NOT IN('MATERIAL', 'TRANSPORT')
                $where
           GROUP BY RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.BLOCK_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS1
           UNION ALL
             SELECT RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.BLOCK_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                0 DIS_COST_JAN,
                0 DIS_COST_FEB,
                0 DIS_COST_MAR,
                0 DIS_COST_APR,
                0 DIS_COST_MAY,
                0 DIS_COST_JUN,
                SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
             FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                LEFT JOIN
                 TM_ORGANIZATION ORG
                ON ORG.BA_CODE = RKT.BA_CODE
            WHERE RKT.DELETE_USER IS NULL
                AND RKT.MATURITY_STAGE_SMS2 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                AND RKT.COST_ELEMENT NOT IN('MATERIAL', 'TRANSPORT')
                $where
           GROUP BY RKT.PERIOD_BUDGET,
                ORG.REGION_CODE,
                RKT.BA_CODE,
                RKT.AFD_CODE,
                RKT.BLOCK_CODE,
                RKT.COST_ELEMENT,
                RKT.MATURITY_STAGE_SMS2)
       GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          COST_ELEMENT,
          MATURITY_STAGE) COST
     LEFT JOIN
      V_KG_PUPUK_AFD KG_PUPUK
     ON     COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
      AND COST.BA_CODE = KG_PUPUK.BA_CODE
      AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
      AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
    ) 
    UNION ALL
    -- INI UNTUK PERHITUNGAN PUPUK MAJEMUK TRANSPORT
    /* Formatted on 9/7/2015 8:08:37 PM (QP5 v5.136.908.31019) */
    SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       '' KETERANGAN,
       UOM,
       SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
       SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
       SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
       SUM (NVL (QTY_APR, 0)) AS QTY_APR,
       SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
       SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
       SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
       SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
       SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
       SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
       SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
       SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
       SUM (NVL (COST_JAN, 0)) AS COST_JAN,
       SUM (NVL (COST_FEB, 0)) AS COST_FEB,
       SUM (NVL (COST_MAR, 0)) AS COST_MAR,
       SUM (NVL (COST_APR, 0)) AS COST_APR,
       SUM (NVL (COST_MAY, 0)) AS COST_MAY,
       SUM (NVL (COST_JUN, 0)) AS COST_JUN,
       SUM (NVL (COST_JUL, 0)) AS COST_JUL,
       SUM (NVL (COST_AUG, 0)) AS COST_AUG,
       SUM (NVL (COST_SEP, 0)) AS COST_SEP,
       SUM (NVL (COST_OCT, 0)) AS COST_OCT,
       SUM (NVL (COST_NOV, 0)) AS COST_NOV,
       SUM (NVL (COST_DEC, 0)) AS COST_DEC,
       (  SUM (NVL (QTY_JAN, 0))
        + SUM (NVL (QTY_FEB, 0))
        + SUM (NVL (QTY_MAR, 0))
        + SUM (NVL (QTY_APR, 0))
        + SUM (NVL (QTY_MAY, 0))
        + SUM (NVL (QTY_JUN, 0))
        + SUM (NVL (QTY_JUL, 0))
        + SUM (NVL (QTY_AUG, 0))
        + SUM (NVL (QTY_SEP, 0))
        + SUM (NVL (QTY_OCT, 0))
        + SUM (NVL (QTY_NOV, 0))
        + SUM (NVL (QTY_DEC, 0)))
        AS QTY_SETAHUN,
       (  SUM (NVL (COST_JAN, 0))
        + SUM (NVL (COST_FEB, 0))
        + SUM (NVL (COST_MAR, 0))
        + SUM (NVL (COST_APR, 0))
        + SUM (NVL (COST_MAY, 0))
        + SUM (NVL (COST_JUN, 0))
        + SUM (NVL (COST_JUL, 0))
        + SUM (NVL (COST_AUG, 0))
        + SUM (NVL (COST_SEP, 0))
        + SUM (NVL (COST_OCT, 0))
        + SUM (NVL (COST_NOV, 0))
        + SUM (NVL (COST_DEC, 0)))
        AS COST_SETAHUN,
       '".$this->_userName."' AS INSERT_USER,
       SYSDATE AS INSERT_TIME
    FROM (SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         (COST_JAN / NULLIF (PRICE_QTY_VRA,0)) AS QTY_JAN,
         (COST_FEB / NULLIF (PRICE_QTY_VRA,0)) AS QTY_FEB,
         (COST_MAR / NULLIF (PRICE_QTY_VRA,0)) AS QTY_MAR,
         (COST_APR / NULLIF (PRICE_QTY_VRA,0)) AS QTY_APR,
         (COST_MAY / NULLIF (PRICE_QTY_VRA,0)) AS QTY_MAY,
         (COST_JUN / NULLIF (PRICE_QTY_VRA,0)) AS QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020400' AS ACTIVITY_CODE,
             'PUPUK MAJEMUK' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JAN) =
                  '5101020400'
              THEN
                 (RKT.DIS_JAN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JAN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_FEB) =
                  '5101020400'
              THEN
                 (RKT.DIS_FEB
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_FEB,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAR) =
                  '5101020400'
              THEN
                 (RKT.DIS_MAR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_APR) =
                  '5101020400'
              THEN
                 (RKT.DIS_APR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_APR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAY) =
                  '5101020400'
              THEN
                 (RKT.DIS_MAY
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAY,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUN) =
                  '5101020400'
              THEN
                 (RKT.DIS_JUN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUN,
             0 COST_JUL,
             0 COST_AUG,
             0 COST_SEP,
             0 COST_OCT,
             0 COST_NOV,
             0 COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS1,
                 MATERIAL_CODE_JAN,
                 DIS_JAN,
                 MATERIAL_CODE_FEB,
                 DIS_FEB,
                 MATERIAL_CODE_MAR,
                 DIS_MAR,
                 MATERIAL_CODE_APR,
                 DIS_APR,
                 MATERIAL_CODE_MAY,
                 DIS_MAY,
                 MATERIAL_CODE_JUN,
                 DIS_JUN
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS1 NOT IN ('TM')
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                    $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE)
      UNION ALL
      SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         (COST_JUL / NULLIF(PRICE_QTY_VRA,0)) AS QTY_JUL,
         (COST_AUG / NULLIF(PRICE_QTY_VRA,0)) AS QTY_AUG,
         (COST_SEP / NULLIF(PRICE_QTY_VRA,0)) AS QTY_SEP,
         (COST_OCT / NULLIF(PRICE_QTY_VRA,0)) AS QTY_OCT,
         (COST_NOV / NULLIF(PRICE_QTY_VRA,0)) AS QTY_NOV,
         (COST_DEC / NULLIF(PRICE_QTY_VRA,0)) AS QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020400' AS ACTIVITY_CODE,
             'PUPUK MAJEMUK' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             0 COST_JAN,
             0 COST_FEB,
             0 COST_MAR,
             0 COST_APR,
             0 COST_MAY,
             0 COST_JUN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUL) =
                  '5101020400'
              THEN
                 (RKT.DIS_JUL
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUL,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_AUG) =
                  '5101020400'
              THEN
                 (RKT.DIS_AUG
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_AUG,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_SEP) =
                  '5101020400'
              THEN
                 (RKT.DIS_SEP
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_SEP,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_OCT) =
                  '5101020400'
              THEN
                 (RKT.DIS_OCT
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_OCT,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_NOV) =
                  '5101020400'
              THEN
                 (RKT.DIS_NOV
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_NOV,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_DEC) =
                  '5101020400'
              THEN
                 (RKT.DIS_DEC
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS2,
                 MATERIAL_CODE_JUL,
                 DIS_JUL,
                 MATERIAL_CODE_AUG,
                 DIS_AUG,
                 MATERIAL_CODE_SEP,
                 DIS_SEP,
                 MATERIAL_CODE_OCT,
                 DIS_OCT,
                 MATERIAL_CODE_NOV,
                 DIS_NOV,
                 MATERIAL_CODE_DEC,
                 DIS_DEC
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS2 NOT IN ('TM')
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                    $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE))
          GROUP BY PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               AFD_CODE,
               BLOCK_CODE,
               TIPE_TRANSAKSI,
               COST_ELEMENT,
               ACTIVITY_CODE,
               ACTIVITY_DESC,
               SUB_COST_ELEMENT,
               MATERIAL_NAME,
               UOM
  UNION ALL
    -- INI UNTUK PERHITUNGAN PUPUK TUNGGAL TRANSPORT
    SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       '' KETERANGAN,
       UOM,
       SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
       SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
       SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
       SUM (NVL (QTY_APR, 0)) AS QTY_APR,
       SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
       SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
       SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
       SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
       SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
       SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
       SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
       SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
       SUM (NVL (COST_JAN, 0)) AS COST_JAN,
       SUM (NVL (COST_FEB, 0)) AS COST_FEB,
       SUM (NVL (COST_MAR, 0)) AS COST_MAR,
       SUM (NVL (COST_APR, 0)) AS COST_APR,
       SUM (NVL (COST_MAY, 0)) AS COST_MAY,
       SUM (NVL (COST_JUN, 0)) AS COST_JUN,
       SUM (NVL (COST_JUL, 0)) AS COST_JUL,
       SUM (NVL (COST_AUG, 0)) AS COST_AUG,
       SUM (NVL (COST_SEP, 0)) AS COST_SEP,
       SUM (NVL (COST_OCT, 0)) AS COST_OCT,
       SUM (NVL (COST_NOV, 0)) AS COST_NOV,
       SUM (NVL (COST_DEC, 0)) AS COST_DEC,
       (  SUM (NVL (QTY_JAN, 0))
        + SUM (NVL (QTY_FEB, 0))
        + SUM (NVL (QTY_MAR, 0))
        + SUM (NVL (QTY_APR, 0))
        + SUM (NVL (QTY_MAY, 0))
        + SUM (NVL (QTY_JUN, 0))
        + SUM (NVL (QTY_JUL, 0))
        + SUM (NVL (QTY_AUG, 0))
        + SUM (NVL (QTY_SEP, 0))
        + SUM (NVL (QTY_OCT, 0))
        + SUM (NVL (QTY_NOV, 0))
        + SUM (NVL (QTY_DEC, 0)))
        AS QTY_SETAHUN,
       (  SUM (NVL (COST_JAN, 0))
        + SUM (NVL (COST_FEB, 0))
        + SUM (NVL (COST_MAR, 0))
        + SUM (NVL (COST_APR, 0))
        + SUM (NVL (COST_MAY, 0))
        + SUM (NVL (COST_JUN, 0))
        + SUM (NVL (COST_JUL, 0))
        + SUM (NVL (COST_AUG, 0))
        + SUM (NVL (COST_SEP, 0))
        + SUM (NVL (COST_OCT, 0))
        + SUM (NVL (COST_NOV, 0))
        + SUM (NVL (COST_DEC, 0)))
        AS COST_SETAHUN,
       '".$this->_userName."' AS INSERT_USER,
       SYSDATE AS INSERT_TIME
    FROM (SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         (COST_JAN / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_JAN,
         (COST_FEB / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_FEB,
         (COST_MAR / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_MAR,
         (COST_APR / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_APR,
         (COST_MAY / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_MAY,
         (COST_JUN / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_JUN,
         0 QTY_JUL,
         0 QTY_AUG,
         0 QTY_SEP,
         0 QTY_OCT,
         0 QTY_NOV,
         0 QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020300' AS ACTIVITY_CODE,
             'PUPUK TUNGGAL' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JAN) =
                  '5101020300'
              THEN
                 (RKT.DIS_JAN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JAN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_FEB) =
                  '5101020300'
              THEN
                 (RKT.DIS_FEB
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_FEB,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAR) =
                  '5101020300'
              THEN
                 (RKT.DIS_MAR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_APR) =
                  '5101020300'
              THEN
                 (RKT.DIS_APR
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_APR,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_MAY) =
                  '5101020300'
              THEN
                 (RKT.DIS_MAY
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_MAY,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUN) =
                  '5101020300'
              THEN
                 (RKT.DIS_JUN
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUN,
             0 COST_JUL,
             0 COST_AUG,
             0 COST_SEP,
             0 COST_OCT,
             0 COST_NOV,
             0 COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS1,
                 MATERIAL_CODE_JAN,
                 DIS_JAN,
                 MATERIAL_CODE_FEB,
                 DIS_FEB,
                 MATERIAL_CODE_MAR,
                 DIS_MAR,
                 MATERIAL_CODE_APR,
                 DIS_APR,
                 MATERIAL_CODE_MAY,
                 DIS_MAY,
                 MATERIAL_CODE_JUN,
                 DIS_JUN
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS1 NOT IN ('TM')
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                     $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE)
      UNION ALL
      SELECT PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         KETERANGAN,
         UOM,
         0 QTY_JAN,
         0 QTY_FEB,
         0 QTY_MAR,
         0 QTY_APR,
         0 QTY_MAY,
         0 QTY_JUN,
         (COST_JUL / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_JUL,
         (COST_AUG / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_AUG,
         (COST_SEP / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_SEP,
         (COST_OCT / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_OCT,
         (COST_NOV / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_NOV,
         (COST_DEC / NULLIF (PRICE_QTY_VRA, 0)) AS QTY_DEC,
         COST_JAN,
         COST_FEB,
         COST_MAR,
         COST_APR,
         COST_MAY,
         COST_JUN,
         COST_JUL,
         COST_AUG,
         COST_SEP,
         COST_OCT,
         COST_NOV,
         COST_DEC
      FROM (SELECT RKT.PERIOD_BUDGET,
             ORG.REGION_CODE,
             RKT.BA_CODE,
             RKT.AFD_CODE,
             RKT.BLOCK_CODE,
             RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
             'TRANSPORT' AS COST_ELEMENT,
             '5101020300' AS ACTIVITY_CODE,
             'PUPUK TUNGGAL' AS ACTIVITY_DESC,
             VRA.VRA_CODE AS SUB_COST_ELEMENT,
             TMVRA.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
             '' AS KETERANGAN,
             TMVRA.UOM,
             0 COST_JAN,
             0 COST_FEB,
             0 COST_MAR,
             0 COST_APR,
             0 COST_MAY,
             0 COST_JUN,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_JUL) =
                  '5101020300'
              THEN
                 (RKT.DIS_JUL
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_JUL,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_AUG) =
                  '5101020300'
              THEN
                 (RKT.DIS_AUG
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_AUG,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_SEP) =
                  '5101020300'
              THEN
                 (RKT.DIS_SEP
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_SEP,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_OCT) =
                  '5101020300'
              THEN
                 (RKT.DIS_OCT
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_OCT,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_NOV) =
                  '5101020300'
              THEN
                 (RKT.DIS_NOV
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_NOV,
             CASE
              WHEN (SELECT COA_CODE
                  FROM TM_MATERIAL
                   WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                     AND BA_CODE = RKT.BA_CODE
                     AND MATERIAL_CODE =
                         RKT.MATERIAL_CODE_DEC) =
                  '5101020300'
              THEN
                 (RKT.DIS_DEC
                / (SELECT SUM (DIS_TOTAL) TOTAL_DIS
                   FROM TR_RKT_PUPUK_DISTRIBUSI
                  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                      AND BA_CODE = RKT.BA_CODE
                      AND TIPE_TRANSAKSI = 'KG_NORMAL')
                * VRA.TOTAL_PRICE)
              ELSE
                 0
             END
              AS COST_DEC,
             (SELECT SUM (DIS_TOTAL) TOTAL_DIS
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
                 AND BA_CODE = RKT.BA_CODE
                 AND TIPE_TRANSAKSI = 'KG_NORMAL')
              AS TOTAL_DIS,
             VRA.TOTAL_PRICE,
             VRA.PRICE_QTY_VRA
          FROM (SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 BLOCK_CODE,
                 TIPE_TRANSAKSI,
                 MATURITY_STAGE_SMS2,
                 MATERIAL_CODE_JUL,
                 DIS_JUL,
                 MATERIAL_CODE_AUG,
                 DIS_AUG,
                 MATERIAL_CODE_SEP,
                 DIS_SEP,
                 MATERIAL_CODE_OCT,
                 DIS_OCT,
                 MATERIAL_CODE_NOV,
                 DIS_NOV,
                 MATERIAL_CODE_DEC,
                 DIS_DEC
              FROM TR_RKT_PUPUK_DISTRIBUSI
               WHERE MATURITY_STAGE_SMS2 NOT IN ('TM')
                 AND TIPE_TRANSAKSI = 'KG_NORMAL'
                 $where2) RKT
             LEFT JOIN (  SELECT PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA,
                       SUM (PRICE_HM_KM) TOTAL_PRICE
                    FROM TR_RKT_VRA_DISTRIBUSI
                     WHERE ACTIVITY_CODE = '43750'
                     $where2
                  GROUP BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE,
                       VRA_CODE,
                       PRICE_QTY_VRA) VRA
              ON RKT.PERIOD_BUDGET = VRA.PERIOD_BUDGET
                 AND RKT.BA_CODE = VRA.BA_CODE
             LEFT JOIN TM_VRA TMVRA
              ON TMVRA.VRA_CODE = VRA.VRA_CODE
             LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = RKT.BA_CODE))
    GROUP BY PERIOD_BUDGET,
         REGION_CODE,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         TIPE_TRANSAKSI,
         COST_ELEMENT,
         ACTIVITY_CODE,
         ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         UOM
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (ASTEK)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'ASTEK' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1 
     $xwhere
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
       $xwhere
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
         $twhere
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
               $twhere
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
      $xwhere
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
     $twhere
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
               $twhere
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (BONUS)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'BONUS' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
       $xwhere
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
         $twhere
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
               $twhere
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
       $xwhere
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
         $twhere
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
               $twhere
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1             
    UNION ALL 
    -- INI UNTUK PERHITUNGAN TUNJANGAN (CATU)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'CATU' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_CATU TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
     WHERE  1 = 1
        $twhere 
         AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
              TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_CATU TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
           WHERE   1=1  
            $twhere 
               AND TCR.TUNJANGAN_TYPE = 'CATU'
               AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_CATU TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
     WHERE  1 = 1
      $twhere 
         AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
              TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_CATU TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
           WHERE  1 = 1
              $xwhere 
               AND TCR.TUNJANGAN_TYPE = 'CATU'
               AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (HHR)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'HHR' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
     $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ('TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
        $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
            $xwhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1
    UNION ALL
    -- INI UNTUK PERHITUGAN TUNJANGAN (JABATAN)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'JABATAN' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE  1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
      $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
      $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (KEHADIRAN)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'KEHADIRAN' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
     $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE  1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN LAINNYA
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'LAINNYA' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE  1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE  1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (OBAT)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'OBAT' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
     $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'OBATK'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'OBATL'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
     $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'OBATM'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'OBATN'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (PPH21)
     SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'PPH_21' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
     $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
     $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
     $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
       $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (PPH_21)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'PPH_21' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
      $xwhere 
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
      $twhere 
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
            $twhere 
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere 
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
       $xwhere
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
         $twhere
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
               $twhere
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 
    UNION ALL
    -- INI UNTUK PERHITUNGAN TUNJANGAN (THR)
    SELECT PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
          '' AS COST_ELEMENT,
          '' AS ACTIVITY_CODE, 
          'THR' AS ACTIVITY_DESC,
          '' AS SUB_COST_ELEMENT, 
          '' AS MATERIAL_NAME,
          '' KETERANGAN,
          'MPP' UOM,
          SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
          SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
          SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
          SUM(NVL (DIS_APR,0)) AS DIS_APR,
          SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
          SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
          SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
          SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
          SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
          SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
          SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
          SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
          SUM(NVL (COST_JAN,0)) AS COST_JAN,
          SUM(NVL (COST_FEB,0)) AS COST_FEB,
          SUM(NVL (COST_MAR,0)) AS COST_MAR,
          SUM(NVL (COST_APR,0)) AS COST_APR,
          SUM(NVL (COST_MAY,0)) AS COST_MAY,
          SUM(NVL (COST_JUN,0)) AS COST_JUN,
          SUM(NVL (COST_JUL,0)) AS COST_JUL,
          SUM(NVL (COST_AUG,0)) AS COST_AUG,
          SUM(NVL (COST_SEP,0)) AS COST_SEP,
          SUM(NVL (COST_OCT,0)) AS COST_OCT,
          SUM(NVL (COST_NOV,0)) AS COST_NOV,
          SUM(NVL (COST_DEC,0)) AS COST_DEC,
          (SUM(NVL (DIS_JAN,0)) +
          SUM(NVL (DIS_FEB,0)) +
          SUM(NVL (DIS_MAR,0)) +
          SUM(NVL (DIS_APR,0)) +
          SUM(NVL (DIS_MAY,0)) +
          SUM(NVL (DIS_JUN,0)) +
          SUM(NVL (DIS_JUL,0)) +
          SUM(NVL (DIS_AUG,0)) +
          SUM(NVL (DIS_SEP,0)) +
          SUM(NVL (DIS_OCT,0)) +
          SUM(NVL (DIS_NOV,0)) +
          SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
          (SUM(NVL (COST_JAN,0)) +
          SUM(NVL (COST_FEB,0)) +
          SUM(NVL (COST_MAR,0)) +
          SUM(NVL (COST_APR,0)) +
          SUM(NVL (COST_MAY,0)) +
          SUM(NVL (COST_JUN,0)) +
          SUM(NVL (COST_JUL,0)) +
          SUM(NVL (COST_AUG,0)) +
          SUM(NVL (COST_SEP,0)) +
          SUM(NVL (COST_OCT,0)) +
          SUM(NVL (COST_NOV,0)) +
          SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
    FROM (            
    --HITUNG TUNJANGAN UNTUK SMS1
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS1,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
          0 AS DIS_JUL,
          0 AS DIS_AUG,
          0 AS DIS_SEP,
          0 AS DIS_OCT,
          0 AS DIS_NOV,
          0 AS DIS_DEC,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
          0 AS COST_JUL,
          0 AS COST_AUG,
          0 AS COST_SEP,
          0 AS COST_OCT,
          0 AS COST_NOV,
          0 AS COST_DEC       
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS1,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
     AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE  1 = 1
     $xwhere
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
     $twhere
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
            $twhere
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    UNION ALL
    --HITUNG TUNJANGAN UNTUK SMS2
    SELECT 
          HA_TM.PERIOD_BUDGET,
          ORG.REGION_CODE,
          HA_TM.BA_CODE,
          HA_TM.AFD_CODE,
          HA_TM.BLOCK_CODE,
          HA_TM.MATURITY_STAGE_SMS2,
          0 AS DIS_JAN,
          0 AS DIS_FEB,
          0 AS DIS_MAR,
          0 AS DIS_APR,
          0 AS DIS_MAY,
          0 AS DIS_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
          0 AS COST_JAN,
          0 AS COST_FEB,
          0 AS COST_MAR,
          0 AS COST_APR,
          0 AS COST_MAY,
          0 AS COST_JUN,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
          (HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
    FROM (
    SELECT PERIOD_BUDGET,
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         MATURITY_STAGE_SMS2,
         HA_PLANTED
      FROM TM_HECTARE_STATEMENT
     WHERE 1 = 1
     $xwhere
     AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
    ) HA_TM
    LEFT JOIN (       
    SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
       FROM TM_HECTARE_STATEMENT
       WHERE 1 = 1
      $xwhere
    GROUP BY PERIOD_BUDGET, BA_CODE
    ) HA_BA
    ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND HA_TM.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN (
    SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
      FROM    TM_TARIF_TUNJANGAN TTJ
         LEFT JOIN
          TR_RKT_CHECKROLL TRC
         ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
          AND TRC.BA_CODE = TTJ.BA_CODE
          AND TRC.JOB_CODE = TTJ.JOB_CODE
          AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
     WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
     $twhere
    GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
    ) ALL_MPP
    ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
    AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
    LEFT JOIN TM_ORGANIZATION ORG
    ON ORG.BA_CODE = HA_TM.BA_CODE
    LEFT JOIN (
    SELECT PERIOD_BUDGET,
          BA_CODE,
          SUM(COSTTYPE) AS COST_BA
    FROM (            
          SELECT TTJ.PERIOD_BUDGET,
               TTJ.BA_CODE,
               TTJ.JOB_CODE,
               TCR.TUNJANGAN_TYPE,
               TCR.JUMLAH,
               TRC.MPP_PERIOD_BUDGET,
               (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
            FROM TM_TARIF_TUNJANGAN TTJ
               LEFT JOIN TR_RKT_CHECKROLL TRC
                ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
                 AND TRC.BA_CODE = TTJ.BA_CODE
                 AND TRC.JOB_CODE = TTJ.JOB_CODE
                 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
               LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
                ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
                 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
           WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
            $twhere
    ) GROUP BY PERIOD_BUDGET, BA_CODE
    ) TTL_COST
    ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
    AND HA_TM.BA_CODE = TTL_COST.BA_CODE
    )
    GROUP BY PERIOD_BUDGET,
          REGION_CODE,
          BA_CODE,
          AFD_CODE,
          BLOCK_CODE,
          MATURITY_STAGE_SMS1
    UNION ALL
    --PERHITUNGAN UNUTUK KEBUTUHAN UMUM
    SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       '' KETERANGAN,
       UOM,
       SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
       SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
       SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
       SUM (NVL (QTY_APR, 0)) AS QTY_APR,
       SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
       SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
       SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
       SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
       SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
       SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
       SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
       SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
       SUM (NVL (COST_JAN, 0)) AS COST_JAN,
       SUM (NVL (COST_FEB, 0)) AS COST_FEB,
       SUM (NVL (COST_MAR, 0)) AS COST_MAR,
       SUM (NVL (COST_APR, 0)) AS COST_APR,
       SUM (NVL (COST_MAY, 0)) AS COST_MAY,
       SUM (NVL (COST_JUN, 0)) AS COST_JUN,
       SUM (NVL (COST_JUL, 0)) AS COST_JUL,
       SUM (NVL (COST_AUG, 0)) AS COST_AUG,
       SUM (NVL (COST_SEP, 0)) AS COST_SEP,
       SUM (NVL (COST_OCT, 0)) AS COST_OCT,
       SUM (NVL (COST_NOV, 0)) AS COST_NOV,
       SUM (NVL (COST_DEC, 0)) AS COST_DEC,
       (  SUM (NVL (QTY_JAN, 0))
        + SUM (NVL (QTY_FEB, 0))
        + SUM (NVL (QTY_MAR, 0))
        + SUM (NVL (QTY_APR, 0))
        + SUM (NVL (QTY_MAY, 0))
        + SUM (NVL (QTY_JUN, 0))
        + SUM (NVL (QTY_JUL, 0))
        + SUM (NVL (QTY_AUG, 0))
        + SUM (NVL (QTY_SEP, 0))
        + SUM (NVL (QTY_OCT, 0))
        + SUM (NVL (QTY_NOV, 0))
        + SUM (NVL (QTY_DEC, 0)))
        AS QTY_SETAHUN,
       (  SUM (NVL (COST_JAN, 0))
        + SUM (NVL (COST_FEB, 0))
        + SUM (NVL (COST_MAR, 0))
        + SUM (NVL (COST_APR, 0))
        + SUM (NVL (COST_MAY, 0))
        + SUM (NVL (COST_JUN, 0))
        + SUM (NVL (COST_JUL, 0))
        + SUM (NVL (COST_AUG, 0))
        + SUM (NVL (COST_SEP, 0))
        + SUM (NVL (COST_OCT, 0))
        + SUM (NVL (COST_NOV, 0))
        + SUM (NVL (COST_DEC, 0)))
        AS COST_SETAHUN,
       '".$this->_userName."' AS INSERT_USER,
       SYSDATE AS INSERT_TIME
    FROM (SELECT RKT.PERIOD_BUDGET,
           OPEX.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
           '' AS COST_ELEMENT,
           OPEX.COA_CODE AS ACTIVITY_CODE,
           COA.DESCRIPTION AS ACTIVITY_DESC,
           '' AS SUB_COST_ELEMENT,
           '' AS MATERIAL_NAME,
           '' AS KETERANGAN,
           'HA' AS UOM,
           0 QTY_JAN,
           0 QTY_FEB,
           0 QTY_MAR,
           0 QTY_APR,
           0 QTY_MAY,
           0 QTY_JUN,
           0 QTY_JUL,
           0 QTY_AUG,
           0 QTY_SEP,
           0 QTY_OCT,
           0 QTY_NOV,
           0 QTY_DEC,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM1
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS1 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_JAN)
            AS COST_JAN,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM1
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS1 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_FEB)
            AS COST_FEB,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM1
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS1 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_MAR)
            AS COST_MAR,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM1
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS1 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_APR)
            AS COST_APR,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM1
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS1 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_MAY)
            AS COST_MAY,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM1
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS1 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_JUN)
            AS COST_JUN,
           0 COST_JUL,
           0 COST_AUG,
           0 COST_SEP,
           0 COST_OCT,
           0 COST_NOV,
           0 COST_DEC
        FROM TM_HECTARE_STATEMENT RKT
           LEFT JOIN TR_RKT_OPEX OPEX
            ON OPEX.PERIOD_BUDGET = RKT.PERIOD_BUDGET
               AND OPEX.BA_CODE = RKT.BA_CODE
           LEFT JOIN TM_COA COA
            ON COA.COA_CODE = OPEX.COA_CODE
         WHERE     OPEX.COA_CODE NOT IN ('1212010101', '5101030504')
           AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0','TBM1','TBM2','TBM3')
           $where3
        UNION ALL
        SELECT RKT.PERIOD_BUDGET,
           OPEX.REGION_CODE,
           RKT.BA_CODE,
           RKT.AFD_CODE,
           RKT.BLOCK_CODE,
           RKT.MATURITY_STAGE_SMS2 AS TIPE_TRANSAKSI,
           '' AS COST_ELEMENT,
           OPEX.COA_CODE AS ACTIVITY_CODE,
           COA.DESCRIPTION AS ACTIVITY_DESC,
           '' AS SUB_COST_ELEMENT,
           '' AS MATERIAL_NAME,
           '' AS KETERANGAN,
           'HA' AS UOM,
           0 QTY_JAN,
           0 QTY_FEB,
           0 QTY_MAR,
           0 QTY_APR,
           0 QTY_MAY,
           0 QTY_JUN,
           0 QTY_JUL,
           0 QTY_AUG,
           0 QTY_SEP,
           0 QTY_OCT,
           0 QTY_NOV,
           0 QTY_DEC,
           0 COST_JAN,
           0 COST_FEB,
           0 COST_MAR,
           0 COST_APR,
           0 COST_MAY,
           0 COST_JUN,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM2
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS2 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_JUL)
            AS COST_JUL,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM2
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS2 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_AUG)
            AS COST_AUG,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM2
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS2 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_SEP)
            AS COST_SEP,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM2
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS2 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_OCT)
            AS COST_OCT,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM2
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS2 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_NOV)
            AS COST_NOV,
           (RKT.HA_PLANTED
            / (SELECT SUM (HA_PLANTED) TOTAL_SM2
               FROM TM_HECTARE_STATEMENT
              WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND BA_CODE = RKT.BA_CODE
                AND MATURITY_STAGE_SMS2 IN
                     ('TBM0', 'TBM1', 'TBM2', 'TBM3', 'TM'))
            * OPEX.DIS_DEC)
            AS COST_DEC
        FROM TM_HECTARE_STATEMENT RKT
           LEFT JOIN TR_RKT_OPEX OPEX
            ON OPEX.PERIOD_BUDGET = RKT.PERIOD_BUDGET
               AND OPEX.BA_CODE = RKT.BA_CODE
           LEFT JOIN TM_COA COA
            ON COA.COA_CODE = OPEX.COA_CODE
         WHERE     OPEX.COA_CODE NOT IN ('1212010101', '5101030504')
           AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0','TBM1','TBM2','TBM3')
           $where3
           )
  GROUP BY PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       UOM
      ";

    $this->_db->query($xquery);
    $this->_db->commit();
    /*if ($this->_db->commit()) {
      echo '102 . ' . $xquery;
    }*/
    
    return true;     
  }   
  
  //hapus temp table untuk kebutuhan activity estate cost
  public function delTmpRptKebActDevCostBlock($params = array())
  {
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    //hapus estate cost per BLOCK
    $query = "
      DELETE FROM TMP_RPT_KEB_DEV_COST_BLOCK 
      WHERE 1 = 1
      $where 
    ";
    
    $this->_db->query($query);
    $this->_db->commit();
    
    return true;
  }


  public function freeColumnCost($params)
  {
    if($params == 'sm1') {
      $free_column = "0 as COST_JAN, 0 as COST_FEB, 0 as COST_MAR, 0 as COST_APR, 0 as COST_MAY, 0 as COST_JUN";
    } else {
      $free_column = "0 as COST_JUL, 0 as COST_AUG, 0 as COST_SEP, 0 as COST_OCT, 0 as COST_NOV, 0 as COST_DEC";
    }
    return $free_column;
  }

  public function freeColumnQty($params)
  {
    if($params == 'sm1') {
      $free_column = "0 as QTY_JAN, 0 as QTY_FEB, 0 as QTY_MAR, 0 as QTY_APR, 0 as QTY_MAY, 0 as QTY_JUN";
    } else {
      $free_column = "0 as QTY_JUL, 0 as QTY_AUG, 0 as QTY_SEP, 0 as QTY_OCT, 0 as QTY_NOV, 0 as QTY_DEC";
    }
    return $free_column;
  }

  //generate report estate cost
  public function reportEstateCost($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel estate cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_EST_COST ALL_ACT
        WHERE 1 = 1
        $where
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
    ";
    //echo $query;
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel estate cost ################################################### */
    
    return $result;
  }
  
  //generate report estate cost per AFD
  public function reportEstateCostAfd($params = array())
  { 

    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel estate cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";

    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_EST_COST_AFD ALL_ACT
        WHERE 1 = 1
        $where
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           REPORT.AFD_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
    ";
    //echo $query;
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel estate cost ################################################### */
    
    return $result;
  }
  
  //query summary estate cost per BA
  public function querySummaryEstateCostPerBa($params = array())
  {
    $where = $select_group = $order_group = "";
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $twhere .= "
        AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $twhere .= "
        AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
      $xwhere .= "
        AND BA_CODE = '".$params['key_find']."'
      "; 
      $twhere .= "
        AND TTJ.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "SELECT STR.*,
          CASE
            WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
            THEN
            (CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
              THEN
                (SELECT PRICE
                   FROM TN_HARGA_BORONG
                   WHERE     1 = 1
                  AND PERIOD_BUDGET = STR.PERIOD_BUDGET
                  AND BA_CODE = STR.BA_CODE
                  AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
              ELSE
                INFRA.RP_HA_INTERNAL
              END
              )              
            ELSE
            NORM.PRICE_ROTASI
           END
           AS NORMA
         FROM (
      SELECT  $select_group
          STRUKTUR_REPORT.PERIOD_BUDGET, 
          STRUKTUR_REPORT.REGION_CODE, 
          STRUKTUR_REPORT.BA_CODE, 
          STRUKTUR_REPORT.ESTATE_NAME, 
          STRUKTUR_REPORT.ACTIVITY_CODE, 
          STRUKTUR_REPORT.ACTIVITY_DESC, 
          STRUKTUR_REPORT.UOM, 
          STRUKTUR_REPORT.QTY_SMS1,
          STRUKTUR_REPORT.QTY_SMS2,
          STRUKTUR_REPORT.QTY_SETAHUN,
          STRUKTUR_REPORT.COST_SMS1, 
          STRUKTUR_REPORT.COST_SMS2, 
          STRUKTUR_REPORT.COST_SETAHUN,
          STRUKTUR_REPORT.TOTAL_SEBARAN_KG,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
            THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
            ELSE 0
          END as RP_HA_SMS1,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
            THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
            ELSE 0
          END as RP_HA_SMS2,
          CASE
            WHEN STRUKTUR_REPORT.QTY_SETAHUN > 0
            THEN (STRUKTUR_REPORT.COST_SETAHUN / STRUKTUR_REPORT.QTY_SETAHUN)
            ELSE 0
          END as RP_HA_SETAHUN,
          CASE
            WHEN STRUKTUR_REPORT.TOTAL_SEBARAN_KG > 0
            THEN (STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.TOTAL_SEBARAN_KG * 1000))
            ELSE 0
          END as RP_KG
      FROM (
        SELECT  $select_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM, 
            MAX (REPORT.QTY_SMS1) AS QTY_SMS1,
            MAX (REPORT.QTY_SMS2) AS QTY_SMS2,
            MAX (REPORT.QTY_SETAHUN) as QTY_SETAHUN,
            SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
            SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
            SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN,
            MAX (sebaran_prod.QTY_SETAHUN) TOTAL_SEBARAN_KG
        FROM (
          SELECT  CASE
                WHEN INSTR(HIRARKI, '/',1, 2) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
                ELSE NULL
              END GROUP01,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 3) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP02,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 4) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP03,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 5) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP04,
              GROUP_CODE
          FROM (
            SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
                LVL, 
                TO_CHAR(GROUP_CODE) AS GROUP_CODE
            FROM (
              SELECT  GROUP_CODE, 
                  CONNECT_BY_ISCYCLE \"CYCLE\",
                  LEVEL as LVL, 
                  SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
              FROM TM_RPT_MAPPING_ACT
              WHERE level > 1
              START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
              CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
            )
            GROUP BY HIRARKI, LVL, GROUP_CODE
            ORDER BY HIRARKI
          )
        ) STRUKTUR_REPORT
        LEFT JOIN TM_RPT_MAPPING_ACT MAPP
          ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
        LEFT JOIN (
          SELECT *
          FROM TMP_RPT_EST_COST ALL_ACT
          WHERE 1 = 1 
          $where
        )REPORT
          ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
          AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
          AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = REPORT.BA_CODE
        LEFT JOIN (
          SELECT  PERIOD_BUDGET, 
              BA_CODE, 
              SUM(SMS1_TM) SMS1_TM, 
              SUM(SMS2_TM) SMS2_TM
          FROM V_REPORT_SEBARAN_HS
          GROUP BY PERIOD_BUDGET, BA_CODE
        ) TOTAL_SEBARAN_HA
          ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
          AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
        LEFT JOIN V_REPORT_SEBARAN_PRODUKSI sebaran_prod
          ON REPORT.PERIOD_BUDGET = sebaran_prod.PERIOD_BUDGET
          AND REPORT.BA_CODE = sebaran_prod.BA_CODE
          AND sebaran_prod.TIPE_TRANSAKSI = '03_TBS_PANEN'
        WHERE REPORT.ACTIVITY_CODE IS NOT NULL
        GROUP BY $order_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM,
            REPORT.TIPE_TRANSAKSI
      ) STRUKTUR_REPORT
      ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
           STRUKTUR_REPORT.BA_CODE,
           $order_group
           STRUKTUR_REPORT.ACTIVITY_CODE) STR
           LEFT JOIN (SELECT PERIOD_BUDGET, BA_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, PRICE_ROTASI FROM (
      SELECT RANK () OVER (PARTITION BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_GROUP,
                       ACTIVITY_CODE
                ORDER BY MAX_HA DESC,PRIORITY ASC) RANK_Z, 
          PRIORITY, 
          --BACOUNT, 
          MAX_HA,
          PERIOD_BUDGET, 
          BA_CODE, 
          ACTIVITY_GROUP,
          ACTIVITY_CODE, 
          PRICE_ROTASI
        FROM (  
        SELECT MAX_HA, PRIORITY, PERIOD_BUDGET, BA_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, SUM (PRICE_ROTASI) PRICE_ROTASI
            FROM (
            SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '1' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere   
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY,'ALL')
                    AND TB.LAND_TYPE IN (HS.LAND_TYPE,'ALL') 
                    AND TB.DELETE_USER IS NULL                    
                UNION ALL                 -- INI BUAT YANG LAND TYPE NYA ALL   
                SELECT --HS.BACOUNT,
                   HS.MAX_HA, 
                   HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '2' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL 
                          $xwhere
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY,'ALL')
                    AND TB.LAND_TYPE = 'ALL'       
                    AND TB.DELETE_USER IS NULL  
                UNION ALL                -- INI BUAT YANG TOPOGRAPHY NYA ALL
                SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '3' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL 
                          $xwhere
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY = 'ALL'
                    AND TB.LAND_TYPE IN (HS.LAND_TYPE,'ALL')         
                    AND TB.DELETE_USER IS NULL  
                UNION ALL -- INI BUAT YANG LAND TYPE  DAN TOPOGRAPHY NYA ALL
                SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '4' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY = 'ALL'
                    AND TB.LAND_TYPE = 'ALL'
                    AND TB.DELETE_USER IS NULL
                    )
          GROUP BY MAX_HA, PRIORITY, PERIOD_BUDGET, BA_CODE, ACTIVITY_GROUP, ACTIVITY_CODE
          ORDER BY MAX_HA DESC, PRIORITY ASC 
          )
       WHERE PRICE_ROTASI IS NOT NULL
       )
       WHERE RANK_Z = 1) NORM
        ON NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
       AND NORM.BA_CODE = STR.BA_CODE
       AND NORM.ACTIVITY_GROUP = STR.GROUP01_DESC
       AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE
       LEFT JOIN ( 
      SELECT PERIOD_BUDGET,
          BA_CODE,
          ACTIVITY_CODE,
          RP_HA_INTERNAL
       FROM (SELECT RANK ()
               OVER (
                PARTITION BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE
                ORDER BY MAX_HA DESC, PRIORITY ASC)
               RANK_Z,
              PRIORITY,
              --BACOUNT,
              MAX_HA,
              PERIOD_BUDGET,
              BA_CODE,
              ACTIVITY_CODE,
              RP_HA_INTERNAL
           FROM (  SELECT --BACOUNT,
                  MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                 FROM (SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '1' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY,'ALL')
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE,'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '2' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                            SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '3' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE,'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '4' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL)
               GROUP BY MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE
               ORDER BY MAX_HA DESC, PRIORITY ASC)
          WHERE RP_HA_INTERNAL IS NOT NULL)
      WHERE RANK_Z = 1) INFRA   
      ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
      AND INFRA.BA_CODE = STR.BA_CODE
      AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
      ORDER BY STR.PERIOD_BUDGET,
         STR.BA_CODE,
         STR.GROUP01,
         STR.GROUP02,
         STR.ACTIVITY_CODE
    ";
    
    return $query;
  }
  
  
  //query summary estate cost per AFD
  public function querySummaryEstateCostPerAfd($params = array())
  { 
    $where = $select_group = $order_group = "";
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $xwhere .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
      
      $xwhere .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "SELECT STR.*, 
          CASE
            WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
            THEN
            (CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
              THEN
                (SELECT PRICE
                   FROM TN_HARGA_BORONG
                   WHERE     1 = 1
                  AND PERIOD_BUDGET = STR.PERIOD_BUDGET
                  AND BA_CODE = STR.BA_CODE
                  AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
              ELSE
                INFRA.RP_HA_INTERNAL
              END
              )              
            ELSE
            NORM.PRICE_ROTASI
           END
           AS NORMA
         FROM (
      SELECT  $select_group
          STRUKTUR_REPORT.PERIOD_BUDGET, 
          STRUKTUR_REPORT.REGION_CODE, 
          STRUKTUR_REPORT.BA_CODE, 
          STRUKTUR_REPORT.ESTATE_NAME, 
          STRUKTUR_REPORT.AFD_CODE, 
          STRUKTUR_REPORT.ACTIVITY_CODE, 
          STRUKTUR_REPORT.ACTIVITY_DESC, 
          STRUKTUR_REPORT.UOM, 
          STRUKTUR_REPORT.QTY_SMS1, 
          STRUKTUR_REPORT.QTY_SMS2, 
          STRUKTUR_REPORT.COST_SMS1, 
          STRUKTUR_REPORT.COST_SMS2, 
          STRUKTUR_REPORT.COST_SETAHUN,
          STRUKTUR_REPORT.TOTAL_SEBARAN_KG,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
            THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
            ELSE 0
          END as RP_HA_SMS1,
          CASE 
            WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
            THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
            ELSE 0
          END as RP_HA_SMS2,
          CASE
            WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
            THEN (STRUKTUR_REPORT.COST_SETAHUN / STRUKTUR_REPORT.QTY_SMS2)
            ELSE 0
          END as RP_HA_SETAHUN,
          CASE
            WHEN STRUKTUR_REPORT.TOTAL_SEBARAN_KG > 0
            THEN (STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.TOTAL_SEBARAN_KG * 1000))
            ELSE 0
          END as RP_KG
      FROM (
        SELECT  $select_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.AFD_CODE, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM, 
            CASE -- tambahan khusus untuk PROGRESSIF PRUNING
              WHEN REPORT.ACTIVITY_CODE = '53100'
                THEN (
                    SELECT MAX(QTY_SMS1) FROM TMP_RPT_EST_COST_AFD 
                    WHERE PERIOD_BUDGET = REPORT.PERIOD_BUDGET
                    AND BA_CODE =  REPORT.BA_CODE
                    AND AFD_CODE = REPORT.AFD_CODE
                    AND ACTIVITY_CODE = REPORT.ACTIVITY_CODE
                    )
                ELSE    
                  MAX (SMS1_TM)
            END
            AS QTY_SMS1,
            CASE 
              WHEN REPORT.ACTIVITY_CODE = '53100'
                THEN (
                   SELECT MAX(QTY_SMS2) FROM TMP_RPT_EST_COST_AFD 
                     WHERE PERIOD_BUDGET = REPORT.PERIOD_BUDGET
                     AND BA_CODE =  REPORT.BA_CODE
                     AND AFD_CODE = REPORT.AFD_CODE
                     AND ACTIVITY_CODE = REPORT.ACTIVITY_CODE
                  )
                ELSE    
                  MAX (SMS2_TM)
            END
            AS QTY_SMS2,
            --MAX(SMS1_TM) AS QTY_SMS1,
            --MAX(SMS2_TM) AS QTY_SMS2,
            SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
            SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
            SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN,
            MAX (sebaran_prod.QTY_SETAHUN) TOTAL_SEBARAN_KG
        FROM (
          SELECT  CASE
                WHEN INSTR(HIRARKI, '/',1, 2) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
                ELSE NULL
              END GROUP01,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 3) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP02,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 4) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP03,
              CASE
                WHEN INSTR(HIRARKI, '/',1, 5) <> 0
                THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
                ELSE NULL
              END GROUP04,
              GROUP_CODE
          FROM (
            SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
                LVL, 
                TO_CHAR(GROUP_CODE) AS GROUP_CODE
            FROM (
              SELECT  GROUP_CODE, 
                  CONNECT_BY_ISCYCLE \"CYCLE\",
                  LEVEL as LVL, 
                  SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
              FROM TM_RPT_MAPPING_ACT
              WHERE level > 1
              START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
              CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
            )
            GROUP BY HIRARKI, LVL, GROUP_CODE
            ORDER BY HIRARKI
          )
        ) STRUKTUR_REPORT
        LEFT JOIN TM_RPT_MAPPING_ACT MAPP
          ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
        LEFT JOIN (
          SELECT *
          FROM TMP_RPT_EST_COST_AFD ALL_ACT
          WHERE 1 = 1
          $where
        )REPORT
          ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
          AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
          AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = REPORT.BA_CODE
        LEFT JOIN (
          SELECT  PERIOD_BUDGET, 
              BA_CODE, 
              AFD_CODE,
              SMS1_TM, 
              SMS2_TM
          FROM V_REPORT_SEBARAN_HS
        ) TOTAL_SEBARAN_HA
          ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
          AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
          AND TOTAL_SEBARAN_HA.AFD_CODE = REPORT.AFD_CODE
        LEFT JOIN (
          SELECT  PERIOD_BUDGET,
              BA_CODE,
              AFD_CODE,
              NVL(SUM(JAN),0) QTY_JAN,
              NVL(SUM(FEB),0) QTY_FEB,
              NVL(SUM(MAR),0) QTY_MAR,
              NVL(SUM(APR),0) QTY_APR,
              NVL(SUM(MAY),0) QTY_MAY,
              NVL(SUM(JUN),0) QTY_JUN,
              NVL(SUM(JUL),0) QTY_JUL,
              NVL(SUM(AUG),0) QTY_AUG,
              NVL(SUM(SEP),0) QTY_SEP,
              NVL(SUM(OCT),0) QTY_OCT,
              NVL(SUM(NOV),0) QTY_NOV,
              NVL(SUM(DEC),0) QTY_DEC,
              (  NVL(SUM(JAN),0)
               + NVL(SUM(FEB),0)
               + NVL(SUM(MAR),0)
               + NVL(SUM(APR),0)
               + NVL(SUM(MAY),0)
               + NVL(SUM(JUN),0)
               + NVL(SUM(JUL),0)
               + NVL(SUM(AUG),0)
               + NVL(SUM(SEP),0)
               + NVL(SUM(OCT),0)
               + NVL(SUM(NOV),0)
               + NVL(SUM(DEC),0)
               ) AS QTY_SETAHUN
          FROM TR_PRODUKSI_PERIODE_BUDGET
          WHERE DELETE_USER IS NULL
          GROUP BY PERIOD_BUDGET,
              BA_CODE,
              AFD_CODE
        ) sebaran_prod
          ON REPORT.PERIOD_BUDGET = sebaran_prod.PERIOD_BUDGET
          AND REPORT.BA_CODE = sebaran_prod.BA_CODE
          AND REPORT.AFD_CODE = sebaran_prod.AFD_CODE
        WHERE REPORT.ACTIVITY_CODE IS NOT NULL
        GROUP BY $order_group
            REPORT.PERIOD_BUDGET, 
            REPORT.REGION_CODE, 
            REPORT.BA_CODE, 
            ORG.ESTATE_NAME, 
            REPORT.AFD_CODE, 
            REPORT.ACTIVITY_CODE, 
            REPORT.ACTIVITY_DESC, 
            REPORT.UOM,
            REPORT.TIPE_TRANSAKSI
      ) STRUKTUR_REPORT
      ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
           STRUKTUR_REPORT.BA_CODE,
           STRUKTUR_REPORT.AFD_CODE, 
           $order_group
           STRUKTUR_REPORT.ACTIVITY_CODE) STR
           LEFT JOIN ( -- ini buat ambil nilai norma (Aries)
      SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_CODE, ACTIVITY_GROUP, PRICE_ROTASI FROM (
      SELECT RANK () OVER (PARTITION BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_GROUP,
                       ACTIVITY_CODE
                ORDER BY MAX_HA DESC,PRIORITY ASC) RANK_Z, 
        PRIORITY, 
        --BACOUNT, 
        MAX_HA,
        PERIOD_BUDGET, 
        BA_CODE, 
        AFD_CODE, 
        ACTIVITY_GROUP,
        ACTIVITY_CODE, 
        PRICE_ROTASI
        FROM (  
        SELECT MAX_HA, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, SUM (PRICE_ROTASI) PRICE_ROTASI
            FROM (
            SELECT --HS.BACOUNT,
                  HS.MAX_HA,
                  HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '1' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                        WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                    AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')  
                    AND TB.DELETE_USER IS NULL                    
                UNION ALL                 
                -- INI BUAT YANG LAND TYPE NYA ALL
                SELECT --HS.BACOUNT,
                   HS.MAX_HA,
                   HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '2' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY,'ALL')
                    AND TB.LAND_TYPE = 'ALL'
                    AND TB.DELETE_USER IS NULL
                UNION ALL                -- INI BUAT YANG TOPOGRAPHY NYA ALL
                SELECT --HS.BACOUNT,
                   HS.MAX_HA,
                   HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '3' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY = 'ALL'
                    AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')
                    AND TB.DELETE_USER IS NULL
                UNION ALL -- INI BUAT YANG LAND TYPE  DAN TOPOGRAPHY NYA ALL
                SELECT --HS.BACOUNT,
                   HS.MAX_HA,
                   HS.PERIOD_BUDGET,
                   HS.BA_CODE,
                   HS.AFD_CODE,
                   TB.ACTIVITY_GROUP,
                   TB.ACTIVITY_CODE,
                   TB.ACTIVITY_CLASS,
                   TB.LAND_TYPE,
                   TB.TOPOGRAPHY,
                   TB.COST_ELEMENT,
                   TB.PRICE_ROTASI,
                   '4' AS PRIORITY
                FROM    (  
                SELECT COUNT (BA_CODE) BACOUNT,
                          SUM (HA_PLANTED) MAX_HA,
                          PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                          TOPOGRAPHY,
                          LAND_TYPE
                       FROM TM_HECTARE_STATEMENT
                      WHERE 1 = 1
                          AND DELETE_USER IS NULL
                          $xwhere
                          AND MATURITY_STAGE_SMS1 = 'TM'
                     GROUP BY PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                          TOPOGRAPHY,
                          LAND_TYPE
                          ) HS
                   LEFT JOIN
                    TN_BIAYA TB
                   ON     TB.BA_CODE = HS.BA_CODE
                    AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                    AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
                    AND TB.TOPOGRAPHY = 'ALL'
                    AND TB.LAND_TYPE = 'ALL'
                    AND TB.DELETE_USER IS NULL)
          GROUP BY MAX_HA, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE
          ORDER BY MAX_HA DESC, PRIORITY ASC 
          )
       WHERE PRICE_ROTASI IS NOT NULL
       )
       WHERE RANK_Z = 1) NORM
       ON NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
       AND NORM.BA_CODE = STR.BA_CODE
       AND NORM.AFD_CODE = STR.AFD_CODE
       AND NORM.ACTIVITY_GROUP = STR.GROUP01_DESC
       AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE
       LEFT JOIN ( 
      SELECT PERIOD_BUDGET,
          BA_CODE,
          ACTIVITY_CODE,
          RP_HA_INTERNAL
       FROM (SELECT RANK ()
               OVER (
                PARTITION BY PERIOD_BUDGET,
                       BA_CODE,
                       ACTIVITY_CODE
                ORDER BY MAX_HA DESC, PRIORITY ASC)
               RANK_Z,
              PRIORITY,
              --BACOUNT,
              MAX_HA,
              PERIOD_BUDGET,
              BA_CODE,
              ACTIVITY_CODE,
              RP_HA_INTERNAL
           FROM (  SELECT --BACOUNT,
                  MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                 FROM (SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '1' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY,'ALL')
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '2' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY IN (HS.TOPOGRAPHY, 'ALL')
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '3' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE IN (HS.LAND_TYPE, 'ALL')
                         AND TB.DELETE_USER IS NULL
                   UNION ALL
                   -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                   SELECT --HS.BACOUNT,
                      HS.MAX_HA,
                      HS.PERIOD_BUDGET,
                      HS.BA_CODE,
                      TB.ACTIVITY_CODE,
                      TB.ACTIVITY_CLASS,
                      TB.LAND_TYPE,
                      TB.TOPOGRAPHY,
                      TB.COST_ELEMENT,
                      TB.RP_HA_INTERNAL,
                      '4' AS PRIORITY
                     FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                             SUM (HA_PLANTED) MAX_HA,
                             PERIOD_BUDGET,
                             BA_CODE,
                             case when MATURITY_STAGE_SMS1 is null then MATURITY_STAGE_SMS2 else MATURITY_STAGE_SMS1 END MATURITY_STAGE_SMS2,
                             TOPOGRAPHY,
                             LAND_TYPE
                          FROM TM_HECTARE_STATEMENT
                           WHERE 1 = 1
                             AND DELETE_USER IS NULL
                             $xwhere
                             AND MATURITY_STAGE_SMS1 = 'TM'
                        GROUP BY PERIOD_BUDGET,
                             BA_CODE,
                             MATURITY_STAGE_SMS2,MATURITY_STAGE_SMS1,
                             TOPOGRAPHY,
                             LAND_TYPE) HS
                      LEFT JOIN
                         TN_INFRASTRUKTUR TB
                      ON TB.BA_CODE = HS.BA_CODE
                         AND TB.PERIOD_BUDGET =
                           HS.PERIOD_BUDGET
                         AND TB.TOPOGRAPHY = 'ALL'
                         AND TB.LAND_TYPE = 'ALL'
                         AND TB.DELETE_USER IS NULL)
               GROUP BY --BACOUNT,
                  MAX_HA,
                  PRIORITY,
                  PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE
               ORDER BY MAX_HA DESC, PRIORITY ASC)
          WHERE RP_HA_INTERNAL IS NOT NULL)
      WHERE RANK_Z = 1) INFRA   
      ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
      AND INFRA.BA_CODE = STR.BA_CODE
      AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
      ORDER BY STR.PERIOD_BUDGET,
         STR.BA_CODE,
         STR.AFD_CODE,
         STR.GROUP01,
         STR.GROUP02,
         STR.ACTIVITY_CODE
    ";

    return $query;
  }
  
  //generate report summary estate cost
  public function reportSummaryEstateCost($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);
    
    /* ################################################### generate excel estate cost ################################################### */
    $query = $this->querySummaryEstateCostPerBa($params);
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel summary estate cost ################################################### */
    
    return $result;
  }
  
  //generate report summary estate cost
  public function reportSummaryEstateCostAfd($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);
    
    /* ################################################### generate excel estate cost ################################################### */
    $query = $this->querySummaryEstateCostPerAfd($params);
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel summary estate cost ################################################### */
    
    return $result;
  }
  
  //generate module review estate cost per BA
  public function modReviewEstateCostPerBa($params = array())
  {
    $where = $select_group = $order_group = "";
    
    // ############################################# get all BA #############################################
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    $query = "
      SELECT REGION_NAME, BA_CODE
      FROM TM_ORGANIZATION
      WHERE DELETE_USER IS NULL
      $where
      ORDER BY REGION_NAME, BA_CODE
    ";
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['BA_CODE'] = array(); // distinct BA
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct BA_CODE
        if (in_array($row['BA_CODE'], $result['BA_CODE']) == false) {
          array_push($result['BA_CODE'], $row['BA_CODE']);
        }
        
        $result['REGION_NAME'] = $row['REGION_NAME'];
      }
    }
    
    // ############################################# get all group + activity #############################################
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    $query = "
      SELECT  $select_group
          MAPP.ACTIVITY_CODE,
          REPORT.ACTIVITY_DESC
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_EST_COST ALL_ACT
        WHERE 1 = 1
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      WHERE MAPP.ACTIVITY_CODE IS NOT NULL
        AND REPORT.ACTIVITY_DESC IS NOT NULL
      ORDER BY $order_group
           MAPP.ACTIVITY_CODE
    ";

    $rows = $this->_db->fetchAll("{$query}");
    
    $result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct GROUP_ACTIVITY
        if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
          array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
          
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
        }
      }
    }
    
    /* ################################################### generate excel module review estate cost ################################################### */
    $query = $this->querySummaryEstateCostPerBa($params);
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['rp_kg'] = $row['RP_KG'];
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['NORMA'] = $row['NORMA'];
        
        $result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
      }
    }   
    /* ################################################### generate excel module review estate cost ################################################### */
    
    return $result;
  }
  
  //generate module review estate cost per AFD
  public function modReviewEstateCostPerAfd($params = array())
  { 
    $where = $where2 = $select_group = $order_group = "";
    
    // ############################################# get all AFD #############################################
    //filter period budget
    if ($params['budgetperiod'] != '') {
      $where .= "
        AND TO_CHAR(A.PERIOD_BUDGET, 'RRRR') = '".$params['budgetperiod']."'
      ";
      $where2 .= "
        AND TO_CHAR(PERIOD_BUDGET, 'RRRR') = '".$params['budgetperiod']."'
      ";
    }
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND B.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND A.BA_CODE = '".$params['key_find']."'
      ";
      $where2 .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    $query = "
      SELECT *
      FROM (
        SELECT B.REGION_NAME, B.COMPANY_NAME, B.ESTATE_NAME, A.AFD_CODE
        FROM TM_HECTARE_STATEMENT A
        LEFT JOIN TM_ORGANIZATION B
          ON A.BA_CODE = B.BA_CODE
        WHERE A.DELETE_USER IS NULL
        $where
      ) 
      GROUP BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
      ORDER BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
    ";
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['AFD_CODE'] = array(); // distinct BA
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct AFD_CODE
        if (in_array($row['AFD_CODE'], $result['AFD_CODE']) == false) {
          array_push($result['AFD_CODE'], $row['AFD_CODE']);
        }
        
        $result['REGION_NAME'] = $row['REGION_NAME'];
        $result['COMPANY_NAME'] = $row['COMPANY_NAME'];
        $result['ESTATE_NAME'] = $row['ESTATE_NAME'];
      }
    }
    
    // ############################################# get all group + activity #############################################
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    $query = "
      SELECT  $select_group
          MAPP.ACTIVITY_CODE,
          REPORT.ACTIVITY_DESC
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_EST_COST ALL_ACT
        WHERE 1 = 1 
        $where2
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      WHERE MAPP.ACTIVITY_CODE IS NOT NULL
        AND REPORT.ACTIVITY_DESC IS NOT NULL
      ORDER BY $order_group
           MAPP.ACTIVITY_CODE
    ";
    
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct GROUP_ACTIVITY
        if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
          array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
          
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
          $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
        }
      }
    }
    
    /* ################################################### generate excel module review estate cost ################################################### */
    $query = $this->querySummaryEstateCostPerAfd($params);

    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);

    $rows = $this->_db->fetchAll("{$query}");
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['rp_kg'] = $row['RP_KG'];
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['norma'] = $row['NORMA'];
        $result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['norma'] = $row['NORMA'];
        
        $result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
      }
    }   
    /* ################################################### generate excel module review estate cost ################################################### */
    
    return $result;
  }
  
  //generate report CAPEX
  public function reportCapex($params = array())
  {
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel report CAPEX ################################################### */
    $where = $where1 = $where2 = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where1 .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where1 .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where2 .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where2 .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
      $where .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') PERIOD_BUDGET,
          rkt.BA_CODE,
          rkt.COA_CODE,
          rkt.COA_DESC,
          aset.DESCRIPTION AS ASSET_DESC,
          (SUM(rkt.DIS_JAN) + SUM(rkt.DIS_FEB) + SUM(rkt.DIS_MAR) +
           SUM(rkt.DIS_APR) + SUM(rkt.DIS_MAY) + SUM(rkt.DIS_JUN) +
           SUM(rkt.DIS_JUL) + SUM(rkt.DIS_AUG) + SUM(rkt.DIS_SEP) +
           SUM(rkt.DIS_OCT) + SUM(rkt.DIS_NOV) + SUM(rkt.DIS_DEC)) AS DIS_TAHUN_BERJALAN,
          SUM(rkt.DIS_JAN) DIS_JAN,
          SUM(rkt.DIS_FEB) DIS_FEB,
          SUM(rkt.DIS_MAR) DIS_MAR,
          SUM(rkt.DIS_APR) DIS_APR,
          SUM(rkt.DIS_MAY) DIS_MAY,
          SUM(rkt.DIS_JUN) DIS_JUN,
          SUM(rkt.DIS_JUL) DIS_JUL,
          SUM(rkt.DIS_AUG) DIS_AUG,
          SUM(rkt.DIS_SEP) DIS_SEP,
          SUM(rkt.DIS_OCT) DIS_OCT,
          SUM(rkt.DIS_NOV) DIS_NOV,
          SUM(rkt.DIS_DEC) DIS_DEC,
          (SUM(NVL(rkt.DIS_BIAYA_JAN,0)) + SUM(NVL(rkt.DIS_BIAYA_FEB,0)) + SUM(NVL(rkt.DIS_BIAYA_MAR,0)) +
           SUM(NVL(rkt.DIS_BIAYA_APR,0)) + SUM(NVL(rkt.DIS_BIAYA_MAY,0)) + SUM(NVL(rkt.DIS_BIAYA_JUN,0)) +
           SUM(NVL(rkt.DIS_BIAYA_JUL,0)) + SUM(NVL(rkt.DIS_BIAYA_AUG,0)) + SUM(NVL(rkt.DIS_BIAYA_SEP,0)) +
           SUM(NVL(rkt.DIS_BIAYA_OCT,0)) + SUM(NVL(rkt.DIS_BIAYA_NOV,0)) + SUM(NVL(rkt.DIS_BIAYA_DEC,0))) AS DIS_BIAYA_TOTAL,
          SUM(NVL(rkt.DIS_BIAYA_JAN,0)) DIS_BIAYA_JAN,
          SUM(NVL(rkt.DIS_BIAYA_FEB,0)) DIS_BIAYA_FEB,
          SUM(NVL(rkt.DIS_BIAYA_MAR,0)) DIS_BIAYA_MAR,
          SUM(NVL(rkt.DIS_BIAYA_APR,0)) DIS_BIAYA_APR,
          SUM(NVL(rkt.DIS_BIAYA_MAY,0)) DIS_BIAYA_MAY,
          SUM(NVL(rkt.DIS_BIAYA_JUN,0)) DIS_BIAYA_JUN,
          SUM(NVL(rkt.DIS_BIAYA_JUL,0)) DIS_BIAYA_JUL,
          SUM(NVL(rkt.DIS_BIAYA_AUG,0)) DIS_BIAYA_AUG,
          SUM(NVL(rkt.DIS_BIAYA_SEP,0)) DIS_BIAYA_SEP,
          SUM(NVL(rkt.DIS_BIAYA_OCT,0)) DIS_BIAYA_OCT,
          SUM(NVL(rkt.DIS_BIAYA_NOV,0)) DIS_BIAYA_NOV,
          SUM(NVL(rkt.DIS_BIAYA_DEC,0)) DIS_BIAYA_DEC
      FROM (  
        -- DARI RKT CAPEX
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.COA_CODE,
            UPPER(coa.DESCRIPTION) COA_DESC,
            RKT.ASSET_CODE,
            SUM (RKT.DIS_JAN) DIS_JAN,
            SUM (RKT.DIS_FEB) DIS_FEB,
            SUM (RKT.DIS_MAR) DIS_MAR,
            SUM (RKT.DIS_APR) DIS_APR,
            SUM (RKT.DIS_MAY) DIS_MAY,
            SUM (RKT.DIS_JUN) DIS_JUN,
            SUM (RKT.DIS_JUL) DIS_JUL,
            SUM (RKT.DIS_AUG) DIS_AUG,
            SUM (RKT.DIS_SEP) DIS_SEP,
            SUM (RKT.DIS_OCT) DIS_OCT,
            SUM (RKT.DIS_NOV) DIS_NOV,
            SUM (RKT.DIS_DEC) DIS_DEC,
            SUM (RKT.DIS_BIAYA_JAN) DIS_BIAYA_JAN,
            SUM (RKT.DIS_BIAYA_FEB) DIS_BIAYA_FEB,
            SUM (RKT.DIS_BIAYA_MAR) DIS_BIAYA_MAR,
            SUM (RKT.DIS_BIAYA_APR) DIS_BIAYA_APR,
            SUM (RKT.DIS_BIAYA_MAY) DIS_BIAYA_MAY,
            SUM (RKT.DIS_BIAYA_JUN) DIS_BIAYA_JUN,
            SUM (RKT.DIS_BIAYA_JUL) DIS_BIAYA_JUL,
            SUM (RKT.DIS_BIAYA_AUG) DIS_BIAYA_AUG,
            SUM (RKT.DIS_BIAYA_SEP) DIS_BIAYA_SEP,
            SUM (RKT.DIS_BIAYA_OCT) DIS_BIAYA_OCT,
            SUM (RKT.DIS_BIAYA_NOV) DIS_BIAYA_NOV,
            SUM (RKT.DIS_BIAYA_DEC) DIS_BIAYA_DEC
        FROM TR_RKT_CAPEX RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_COA coa
          ON RKT.COA_CODE = coa.COA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        GROUP BY RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.COA_CODE,
            UPPER(coa.DESCRIPTION),
            RKT.ASSET_CODE
        UNION ALL
        -- BIAYA UMUM UNTUK COA 1212010101
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.COA_CODE,
            UPPER(coa.DESCRIPTION) COA_DESC,
            '' ASSET_CODE,
            0 DIS_JAN,
            0 DIS_FEB,
            0 DIS_MAR,
            0 DIS_APR,
            0 DIS_MAY,
            0 DIS_JUN,
            0 DIS_JUL,
            0 DIS_AUG,
            0 DIS_SEP,
            0 DIS_OCT,
            0 DIS_NOV,
            0 DIS_DEC,
            SUM (RKT.COST_JAN) DIS_BIAYA_JAN,
            SUM (RKT.COST_FEB) DIS_BIAYA_FEB,
            SUM (RKT.COST_MAR) DIS_BIAYA_MAR,
            SUM (RKT.COST_APR) DIS_BIAYA_APR,
            SUM (RKT.COST_MAY) DIS_BIAYA_MAY,
            SUM (RKT.COST_JUN) DIS_BIAYA_JUN,
            SUM (RKT.COST_JUL) DIS_BIAYA_JUL,
            SUM (RKT.COST_AUG) DIS_BIAYA_AUG,
            SUM (RKT.COST_SEP) DIS_BIAYA_SEP,
            SUM (RKT.COST_OCT) DIS_BIAYA_OCT,
            SUM (RKT.COST_NOV) DIS_BIAYA_NOV,
            SUM (RKT.COST_DEC) DIS_BIAYA_DEC
        FROM V_TOTAL_RELATION_COST RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        LEFT JOIN TM_COA coa
          ON RKT.COA_CODE = coa.COA_CODE  
        WHERE RKT.COA_CODE = '1212010101'
          $where
        GROUP BY RKT.PERIOD_BUDGET,
          ORG.REGION_CODE,
          RKT.BA_CODE,
          RKT.COA_CODE,
          UPPER(coa.DESCRIPTION)
        UNION ALL
        -- RKT PERKERASAN JALAN : SMS 1 = TM & JENIS = BARU & BUKAN PERKERASAN JALAN NEGARA
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.ACTIVITY_CODE COA_CODE,
            ACT.DESCRIPTION COA_DESC,
            '' ASSET_CODE,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.COST_JAN,
            RKT.COST_FEB,
            RKT.COST_MAR,
            RKT.COST_APR,
            RKT.COST_MAY,
            RKT.COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC
        FROM TR_RKT_PK RKT
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS1 = 'TM'
          AND RKT.JENIS_PEKERJAAN = 'BARU'
          AND RKT.ACTIVITY_CODE NOT IN ('10470')
          $where
        UNION ALL
        -- RKT PERKERASAN JALAN : SMS 2 = TM & JENIS = BARU & BUKAN PERKERASAN JALAN NEGARA
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.ACTIVITY_CODE COA_CODE,
            ACT.DESCRIPTION COA_DESC,
            '' ASSET_CODE,
            0 QTY_JAN,
            0 QTY_FEB,
            0 QTY_MAR,
            0 QTY_APR,
            0 QTY_MAY,
            0 QTY_JUN,
            RKT.PLAN_JUL QTY_JUL,
            RKT.PLAN_AUG QTY_AUG,
            RKT.PLAN_SEP QTY_SEP,
            RKT.PLAN_OCT QTY_OCT,
            RKT.PLAN_NOV QTY_NOV,
            RKT.PLAN_DEC QTY_DEC,
            0 COST_JAN,
            0 COST_FEB,
            0 COST_MAR,
            0 COST_APR,
            0 COST_MAY,
            0 COST_JUN,
            RKT.COST_JUL,
            RKT.COST_AUG,
            RKT.COST_SEP,
            RKT.COST_OCT,
            RKT.COST_NOV,
            RKT.COST_DEC
        FROM TR_RKT_PK RKT
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          AND RKT.MATURITY_STAGE_SMS2 = 'TM'
          AND RKT.JENIS_PEKERJAAN = 'BARU'
          AND RKT.ACTIVITY_CODE NOT IN ('10470')
          $where
        UNION ALL
        -- RKT PERKERASAN JALAN : PERKERASAN JALAN NEGARA
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            RKT.ACTIVITY_CODE COA_CODE,
            ACT.DESCRIPTION COA_DESC,
            '' ASSET_CODE,
            RKT.PLAN_JAN QTY_JAN,
            RKT.PLAN_FEB QTY_FEB,
            RKT.PLAN_MAR QTY_MAR,
            RKT.PLAN_APR QTY_APR,
            RKT.PLAN_MAY QTY_MAY,
            RKT.PLAN_JUN QTY_JUN,
            0 QTY_JUL,
            0 QTY_AUG,
            0 QTY_SEP,
            0 QTY_OCT,
            0 QTY_NOV,
            0 QTY_DEC,
            RKT.COST_JAN,
            RKT.COST_FEB,
            RKT.COST_MAR,
            RKT.COST_APR,
            RKT.COST_MAY,
            RKT.COST_JUN,
            0 COST_JUL,
            0 COST_AUG,
            0 COST_SEP,
            0 COST_OCT,
            0 COST_NOV,
            0 COST_DEC
        FROM TR_RKT_PK RKT
        LEFT JOIN TM_ACTIVITY ACT
          ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          AND RKT.ACTIVITY_CODE IN ('10470')
          $where
        UNION ALL 
        -- UNTUK RKT001, RKT002, RKT003, RKT004 YG INFRASTRUKTUR
        SELECT  ALL_ACT.PERIOD_BUDGET,
            ALL_ACT.REGION_CODE,
            ALL_ACT.BA_CODE,
            ALL_ACT.ACTIVITY_CODE COA_CODE,
            ALL_ACT.ACTIVITY_DESC COA_DESC,
            '' ASSET_CODE,
            MAX(NVL (report.QTY_JAN, 0)) QTY_JAN,
            MAX(NVL (report.QTY_FEB, 0)) QTY_FEB,
            MAX(NVL (report.QTY_MAR, 0)) QTY_MAR,
            MAX(NVL (report.QTY_APR, 0)) QTY_APR,
            MAX(NVL (report.QTY_MAY, 0)) QTY_MAY,
            MAX(NVL (report.QTY_JUN, 0)) QTY_JUN,
            MAX(NVL (report.QTY_JUL, 0)) QTY_JUL,
            MAX(NVL (report.QTY_AUG, 0)) QTY_AUG,
            MAX(NVL (report.QTY_SEP, 0)) QTY_SEP,
            MAX(NVL (report.QTY_OCT, 0)) QTY_OCT,
            MAX(NVL (report.QTY_NOV, 0)) QTY_NOV,
            MAX(NVL (report.QTY_DEC, 0)) QTY_DEC,
            SUM(NVL (report.COST_JAN, 0)) COST_JAN,
            SUM(NVL (report.COST_FEB, 0)) COST_FEB,
            SUM(NVL (report.COST_MAR, 0)) COST_MAR,
            SUM(NVL (report.COST_APR, 0)) COST_APR,
            SUM(NVL (report.COST_MAY, 0)) COST_MAY,
            SUM(NVL (report.COST_JUN, 0)) COST_JUN,
            SUM(NVL (report.COST_JUL, 0)) COST_JUL,
            SUM(NVL (report.COST_AUG, 0)) COST_AUG,
            SUM(NVL (report.COST_SEP, 0)) COST_SEP,
            SUM(NVL (report.COST_OCT, 0)) COST_OCT,
            SUM(NVL (report.COST_NOV, 0)) COST_NOV,
            SUM(NVL (report.COST_DEC, 0)) COST_DEC
        FROM (
          SELECT  PERIOD.PERIOD_BUDGET,
              ORG.REGION_CODE,
              ORG.BA_CODE,
              ACT.ACTIVITY_CODE,
              ACT.DESCRIPTION AS ACTIVITY_DESC
          FROM (
            SELECT PERIOD_BUDGET
            FROM TM_PERIOD 
            WHERE 1 = 1
            $where1
          ) PERIOD
          LEFT JOIN (
            SELECT REGION_CODE, BA_CODE, COMPANY_NAME
            FROM TM_ORGANIZATION
            WHERE 1 = 1
            $where2
          ) ORG
            ON PERIOD.PERIOD_BUDGET IS NOT NULL
          LEFT JOIN (
            SELECT ACTIVITY_CODE, ACTIVITY_GROUP_TYPE_CODE, ACTIVITY_GROUP_TYPE, UI_RKT_CODE
            FROM TM_ACTIVITY_MAPPING
            WHERE UI_RKT_CODE IN ('RKT001', 'RKT002', 'RKT003', 'RKT004')
              AND ACTIVITY_GROUP_TYPE_CODE = 'INFRASTRUKTUR'
              AND ACTIVITY_CODE NOT IN ('42800', '42900', '43000', '43001', '43002', '43003')
          ) MAPPING_ACT
            ON MAPPING_ACT.ACTIVITY_CODE IS NOT NULL
          LEFT JOIN TM_ACTIVITY ACT
            ON MAPPING_ACT.ACTIVITY_CODE = ACT.ACTIVITY_CODE
        ) ALL_ACT
        LEFT JOIN TMP_RPT_EST_COST report
          ON ALL_ACT.PERIOD_BUDGET = report.PERIOD_BUDGET
          AND ALL_ACT.BA_CODE = report.BA_CODE
          AND ALL_ACT.ACTIVITY_CODE = report.ACTIVITY_CODE
          AND report.TIPE_TRANSAKSI = '02_BIAYA_RAWAT_TM'
        GROUP BY ALL_ACT.PERIOD_BUDGET,
          ALL_ACT.REGION_CODE,
          ALL_ACT.BA_CODE,
          ALL_ACT.ACTIVITY_CODE,
          ALL_ACT.ACTIVITY_DESC
      ) rkt
      LEFT JOIN TM_ASSET aset
        ON rkt.PERIOD_BUDGET = aset.PERIOD_BUDGET
        AND rkt.BA_CODE = aset.BA_CODE
        AND rkt.ASSET_CODE = aset.ASSET_CODE
      GROUP BY TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR'),
        rkt.BA_CODE,
        rkt.COA_CODE,
        rkt.COA_DESC,
        aset.DESCRIPTION
      ORDER BY TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR'),
        rkt.BA_CODE,
        rkt.COA_CODE,
        rkt.COA_DESC,
        aset.DESCRIPTION
    ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel report CAPEX ################################################### */
    
    return $result;
  }
    
  //generate report sebaran HA
  public function reportSebaranHa($params = array())
  {
    $query = "
      SELECT REPORT.*, ORG.COMPANY_NAME
        FROM    (SELECT PERIOD_BUDGET,
                BA_CODE,
                TIPE_TRANSAKSI,
                AFD_CODE,
                SMS1_TBM0,
                SMS1_TBM1,
                SMS1_TBM2,
                SMS1_TBM3,
                SMS1_TM,
                TOTAL_HA_SMS1,
                SMS2_TBM0,
                SMS2_TBM1,
                SMS2_TBM2,
                SMS2_TBM3,
                SMS2_TM,
                TOTAL_HA_SMS2,
                (TOTAL_HA_SMS1 + TOTAL_HA_SMS2) TOTAL_HA
             FROM V_REPORT_SEBARAN_HS report
             UNION
             SELECT PERIOD_BUDGET,
                BA_CODE,
                TIPE_TRANSAKSI,
                SATUAN,
                QTY_JAN,
                QTY_FEB,
                QTY_MAR,
                QTY_APR,
                QTY_MAY,
                QTY_JUN,
                QTY_JUL,
                QTY_AUG,
                QTY_SEP,
                QTY_OCT,
                QTY_NOV,
                QTY_DEC,
                QTY_SETAHUN
             FROM V_REPORT_SEBARAN_PRODUKSI) REPORT
           LEFT JOIN
            TM_ORGANIZATION ORG
           ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE 1 = 1 ";
    
    if($params['budgetperiod'] != ''){
      $query .= "
        AND to_char(report.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $query .= "
        AND to_char(report.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    if($this->_siteCode <> 'ALL'){
      if ($this->_referenceRole == 'REGION_CODE')
        $query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(ORG.REGION_CODE)||'%'";
      elseif ($this->_referenceRole == 'BA_CODE')
        $query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(report.BA_CODE)||'%'";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $query .= "
        AND UPPER(ORG.REGION_CODE) = UPPER('".$params['src_region_code']."')
      ";
    }
    
    if ($params['key_find'] != '') {
      $query .= "
        AND UPPER(report.BA_CODE) LIKE UPPER('%".$params['key_find']."%') 
      ";
    }
    
    $query .= " ORDER BY report.PERIOD_BUDGET, report.BA_CODE, report.TIPE_TRANSAKSI";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    return $result;
  }
    
  //generate report vra per BA
  public function reportVraUtilisasi($params = array())
  {
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND RKT.BA_CODE = '".$params['key_find']."'
      ";
    }
  
  
    $query = "
      SELECT  SUM_HM_KM.PERIOD_BUDGET,
          SUM_HM_KM.REGION_CODE,
          SUM_HM_KM.BA_CODE,
          SUM_HM_KM.COMPANY_NAME,
          SUM_HM_KM.VRA_CODE,
          UPPER (VRA.VRA_SUB_CAT_DESCRIPTION) AS VRA_SUB_CAT_DESCRIPTION,
          UPPER (VRA.TYPE) AS TYPE,
          NVL (SUM (SUM_HM_KM.JUMLAH_ALAT), 0) AS JUMLAH_ALAT,
          UPPER (VRA.UOM) AS UOM,
          NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) AS TOTAL_HM_KM,
          NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0) AS HM_KM_DIGUNAKAN_SENDIRI,
          NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_PINJAM), 0) AS HM_KM_DIGUNAKAN_PINJAM,
          (NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) - NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0)) AS SELISIH_HM_KM
      FROM (
        -- VRA yang dimiliki oleh BA tsb
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            ORG.COMPANY_NAME,
            RKT.VRA_CODE,
            RKT.JUMLAH_ALAT,
            RKT.TOTAL_QTY_TAHUN,
            0 TOTAL_HM_KM_SENDIRI,
            0 TOTAL_HM_KM_PINJAM
        FROM TR_RKT_VRA RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL
        -- VRA yg digunakan oleh BA tsb (bisa milik sendiri atau pinjam VRA dummy ZZ_)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.BA_CODE,
            ORG.COMPANY_NAME,
            CASE
              WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
              THEN SUBSTR(RKT.VRA_CODE,4)
              ELSE RKT.VRA_CODE
            END AS VRA_CODE,
            0 JUMLAH_ALAT,
            0 TOTAL_QTY_TAHUN,
            CASE
              WHEN SUBSTR(RKT.VRA_CODE,1,3) <> 'ZZ_'
              THEN RKT.HM_KM
              ELSE 0
            END AS TOTAL_HM_KM_SENDIRI,
            CASE
              WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
              THEN RKT.HM_KM
              ELSE 0
            END AS TOTAL_HM_KM_PINJAM
        FROM TR_RKT_VRA_DISTRIBUSI RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
      ) SUM_HM_KM 
      LEFT JOIN TM_VRA VRA
        ON SUM_HM_KM.VRA_CODE = VRA.VRA_CODE
      GROUP BY SUM_HM_KM.PERIOD_BUDGET,
        SUM_HM_KM.REGION_CODE,
        SUM_HM_KM.BA_CODE,
        SUM_HM_KM.COMPANY_NAME,
        SUM_HM_KM.VRA_CODE,
        VRA.VRA_SUB_CAT_DESCRIPTION,
        VRA.TYPE,
        VRA.UOM
      ORDER BY SUM_HM_KM.PERIOD_BUDGET, SUM_HM_KM.BA_CODE, SUM_HM_KM.VRA_CODE
    ";

    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    return $result;
  }
    
  //generate report vra per region
  public function reportVraUtilisasiRegion($params = array())
  {
    // ############################################# get all BA #############################################
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    $query = "
      SELECT REGION_NAME, BA_CODE
      FROM TM_ORGANIZATION ORG
      WHERE DELETE_USER IS NULL
      $where
      ORDER BY REGION_NAME, BA_CODE
    ";
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['BA_CODE'] = array(); // distinct BA
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct BA_CODE
        if (in_array($row['BA_CODE'], $result['BA_CODE']) == false) {
          array_push($result['BA_CODE'], $row['BA_CODE']);
        }
        
        $result['REGION_NAME'] = $row['REGION_NAME'];
      }
    }
    
    // ############################################# get all VRA #############################################
    $query = "
      SELECT  SUM_HM_KM.VRA_CODE,
          UPPER (VRA.TYPE) AS TYPE,
          NVRA.RP_QTY NORMA
      FROM (
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            RKT.VRA_CODE
        FROM TR_RKT_VRA RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
        $where
        UNION ALL
        -- VRA yg digunakan oleh BA tsb (bisa milik sendiri atau pinjam VRA dummy ZZ_)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            CASE
              WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
              THEN SUBSTR(RKT.VRA_CODE,4)
              ELSE RKT.VRA_CODE
            END AS VRA_CODE
        FROM TR_RKT_VRA_DISTRIBUSI RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
      ) SUM_HM_KM
      LEFT JOIN TM_VRA VRA
        ON SUM_HM_KM.VRA_CODE = VRA.VRA_CODE
      LEFT JOIN TN_VRA_PINJAM NVRA
        ON SUM_HM_KM.PERIOD_BUDGET = NVRA.PERIOD_BUDGET
        AND SUM_HM_KM.REGION_CODE = NVRA.REGION_CODE
        AND SUM_HM_KM.VRA_CODE = SUBSTR(NVRA.VRA_CODE,4)
      GROUP BY SUM_HM_KM.VRA_CODE,
          UPPER (VRA.TYPE),
          NVRA.RP_QTY
      ORDER BY SUM_HM_KM.VRA_CODE
    ";
    $rows = $this->_db->fetchAll("{$query}");
    
    $result['VRA_CODE'] = array(); // distinct VRA_CODE
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        //distinct VRA_CODE
        if (in_array($row['VRA_CODE'], $result['VRA_CODE']) == false) {
          array_push($result['VRA_CODE'], $row['VRA_CODE']);
          
          $result['data'][$row['VRA_CODE']]['VRA_CODE'] = $row['VRA_CODE'];
          $result['data'][$row['VRA_CODE']]['TYPE'] = $row['TYPE'];
          $result['data'][$row['VRA_CODE']]['NORMA'] = $row['NORMA'];
        }
      }
    }
    
    /* ################################################### generate excel ################################################### */
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ORG.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
  
  
    $query = "
      SELECT  SUM_HM_KM.PERIOD_BUDGET,
          SUM_HM_KM.REGION_CODE,
          SUM_HM_KM.REGION_NAME,
          SUM_HM_KM.BA_CODE,
          SUM_HM_KM.COMPANY_NAME,
          SUM_HM_KM.VRA_CODE,
          NVRA.RP_QTY NORMA,
          RPQTY.VALUE RP_QTY,
          UPPER (VRA.VRA_SUB_CAT_DESCRIPTION) AS VRA_SUB_CAT_DESCRIPTION,
          UPPER (VRA.TYPE) AS TYPE,
          NVL (SUM (SUM_HM_KM.JUMLAH_ALAT), 0) AS JUMLAH_ALAT,
          UPPER (VRA.UOM) AS UOM,
          NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) AS TOTAL_HM_KM,
          NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0) AS HM_KM_DIGUNAKAN_SENDIRI,
          NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_PINJAM), 0) AS HM_KM_DIGUNAKAN_PINJAM,
          (NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) - NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0)) AS SELISIH_HM_KM
      FROM (
        -- VRA yang dimiliki oleh BA tsb
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            ORG.REGION_NAME,
            RKT.BA_CODE,
            ORG.COMPANY_NAME,
            RKT.VRA_CODE,
            RKT.JUMLAH_ALAT,
            RKT.TOTAL_QTY_TAHUN,
            0 TOTAL_HM_KM_SENDIRI,
            0 TOTAL_HM_KM_PINJAM
        FROM TR_RKT_VRA RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
        UNION ALL
        -- VRA yg digunakan oleh BA tsb (bisa milik sendiri atau pinjam VRA dummy ZZ_)
        SELECT  RKT.PERIOD_BUDGET,
            ORG.REGION_CODE,
            ORG.REGION_NAME,
            RKT.BA_CODE,
            ORG.COMPANY_NAME,
            CASE
              WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
              THEN SUBSTR(RKT.VRA_CODE,4)
              ELSE RKT.VRA_CODE
            END AS VRA_CODE,
            0 JUMLAH_ALAT,
            0 TOTAL_QTY_TAHUN,
            CASE
              WHEN SUBSTR(RKT.VRA_CODE,1,3) <> 'ZZ_'
              THEN RKT.HM_KM
              ELSE 0
            END AS TOTAL_HM_KM_SENDIRI,
            CASE
              WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
              THEN RKT.HM_KM
              ELSE 0
            END AS TOTAL_HM_KM_PINJAM
        FROM TR_RKT_VRA_DISTRIBUSI RKT
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = RKT.BA_CODE
        WHERE RKT.DELETE_USER IS NULL
          AND RKT.FLAG_TEMP IS NULL
          $where
      ) SUM_HM_KM 
      LEFT JOIN TM_VRA VRA
        ON SUM_HM_KM.VRA_CODE = VRA.VRA_CODE
      LEFT JOIN TR_RKT_VRA_SUM RPQTY
        ON SUM_HM_KM.PERIOD_BUDGET = RPQTY.PERIOD_BUDGET
        AND SUM_HM_KM.BA_CODE = RPQTY.BA_CODE
        AND SUM_HM_KM.VRA_CODE = RPQTY.VRA_CODE
      LEFT JOIN TN_VRA_PINJAM NVRA
        ON SUM_HM_KM.PERIOD_BUDGET = NVRA.PERIOD_BUDGET
        AND SUM_HM_KM.REGION_CODE = NVRA.REGION_CODE
        AND SUM_HM_KM.VRA_CODE = SUBSTR(NVRA.VRA_CODE,4)
      GROUP BY SUM_HM_KM.PERIOD_BUDGET,
        SUM_HM_KM.REGION_CODE,
        SUM_HM_KM.REGION_NAME,
        SUM_HM_KM.BA_CODE,
        SUM_HM_KM.COMPANY_NAME,
        SUM_HM_KM.VRA_CODE,
        NVRA.RP_QTY,
        RPQTY.VALUE,
        VRA.VRA_SUB_CAT_DESCRIPTION,
        VRA.TYPE,
        VRA.UOM
      ORDER BY SUM_HM_KM.PERIOD_BUDGET, SUM_HM_KM.BA_CODE, SUM_HM_KM.VRA_CODE
    ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}"); 
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['data'][$row['VRA_CODE']][$row['BA_CODE']]['rp_qty'] = $row['RP_QTY'];
        $result['data'][$row['VRA_CODE']][$row['BA_CODE']]['selisih'] = $row['SELISIH_HM_KM'];
        
        $result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
      }
    }
    /* ################################################### generate excel ################################################### */
    
    return $result;
  }
    
  //generate module review produksi per AFD
  public function modReviewProduksiPerAfd($params = array())
  {
    /* ################################################### generate excel ################################################### */
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(A.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }
    
    //filter region
    if($params['src_region_code'] != ''){
      $where .= "
        AND B.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if($params['key_find'] != ''){
      $where .= "
        AND A.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  A.PERIOD_BUDGET,
          B.REGION_CODE,
          B.REGION_NAME,
          B.COMPANY_CODE,
          B.COMPANY_NAME,
          A.BA_CODE,
          B.ESTATE_NAME,
          A.AFD_CODE,
          SUM(A.HA_SMS2) as HA_PANEN,
          SUM(A.POKOK_SMS2) as POKOK_PANEN,
          CASE
            WHEN NVL(SUM(A.HA_SMS2),0) = 0
            THEN 0
            ELSE ROUND( SUM(A.POKOK_SMS2) / SUM(A.HA_SMS2) )
          END as SPH_PANEN,
          CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_PROFILE) / SUM (A.HA_SMS2), 2)
           END
            AS YIELD_PROFILE_YPH,
           SUM (A.TON_PROFILE) AS YIELD_PROFILE_TON,
           CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_PROPORTION) / SUM (A.HA_SMS2), 2)
           END AS POTENSI_YPH,
           SUM (A.TON_PROPORTION) AS POTENSI_TON,
           CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_BUDGET) / SUM (A.HA_SMS2), 2)
           END AS BUDGET_YPH,
          SUM(A.TON_BUDGET) as BUDGET_TON,
          CASE
            WHEN NVL(SUM(A.YPH_PROPORTION),0) = 0
            THEN 0
            ELSE round(SUM(A.YPH_BUDGET) / SUM(A.YPH_PROPORTION) * 100, 2)
          END VAR_YPH,
          CASE
            WHEN NVL(SUM(A.TON_PROPORTION),0) = 0
            THEN 0
            ELSE SUM(A.TON_BUDGET) / SUM(A.TON_PROPORTION) * 100
          END VAR_TON
      FROM TR_PRODUKSI_PERIODE_BUDGET A
      LEFT JOIN TM_ORGANIZATION B
        ON A.BA_CODE = B.BA_CODE
      WHERE A.DELETE_TIME IS NULL
        $where
      GROUP BY A.PERIOD_BUDGET,
        B.REGION_CODE,
        B.REGION_NAME,
        B.COMPANY_CODE,
        B.COMPANY_NAME,
        A.BA_CODE,
        B.ESTATE_NAME,
        A.AFD_CODE
      ORDER BY 1,2,4,6,8
    ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}"); 
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel ################################################### */
    
    return $result;
  }
    
  //generate module review produksi per BA
  public function modReviewProduksiPerBa($params = array())
  {
    /* ################################################### generate excel ################################################### */
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(A.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }
    
    //filter region
    if($params['src_region_code'] != ''){
      $where .= "
        AND B.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    $query = "
      SELECT  A.PERIOD_BUDGET,
          B.REGION_CODE,
          B.REGION_NAME,
          B.COMPANY_CODE,
          B.COMPANY_NAME,
          A.BA_CODE,
          B.ESTATE_NAME,
          SUM(A.HA_SMS2) as HA_PANEN,
          SUM(A.POKOK_SMS2) as POKOK_PANEN,
          CASE
            WHEN NVL(SUM(A.HA_SMS2),0) = 0
            THEN 0
            ELSE ROUND( SUM(A.POKOK_SMS2) / SUM(A.HA_SMS2) )
          END as SPH_PANEN,
          CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_PROFILE) / SUM (A.HA_SMS2), 2)
           END
            AS YIELD_PROFILE_YPH,
           SUM (A.TON_PROFILE) AS YIELD_PROFILE_TON,
           CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_PROPORTION) / SUM (A.HA_SMS2), 2)
           END AS POTENSI_YPH,
           SUM (A.TON_PROPORTION) AS POTENSI_TON,
           CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_BUDGET) / SUM (A.HA_SMS2), 2)
           END AS BUDGET_YPH,
          SUM(A.TON_BUDGET) as BUDGET_TON,
          CASE
            WHEN NVL(SUM(A.YPH_PROPORTION),0) = 0
            THEN 0
            ELSE ROUND (SUM(A.YPH_BUDGET) / SUM(A.YPH_PROPORTION) * 100,2)
          END VAR_YPH,
          CASE
            WHEN NVL(SUM(A.TON_PROPORTION),0) = 0
            THEN 0
            ELSE SUM(A.TON_BUDGET) / SUM(A.TON_PROPORTION) * 100
          END VAR_TON
      FROM TR_PRODUKSI_PERIODE_BUDGET A
      LEFT JOIN TM_ORGANIZATION B
        ON A.BA_CODE = B.BA_CODE
      WHERE A.DELETE_TIME IS NULL
        $where
      GROUP BY A.PERIOD_BUDGET,
        B.REGION_CODE,
        B.REGION_NAME,
        B.COMPANY_CODE,
        B.COMPANY_NAME,
        A.BA_CODE,
        B.ESTATE_NAME
      ORDER BY 1,2,4,6
    ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}"); 
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel ################################################### */
    
    return $result;
  }
    
  //generate module review produksi per region
  public function modReviewProduksiPerRegion($params = array())
  {
    /* ################################################### generate excel ################################################### */
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(A.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }
    
    $query = "
      SELECT  A.PERIOD_BUDGET,
          B.REGION_CODE,
          B.REGION_NAME,
          SUM(A.HA_SMS2) as HA_PANEN,
          SUM(A.POKOK_SMS2) as POKOK_PANEN,
          CASE
            WHEN NVL(SUM(A.HA_SMS2),0) = 0
            THEN 0
            ELSE ROUND( SUM(A.POKOK_SMS2) / SUM(A.HA_SMS2) )
          END as SPH_PANEN,
          CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_PROFILE) / SUM (A.HA_SMS2), 2)
           END
            AS YIELD_PROFILE_YPH,
           SUM (A.TON_PROFILE) AS YIELD_PROFILE_TON,
           CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_PROPORTION) / SUM (A.HA_SMS2), 2)
           END AS POTENSI_YPH,
           SUM (A.TON_PROPORTION) AS POTENSI_TON,
           CASE
            WHEN NVL (SUM (A.HA_SMS2), 0) = 0 THEN 0
            ELSE ROUND (SUM (A.TON_BUDGET) / SUM (A.HA_SMS2), 2)
           END AS BUDGET_YPH,
          SUM(A.TON_BUDGET) as BUDGET_TON,
          CASE
            WHEN NVL(SUM(A.YPH_PROPORTION),0) = 0
            THEN 0
            ELSE ROUND(SUM(A.YPH_BUDGET) / SUM(A.YPH_PROPORTION) * 100, 2)
          END VAR_YPH,
          CASE
            WHEN NVL(SUM(A.TON_PROPORTION),0) = 0
            THEN 0
            ELSE SUM(A.TON_BUDGET) / SUM(A.TON_PROPORTION) * 100
          END VAR_TON
      FROM TR_PRODUKSI_PERIODE_BUDGET A
      LEFT JOIN TM_ORGANIZATION B
        ON A.BA_CODE = B.BA_CODE
      WHERE A.DELETE_TIME IS NULL
        $where
      GROUP BY A.PERIOD_BUDGET,
        B.REGION_CODE,
        B.REGION_NAME
      ORDER BY 1,2
    ";

    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}"); 
    
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel ################################################### */
    
    return $result;
  }
  
  //get last generate date
  public function getLastGenerate($params = array())
  {
    $where = "";
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
  
  
    $query = "
      SELECT  MAX(INSERT_USER) INSERT_USER,
          TO_CHAR( MAX(INSERT_TIME), 'DD-MM-RRRR HH24:MI:SS') INSERT_TIME
      FROM (
        SELECT  MAX(INSERT_USER) INSERT_USER,
            MAX(INSERT_TIME) INSERT_TIME
        FROM TMP_RPT_DEV_COST
        WHERE 1 = 1
        $where
        UNION ALL
        SELECT  MAX(INSERT_USER) INSERT_USER,
            MAX(INSERT_TIME) INSERT_TIME
        FROM TMP_RPT_EST_COST
        WHERE 1 = 1
        $where
      )
    ";
//echo $query;
    $result = $this->_db->fetchRow("{$query}");
    
    return $result;
  }
  
  //generate report development cost
  public function reportHkDevelopmentCost($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel report hk development cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND ALL_ACT.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME, 
          (SELECT SUM(CEK.RP_HK) 
            FROM TR_RKT_CHECKROLL_SUM CEK 
            LEFT JOIN TN_BIAYA B ON B.SUB_COST_ELEMENT = CEK.JOB_CODE
            WHERE B.COST_ELEMENT='LABOUR' AND 
            B.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND B.BA_CODE = REPORT.BA_CODE AND
            CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE 
            AND B.ACTIVITY_CODE=REPORT.ACTIVITY_CODE
            AND B.ACTIVITY_GROUP = REPORT.TIPE_TRANSAKSI
          ) RP_HK ,
          
          ( SELECT HKE
            FROM TM_CHECKROLL_HK CEK
            WHERE CEK.EMPLOYEE_STATUS='KT' AND 
            CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE
          ) HKE
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_DEV_COST ALL_ACT
        WHERE 1 = 1 
        $where
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
    ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }   
    /* ################################################### generate excel report hk development cost ################################################### */
    
    return $result;
  }
  
  //generate report HK Estate cost
  public function reportHkEstateCost($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel hk estate cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME, 
          -- get all rkt_panen
          (
            SELECT SUM(BIAYA_PEMANEN_HK)
              FROM TR_RKT_PANEN panen
            LEFT JOIN TM_ACTIVITY activity 
              ON panen.ACTIVITY_CODE = activity.ACTIVITY_CODE
            WHERE panen.DELETE_USER IS NULL AND
            panen.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            panen.BA_CODE = REPORT.BA_CODE 
          ) HK_PANEN,
          -- get sebaran perencaan produksi
          (
            SELECT 
            (
              SUM(JAN) + SUM(FEB) + SUM(MAR) + SUM(APR) + SUM(MAY) +
              SUM(JUN) + SUM(JUL) + SUM(AUG) + SUM(SEP) + SUM(OCT) + 
              SUM (NOV) + SUM(DEC)
            )
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) TOTAL_COST_PERTAHUN,
            
          (
            SELECT SUM(JAN)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_JAN,
          (
            SELECT SUM(FEB)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_FEB,
          (
            SELECT SUM(MAR)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_MAR,
          (
            SELECT SUM(APR)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_APR,
          (
            SELECT SUM(MAY)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_MAY,
          (
            SELECT SUM(JUN)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_JUN,
          (
            SELECT SUM(JUL)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_JUL,
          (
            SELECT SUM(AUG)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_AUG,
          (
            SELECT SUM(SEP)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_SEP,
          (
            SELECT SUM(OCT)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_OCT,
          (
            SELECT SUM(NOV)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_NOV,
          (
            SELECT SUM(DEC)
            FROM TR_PRODUKSI_PERIODE_BUDGET norma
            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
              ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
              AND norma.BA_CODE = thn_berjalan.BA_CODE
              AND norma.AFD_CODE = thn_berjalan.AFD_CODE
              AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
            LEFT JOIN TM_ORGANIZATION ORG
              ON norma.BA_CODE = ORG.BA_CODE
            WHERE norma.DELETE_USER IS NULL AND
            norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
            norma.BA_CODE = REPORT.BA_CODE 
          ) PEREN_COST_DEC,
          
          (
          SELECT SUM(CEK.RP_HK) 
            FROM TR_RKT_CHECKROLL_SUM CEK 
            LEFT JOIN TN_BIAYA B ON B.SUB_COST_ELEMENT = CEK.JOB_CODE
            WHERE B.COST_ELEMENT='LABOUR' AND 
            B.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND B.BA_CODE = REPORT.BA_CODE AND
            CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE 
            AND B.ACTIVITY_CODE=REPORT.ACTIVITY_CODE
            AND B.ACTIVITY_GROUP = REPORT.TIPE_TRANSAKSI
          ) RP_HK ,
          
          ( SELECT SUM(HKE)/2
            FROM TM_CHECKROLL_HK CEK
            WHERE  
            CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE
          ) HKE
          
          
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM TMP_RPT_EST_COST ALL_ACT
        WHERE 1 = 1
        $where
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
    ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel hk estate cost ################################################### */
    
    return $result;
  }
  
  //generate report Norma Pupuk TBM
  public function reportNormaPupukTbm($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel Norma Pupuk Tbm ################################################### */
    $query = "
      SELECT ROWIDTOCHAR(norma.ROWID) row_id, rownum, 
           to_char(norma.PERIOD_BUDGET,'RRRR') PERIOD_BUDGET, 
           norma.BA_CODE, 
           norma.LAND_TYPE, 
           norma.PALM_AGE, 
           norma.MATURITY_STAGE, 
           norma.MATERIAL_CODE, 
           norma.ROTASI, 
           norma.DOSIS, 
           norma.JUMLAH,
           norma.PRICE_ROTASI, 
           norma.PRICE_YEAR,
           material.MATERIAL_NAME,
           norma_harga.PRICE,
           norma.FLAG_TEMP
      FROM TN_PUPUK_TBM2_LESS norma
      LEFT JOIN TM_MATERIAL material
        ON material.MATERIAL_CODE = norma.MATERIAL_CODE
        AND material.PERIOD_BUDGET = norma.PERIOD_BUDGET
        AND material.BA_CODE = norma.BA_CODE
      LEFT JOIN TN_HARGA_BARANG norma_harga
        ON material.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
        AND material.BA_CODE = norma_harga.BA_CODE
        AND material.MATERIAL_CODE = norma_harga.MATERIAL_CODE
      LEFT JOIN TM_ORGANIZATION ORG
        ON norma.BA_CODE = ORG.BA_CODE
      WHERE norma.DELETE_USER IS NULL
    ";
    
    if($this->_siteCode <> 'ALL'){
      if ($this->_referenceRole == 'REGION_CODE')
        $query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(ORG.REGION_CODE)||'%'";
      elseif ($this->_referenceRole == 'BA_CODE')
        $query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(norma.BA_CODE)||'%'";
    }
    if($params['budgetperiod'] != ''){
      $query .= "
        AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }else{
      $query .= "
        AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $query .= "
        AND UPPER(ORG.REGION_CODE) LIKE UPPER('%".$params['src_region_code']."%')
      ";
    }
    
    if ($params['key_find'] != '') {
      $query .= "
        AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
      ";
    }
    
    if ($params['controller'] == 'download') {
      $params['search'] = ($params['search'] == 'AA==') ? "" : rawurldecode(base64_decode($params['search']));
    }
    
    if ($params['search'] != '') {
      $query .= "
        AND (
          UPPER(norma.PERIOD_BUDGET) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.BA_CODE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(material.MATERIAL_NAME) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma_harga.PRICE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.LAND_TYPE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.PALM_AGE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.MATURITY_STAGE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.ROTASI) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.DOSIS) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.JUMLAH) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.PRICE_ROTASI) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.PRICE_YEAR) LIKE UPPER('%".$params['search']."%')
        )
      ";
    }
    
    //untuk inheritance
    if ($params['sub_cost_element'] != '') {
      $query .= "
        AND UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['sub_cost_element']."%')
      ";
    }
    
    $query .= "
      ORDER BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.LAND_TYPE, norma.PALM_AGE
    ";
    
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel Norma Pupuk Tbm ################################################### */
    
    return $result;
  }
  
  //generate report Norma Pupuk TM
  public function reportNormaPupukTm($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel Norma Pupuk TM ################################################### */
    $query = "
      SELECT ROWIDTOCHAR(norma.ROWID) row_id, 
           to_char(norma.PERIOD_BUDGET,'RRRR') PERIOD_BUDGET, 
           norma.BA_CODE, 
           norma.AFD_CODE,  
           CONCAT (CONCAT (norma.BLOCK_CODE, ' - '), ha_statement.BLOCK_DESC) BLOCK_CODE,  
           norma.JENIS_TANAM,  
           norma.POKOK,  
           norma.BULAN_PEMUPUKAN,  
           norma.MATERIAL_CODE,  
           norma.DOSIS,  
           norma.JUMLAH,  
           norma.BIAYA,
           norma.HA_PUPUK,
           material.MATERIAL_NAME,
           norma_harga.PRICE,
           ha_statement.HA_PLANTED,
           to_char(ha_statement.TAHUN_TANAM,'MM.RRRR') TAHUN_TANAM,
           to_char(ha_statement.TAHUN_TANAM,'RRRR') TAHUN_TANAM_Y,
           to_char(ha_statement.TAHUN_TANAM,'MM') TAHUN_TANAM_M,
           ha_statement.MATURITY_STAGE_SMS1,
           ha_statement.MATURITY_STAGE_SMS2,
           norma.FLAG_TEMP
      FROM TN_PUPUK_TBM2_TM norma
      LEFT JOIN TM_MATERIAL material
        ON material.MATERIAL_CODE = norma.MATERIAL_CODE
        AND material.PERIOD_BUDGET = norma.PERIOD_BUDGET
        AND material.BA_CODE = norma.BA_CODE
      LEFT JOIN TN_HARGA_BARANG norma_harga
        ON material.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
        AND material.BA_CODE = norma_harga.BA_CODE
        AND material.MATERIAL_CODE = norma_harga.MATERIAL_CODE
      LEFT JOIN TM_HECTARE_STATEMENT ha_statement
        ON norma.BA_CODE  = ha_statement.BA_CODE
        AND norma.PERIOD_BUDGET = ha_statement.PERIOD_BUDGET
        AND norma.AFD_CODE = ha_statement.AFD_CODE
        AND norma.BLOCK_CODE = ha_statement.BLOCK_CODE
      LEFT JOIN TM_ORGANIZATION ORG
        ON norma.BA_CODE = ORG.BA_CODE
      WHERE norma.DELETE_USER IS NULL
    ";
    
    if($this->_siteCode <> 'ALL'){
      if ($this->_referenceRole == 'REGION_CODE')
        $query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(ORG.REGION_CODE)||'%'";
      elseif ($this->_referenceRole == 'BA_CODE')
        $query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(norma.BA_CODE)||'%'";
    }
    if($params['budgetperiod'] != ''){
      $query .= "
        AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
    }elseif($params['PERIOD_BUDGET'] != ''){
      $query .= "
        AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['PERIOD_BUDGET']."'
      ";
    }else{
      $query .= "
        AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $query .= "
        AND UPPER(ORG.REGION_CODE) LIKE UPPER('%".$params['src_region_code']."%')
      ";
    }
    
    if ($params['key_find'] != '') {
      $query .= "
        AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
      ";
    }
    
    if (($params['src_matstage_code']) && ($params['src_matstage_code'] != '0')) {
      $query .= "
        AND (
          UPPER(ha_statement.MATURITY_STAGE_SMS1) LIKE UPPER('%".$params['src_matstage_code']."%')
          OR UPPER(ha_statement.MATURITY_STAGE_SMS2) LIKE UPPER('%".$params['src_matstage_code']."%')
        )
      ";
    }
    
    if ($params['controller'] == 'download') {
      $params['search'] = ($params['search'] == 'AA==') ? "" : rawurldecode(base64_decode($params['search']));
    }
    
    if ($params['search'] != '') {
      $query .= "
        AND (
          UPPER(norma.PERIOD_BUDGET) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.BA_CODE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(material.MATERIAL_NAME) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma_harga.PRICE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.AFD_CODE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.BLOCK_CODE) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.JENIS_TANAM) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.POKOK) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.BULAN_PEMUPUKAN) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.DOSIS) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.JUMLAH) LIKE UPPER('%".$params['search']."%')
          OR UPPER(norma.BIAYA) LIKE UPPER('%".$params['search']."%')
        )
      ";
    }
    
    //untuk inheritance
    if ($params['sub_cost_element'] != '') {
      $query .= "
        AND UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['sub_cost_element']."%')
      ";
    }
    
    $query .= "
      ORDER BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.JENIS_TANAM, norma.BULAN_PEMUPUKAN
    ";
    
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel Norma Pupuk TM ################################################### */
    
    return $result;
  }
  
  //generate report Status Hitung All
  public function reportStatusHitungAll($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    
    if($params['budgetperiod'] != ''){
      $per_budg =  $params['budgetperiod'];
    }
    if ($params['key_find'] != '') {
      $ba = $params['key_find'];
    }
    /* ################################################### generate excel report Status Hitung All ################################################### */
    $query = "SELECT rownum, RPT_ALL.*
          FROM (  -- NORMA DASAR --
              SELECT PERIOD_BUDGET,
                 BA_CODE,
                 'NORMA' GROUP01,
                 'DASAR' GROUP02,
                 BASIC_NORMA_CODE CODE,
                 DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (UPDATE_TIME) IS NULL THEN MAX (INSERT_TIME)
                  ELSE MAX (UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (PERCENT_INCREASE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_BASIC
               WHERE     DELETE_TIME IS NULL
                 AND TO_CHAR (PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY PERIOD_BUDGET,
                 BA_CODE,
                 BASIC_NORMA_CODE,
                 DESCRIPTION
            UNION ALL
              -- NORMA HARGA BARANG --
              SELECT TMAT.PERIOD_BUDGET,
                 TMAT.BA_CODE,
                 'NORMA' GROUP01,
                 'HARGA BARANG' GROUP02,
                 TMAT.MATERIAL_CODE CODE,
                 TMAT.MATERIAL_NAME AKTIVITAS,
                 CASE
                  WHEN MAX (THB.UPDATE_TIME) IS NULL
                  THEN
                     MAX (THB.INSERT_TIME)
                  ELSE
                     MAX (THB.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (THB.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM    TM_MATERIAL TMAT
                 LEFT JOIN
                  TN_HARGA_BARANG THB
                 ON     THB.PERIOD_BUDGET = TMAT.PERIOD_BUDGET
                  AND THB.BA_CODE = TMAT.BA_CODE
                  AND THB.MATERIAL_CODE = TMAT.MATERIAL_CODE
               WHERE     THB.DELETE_TIME IS NULL
                 AND TO_CHAR (THB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND THB.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TMAT.PERIOD_BUDGET,
                 TMAT.BA_CODE,
                 TMAT.MATERIAL_CODE,
                 TMAT.MATERIAL_NAME
            UNION ALL
              -- NORMA HARGA BORONG --
              SELECT THB.PERIOD_BUDGET,
                 THB.BA_CODE,
                 'NORMA' GROUP01,
                 'HARGA BORONG' GROUP02,
                 TA.ACTIVITY_CODE CODE,
                 TA.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (THB.UPDATE_TIME) IS NULL
                  THEN
                     MAX (THB.INSERT_TIME)
                  ELSE
                     MAX (THB.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (THB.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_ACTIVITY TA LEFT JOIN TN_HARGA_BORONG THB
                  ON THB.ACTIVITY_CODE = TA.ACTIVITY_CODE
               WHERE     THB.DELETE_TIME IS NULL
                 AND TO_CHAR (THB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND THB.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY THB.PERIOD_BUDGET,
                 THB.BA_CODE,
                 TA.ACTIVITY_CODE,
                 TA.DESCRIPTION
            UNION ALL
              -- NORMA BIAYA --
              SELECT TB.PERIOD_BUDGET,
                 TB.BA_CODE,
                 'NORMA' GROUP01,
                 'BIAYA' GROUP02,
                 TA.ACTIVITY_CODE CODE,
                 TA.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TB.UPDATE_TIME) IS NULL THEN MAX (TB.INSERT_TIME)
                  ELSE MAX (TB.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TB.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_ACTIVITY TA LEFT JOIN TN_BIAYA TB
                  ON TB.ACTIVITY_CODE = TA.ACTIVITY_CODE
               WHERE     TB.DELETE_TIME IS NULL
                 AND TO_CHAR (TB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TB.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TB.PERIOD_BUDGET,
                 TB.BA_CODE,
                 TA.ACTIVITY_CODE,
                 TA.DESCRIPTION
            UNION ALL
              -- NORMA PERKERASAN JALAN --
              SELECT TPJ.PERIOD_BUDGET,
                 TPJ.BA_CODE,
                 'NORMA' GROUP01,
                 'PERKERASAN JALAN' GROUP02,
                 TA.ACTIVITY_CODE CODE,
                 TA.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TPJ.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPJ.INSERT_TIME)
                  ELSE
                     MAX (TPJ.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPJ.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_ACTIVITY TA LEFT JOIN TN_PERKERASAN_JALAN TPJ
                  ON TPJ.ACTIVITY_CODE = TA.ACTIVITY_CODE
               WHERE     TPJ.DELETE_TIME IS NULL
                 AND TO_CHAR (TPJ.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPJ.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPJ.PERIOD_BUDGET,
                 TPJ.BA_CODE,
                 TA.ACTIVITY_CODE,
                 TA.DESCRIPTION
            UNION ALL
              -- NORMA HARGA PERKERASAN JALAN --
              SELECT TPJH.PERIOD_BUDGET,
                 TPJH.BA_CODE,
                 'NORMA' GROUP01,
                 'HARGA PERKERASAN JALAN' GROUP02,
                 TA.ACTIVITY_CODE CODE,
                 TA.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TPJH.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPJH.INSERT_TIME)
                  ELSE
                     MAX (TPJH.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN (  MAX (TPJH.DT_PRICE)
                      + MAX (TPJH.EXCAV_PRICE)
                      + MAX (TPJH.COMPACTOR_PRICE)
                      + MAX (TPJH.GRADER_PRICE)) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TM_ACTIVITY TA LEFT JOIN TN_PERKERASAN_JALAN_HARGA TPJH
                  ON TPJH.ACTIVITY_CODE = TA.ACTIVITY_CODE
               WHERE     TPJH.DELETE_TIME IS NULL
                 AND TO_CHAR (TPJH.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPJH.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPJH.PERIOD_BUDGET,
                 TPJH.BA_CODE,
                 TA.ACTIVITY_CODE,
                 TA.DESCRIPTION
            UNION ALL
              -- NORMA VRA --
              SELECT TV.PERIOD_BUDGET,
                 TV.BA_CODE,
                 'NORMA' GROUP01,
                 'VRA' GROUP02,
                 TMV.VRA_CODE CODE,
                 TMV.TYPE AKTIVITAS,
                 CASE
                  WHEN MAX (TV.UPDATE_TIME) IS NULL THEN MAX (TV.INSERT_TIME)
                  ELSE MAX (TV.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TV.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_VRA TMV LEFT JOIN TN_VRA TV
                  ON TMV.VRA_CODE = TV.VRA_CODE
               WHERE     TV.DELETE_TIME IS NULL
                 AND TO_CHAR (TV.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TV.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TV.PERIOD_BUDGET,
                 TV.BA_CODE,
                 TMV.VRA_CODE,
                 TMV.TYPE
            UNION ALL
              -- NORMA INFRASTRUKTUR --
              SELECT TI.PERIOD_BUDGET,
                 TI.BA_CODE,
                 'NORMA' GROUP01,
                 'INFRASTRUKTUR' GROUP02,
                 TA.ACTIVITY_CODE CODE,
                 TA.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TI.UPDATE_TIME) IS NULL THEN MAX (TI.INSERT_TIME)
                  ELSE MAX (TI.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TI.RP_HA_INTERNAL) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_ACTIVITY TA LEFT JOIN TN_INFRASTRUKTUR TI
                  ON TI.ACTIVITY_CODE = TA.ACTIVITY_CODE
               WHERE     TI.DELETE_TIME IS NULL
                 AND TO_CHAR (TI.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TI.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TI.PERIOD_BUDGET,
                 TI.BA_CODE,
                 TA.ACTIVITY_CODE,
                 TA.DESCRIPTION
            UNION ALL
              -- NORMA PUPUK TM --
              SELECT TPTM.PERIOD_BUDGET,
                 TPTM.BA_CODE,
                 'NORMA' GROUP01,
                 'PUPUK TM' GROUP02,
                 TPTM.MATERIAL_CODE CODE,
                 TM.MATERIAL_NAME AKTIVITAS,
                 CASE
                  WHEN MAX (TPTM.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPTM.INSERT_TIME)
                  ELSE
                     MAX (TPTM.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPTM.HARGA) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PUPUK_TBM2_TM TPTM LEFT JOIN TM_MATERIAL TM
                  ON TM.MATERIAL_CODE = TPTM.MATERIAL_CODE
               WHERE     TPTM.DELETE_TIME IS NULL
                 AND TO_CHAR (TPTM.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPTM.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPTM.PERIOD_BUDGET,
                 TPTM.BA_CODE,
                 TPTM.MATERIAL_CODE,
                 TM.MATERIAL_NAME
            UNION ALL
              -- NORMA PUPUK TBM --
              SELECT TPTL.PERIOD_BUDGET,
                 TPTL.BA_CODE,
                 'NORMA' GROUP01,
                 'PUPUK TBM' GROUP02,
                 TPTL.MATERIAL_CODE CODE,
                 TM.MATERIAL_NAME AKTIVITAS,
                 CASE
                  WHEN MAX (TPTL.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPTL.INSERT_TIME)
                  ELSE
                     MAX (TPTL.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPTL.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PUPUK_TBM2_LESS TPTL LEFT JOIN TM_MATERIAL TM
                  ON TM.MATERIAL_CODE = TPTL.MATERIAL_CODE
               WHERE     TPTL.DELETE_TIME IS NULL
                 AND TO_CHAR (TPTL.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPTL.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPTL.PERIOD_BUDGET,
                 TPTL.BA_CODE,
                 TPTL.MATERIAL_CODE,
                 TM.MATERIAL_NAME
            UNION ALL
              -- NORMA PANEN OER BJR --
              SELECT TPOB.PERIOD_BUDGET,
                 TPOB.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN OER BJR' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TPOB.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPOB.INSERT_TIME)
                  ELSE
                     MAX (TPOB.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPOB.NILAI) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_OER_BJR TPOB
               WHERE     TPOB.DELETE_TIME IS NULL
                 AND TO_CHAR (TPOB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPOB.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPOB.PERIOD_BUDGET,
                 TPOB.BA_CODE,
                 TPOB.PREMI_PANEN,
                 OER_MIN,
                 OER_MAX,
                 BJR_MIN,
                 BJR_MAX
            UNION ALL
              -- NORMA PANEN PREMI MANDOR --
              SELECT TPPM.PERIOD_BUDGET,
                 TPPM.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN PREMI MANDOR' GROUP02,
                 TPPM.PREMI_MANDOR_CODE CODE,
                 TPPM.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TPPM.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPPM.INSERT_TIME)
                  ELSE
                     MAX (TPPM.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPPM.VALUE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_PREMI_MANDOR TPPM
               WHERE     TPPM.DELETE_TIME IS NULL
                 AND TO_CHAR (TPPM.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPPM.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPPM.PERIOD_BUDGET,
                 TPPM.BA_CODE,
                 TPPM.PREMI_MANDOR_CODE,
                 TPPM.DESCRIPTION
            UNION ALL
              -- NORMA PANEN VARIABEL --
              SELECT TPV.PERIOD_BUDGET,
                 TPV.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN VARIABEL' GROUP02,
                 TPV.PANEN_CODE CODE,
                 TPV.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TPV.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPV.INSERT_TIME)
                  ELSE
                     MAX (TPV.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPV.VALUE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_VARIABLE TPV
               WHERE     TPV.DELETE_TIME IS NULL
                 AND TO_CHAR (TPV.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPV.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPV.PERIOD_BUDGET,
                 TPV.BA_CODE,
                 TPV.PANEN_CODE,
                 TPV.DESCRIPTION
            UNION ALL
              -- NORMA PANEN LOADING --
              SELECT TPL.PERIOD_BUDGET,
                 TPL.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN VARIABEL' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TPL.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPL.INSERT_TIME)
                  ELSE
                     MAX (TPL.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN (MAX (TPL.RP_HK_TM) + MAX (TPL.RP_PREMI_SUPIR)) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_LOADING TPL
               WHERE     TPL.DELETE_TIME IS NULL
                 AND TO_CHAR (TPL.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPL.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPL.PERIOD_BUDGET, TPL.BA_CODE
            UNION ALL
              -- NORMA PANEN SUPERVISI --
              SELECT TPS.PERIOD_BUDGET,
                 TPS.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN SUPERVISI' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TPS.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPS.INSERT_TIME)
                  ELSE
                     MAX (TPS.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN (MAX (TPS.RP_KG)) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_SUPERVISI TPS
               WHERE     TPS.DELETE_TIME IS NULL
                 AND TO_CHAR (TPS.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPS.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPS.PERIOD_BUDGET, TPS.BA_CODE
            UNION ALL
              -- NORMA PANEN KRANI BUAH --
              SELECT TPKB.PERIOD_BUDGET,
                 TPKB.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN KRANI BUAH' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TPKB.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPKB.INSERT_TIME)
                  ELSE
                     MAX (TPKB.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN (MAX (TPKB.RP_HK)) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_KRANI_BUAH TPKB
               WHERE     TPKB.DELETE_TIME IS NULL
                 AND TO_CHAR (TPKB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPKB.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPKB.PERIOD_BUDGET, TPKB.BA_CODE
            UNION ALL
              -- NORMA PANEN PREMI COST UNIT --
              SELECT TPPCU.PERIOD_BUDGET,
                 TPPCU.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN PREMI COST UNIT' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TPPCU.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPPCU.INSERT_TIME)
                  ELSE
                     MAX (TPPCU.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN (MAX (TPPCU.RP_KM_INTERNAL)
                      + MAX (NVL (TPPCU.RP_KM_EXTERNAL, 0))) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_PREMI_COST_UNIT TPPCU
               WHERE     TPPCU.DELETE_TIME IS NULL
                 AND TO_CHAR (TPPCU.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPPCU.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPPCU.PERIOD_BUDGET, TPPCU.BA_CODE
            UNION ALL
              -- NORMA PANEN PREMI PEMANEN --
              SELECT TPOB.PERIOD_BUDGET,
                 TPOB.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN PREMI PEMANEN' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TPOB.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPOB.INSERT_TIME)
                  ELSE
                     MAX (TPOB.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPOB.PREMI_PANEN) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_OER_BJR TPOB
               WHERE     TPOB.DELETE_TIME IS NULL
                 AND TO_CHAR (TPOB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPOB.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPOB.PERIOD_BUDGET,
                 TPOB.BA_CODE,
                 '',
                 ''
            UNION ALL
              -- NORMA KASTRASI SANITASI --
              SELECT TO_DATE ('') PERIOD_BUDGET,
                 '' BA_CODE,
                 'NORMA' GROUP01,
                 'KASTRASI SANITASI' GROUP02,
                 TKS.ACTIVITY_CODE CODE,
                 TA.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TKS.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TKS.INSERT_TIME)
                  ELSE
                     MAX (TKS.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TKS.UMUR) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_KASTRASI_SANITASI TKS LEFT JOIN TM_ACTIVITY TA
                  ON TA.ACTIVITY_CODE = TKS.ACTIVITY_CODE
               WHERE TKS.DELETE_TIME IS NULL
            GROUP BY '',
                 '',
                 TKS.ACTIVITY_CODE,
                 TA.DESCRIPTION
            UNION ALL
              -- NORMA VRA PINJAM --
              SELECT TO_DATE ('') PERIOD_BUDGET,
                 '' BA_CODE,
                 'NORMA' GROUP01,
                 'VRA PINJAM' GROUP02,
                 TVP.VRA_CODE CODE,
                 TV.TYPE AKTIVITAS,
                 CASE
                  WHEN MAX (TVP.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TVP.INSERT_TIME)
                  ELSE
                     MAX (TVP.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TVP.RP_QTY) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_VRA_PINJAM TVP LEFT JOIN TM_VRA TV
                  ON TVP.VRA_CODE = TV.VRA_CODE
               WHERE TVP.DELETE_TIME IS NULL
            GROUP BY TVP.VRA_CODE, TV.TYPE
            UNION ALL
              -- NORMA PANEN PREMI TOPOGRAPHY --
              SELECT TPPT.PERIOD_BUDGET,
                 TPPT.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN PREMI TOPOGRAPHY' GROUP02,
                 AFD_CODE CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TPPT.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPPT.INSERT_TIME)
                  ELSE
                     MAX (TPPT.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPPT.PERCENTAGE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_ORGANIZATION TOR LEFT JOIN TN_PANEN_PREMI_TOPOGRAPHY TPPT
                  ON TPPT.BA_CODE = TOR.BA_CODE
               WHERE     TPPT.DELETE_TIME IS NULL
                 AND TO_CHAR (TPPT.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPPT.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPPT.PERIOD_BUDGET, TPPT.BA_CODE, TPPT.AFD_CODE
            UNION ALL
              -- NORMA PANEN PROD PEMANEN --
              SELECT TPV.PERIOD_BUDGET,
                 TPV.BA_CODE,
                 'NORMA' GROUP01,
                 'PANEN PROD PEMANEN' GROUP02,
                 TPV.PANEN_CODE CODE,
                 TPV.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (TPV.UPDATE_TIME) IS NULL
                  THEN
                     MAX (TPV.INSERT_TIME)
                  ELSE
                     MAX (TPV.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TPV.VALUE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_PANEN_VARIABLE TPV
               WHERE     TPV.DELETE_TIME IS NULL
                 AND TPV.PANEN_CODE = 'PRO_PEMANEN'
                 AND TO_CHAR (TPV.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TPV.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TPV.PERIOD_BUDGET,
                 TPV.BA_CODE,
                 TPV.PANEN_CODE,
                 TPV.DESCRIPTION
            UNION ALL
              -- NORMA WRA --
              SELECT TW.PERIOD_BUDGET,
                 TW.BA_CODE,
                 'NORMA' GROUP01,
                 'WRA' GROUP02,
                 TW.SUB_WRA_GROUP CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (TW.UPDATE_TIME) IS NULL THEN MAX (TW.INSERT_TIME)
                  ELSE MAX (TW.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (TW.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_WRA TW
                 LEFT JOIN TN_HARGA_BARANG norma_harga
                  ON     TW.SUB_WRA_GROUP = norma_harga.MATERIAL_CODE
                     AND TW.BA_CODE = norma_harga.BA_CODE
                     AND TW.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
                 LEFT JOIN TM_MATERIAL material
                  ON     TW.SUB_WRA_GROUP = material.MATERIAL_CODE
                     AND TW.BA_CODE = material.BA_CODE
                     AND TW.PERIOD_BUDGET = material.PERIOD_BUDGET
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON TW.BA_CODE = ORG.BA_CODE
               WHERE     TW.DELETE_USER IS NULL
                 AND TO_CHAR (TW.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND TW.BA_CODE LIKE UPPER ('%".$ba."%')
            GROUP BY TW.PERIOD_BUDGET, TW.BA_CODE, TW.SUB_WRA_GROUP
            UNION ALL
              -- NORMA CHECKROLL --
              SELECT norma.PERIOD_BUDGET,
                 norma.BA_CODE,
                 'NORMA' GROUP01,
                 'WRA' GROUP02,
                 norma.JOB_CODE CODE,
                 job.JOB_DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (norma.UPDATE_TIME) IS NULL
                  THEN
                     MAX (norma.INSERT_TIME)
                  ELSE
                     MAX (norma.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (norma.GP) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_CHECKROLL norma
                 LEFT JOIN TM_JOB_TYPE job
                  ON norma.JOB_CODE = job.JOB_CODE
                 LEFT JOIN T_PARAMETER_VALUE grupjob
                  ON grupjob.PARAMETER_VALUE_CODE = job.GROUP_CHECKROLL_CODE
                     AND grupjob.PARAMETER_CODE = 'GROUP_JOB'
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON norma.BA_CODE = ORG.BA_CODE
               WHERE     norma.DELETE_USER IS NULL
                 AND TO_CHAR (norma.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (norma.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY norma.PERIOD_BUDGET,
                 norma.BA_CODE,
                 norma.JOB_CODE,
                 job.JOB_DESCRIPTION
            UNION ALL
              -- HECTARE STATEMENT --
              SELECT A.PERIOD_BUDGET,
                 A.BA_CODE,
                 'RKT' GROUP01,
                 'HECTARE STATEMENT' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (A.UPDATE_TIME) IS NULL THEN MAX (A.INSERT_TIME)
                  ELSE MAX (A.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (A.HA_PLANTED) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_HECTARE_STATEMENT A LEFT JOIN TM_ORGANIZATION B
                  ON A.BA_CODE = B.BA_CODE
               WHERE     A.DELETE_USER IS NULL
                 AND TO_CHAR (A.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (A.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY A.PERIOD_BUDGET, A.BA_CODE
            UNION ALL
              -- HECTARE STATEMENT DETAIL --
              SELECT A.PERIOD_BUDGET,
                 A.BA_CODE,
                 'RKT' GROUP01,
                 'HECTARE STATEMENT DETAIL' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (A.UPDATE_TIME) IS NULL THEN MAX (A.INSERT_TIME)
                  ELSE MAX (A.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (A.HA) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TM_HECTARE_STATEMENT_DETAIL A
                 LEFT JOIN TM_HECTARE_STATEMENT C
                  ON     A.PERIOD_BUDGET = C.PERIOD_BUDGET
                     AND A.BA_CODE = C.BA_CODE
                     AND A.BLOCK_CODE = C.BLOCK_CODE
                 LEFT JOIN TM_ORGANIZATION B
                  ON A.BA_CODE = B.BA_CODE
               WHERE     A.DELETE_USER IS NULL
                 AND TO_CHAR (A.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (A.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY A.PERIOD_BUDGET, A.BA_CODE
            UNION ALL
              -- PERENCANAAN PRODUKSI --
              SELECT norma.PERIOD_BUDGET,
                 norma.BA_CODE,
                 'RKT' GROUP01,
                 'PERENCANAAN PRODUKSI' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 CASE
                  WHEN MAX (norma.UPDATE_TIME) IS NULL
                  THEN
                     MAX (norma.INSERT_TIME)
                  ELSE
                     MAX (norma.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (norma.JAN)
                     + MAX (norma.FEB)
                     + MAX (norma.MAR)
                     + MAX (norma.APR)
                     + MAX (norma.MAY)
                     + MAX (norma.JUN)
                     + MAX (norma.JUL)
                     + MAX (norma.AUG)
                     + MAX (norma.SEP)
                     + MAX (norma.OCT)
                     + MAX (norma.NOV)
                     + MAX (norma.DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_PRODUKSI_PERIODE_BUDGET norma
                 LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                  ON     norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                     AND norma.BA_CODE = thn_berjalan.BA_CODE
                     AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                     AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON norma.BA_CODE = ORG.BA_CODE
               WHERE     norma.DELETE_USER IS NULL
                 AND TO_CHAR (norma.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (norma.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE
            UNION ALL
              -- RKT CAPEX --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'CAPEX' GROUP02,
                 rkt.ASSET_CODE CODE,
                 aset.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (rkt.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT_CAPEX rkt
                 LEFT JOIN TM_COA coa
                  ON rkt.COA_CODE = coa.COA_CODE
                 LEFT JOIN TM_ASSET aset
                  ON     rkt.PERIOD_BUDGET = aset.PERIOD_BUDGET
                     AND rkt.BA_CODE = aset.BA_CODE
                     AND rkt.ASSET_CODE = aset.ASSET_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ASSET_CODE,
                 aset.DESCRIPTION
            UNION ALL
              -- RKT LC --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'LC' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 act.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (rkt.COST_SETAHUN) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT_LC rkt
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
                 LEFT JOIN TM_ACTIVITY act
                  ON act.ACTIVITY_CODE = rkt.ACTIVITY_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 act.DESCRIPTION
            UNION ALL
              -- RKT TANAM MANUAL --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'TANAM MANUAL' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (rkt.TOTAL_RP_SETAHUN) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT rkt
                 LEFT JOIN TM_HECTARE_STATEMENT hs
                  ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
                     AND hs.BA_CODE = rkt.BA_CODE
                     AND hs.AFD_CODE = rkt.AFD_CODE
                     AND hs.BLOCK_CODE = rkt.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'TANAM_MANUAL'
                 AND hs.STATUS = 'PROYEKSI'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT TANAM OTOMATIS --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'TANAM OTOMATIS' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (rkt.TOTAL_RP_SETAHUN) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT rkt
                 LEFT JOIN TM_HECTARE_STATEMENT hs
                  ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
                     AND hs.BA_CODE = rkt.BA_CODE
                     AND hs.AFD_CODE = rkt.AFD_CODE
                     AND hs.BLOCK_CODE = rkt.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'TANAM'
                 AND hs.STATUS = 'PROYEKSI'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT PERKERASAN JALAN --
              SELECT RKTPK.PERIOD_BUDGET,
                 RKTPK.BA_CODE,
                 'RKT' GROUP01,
                 'PERKERASAN JALAN' GROUP02,
                 RKTPK.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (RKTPK.UPDATE_TIME) IS NULL
                  THEN
                     MAX (RKTPK.INSERT_TIME)
                  ELSE
                     MAX (RKTPK.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (RKTPK.COST_JAN)
                     + MAX (RKTPK.COST_FEB)
                     + MAX (RKTPK.COST_MAR)
                     + MAX (RKTPK.COST_APR)
                     + MAX (RKTPK.COST_MAY)
                     + MAX (RKTPK.COST_JUN)
                     + MAX (RKTPK.COST_JUL)
                     + MAX (RKTPK.COST_AUG)
                     + MAX (RKTPK.COST_SEP)
                     + MAX (RKTPK.COST_OCT)
                     + MAX (RKTPK.COST_NOV)
                     + MAX (RKTPK.COST_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM (SELECT PK.PERIOD_BUDGET,
                     PK.BA_CODE,
                     PK.AFD_CODE,
                     PK.BLOCK_CODE,
                     PK.ACTIVITY_CODE,
                     PK.TRX_RKT_CODE,
                     PK.PLAN_JAN,
                     PK.PLAN_FEB,
                     PK.PLAN_MAR,
                     PK.PLAN_APR,
                     PK.PLAN_MAY,
                     PK.PLAN_JUN,
                     PK.PLAN_JUL,
                     PK.PLAN_AUG,
                     PK.PLAN_SEP,
                     PK.PLAN_OCT,
                     PK.PLAN_NOV,
                     PK.PLAN_DEC,
                     PK.PLAN_SETAHUN,
                     PK.PRICE_QTY,
                     PK.COST_JAN,
                     PK.COST_FEB,
                     PK.COST_MAR,
                     PK.COST_APR,
                     PK.COST_MAY,
                     PK.COST_JUN,
                     PK.COST_JUL,
                     PK.COST_AUG,
                     PK.COST_SEP,
                     PK.COST_OCT,
                     PK.COST_NOV,
                     PK.COST_DEC,
                     PK.COST_SETAHUN,
                     PK.INSERT_TIME,
                     PK.UPDATE_TIME
                  FROM TR_RKT_PK PK
                   WHERE PK.DELETE_USER IS NULL) RKTPK
                 LEFT JOIN TM_HECTARE_STATEMENT HA
                  ON     HA.PERIOD_BUDGET = RKTPK.PERIOD_BUDGET
                     AND HA.BA_CODE = RKTPK.BA_CODE
                     AND HA.AFD_CODE = RKTPK.AFD_CODE
                     AND HA.BLOCK_CODE = RKTPK.BLOCK_CODE
                     AND TO_CHAR (RKTPK.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                     AND UPPER (RKTPK.BA_CODE) LIKE UPPER ('%".$ba."%')
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON HA.BA_CODE = ORG.BA_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON RKTPK.ACTIVITY_CODE = activity.ACTIVITY_CODE
               WHERE     1 = 1
                 AND TO_CHAR (RKTPK.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (RKTPK.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY RKTPK.PERIOD_BUDGET,
                 RKTPK.BA_CODE,
                 RKTPK.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT INFRA --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'INFRA' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.COST_JAN)
                     + MAX (rkt.COST_FEB)
                     + MAX (rkt.COST_MAR)
                     + MAX (rkt.COST_APR)
                     + MAX (rkt.COST_MAY)
                     + MAX (rkt.COST_JUN)
                     + MAX (rkt.COST_JUL)
                     + MAX (rkt.COST_AUG)
                     + MAX (rkt.COST_SEP)
                     + MAX (rkt.COST_OCT)
                     + MAX (rkt.COST_NOV)
                     + MAX (rkt.COST_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT rkt
                 LEFT JOIN TM_HECTARE_STATEMENT hs
                  ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
                     AND hs.BA_CODE = rkt.BA_CODE
                     AND hs.AFD_CODE = rkt.AFD_CODE
                     AND hs.BLOCK_CODE = rkt.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'MANUAL_INFRA'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT RAWAT --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'RAWAT' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.COST_JAN)
                     + MAX (rkt.COST_FEB)
                     + MAX (rkt.COST_MAR)
                     + MAX (rkt.COST_APR)
                     + MAX (rkt.COST_MAY)
                     + MAX (rkt.COST_JUN)
                     + MAX (rkt.COST_JUL)
                     + MAX (rkt.COST_AUG)
                     + MAX (rkt.COST_SEP)
                     + MAX (rkt.COST_OCT)
                     + MAX (rkt.COST_NOV)
                     + MAX (rkt.COST_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT rkt
                 LEFT JOIN TM_HECTARE_STATEMENT hs
                  ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
                     AND hs.BA_CODE = rkt.BA_CODE
                     AND hs.AFD_CODE = rkt.AFD_CODE
                     AND hs.BLOCK_CODE = rkt.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA'
                 AND rkt.ACTIVITY_CODE <> '42700'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT RAWAT OPSI --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'RAWAT OPSI' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.COST_JAN)
                     + MAX (rkt.COST_FEB)
                     + MAX (rkt.COST_MAR)
                     + MAX (rkt.COST_APR)
                     + MAX (rkt.COST_MAY)
                     + MAX (rkt.COST_JUN)
                     + MAX (rkt.COST_JUL)
                     + MAX (rkt.COST_AUG)
                     + MAX (rkt.COST_SEP)
                     + MAX (rkt.COST_OCT)
                     + MAX (rkt.COST_NOV)
                     + MAX (rkt.COST_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT rkt
                 LEFT JOIN TM_HECTARE_STATEMENT hs
                  ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
                     AND hs.BA_CODE = rkt.BA_CODE
                     AND hs.AFD_CODE = rkt.AFD_CODE
                     AND hs.BLOCK_CODE = rkt.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT KASTRASI SANITASI --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'INFRA' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.COST_JAN)
                     + MAX (rkt.COST_FEB)
                     + MAX (rkt.COST_MAR)
                     + MAX (rkt.COST_APR)
                     + MAX (rkt.COST_MAY)
                     + MAX (rkt.COST_JUN)
                     + MAX (rkt.COST_JUL)
                     + MAX (rkt.COST_AUG)
                     + MAX (rkt.COST_SEP)
                     + MAX (rkt.COST_OCT)
                     + MAX (rkt.COST_NOV)
                     + MAX (rkt.COST_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT rkt
                 LEFT JOIN TM_HECTARE_STATEMENT hs
                  ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
                     AND hs.BA_CODE = rkt.BA_CODE
                     AND hs.AFD_CODE = rkt.AFD_CODE
                     AND hs.BLOCK_CODE = rkt.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'KASTRASI_SANITASI'
                 AND (hs.MATURITY_STAGE_SMS1 LIKE 'TBM%'
                    OR hs.MATURITY_STAGE_SMS2 LIKE 'TBM%')
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT RAWAT SISIP --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'RAWAT SISIP' GROUP02,
                 rkt.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.COST_JAN)
                     + MAX (rkt.COST_FEB)
                     + MAX (rkt.COST_MAR)
                     + MAX (rkt.COST_APR)
                     + MAX (rkt.COST_MAY)
                     + MAX (rkt.COST_JUN)
                     + MAX (rkt.COST_JUL)
                     + MAX (rkt.COST_AUG)
                     + MAX (rkt.COST_SEP)
                     + MAX (rkt.COST_OCT)
                     + MAX (rkt.COST_NOV)
                     + MAX (rkt.COST_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT rkt
                 LEFT JOIN TM_HECTARE_STATEMENT hs
                  ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
                     AND hs.BA_CODE = rkt.BA_CODE
                     AND hs.AFD_CODE = rkt.AFD_CODE
                     AND hs.BLOCK_CODE = rkt.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'MANUAL_SISIP'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT PANEN --
              SELECT RKT_GABUNGAN.PERIOD_BUDGET,
                 RKT_GABUNGAN.BA_CODE,
                 'RKT' GROUP01,
                 'PANEN' GROUP02,
                 RKT_GABUNGAN.ACTIVITY_CODE CODE,
                 activity.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (RKT_GABUNGAN.UPDATE_TIME) IS NULL
                  THEN
                     MAX (RKT_GABUNGAN.INSERT_TIME)
                  ELSE
                     MAX (RKT_GABUNGAN.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (RKT_GABUNGAN.COST_SETAHUN) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM (SELECT DISTINCT PERIOD_BUDGET PERIOD_BUDGET,
                          BA_CODE,
                          AFD_CODE,
                          BLOCK_CODE,
                          DELETE_USER
                  FROM TR_PRODUKSI_PERIODE_BUDGET
                   WHERE DELETE_USER IS NULL AND TON_BUDGET > 0) HS
                 LEFT JOIN (SELECT ROWIDTOCHAR (PANEN1.ROWID) row_id,
                           '' ROW_ID_TEMP,
                           PANEN1.FLAG_TEMP,
                           PANEN1.TRX_RKT_CODE,
                           PANEN1.PERIOD_BUDGET PERIOD_BUDGET,
                           PANEN1.BA_CODE,
                           PANEN1.AFD_CODE,
                           PANEN1.BLOCK_CODE,
                           THS1.BLOCK_DESC,
                           PANEN1.ACTIVITY_CODE,
                           PANEN1.TON,
                           PANEN1.JANJANG,
                           PANEN1.BJR_AFD,
                           PANEN1.JARAK_PKS,
                           PANEN1.SUMBER_BIAYA_UNIT SUMBER_BIAYA,
                           PANEN1.PERSEN_LANGSIR,
                           PANEN1.BIAYA_PEMANEN_HK,
                           PANEN1.BIAYA_PEMANEN_RP_BASIS,
                           PANEN1.BIAYA_PEMANEN_RP_PREMI_JANJANG,
                           PANEN1.BIAYA_PEMANEN_RP_PREMI_BRD,
                           PANEN1.BIAYA_PEMANEN_RP_TOTAL,
                           PANEN1.BIAYA_PEMANEN_RP_KG,
                           PANEN1.BIAYA_SPV_RP_BASIS,
                           PANEN1.BIAYA_SPV_RP_PREMI,
                           PANEN1.BIAYA_SPV_RP_TOTAL,
                           PANEN1.BIAYA_SPV_RP_KG,
                           PANEN1.BIAYA_ALAT_PANEN_RP_KG,
                           PANEN1.BIAYA_ALAT_PANEN_RP_TOTAL,
                           PANEN1.TUKANG_MUAT_BASIS,
                           PANEN1.TUKANG_MUAT_PREMI,
                           PANEN1.TUKANG_MUAT_TOTAL,
                           PANEN1.TUKANG_MUAT_RP_KG,
                           PANEN1.SUPIR_PREMI,
                           PANEN1.SUPIR_RP_KG,
                           PANEN1.ANGKUT_TBS_RP_KG_KM,
                           PANEN1.ANGKUT_TBS_RP_ANGKUT,
                           PANEN1.ANGKUT_TBS_RP_KG,
                           PANEN1.KRANI_BUAH_BASIS,
                           PANEN1.KRANI_BUAH_PREMI,
                           PANEN1.KRANI_BUAH_TOTAL,
                           PANEN1.KRANI_BUAH_RP_KG,
                           PANEN1.LANGSIR_TON,
                           PANEN1.LANGSIR_RP,
                           PANEN1.LANGSIR_TUKANG_MUAT,
                           PANEN1.LANGSIR_RP_KG,
                           PANEN1.COST_JAN,
                           PANEN1.COST_FEB,
                           PANEN1.COST_MAR,
                           PANEN1.COST_APR,
                           PANEN1.COST_MAY,
                           PANEN1.COST_JUN,
                           PANEN1.COST_JUL,
                           PANEN1.COST_AUG,
                           PANEN1.COST_SEP,
                           PANEN1.COST_OCT,
                           PANEN1.COST_NOV,
                           PANEN1.COST_DEC,
                           PANEN1.COST_SETAHUN,
                           PANEN1.INSERT_TIME,
                           PANEN1.UPDATE_TIME
                        FROM    TR_RKT_PANEN PANEN1
                           LEFT JOIN
                            TM_HECTARE_STATEMENT THS1
                           ON PANEN1.PERIOD_BUDGET = THS1.PERIOD_BUDGET
                            AND PANEN1.BA_CODE = THS1.BA_CODE
                            AND PANEN1.AFD_CODE = THS1.AFD_CODE
                            AND PANEN1.BLOCK_CODE = THS1.BLOCK_CODE
                       WHERE PANEN1.DELETE_USER IS NULL) RKT_GABUNGAN
                  ON     HS.PERIOD_BUDGET = RKT_GABUNGAN.PERIOD_BUDGET
                     AND HS.BA_CODE = RKT_GABUNGAN.BA_CODE
                     AND HS.AFD_CODE = RKT_GABUNGAN.AFD_CODE
                     AND HS.BLOCK_CODE = RKT_GABUNGAN.BLOCK_CODE
                 LEFT JOIN TM_ACTIVITY activity
                  ON RKT_GABUNGAN.ACTIVITY_CODE = activity.ACTIVITY_CODE
                 LEFT JOIN TM_OER_BA oer_ba
                  ON oer_ba.PERIOD_BUDGET = hs.PERIOD_BUDGET
                     AND oer_ba.BA_CODE = hs.BA_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON HS.BA_CODE = ORG.BA_CODE
                 LEFT JOIN TM_HECTARE_STATEMENT THS
                  ON     HS.PERIOD_BUDGET = THS.PERIOD_BUDGET
                     AND HS.BA_CODE = THS.BA_CODE
                     AND HS.AFD_CODE = THS.AFD_CODE
                     AND HS.BLOCK_CODE = THS.BLOCK_CODE
               WHERE     1 = 1
                 AND TO_CHAR (RKT_GABUNGAN.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (RKT_GABUNGAN.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY RKT_GABUNGAN.PERIOD_BUDGET,
                 RKT_GABUNGAN.BA_CODE,
                 RKT_GABUNGAN.ACTIVITY_CODE,
                 activity.DESCRIPTION
            UNION ALL
              -- RKT OPEX --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'OPEX' GROUP02,
                 rkt.COA_CODE CODE,
                 coa.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.DIS_JAN)
                     + MAX (rkt.DIS_FEB)
                     + MAX (rkt.DIS_MAR)
                     + MAX (rkt.DIS_APR)
                     + MAX (rkt.DIS_MAY)
                     + MAX (rkt.DIS_JUN)
                     + MAX (rkt.DIS_JUL)
                     + MAX (rkt.DIS_AUG)
                     + MAX (rkt.DIS_SEP)
                     + MAX (rkt.DIS_OCT)
                     + MAX (rkt.DIS_NOV)
                     + MAX (rkt.DIS_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT_OPEX rkt
                 LEFT JOIN TM_COA coa
                  ON rkt.COA_CODE = coa.COA_CODE
                 LEFT JOIN T_PARAMETER_VALUE param
                  ON rkt.GROUP_BUM_CODE = param.PARAMETER_VALUE_CODE
                     AND param.PARAMETER_CODE = 'GROUP_BUM'
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
                 LEFT JOIN TN_BASIC basic
                  ON     rkt.PERIOD_BUDGET = basic.PERIOD_BUDGET
                     AND rkt.BA_CODE = basic.BA_CODE
                     AND basic.BASIC_NORMA_CODE = 'NC021'
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.TIPE_TRANSAKSI = 'NON_VRA'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.COA_CODE,
                 coa.DESCRIPTION
            UNION ALL
              -- RKT OPEX VRA --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'OPEX VRA' GROUP02,
                 rkt.COA_CODE CODE,
                 coa.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.DIS_JAN)
                     + MAX (rkt.DIS_FEB)
                     + MAX (rkt.DIS_MAR)
                     + MAX (rkt.DIS_APR)
                     + MAX (rkt.DIS_MAY)
                     + MAX (rkt.DIS_JUN)
                     + MAX (rkt.DIS_JUL)
                     + MAX (rkt.DIS_AUG)
                     + MAX (rkt.DIS_SEP)
                     + MAX (rkt.DIS_OCT)
                     + MAX (rkt.DIS_NOV)
                     + MAX (rkt.DIS_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM (SELECT rkt.TRX_CODE,
                     rkt.PERIOD_BUDGET PERIOD_BUDGET,
                     rkt.BA_CODE,
                     rkt.COA_CODE,
                     rkt.GROUP_BUM_CODE,
                     rkt.ACTUAL,
                     rkt.TAKSASI,
                     rkt.ANTISIPASI,
                     rkt.PERSENTASE_INFLASI,
                     rkt.TOTAL_BIAYA,
                     rkt.DIS_JAN,
                     rkt.DIS_FEB,
                     rkt.DIS_MAR,
                     rkt.DIS_APR,
                     rkt.DIS_MAY,
                     rkt.DIS_JUN,
                     rkt.DIS_JUL,
                     rkt.DIS_AUG,
                     rkt.DIS_SEP,
                     rkt.DIS_OCT,
                     rkt.DIS_NOV,
                     rkt.DIS_DEC,
                     rkt.KETERANGAN,
                     INSERT_TIME,
                     UPDATE_TIME
                  FROM TR_RKT_OPEX rkt
                   WHERE rkt.DELETE_USER IS NULL AND rkt.TIPE_TRANSAKSI = 'VRA')
                 RKT
                 LEFT JOIN TM_COA coa
                  ON rkt.COA_CODE = coa.COA_CODE
                 LEFT JOIN T_PARAMETER_VALUE param
                  ON rkt.GROUP_BUM_CODE = param.PARAMETER_VALUE_CODE
                     AND param.PARAMETER_CODE = 'GROUP_BUM'
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
                 LEFT JOIN TN_BASIC basic
                  ON     RKT.PERIOD_BUDGET = basic.PERIOD_BUDGET
                     AND RKT.BA_CODE = basic.BA_CODE
                     AND basic.BASIC_NORMA_CODE = 'NC021'
               WHERE     1 = 1
                 AND TO_CHAR (RKT.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (RKT.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY RKT.PERIOD_BUDGET,
                 RKT.BA_CODE,
                 RKT.COA_CODE,
                 coa.DESCRIPTION
            UNION ALL
              -- RKT CSR --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'CSR' GROUP02,
                 rkt.COA_CODE CODE,
                 coa.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.DIS_JAN)
                     + MAX (rkt.DIS_FEB)
                     + MAX (rkt.DIS_MAR)
                     + MAX (rkt.DIS_APR)
                     + MAX (rkt.DIS_MAY)
                     + MAX (rkt.DIS_JUN)
                     + MAX (rkt.DIS_JUL)
                     + MAX (rkt.DIS_AUG)
                     + MAX (rkt.DIS_SEP)
                     + MAX (rkt.DIS_OCT)
                     + MAX (rkt.DIS_NOV)
                     + MAX (rkt.DIS_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT_RELATION rkt
                 LEFT JOIN TM_COA coa
                  ON rkt.COA_CODE = coa.COA_CODE
                 LEFT JOIN T_PARAMETER_VALUE param
                  ON rkt.GROUP_CODE = param.PARAMETER_VALUE_CODE
                     AND param.PARAMETER_CODE = 'GROUP_CSR'
                 LEFT JOIN TM_GROUP_RELATION master_relation
                  ON     rkt.COA_CODE = master_relation.COA_CODE
                     AND rkt.GROUP_CODE = master_relation.GROUP_CODE
                     AND rkt.SUB_GROUP_CODE = master_relation.SUB_GROUP_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.REPORT_TYPE = 'CSR'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.COA_CODE,
                 coa.DESCRIPTION
            UNION ALL
              -- RKT SHE --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'SUSTAINABILITY' GROUP02,
                 rkt.COA_CODE CODE,
                 coa.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.DIS_JAN)
                     + MAX (rkt.DIS_FEB)
                     + MAX (rkt.DIS_MAR)
                     + MAX (rkt.DIS_APR)
                     + MAX (rkt.DIS_MAY)
                     + MAX (rkt.DIS_JUN)
                     + MAX (rkt.DIS_JUL)
                     + MAX (rkt.DIS_AUG)
                     + MAX (rkt.DIS_SEP)
                     + MAX (rkt.DIS_OCT)
                     + MAX (rkt.DIS_NOV)
                     + MAX (rkt.DIS_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT_RELATION rkt
                 LEFT JOIN TM_COA coa
                  ON rkt.COA_CODE = coa.COA_CODE
                 LEFT JOIN T_PARAMETER_VALUE param
                  ON rkt.GROUP_CODE = param.PARAMETER_VALUE_CODE
                     AND param.PARAMETER_CODE = 'GROUP_SHE'
                 LEFT JOIN TM_GROUP_RELATION master_relation
                  ON     rkt.COA_CODE = master_relation.COA_CODE
                     AND rkt.GROUP_CODE = master_relation.GROUP_CODE
                     AND rkt.SUB_GROUP_CODE = master_relation.SUB_GROUP_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.REPORT_TYPE = 'SHE'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.COA_CODE,
                 coa.DESCRIPTION
            UNION ALL
              -- RKT IR --
              SELECT rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 'RKT' GROUP01,
                 'INTERNAL RELATIONSHIP' GROUP02,
                 rkt.COA_CODE CODE,
                 coa.DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (rkt.UPDATE_TIME) IS NULL
                  THEN
                     MAX (rkt.INSERT_TIME)
                  ELSE
                     MAX (rkt.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN   MAX (rkt.DIS_JAN)
                     + MAX (rkt.DIS_FEB)
                     + MAX (rkt.DIS_MAR)
                     + MAX (rkt.DIS_APR)
                     + MAX (rkt.DIS_MAY)
                     + MAX (rkt.DIS_JUN)
                     + MAX (rkt.DIS_JUL)
                     + MAX (rkt.DIS_AUG)
                     + MAX (rkt.DIS_SEP)
                     + MAX (rkt.DIS_OCT)
                     + MAX (rkt.DIS_NOV)
                     + MAX (rkt.DIS_DEC) IS NOT NULL
                  THEN
                     'ADA'
                  ELSE
                     'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT_RELATION rkt
                 LEFT JOIN TM_COA coa
                  ON rkt.COA_CODE = coa.COA_CODE
                 LEFT JOIN T_PARAMETER_VALUE param
                  ON rkt.GROUP_CODE = param.PARAMETER_VALUE_CODE
                     AND param.PARAMETER_CODE = 'GROUP_IR'
                 LEFT JOIN TM_GROUP_RELATION master_relation
                  ON     rkt.COA_CODE = master_relation.COA_CODE
                     AND rkt.GROUP_CODE = master_relation.GROUP_CODE
                     AND rkt.SUB_GROUP_CODE = master_relation.SUB_GROUP_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON rkt.BA_CODE = ORG.BA_CODE
               WHERE     rkt.DELETE_USER IS NULL
                 AND rkt.REPORT_TYPE = 'IR'
                 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY rkt.PERIOD_BUDGET,
                 rkt.BA_CODE,
                 rkt.COA_CODE,
                 coa.DESCRIPTION
            UNION ALL
              -- RKT ALAT KERJA PANEN --
              SELECT norma.PERIOD_BUDGET,
                 norma.BA_CODE,
                 'RKT' GROUP01,
                 'ALAT KERJA PANEN' GROUP02,
                 norma.MATERIAL_CODE CODE,
                 material.MATERIAL_NAME AKTIVITAS,
                 CASE
                  WHEN MAX (norma.UPDATE_TIME) IS NULL
                  THEN
                     MAX (norma.INSERT_TIME)
                  ELSE
                     MAX (norma.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (norma_harga.PRICE) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TN_ALAT_KERJA_PANEN norma
                 LEFT JOIN TN_HARGA_BARANG norma_harga
                  ON     norma.MATERIAL_CODE = norma_harga.MATERIAL_CODE
                     AND norma.BA_CODE = norma_harga.BA_CODE
                     AND norma.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
                 LEFT JOIN TM_MATERIAL material
                  ON     norma.MATERIAL_CODE = material.MATERIAL_CODE
                     AND norma.BA_CODE = material.BA_CODE
                     AND norma.PERIOD_BUDGET = material.PERIOD_BUDGET
                 LEFT JOIN TM_ORGANIZATION B
                  ON norma.BA_CODE = B.BA_CODE
               WHERE     norma.DELETE_USER IS NULL
                 AND TO_CHAR (norma.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (norma.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY norma.PERIOD_BUDGET,
                 norma.BA_CODE,
                 norma.MATERIAL_CODE,
                 material.MATERIAL_NAME
            UNION ALL
              -- RKT VRA --
              SELECT RKT.PERIOD_BUDGET,
                 RKT.BA_CODE,
                 'RKT' GROUP01,
                 'VRA' GROUP02,
                 RKT.VRA_CODE CODE,
                 RKT.DESCRIPTION_VRA AKTIVITAS,
                 CASE
                  WHEN MAX (RKT.UPDATE_TIME) IS NULL
                  THEN
                     MAX (RKT.INSERT_TIME)
                  ELSE
                     MAX (RKT.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (RKT.TOTAL_QTY_TAHUN) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM    (SELECT report.PERIOD_BUDGET PERIOD_BUDGET,
                      report.INTERNAL_ORDER,
                      report.KOMPARISON_OUT_HM_KM,
                      report.RP_QTY_BULAN_BUDGET,
                      report.TRX_RKT_VRA_CODE,
                      ORG.REGION_CODE,
                      report.BA_CODE,
                      master_vra.VRA_SUB_CAT_DESCRIPTION,
                      master_vra.VRA_CODE,
                      master_vra.TYPE VRA_TYPE,
                      report.DESCRIPTION_VRA DESCRIPTION_VRA,
                      report.JUMLAH_ALAT,
                      report.TAHUN_ALAT,
                      master_vra.UOM,
                      report.QTY_DAY,
                      report.DAY_YEAR_VRA,
                      report.QTY_YEAR,
                      report.TOTAL_BIAYA,
                      report.TOTAL_RP_QTY,
                      report.TOTAL_QTY_TAHUN,
                      report.JUMLAH_OPERATOR,
                      report.GAJI_OPERATOR,
                      report.TOTAL_GAJI_OPERATOR,
                      report.TUNJANGAN_OPERATOR,
                      report.TOTAL_TUNJANGAN_OPERATOR,
                      report.TOTAL_GAJI_TUNJANGAN_OPERATOR,
                      report.RP_QTY_OPERATOR,
                      report.JUMLAH_HELPER,
                      report.GAJI_HELPER,
                      report.TOTAL_GAJI_HELPER,
                      report.TUNJANGAN_HELPER,
                      report.TOTAL_TUNJANGAN_HELPER,
                      report.TOTAL_GAJI_TUNJANGAN_HELPER,
                      report.RP_QTY_HELPER,
                      report.RVRA1_VALUE1,                      -- PAJAK
                      report.RVRA1_VALUE2,
                      report.RVRA1_VALUE3,
                      report.RVRA2_VALUE1,                -- BAHAN BAKAR
                      report.RVRA2_VALUE2,
                      report.RVRA2_VALUE3,
                      report.RVRA3_VALUE1,                  -- OLI MESIN
                      report.RVRA3_VALUE2,
                      report.RVRA3_VALUE3,
                      report.RVRA4_VALUE1,              -- OLI TRANSMISI
                      report.RVRA4_VALUE2,
                      report.RVRA4_VALUE3,
                      report.RVRA5_VALUE1,            -- MINYAK HIDROLIC
                      report.RVRA5_VALUE2,
                      report.RVRA5_VALUE3,
                      report.RVRA6_VALUE1,                     -- GREASE
                      report.RVRA6_VALUE2,
                      report.RVRA6_VALUE3,
                      report.RVRA7_VALUE1,                 -- FILTER OLI
                      report.RVRA7_VALUE2,
                      report.RVRA7_VALUE3,
                      report.RVRA8_VALUE1,            -- FILTER HIDROLIC
                      report.RVRA8_VALUE2,
                      report.RVRA8_VALUE3,
                      report.RVRA9_VALUE1,               -- FILTER SOLAR
                      report.RVRA9_VALUE2,
                      report.RVRA9_VALUE3,
                      report.RVRA10_VALUE1, -- FILTER SOLAR MOISTURE SEPARATOR
                      report.RVRA10_VALUE2,
                      report.RVRA10_VALUE3,
                      report.RVRA11_VALUE1,              -- FILTER UDARA
                      report.RVRA11_VALUE2,
                      report.RVRA11_VALUE3,
                      report.RVRA12_VALUE1,           -- GANTI SPAREPART
                      report.RVRA12_VALUE2,
                      report.RVRA12_VALUE3,
                      report.RVRA13_VALUE1,           --  GANTI BAN LUAR
                      report.RVRA13_VALUE2,
                      report.RVRA13_VALUE3,
                      report.RVRA14_VALUE1,           -- GANTI BAN DALAM
                      report.RVRA14_VALUE2,
                      report.RVRA14_VALUE3,
                      report.RVRA15_VALUE1,           -- SERVIS WORKSHOP
                      report.RVRA15_VALUE2,
                      report.RVRA15_VALUE3,
                      report.RVRA16_VALUE1,                  -- OVERHAUL
                      report.RVRA16_VALUE2,
                      report.RVRA16_VALUE3,
                      report.RVRA17_VALUE1,                    -- RENTAL
                      report.RVRA17_VALUE2,
                      report.RVRA17_VALUE3,
                      report.RVRA18_VALUE1,       -- SERVIS BENGKEL LUAR
                      report.RVRA18_VALUE2,
                      report.RVRA18_VALUE3,
                      report.RVRA19_VALUE1,
                      report.RVRA19_VALUE2,
                      report.RVRA19_VALUE3,
                      report.RVRA20_VALUE1,
                      report.RVRA20_VALUE2,
                      report.RVRA20_VALUE3,
                      vra_sum.VALUE RP_QTY_VRA_TYPE,
                      report.FLAG_TEMP,
                      report.INSERT_TIME,
                      report.UPDATE_TIME
                     FROM TR_RKT_VRA report
                      LEFT JOIN TM_VRA master_vra
                         ON report.VRA_CODE = master_vra.VRA_CODE
                      LEFT JOIN TR_RKT_VRA_SUM vra_sum
                         ON report.BA_CODE = vra_sum.BA_CODE
                          AND report.PERIOD_BUDGET =
                            vra_sum.PERIOD_BUDGET
                          AND report.VRA_CODE = vra_sum.VRA_CODE
                      LEFT JOIN TM_ORGANIZATION ORG
                         ON report.BA_CODE = ORG.BA_CODE
                    WHERE report.DELETE_USER IS NULL) RKT
                 LEFT JOIN
                  TM_STANDART_JAM_KERJA_WRA standar_jam_kerja
                 ON standar_jam_kerja.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                  AND standar_jam_kerja.BA_CODE = RKT.BA_CODE
               WHERE     1 = 1
                 AND TO_CHAR (RKT.PERIOD_BUDGET, 'RRRR') = '".$per_budg."' 
                 AND UPPER (RKT.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY RKT.PERIOD_BUDGET,
                 RKT.BA_CODE,
                 RKT.VRA_CODE,
                 RKT.DESCRIPTION_VRA
            UNION ALL
              -- RKT DISTRIBUSI NON INFRA --
              SELECT VRA.PERIOD_BUDGET,
                 VRA.BA_CODE,
                 'RKT' GROUP01,
                 'DISTRIBUSI NON INFRA' GROUP02,
                 VRA.VRA_CODE CODE,
                 TV.VRA_SUB_CAT_DESCRIPTION AKTIVITAS,
                 CASE
                  WHEN MAX (VRA.UPDATE_TIME) IS NULL
                  THEN
                     MAX (VRA.INSERT_TIME)
                  ELSE
                     MAX (VRA.UPDATE_TIME)
                 END
                  LAST_UPDATE,
                 CASE
                  WHEN MAX (VRA.PRICE_HM_KM) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM TR_RKT_VRA_DISTRIBUSI VRA
                 LEFT JOIN TM_ACTIVITY TA
                  ON TA.ACTIVITY_CODE = VRA.ACTIVITY_CODE
                 LEFT JOIN TM_ACTIVITY_MAPPING mapping
                  ON TA.ACTIVITY_CODE = mapping.ACTIVITY_CODE
                 LEFT JOIN TM_VRA TV
                  ON TV.VRA_CODE = VRA.VRA_CODE
                 LEFT JOIN TM_ORGANIZATION ORG
                  ON ORG.BA_CODE = VRA.BA_CODE
               WHERE     VRA.DELETE_TIME IS NULL
                 AND VRA.TIPE_TRANSAKSI = 'NON_INFRA'
                 AND mapping.ACTIVITY_GROUP_TYPE_CODE <> '-'
                 AND TO_CHAR (VRA.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                 AND UPPER (VRA.BA_CODE) LIKE UPPER ('%".$ba."%')
            GROUP BY VRA.PERIOD_BUDGET,
                 VRA.BA_CODE,
                 VRA.VRA_CODE,
                 TV.VRA_SUB_CAT_DESCRIPTION
            UNION ALL
            -- REPORT SUMMARY --
            SELECT TO_DATE ('') PERIOD_BUDGET,
                 '' BA_CODE,
                 'REPORT' GROUP01,
                 'SUMMARY' GROUP02,
                 '' CODE,
                 '' AKTIVITAS,
                 MAX (RPT.INSERT_TIME) LAST_UPDATE,
                 CASE
                  WHEN MAX (RPT.INSERT_TIME) IS NOT NULL THEN 'ADA'
                  ELSE 'TIDAK ADA'
                 END
                  STATUS
              FROM (SELECT MAX (INSERT_USER) INSERT_USER,
                     MAX (INSERT_TIME) INSERT_TIME
                  FROM TMP_RPT_DEV_COST
                 WHERE     1 = 1
                     AND TO_CHAR (PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                     AND UPPER (BA_CODE) LIKE UPPER ('%".$ba."%')
                UNION ALL
                SELECT MAX (INSERT_USER) INSERT_USER,
                     MAX (INSERT_TIME) INSERT_TIME
                  FROM TMP_RPT_EST_COST
                 WHERE     1 = 1
                     AND TO_CHAR (PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
                     AND UPPER (BA_CODE) LIKE UPPER ('%".$ba."%')) RPT) RPT_ALL
    ";
    
    
    
    if ($params['controller'] == 'download') {
      $params['search'] = ($params['search'] == 'AA==') ? "" : rawurldecode(base64_decode($params['search']));
    }
  
    
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel Status Hitung All ################################################### */
    
    return $result;
  }
  
  //generate report report kebutuhan aktivitas per BA --aries 16.06.2015
  public function reportKebAktivitasPerBa($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel estate cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $result['PERIOD'] = $params['budgetperiod'];
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $result['PERIOD'] = $this->_period;
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN ( SELECT *
                FROM (   
                SELECT PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               ACTIVITY_DESC,
               TIPE_TRANSAKSI,
               ACTIVITY_CODE,
               SUB_COST_ELEMENT_DESC,
               COST_ELEMENT,
               SUB_COST_ELEMENT,
               KETERANGAN,
               UOM,
               SUM (QTY_JAN) QTY_JAN,
               SUM (QTY_FEB) QTY_FEB,
               SUM (QTY_MAR) QTY_MAR,
               SUM (QTY_APR) QTY_APR,
               SUM (QTY_MAY) QTY_MAY,
               SUM (QTY_JUN) QTY_JUN,
               SUM (QTY_JUL) QTY_JUL,
               SUM (QTY_AUG) QTY_AUG,
               SUM (QTY_SEP) QTY_SEP,
               SUM (QTY_OCT) QTY_OCT,
               SUM (QTY_NOV) QTY_NOV,
               SUM (QTY_DEC) QTY_DEC,
               SUM (COST_JAN) COST_JAN,
               SUM (COST_FEB) COST_FEB,
               SUM (COST_MAR) COST_MAR,
               SUM (COST_APR) COST_APR,
               SUM (COST_MAY) COST_MAY,
               SUM (COST_JUN) COST_JUN,
               SUM (COST_JUL) COST_JUL,
               SUM (COST_AUG) COST_AUG,
               SUM (COST_SEP) COST_SEP,
               SUM (COST_OCT) COST_OCT,
               SUM (COST_NOV) COST_NOV,
               SUM (COST_DEC) COST_DEC,
               SUM (QTY_SETAHUN) QTY_SETAHUN,
               SUM (COST_SETAHUN) COST_SETAHUN
            FROM TMP_RPT_KEB_EST_COST_BLOCK REPORT
             GROUP BY PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             ACTIVITY_DESC,
             TIPE_TRANSAKSI,
             ACTIVITY_CODE,
             SUB_COST_ELEMENT_DESC,
             COST_ELEMENT,
             SUB_COST_ELEMENT,
             KETERANGAN,
             UOM) ALL_ACT
          WHERE 1 = 1
             $where   
        ) REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
           AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
           AND NVL (MAPP.COST_ELEMENT, 'NA') =
             NVL (REPORT.COST_ELEMENT, 'NA')
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = REPORT.BA_CODE
          WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
      ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel kebutuhan aktivitas estate cost (BA) ################################################### */
    
    return $result;
  }
  
  //generate report report kebutuhan aktivitas per AFD --aries 16.06.2015
  public function reportKebAktivitasPerAfd($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel estate cost AFD ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      
      $where1 .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      
      $result['PERIOD'] = $params['budgetperiod'];
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      
      $where1 .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      
      $result['PERIOD'] = $this->_period;
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
      
      $where1 .= "
        AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
      
      $where1 .= "
        AND ALL_ACT.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM (  SELECT PERIOD_BUDGET,
                 REGION_CODE,
                 BA_CODE,
                 AFD_CODE,
                 ACTIVITY_DESC,
                 TIPE_TRANSAKSI,
                 ACTIVITY_CODE,
                 SUB_COST_ELEMENT_DESC,
                 COST_ELEMENT,
                 SUB_COST_ELEMENT,
                 KETERANGAN,
                 UOM,
                 SUM (QTY_JAN) QTY_JAN,
                 SUM (QTY_FEB) QTY_FEB,
                 SUM (QTY_MAR) QTY_MAR,
                 SUM (QTY_APR) QTY_APR,
                 SUM (QTY_MAY) QTY_MAY,
                 SUM (QTY_JUN) QTY_JUN,
                 SUM (QTY_JUL) QTY_JUL,
                 SUM (QTY_AUG) QTY_AUG,
                 SUM (QTY_SEP) QTY_SEP,
                 SUM (QTY_OCT) QTY_OCT,
                 SUM (QTY_NOV) QTY_NOV,
                 SUM (QTY_DEC) QTY_DEC,
                 SUM (COST_JAN) COST_JAN,
                 SUM (COST_FEB) COST_FEB,
                 SUM (COST_MAR) COST_MAR,
                 SUM (COST_APR) COST_APR,
                 SUM (COST_MAY) COST_MAY,
                 SUM (COST_JUN) COST_JUN,
                 SUM (COST_JUL) COST_JUL,
                 SUM (COST_AUG) COST_AUG,
                 SUM (COST_SEP) COST_SEP,
                 SUM (COST_OCT) COST_OCT,
                 SUM (COST_NOV) COST_NOV,
                 SUM (COST_DEC) COST_DEC,
                 SUM (QTY_SETAHUN) QTY_SETAHUN,
                 SUM (COST_SETAHUN) COST_SETAHUN
              FROM TMP_RPT_KEB_EST_COST_BLOCK REPORT
              GROUP BY PERIOD_BUDGET,
                 REGION_CODE,
                 BA_CODE,
                 AFD_CODE,
                 ACTIVITY_DESC,
                 TIPE_TRANSAKSI,
                 ACTIVITY_CODE,
                 SUB_COST_ELEMENT_DESC,
                 COST_ELEMENT,
                 SUB_COST_ELEMENT,
                 KETERANGAN,
                 UOM
            ) ALL_ACT
              WHERE 1 = 1 
              $where1
            )REPORT
              ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
              AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
              AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
            LEFT JOIN TM_ORGANIZATION ORG
              ON ORG.BA_CODE = REPORT.BA_CODE
            WHERE REPORT.ACTIVITY_CODE IS NOT NULL
            ORDER BY REPORT.PERIOD_BUDGET,
                 REPORT.BA_CODE,
                 REPORT.AFD_CODE,
                 $order_group
                 REPORT.ACTIVITY_CODE,
                 REPORT.COST_ELEMENT,
                 REPORT.KETERANGAN
          ";
    //echo $query; die;
    $sql = "SELECT COUNT(*) FROM ({$query})";
    //echo $sql;
    
    $result['count'] = $this->_db->fetchOne($sql);
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel kebutuhan aktivitas estate cost (BA) ################################################### */
    
    return $result;
  }
  
  //report kebutuhan aktivitas dev cost per BA
  public function reportKebAktivitasDevPerBa($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel development cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $result['PERIOD'] = $params['budgetperiod'];
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $result['PERIOD'] = $this->_period;
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN ( SELECT *
                FROM (              
               SELECT PERIOD_BUDGET,
               REGION_CODE,
               BA_CODE,
               ACTIVITY_DESC,
               TIPE_TRANSAKSI,
               ACTIVITY_CODE,
               SUB_COST_ELEMENT_DESC,
               COST_ELEMENT,
               SUB_COST_ELEMENT,
               KETERANGAN,
               UOM,
               SUM (QTY_JAN) QTY_JAN,
               SUM (QTY_FEB) QTY_FEB,
               SUM (QTY_MAR) QTY_MAR,
               SUM (QTY_APR) QTY_APR,
               SUM (QTY_MAY) QTY_MAY,
               SUM (QTY_JUN) QTY_JUN,
               SUM (QTY_JUL) QTY_JUL,
               SUM (QTY_AUG) QTY_AUG,
               SUM (QTY_SEP) QTY_SEP,
               SUM (QTY_OCT) QTY_OCT,
               SUM (QTY_NOV) QTY_NOV,
               SUM (QTY_DEC) QTY_DEC,
               SUM (COST_JAN) COST_JAN,
               SUM (COST_FEB) COST_FEB,
               SUM (COST_MAR) COST_MAR,
               SUM (COST_APR) COST_APR,
               SUM (COST_MAY) COST_MAY,
               SUM (COST_JUN) COST_JUN,
               SUM (COST_JUL) COST_JUL,
               SUM (COST_AUG) COST_AUG,
               SUM (COST_SEP) COST_SEP,
               SUM (COST_OCT) COST_OCT,
               SUM (COST_NOV) COST_NOV,
               SUM (COST_DEC) COST_DEC,
               SUM (QTY_SETAHUN) QTY_SETAHUN,
               SUM (COST_SETAHUN) COST_SETAHUN
            FROM TMP_RPT_KEB_DEV_COST_BLOCK REPORT             
        GROUP BY PERIOD_BUDGET,
             REGION_CODE,
             BA_CODE,
             ACTIVITY_DESC,
             TIPE_TRANSAKSI,
             ACTIVITY_CODE,
             SUB_COST_ELEMENT_DESC,
             COST_ELEMENT,
             SUB_COST_ELEMENT,
             KETERANGAN,
             UOM) ALL_ACT
          WHERE 1 = 1
             $where   
        ) REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
           AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
           AND NVL (MAPP.COST_ELEMENT, 'NA') =
             NVL (REPORT.COST_ELEMENT, 'NA')
        LEFT JOIN TM_ORGANIZATION ORG
          ON ORG.BA_CODE = REPORT.BA_CODE
          WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
      ";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    /* ################################################### generate excel kebutuhan aktivitas estate cost (BA) ################################################### */
    
    return $result;
  }
  
  //generate report report kebutuhan aktivitas DEV Cost per AFD --aries 16.06.2015
  public function reportKebAktivitasDevPerAfd($params = array())
  {
    $where = $select_group = $order_group = "";
    $params['uniq_code'] = $this->_global->genFileName();
    
    /* ################################################### generate excel development cost ################################################### */
    //cari jumlah group report
    $query = "
      SELECT MAX(LVL) - 1
      FROM (
        SELECT  GROUP_CODE, 
          CONNECT_BY_ISCYCLE \"CYCLE\",
          LEVEL as LVL, 
          SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
      FROM TM_RPT_MAPPING_ACT
      WHERE level > 1
      START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
      CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
      )
    ";
    $result['max_group'] = $this->_db->fetchOne($query);

    for ($i = 1 ; $i <= $result['max_group'] ; $i++){
      $select_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
        (SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
      ";
      $order_group .= "
        STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
      ";
    }
    
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      
      $where1 .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      
      $result['PERIOD'] = $params['budgetperiod'];
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      
      $where1 .= "
        AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      
      $result['PERIOD'] = $this->_period;
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
      
      $where1 .= "
        AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
      
      $where1 .= "
        AND ALL_ACT.BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "
      SELECT  $select_group
          REPORT.*,
          ORG.ESTATE_NAME
      FROM (
        SELECT  CASE
              WHEN INSTR(HIRARKI, '/',1, 2) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
              ELSE NULL
            END GROUP01,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 3) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP02,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 4) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP03,
            CASE
              WHEN INSTR(HIRARKI, '/',1, 5) <> 0
              THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
              ELSE NULL
            END GROUP04,
            GROUP_CODE
        FROM (
          SELECT  TO_CHAR(HIRARKI)  AS HIRARKI, 
              LVL, 
              TO_CHAR(GROUP_CODE) AS GROUP_CODE
          FROM (
            SELECT  GROUP_CODE, 
                CONNECT_BY_ISCYCLE \"CYCLE\",
                LEVEL as LVL, 
                SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
            FROM TM_RPT_MAPPING_ACT
            WHERE level > 1
            START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
            CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
          )
          GROUP BY HIRARKI, LVL, GROUP_CODE
          ORDER BY HIRARKI
        )
      ) STRUKTUR_REPORT
      LEFT JOIN TM_RPT_MAPPING_ACT MAPP
        ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
      LEFT JOIN (
        SELECT *
        FROM (
          SELECT    PERIOD_BUDGET,
                 REGION_CODE,
                 BA_CODE,
                 AFD_CODE,
                 ACTIVITY_DESC,
                 TIPE_TRANSAKSI,
                 ACTIVITY_CODE,
                 SUB_COST_ELEMENT_DESC,
                 COST_ELEMENT,
                 SUB_COST_ELEMENT,
                 KETERANGAN,
                 UOM,
                 SUM (QTY_JAN) QTY_JAN,
                 SUM (QTY_FEB) QTY_FEB,
                 SUM (QTY_MAR) QTY_MAR,
                 SUM (QTY_APR) QTY_APR,
                 SUM (QTY_MAY) QTY_MAY,
                 SUM (QTY_JUN) QTY_JUN,
                 SUM (QTY_JUL) QTY_JUL,
                 SUM (QTY_AUG) QTY_AUG,
                 SUM (QTY_SEP) QTY_SEP,
                 SUM (QTY_OCT) QTY_OCT,
                 SUM (QTY_NOV) QTY_NOV,
                 SUM (QTY_DEC) QTY_DEC,
                 SUM (COST_JAN) COST_JAN,
                 SUM (COST_FEB) COST_FEB,
                 SUM (COST_MAR) COST_MAR,
                 SUM (COST_APR) COST_APR,
                 SUM (COST_MAY) COST_MAY,
                 SUM (COST_JUN) COST_JUN,
                 SUM (COST_JUL) COST_JUL,
                 SUM (COST_AUG) COST_AUG,
                 SUM (COST_SEP) COST_SEP,
                 SUM (COST_OCT) COST_OCT,
                 SUM (COST_NOV) COST_NOV,
                 SUM (COST_DEC) COST_DEC,
                 SUM (QTY_SETAHUN) QTY_SETAHUN,
                 SUM (COST_SETAHUN) COST_SETAHUN
              FROM TMP_RPT_KEB_DEV_COST_BLOCK REPORT
            GROUP BY PERIOD_BUDGET,
                 REGION_CODE,
                 BA_CODE,
                 AFD_CODE,
                 ACTIVITY_DESC,
                 TIPE_TRANSAKSI,
                 ACTIVITY_CODE,
                 SUB_COST_ELEMENT_DESC,
                 COST_ELEMENT,
                 SUB_COST_ELEMENT,
                 KETERANGAN,
                 UOM
        ) ALL_ACT
        WHERE 1 = 1 
        $where1
      )REPORT
        ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
        AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
        AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
      LEFT JOIN TM_ORGANIZATION ORG
        ON ORG.BA_CODE = REPORT.BA_CODE
      WHERE REPORT.ACTIVITY_CODE IS NOT NULL
      ORDER BY REPORT.PERIOD_BUDGET,
           REPORT.BA_CODE,
           REPORT.AFD_CODE,
           $order_group
           REPORT.ACTIVITY_CODE,
           REPORT.COST_ELEMENT,
           REPORT.KETERANGAN
    ";

    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }

    return $result;
  }
  
  //report HK VS MPP
  function reportHkMppBa(){
    //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $result['PERIOD'] = $params['budgetperiod'];
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $result['PERIOD'] = $this->_period;
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
      $result['BA'] = $params['src_ba'];
    }
    
    $query = "SELECT TMP.BA_CODE,
             JOB.JOB_DESCRIPTION,
             TMP.QTY_SETAHUN,
             TMROLL.HK,
             (TMP.QTY_SETAHUN / TMROLL.HK) AS HHK,
             TRROLL.MPP_PERIOD_BUDGET AS MPP,
             ( (TMP.QTY_SETAHUN / TMROLL.HK) - TRROLL.MPP_PERIOD_BUDGET) AS SELISIH
          FROM (  
           SELECT PERIOD_BUDGET,
                 BA_CODE,
                 SUB_COST_ELEMENT,
                 SUM (QTY_SETAHUN) AS QTY_SETAHUN
          FROM (
            SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   SUB_COST_ELEMENT,
                   QTY_SETAHUN
                FROM TMP_RPT_KEB_DEV_COST_BLOCK
                 WHERE SUB_COST_ELEMENT IN
                       ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
                   $where 
             UNION ALL   
             SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   SUB_COST_ELEMENT,
                   QTY_SETAHUN
                FROM TMP_RPT_KEB_EST_COST_BLOCK
                 WHERE SUB_COST_ELEMENT IN
                       ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
                   $where 
              )
             GROUP BY PERIOD_BUDGET, BA_CODE, SUB_COST_ELEMENT
            ) TMP
             LEFT JOIN TM_JOB_TYPE JOB
              ON JOB.JOB_CODE = TMP.SUB_COST_ELEMENT
             LEFT JOIN TM_CHECKROLL_HK TMROLL
              ON     TMROLL.BA_CODE = TMP.BA_CODE
               AND TMROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
               AND TMROLL.EMPLOYEE_STATUS = 'KT'
             LEFT JOIN TR_RKT_CHECKROLL TRROLL
              ON     TRROLL.BA_CODE = TMP.BA_CODE
               AND TRROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
               AND TRROLL.JOB_CODE = TMP.SUB_COST_ELEMENT
               AND TRROLL.EMPLOYEE_STATUS = 'KT'";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }
    
    return $result;
  }
  
  function reportHkMppAfd(){
  //filter periode buget
    if($params['budgetperiod'] != ''){
      $where .= "
        AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
      ";
      $result['PERIOD'] = $params['budgetperiod'];
    }else{
      $where .= "
        AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
      ";
      $result['PERIOD'] = $this->_period;
    }
    
    //filter region
    if ($params['src_region_code'] != '') {
      $where .= "
        AND REGION_CODE = '".$params['src_region_code']."'
      ";
    }
    
    //filter BA
    if ($params['key_find'] != '') {
      $where .= "
        AND BA_CODE = '".$params['key_find']."'
      ";
    }
    
    $query = "SELECT TMP.BA_CODE,
            JOB.JOB_DESCRIPTION,
            TMP.AFD_CODE,
            TMP.QTY_SETAHUN,
            TMROLL.HK,
            (TMP.QTY_SETAHUN/TMROLL.HK) AS HHK,
            TRROLL.MPP_PERIOD_BUDGET AS MPP,
            ((TMP.QTY_SETAHUN/TMROLL.HK) - TRROLL.MPP_PERIOD_BUDGET) AS SELISIH
          FROM    (  
          SELECT PERIOD_BUDGET,
                 BA_CODE,
                 AFD_CODE,
                 SUB_COST_ELEMENT,
                 SUM (QTY_SETAHUN) AS QTY_SETAHUN
          FROM (
          SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   SUB_COST_ELEMENT,
                   QTY_SETAHUN
                FROM TMP_RPT_KEB_DEV_COST_BLOCK
                 WHERE SUB_COST_ELEMENT IN
                       ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
                   $where 
             UNION ALL   
             SELECT PERIOD_BUDGET,
                   BA_CODE,
                   AFD_CODE,
                   BLOCK_CODE,
                   SUB_COST_ELEMENT,
                   QTY_SETAHUN
                FROM TMP_RPT_KEB_EST_COST_BLOCK
                 WHERE SUB_COST_ELEMENT IN
                       ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
                   $where
              )
             GROUP BY PERIOD_BUDGET, BA_CODE, AFD_CODE, SUB_COST_ELEMENT
             ) TMP
             LEFT JOIN TM_JOB_TYPE JOB
             ON JOB.JOB_CODE = TMP.SUB_COST_ELEMENT
             LEFT JOIN
              TM_CHECKROLL_HK TMROLL
             ON     TMROLL.BA_CODE = TMP.BA_CODE
              AND TMROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
              AND TMROLL.EMPLOYEE_STATUS = 'KT'
             LEFT JOIN
              TR_RKT_CHECKROLL TRROLL
             ON     TRROLL.BA_CODE = TMP.BA_CODE
              AND TRROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
               AND TRROLL.JOB_CODE = TMP.SUB_COST_ELEMENT
              AND TRROLL.EMPLOYEE_STATUS = 'KT'
              ORDER BY AFD_CODE";
    
    $sql = "SELECT COUNT(*) FROM ({$query})";
    $result['count'] = $this->_db->fetchOne($sql);
    
    $rows = $this->_db->fetchAll("{$query}");
      
    if (!empty($rows)) {
      foreach ($rows as $idx => $row) {
        $result['rows'][] = $row;
      }
    }

    return $result;
  }
  
  ////////////////////////////////////////////////// JANGAN DIUBAH //////////////////////////////////////////////////
  //inisialisasi list yang akan ditampilkan
  public function initList($params = array())
  {
    $result = array();
    $initAction = str_replace(' ', '', ucwords(str_replace('-', ' ', $params['action'])));
    
    $result = $this->$initAction($params);

    return $result;
  }
  ////////////////////////////////////////////////// JANGAN DIUBAH //////////////////////////////////////////////////
}

