<?php
/*
=========================================================================================================================
Project				: 	Budgeting & Planning System
Versi				: 	2.0.0
Deskripsi			: 	Model Class untuk Summary Report
Function 			:	- getInput							: YIR 20/06/2014	: setting input untuk region
						- tmpRptDevCost						: SID 04/08/2014	: generate temp table untuk dev cost
						- delTmpRptDevCost					: SID 04/08/2014	: hapus temp table untuk dev cost
						- reportDevelopmentCost				: SID 04/08/2014	: generate report development cost
						- reportSummaryDevelopmentCost		: SID 04/08/2014	: generate report summary development cost
						- tmpRptEstCost						: SID 05/08/2014	: generate temp table untuk estate cost
						- delTmpRptEstCost					: SID 05/08/2014	: hapus temp table untuk estate cost
						- reportEstateCost					: SID 05/08/2014	: generate report estate cost
						- reportSummaryEstateCost			: SID 05/08/2014	: generate report summary estate cost
						- reportCapex						: SID 05/08/2014	: generate report CAPEX
						- reportSebaranHa					: SID 23/08/2013	: generate report sebaran HA
						- reportVraUtilisasi				: SID 06/08/2014	: generate report vra utilisasi per BA
						- reportVraUtilisasiRegion			: SID 22/08/2014	: generate report vra utilisasi per region
						- getLastGenerate					: SID 12/08/2014	: get last generate date
						- querySummaryDevelopmentCostPerBa	: SID 25/08/2014	: query summary development cost per BA
						- querySummaryDevelopmentCostPerAfd	: SID 28/08/2014	: query summary development cost per AFD
						- querySummaryEstateCostPerBa		: SID 25/08/2014	: query summary estate cost per BA
						- querySummaryEstateCostPerAfd		: SID 28/08/2014	: query summary estate cost per AFD
						- modReviewDevelopmentCostPerBa		: SID 25/08/2014	: generate module review development cost per BA
						- modReviewDevelopmentCostPerAfd	: SID 28/08/2014	: generate module review development cost per AFD
						- modReviewEstateCostPerBa			: SID 25/08/2014	: generate module review estate cost per BA
						- modReviewEstateCostPerAfd			: SID 28/08/2014	: generate module review estate cost per AFD
						- modReviewProduksiPerAfd			: SID 28/08/2014	: generate module review produksi per AFD
						- modReviewProduksiPerBa			: SID 28/08/2014	: generate module review produksi per BA
						- modReviewProduksiPerRegion		: SID 28/08/2014	: generate module review produksi per region
						- reportHkDevelopmentCost			: YUS 09/09/2014	: generate report HK development cost
						- reportHkEstateCost				: YUS 10/09/2014	: generate report HK estate cost
						- reportNormaPupukTbm				: NBU 30/07/2015	: generate report Norma Pupuk TBM
Disusun Oleh		: 	IT Enterprise Solution - PT Triputra Agro Persada
Developer			: 	Sabrina Ingrid Davita
Dibuat Tanggal		: 	23/08/2013
Update Terakhir		:	05/08/2014
Revisi				:	
	NBU	18/05/2015	: - Ubah perhitungan sebaran di estate cost (Line 6054)
	NBU	30/07/2015	: - Penambahan report Norma Pupuk Tbm
=========================================================================================================================
*/
class Application_Model_Report
{
    private $_db = null;
    private $_global = null;
    private $_siteCode = '';

    public function __construct()
    {
        $this->_db = Zend_Registry::get('db');
        $this->_global = new Application_Model_Global();
		$this->_formula = new Application_Model_Formula();
        $this->_siteCode = Zend_Registry::get('auth')->getIdentity()->BA_CODE;
		$this->_userName = Zend_Registry::get('auth')->getIdentity()->USER_NAME;
		$this->_referenceRole = Zend_Registry::get('auth')->getIdentity()->REFERENCE_ROLE; // TAMBAHAN : Sabrina - 19/06/2013
		$this->_userRole = Zend_Registry::get('auth')->getIdentity()->USER_ROLE; // TAMBAHAN : Sabrina - 19/06/2013
		
		$sess = new Zend_Session_Namespace('period');
		$this->_period = $sess->period;
    }
	
	//setting input untuk region dan maturity stage
	public function getInput()
    {
        $result = array();

        $table = new Application_Model_DbOptions();
        $options = array();
		$options['optRegion'] = $table->getRegion();

        // elements
		$result['src_region_code'] = array(
            'type'    => 'select',
            'name'    => 'src_region_code',
            'value'   => '',
            'options' => $options['optRegion'],
            'ext'     => 'onChange=\'$("#src_ba").val("");\'', //src_afd
			'style'   => 'width:200px;background-color: #e6ffc8;'
        );

        return $result;
    }
	
	//generate temp table untuk dev cost
	public function tmpRptDevCost($params = array())
    {
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND RKT.BA_CODE = '".$params['key_find']."'
            ";
        }
		
		//generate dev cost per BA
		$query = "
			INSERT INTO TMP_RPT_DEV_COST (
				PERIOD_BUDGET, 
				REGION_CODE, 
				BA_CODE, 
				TIPE_TRANSAKSI, 
				ACTIVITY_CODE, 
				ACTIVITY_DESC, 
				COST_ELEMENT, 
				KETERANGAN,
				UOM, 
				QTY_JAN, 
				QTY_FEB, 
				QTY_MAR, 
				QTY_APR, 
				QTY_MAY, 
				QTY_JUN, 
				QTY_JUL, 
				QTY_AUG, 
				QTY_SEP, 
				QTY_OCT, 
				QTY_NOV, 
				QTY_DEC, 
				QTY_SMS1, 
				QTY_SMS2, 
				QTY_SETAHUN, 
				COST_JAN, 
				COST_FEB, 
				COST_MAR, 
				COST_APR, 
				COST_MAY, 
				COST_JUN, 
				COST_JUL, 
				COST_AUG, 
				COST_SEP, 
				COST_OCT, 
				COST_NOV, 
				COST_DEC, 
				COST_SMS1, 
				COST_SMS2, 
				COST_SETAHUN, 
				RP_ROTASI_SMS1, 
				RP_ROTASI_SMS2, 
				RP_ROTASI_TOTAL,
				INSERT_USER, 
				INSERT_TIME
			)
			SELECT 	PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					TIPE_TRANSAKSI,
					ACTIVITY_CODE,
					ACTIVITY_DESC,
					COST_ELEMENT,
					KETERANGAN,
					UOM,
					SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
					SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
					SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
					SUM (NVL (QTY_APR, 0)) AS QTY_APR,
					SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
					SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
					SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
					SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
					SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
					SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
					SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
					SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
					(SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
					 + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))) AS QTY_SMS1,
					(SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
					 + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SMS2,
					(SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
					 + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
					 + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
					 + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SETAHUN,
					SUM (NVL (COST_JAN, 0)) COST_JAN,
					SUM (NVL (COST_FEB, 0)) COST_FEB,
					SUM (NVL (COST_MAR, 0)) COST_MAR,
					SUM (NVL (COST_APR, 0)) COST_APR,
					SUM (NVL (COST_MAY, 0)) COST_MAY,
					SUM (NVL (COST_JUN, 0)) COST_JUN,
					SUM (NVL (COST_JUL, 0)) COST_JUL,
					SUM (NVL (COST_AUG, 0)) COST_AUG,
					SUM (NVL (COST_SEP, 0)) COST_SEP,
					SUM (NVL (COST_OCT, 0)) COST_OCT,
					SUM (NVL (COST_NOV, 0)) COST_NOV,
					SUM (NVL (COST_DEC, 0)) COST_DEC,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
					(SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
					 + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
					SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
					SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
					CASE
						WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
						THEN SUM (NVL (RP_ROTASI_SMS1, 0))
						ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
					END AS RP_ROTASI_TOTAL,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
			FROM (
				-- RKT LAND CLEARING
				SELECT  RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'LC' TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						RKT.DIS_COST_JAN COST_JAN,
						RKT.DIS_COST_FEB COST_FEB,
						RKT.DIS_COST_MAR COST_MAR,
						RKT.DIS_COST_APR COST_APR,
						RKT.DIS_COST_MAY COST_MAY,
						RKT.DIS_COST_JUN COST_JUN,
						RKT.DIS_COST_JUL COST_JUL,
						RKT.DIS_COST_AUG COST_AUG,
						RKT.DIS_COST_SEP COST_SEP,
						RKT.DIS_COST_OCT COST_OCT,
						RKT.DIS_COST_NOV COST_NOV,
						RKT.DIS_COST_DEC COST_DEC,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
				FROM TR_RKT_LC_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT_LC RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS1 IN (NULL, 'TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						CASE
							WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
							THEN 'TBM0'
							ELSE RKT.MATURITY_STAGE_SMS1
						END as TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
					$where
				UNION ALL	
				-- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
					$where
				UNION ALL	
				-- RKT TANAM : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						CASE
							WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
							THEN 'TBM0'
							ELSE RKT.MATURITY_STAGE_SMS1
						END as TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_HECTARE_STATEMENT HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
					AND HS.BLOCK_CODE = RKT.BLOCK_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
					AND HS.STATUS = 'PROYEKSI'
					$where
				UNION ALL	
				-- RKT TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_HECTARE_STATEMENT HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
					AND HS.BLOCK_CODE = RKT.BLOCK_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
					AND HS.STATUS = 'PROYEKSI'
					$where
				UNION ALL	
				-- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						CASE
							WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
							THEN 'TBM0'
							ELSE RKT.MATURITY_STAGE_SMS1
						END as TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
					$where
				UNION ALL	
				-- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					$where
				UNION ALL
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
						RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
						RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
						RKT.QTY_TUNGGAL_APR AS QTY_APR,
						RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
						RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
						(RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
						(RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
						(RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
						(RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
						(RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 1
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020300'
					$where
				UNION ALL	
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
						RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
						RKT.QTY_TUNGGAL_SEP AS QTY_SEP,
						RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
						RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
						RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						(RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
						(RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
						(RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
						(RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
						(RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
						(RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 2
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020300'
					$where
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
						RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
						RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
						RKT.QTY_MAJEMUK_APR AS QTY_APR,
						RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
						RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
						(RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
						(RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
						(RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
						(RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
						(RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 1
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020400'
					$where
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
						RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
						RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
						RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
						RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
						RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						(RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
						(RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
						(RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
						(RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
						(RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
						(RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 2
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020400'
					$where
				UNION ALL	
				-- RKT PUPUK TUNGGAL SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_NAME,
						COST.COST_ELEMENT,
						'' AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_TOTAL_KG_PUPUK KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL	
				-- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_NAME,
						COST.COST_ELEMENT,
						'' AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_TOTAL_KG_PUPUK KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM0
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TBM0' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_RELATION_COST RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							SUM (HS.SMS1_TBM0) SMS1_TBM0,
							SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
							SUM (HS.SMS2_TBM0) SMS2_TBM0,
							SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
					GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM1
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TBM1' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_RELATION_COST RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							SUM (HS.SMS1_TBM1) SMS1_TBM1,
							SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
							SUM (HS.SMS2_TBM1) SMS2_TBM1,
							SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
					GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM2
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TBM2' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_RELATION_COST RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							SUM (HS.SMS1_TBM2) SMS1_TBM2,
							SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
							SUM (HS.SMS2_TBM2) SMS2_TBM2,
							SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
					GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM3
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TBM3' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_RELATION_COST RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							SUM (HS.SMS1_TBM3) SMS1_TBM3,
							SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
							SUM (HS.SMS2_TBM3) SMS2_TBM3,
							SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
					GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL
				-- ALOKASI CHECKROLL	
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.MATURITY_STAGE AS TIPE_TRANSAKSI,
						RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
						RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
						'LABOUR' AS COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN,
						RKT.DIS_FEB,
						RKT.DIS_MAR,
						RKT.DIS_APR,
						RKT.DIS_MAY,
						RKT.DIS_JUN,
						RKT.DIS_JUL,
						RKT.DIS_AUG,
						RKT.DIS_SEP,
						RKT.DIS_OCT,
						RKT.DIS_NOV,
						RKT.DIS_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RPT_DISTRIBUSI_COA RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.REPORT_TYPE = 'CR_ALOKASI'
					AND RKT.DELETE_USER IS NULL
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					$where
			) REPORT
			GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				TIPE_TRANSAKSI,
				ACTIVITY_CODE,
				ACTIVITY_DESC,
				COST_ELEMENT,
				KETERANGAN,
				UOM
		";

		$this->_db->query($query);
		$this->_db->commit();
		
		//generate dev cost per AFD
		$query = "
			INSERT INTO TMP_RPT_DEV_COST_AFD (
				PERIOD_BUDGET, 
				REGION_CODE, 
				BA_CODE, 
				AFD_CODE, 
				TIPE_TRANSAKSI, 
				ACTIVITY_CODE, 
				ACTIVITY_DESC, 
				COST_ELEMENT, 
				KETERANGAN,
				UOM, 
				QTY_JAN, 
				QTY_FEB, 
				QTY_MAR, 
				QTY_APR, 
				QTY_MAY, 
				QTY_JUN, 
				QTY_JUL, 
				QTY_AUG, 
				QTY_SEP, 
				QTY_OCT, 
				QTY_NOV, 
				QTY_DEC, 
				QTY_SMS1, 
				QTY_SMS2, 
				QTY_SETAHUN, 
				COST_JAN, 
				COST_FEB, 
				COST_MAR, 
				COST_APR, 
				COST_MAY, 
				COST_JUN, 
				COST_JUL, 
				COST_AUG, 
				COST_SEP, 
				COST_OCT, 
				COST_NOV, 
				COST_DEC, 
				COST_SMS1, 
				COST_SMS2, 
				COST_SETAHUN, 
				RP_ROTASI_SMS1, 
				RP_ROTASI_SMS2, 
				RP_ROTASI_TOTAL,
				INSERT_USER, 
				INSERT_TIME
			)
			SELECT 	PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					TIPE_TRANSAKSI,
					ACTIVITY_CODE,
					ACTIVITY_DESC,
					COST_ELEMENT,
					KETERANGAN,
					UOM,
					SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
					SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
					SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
					SUM (NVL (QTY_APR, 0)) AS QTY_APR,
					SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
					SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
					SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
					SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
					SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
					SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
					SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
					SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
					(SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
					 + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))) AS QTY_SMS1,
					(SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
					 + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SMS2,
					(SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
					 + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
					 + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
					 + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0))) AS QTY_SETAHUN,
					SUM (NVL (COST_JAN, 0)) COST_JAN,
					SUM (NVL (COST_FEB, 0)) COST_FEB,
					SUM (NVL (COST_MAR, 0)) COST_MAR,
					SUM (NVL (COST_APR, 0)) COST_APR,
					SUM (NVL (COST_MAY, 0)) COST_MAY,
					SUM (NVL (COST_JUN, 0)) COST_JUN,
					SUM (NVL (COST_JUL, 0)) COST_JUL,
					SUM (NVL (COST_AUG, 0)) COST_AUG,
					SUM (NVL (COST_SEP, 0)) COST_SEP,
					SUM (NVL (COST_OCT, 0)) COST_OCT,
					SUM (NVL (COST_NOV, 0)) COST_NOV,
					SUM (NVL (COST_DEC, 0)) COST_DEC,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
					(SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
					 + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
					SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
					SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
					CASE
						WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
						THEN SUM (NVL (RP_ROTASI_SMS1, 0))
						ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
					END AS RP_ROTASI_TOTAL,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
			FROM (
				-- RKT LAND CLEARING
				SELECT  RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'LC' TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						RKT.DIS_COST_JAN COST_JAN,
						RKT.DIS_COST_FEB COST_FEB,
						RKT.DIS_COST_MAR COST_MAR,
						RKT.DIS_COST_APR COST_APR,
						RKT.DIS_COST_MAY COST_MAY,
						RKT.DIS_COST_JUN COST_JUN,
						RKT.DIS_COST_JUL COST_JUL,
						RKT.DIS_COST_AUG COST_AUG,
						RKT.DIS_COST_SEP COST_SEP,
						RKT.DIS_COST_OCT COST_OCT,
						RKT.DIS_COST_NOV COST_NOV,
						RKT.DIS_COST_DEC COST_DEC,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
				FROM TR_RKT_LC_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT_LC RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS1 IN (NULL, 'TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						CASE
							WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
							THEN 'TBM0'
							ELSE RKT.MATURITY_STAGE_SMS1
						END as TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
					$where
				UNION ALL		
				-- RKT RAWAT selain TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI NOT LIKE 'TANAM%'
					$where
				UNION ALL	
				-- RKT TANAM : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						CASE
							WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
							THEN 'TBM0'
							ELSE RKT.MATURITY_STAGE_SMS1
						END as TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.RP_ROTASI_SMS1 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_HECTARE_STATEMENT HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
					AND HS.BLOCK_CODE = RKT.BLOCK_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
					AND HS.STATUS = 'PROYEKSI'
					$where
				UNION ALL	
				-- RKT TANAM : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.RP_ROTASI_SMS2 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_HECTARE_STATEMENT HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
					AND HS.BLOCK_CODE = RKT.BLOCK_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.TIPE_TRANSAKSI LIKE 'TANAM%'
					AND HS.STATUS = 'PROYEKSI'
					$where
				UNION ALL	
				-- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS1 IN ('NULL', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						CASE
							WHEN NVL(RKT.MATURITY_STAGE_SMS1, 'NA') = 'NA'
							THEN 'TBM0'
							ELSE RKT.MATURITY_STAGE_SMS1
						END as TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND NVL(RKT.MATURITY_STAGE_SMS1, 'NA') IN ('NA', 'TBM0', 'TBM1', 'TBM2', 'TBM3')
					$where
				UNION ALL	
				-- RKT PERKERASAN JALAN : MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						RKT.MATURITY_STAGE_SMS2 TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT 
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					$where
				UNION ALL
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
						RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
						RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
						RKT.QTY_TUNGGAL_APR AS QTY_APR,
						RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
						RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
						(RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
						(RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
						(RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
						(RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
						(RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 1
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020300'
					$where
				UNION ALL	
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
						RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
						RKT.QTY_TUNGGAL_SEP AS QTY_SEP,
						RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
						RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
						RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						(RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
						(RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
						(RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
						(RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
						(RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
						(RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 2
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020300'
					$where
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
						RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
						RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
						RKT.QTY_MAJEMUK_APR AS QTY_APR,
						RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
						RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
						(RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
						(RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
						(RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
						(RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
						(RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 1
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020400'
					$where
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						RKT.MATURITY_STAGE TIPE_TRANSAKSI,
						RKT.COA_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
						RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
						RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
						RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
						RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
						RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						(RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
						(RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
						(RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
						(RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
						(RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
						(RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
				LEFT JOIN TN_HARGA_BARANG HARGA
					ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HARGA.BA_CODE = RKT.BA_CODE
					AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
					AND HARGA.DELETE_USER IS NULL
					AND HARGA.FLAG_TEMP IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.SEMESTER = 2
					AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					AND RKT.COA_CODE = '5101020400'
					$where
				UNION ALL	
				-- RKT PUPUK TUNGGAL SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						COST.AFD_CODE,
						KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_NAME,
						COST.COST_ELEMENT,
						'' AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							AFD_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						AFD_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL	
				-- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						COST.AFD_CODE,
						KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_NAME,
						COST.COST_ELEMENT,
						'' AS KETERANGAN,
						'KG' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							AFD_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						AFD_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM0
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TBM0' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM0 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM0 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT 	SEBARAN_HA.PERIOD_BUDGET,
							SEBARAN_HA.BA_CODE,
							SEBARAN_HA.AFD_CODE,
							RKT.REPORT_TYPE,
							RKT.COA_CODE,
							RKT.COA_DESC,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
					FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2                                    
                        FROM V_REPORT_SEBARAN_HS SUMHA_AFD
                        LEFT JOIN (
                            SELECT PERIOD_BUDGET,
                                        BA_CODE,
                                        SUM(TOTAL_HA_SMS1) HA_BA_1,
                                        SUM(TOTAL_HA_SMS2) HA_BA_2
                            FROM V_REPORT_SEBARAN_HS
                            GROUP BY PERIOD_BUDGET,
                                        BA_CODE                                        
                        ) SUMHA_BA
                            ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                            AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                        GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2
					) SEBARAN_HA
					LEFT JOIN V_TOTAL_RELATION_COST RKT
						ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
						AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
				) RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							HS.AFD_CODE,
							HS.SMS1_TBM0,
							HS.TOTAL_HA_SMS1,
							HS.SMS2_TBM0,
							HS.TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM1
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TBM1' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM1 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM1 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT 	SEBARAN_HA.PERIOD_BUDGET,
							SEBARAN_HA.BA_CODE,
							SEBARAN_HA.AFD_CODE,
							RKT.REPORT_TYPE,
							RKT.COA_CODE,
							RKT.COA_DESC,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
					FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2                                    
                        FROM V_REPORT_SEBARAN_HS SUMHA_AFD
                        LEFT JOIN (
                            SELECT PERIOD_BUDGET,
                                        BA_CODE,
                                        SUM(TOTAL_HA_SMS1) HA_BA_1,
                                        SUM(TOTAL_HA_SMS2) HA_BA_2
                            FROM V_REPORT_SEBARAN_HS
                            GROUP BY PERIOD_BUDGET,
                                        BA_CODE                                        
                        ) SUMHA_BA
                            ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                            AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                        GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2
					) SEBARAN_HA
					LEFT JOIN V_TOTAL_RELATION_COST RKT
						ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
						AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
				) RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							HS.AFD_CODE,
							HS.SMS1_TBM1,
							HS.TOTAL_HA_SMS1,
							HS.SMS2_TBM1,
							HS.TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM2
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TBM2' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM2 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM2 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT 	SEBARAN_HA.PERIOD_BUDGET,
							SEBARAN_HA.BA_CODE,
							SEBARAN_HA.AFD_CODE,
							RKT.REPORT_TYPE,
							RKT.COA_CODE,
							RKT.COA_DESC,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
					FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2                                    
                        FROM V_REPORT_SEBARAN_HS SUMHA_AFD
                        LEFT JOIN (
                            SELECT PERIOD_BUDGET,
                                        BA_CODE,
                                        SUM(TOTAL_HA_SMS1) HA_BA_1,
                                        SUM(TOTAL_HA_SMS2) HA_BA_2
                            FROM V_REPORT_SEBARAN_HS
                            GROUP BY PERIOD_BUDGET,
                                        BA_CODE                                        
                        ) SUMHA_BA
                            ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                            AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                        GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2
					) SEBARAN_HA
					LEFT JOIN V_TOTAL_RELATION_COST RKT
						ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
						AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
				) RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.AFD_CODE,
							HS.BA_CODE,
							HS.SMS1_TBM2,
							HS.TOTAL_HA_SMS1,
							HS.SMS2_TBM2,
							HS.TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101) UNTUK TBM3
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TBM3' TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' AS KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TBM3 / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TBM3 / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT 	SEBARAN_HA.PERIOD_BUDGET,
							SEBARAN_HA.BA_CODE,
							SEBARAN_HA.AFD_CODE,
							RKT.REPORT_TYPE,
							RKT.COA_CODE,
							RKT.COA_DESC,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
					FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2                                    
                        FROM V_REPORT_SEBARAN_HS SUMHA_AFD
                        LEFT JOIN (
                            SELECT PERIOD_BUDGET,
                                        BA_CODE,
                                        SUM(TOTAL_HA_SMS1) HA_BA_1,
                                        SUM(TOTAL_HA_SMS2) HA_BA_2
                            FROM V_REPORT_SEBARAN_HS
                            GROUP BY PERIOD_BUDGET,
                                        BA_CODE                                        
                        ) SUMHA_BA
                            ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                            AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                        GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2
					) SEBARAN_HA
					LEFT JOIN V_TOTAL_RELATION_COST RKT
						ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
						AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
				) RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							HS.AFD_CODE,
							HS.SMS1_TBM3,
							HS.TOTAL_HA_SMS1,
							HS.SMS2_TBM3,
							HS.TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE <> '1212010101'
					$where
				UNION ALL
				-- ALOKASI CHECKROLL	
				SELECT SEBARAN_HA.PERIOD_BUDGET,
				   ORG.REGION_CODE,
				   SEBARAN_HA.BA_CODE,
				   SEBARAN_HA.AFD_CODE,
				   RKT.MATURITY_STAGE AS TIPE_TRANSAKSI,
				   RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
				   RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
				   'LABOUR' AS COST_ELEMENT,
				   '' AS KETERANGAN,
				   '' UOM,
				   0 QTY_JAN,
				   0 QTY_FEB,
				   0 QTY_MAR,
				   0 QTY_APR,
				   0 QTY_MAY,
				   0 QTY_JUN,
				   0 QTY_JUL,
				   0 QTY_AUG,
				   0 QTY_SEP,
				   0 QTY_OCT,
				   0 QTY_NOV,
				   0 QTY_DEC,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_1
						  * RKT.DIS_JAN)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_1
						  * RKT.DIS_JAN)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_1
						  * RKT.DIS_JAN)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_1
						  * RKT.DIS_JAN)
					  ELSE
						 0
				   END
					  DIS_JAN,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_1
						  * RKT.DIS_FEB)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_1
						  * RKT.DIS_FEB)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_1
						  * RKT.DIS_FEB)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_1
						  * RKT.DIS_FEB)
					  ELSE
						 0
				   END
					  DIS_FEB,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_1
						  * RKT.DIS_MAR)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_1
						  * RKT.DIS_MAR)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_1
						  * RKT.DIS_MAR)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_1
						  * RKT.DIS_MAR)
					  ELSE
						 0
				   END
					  DIS_MAR,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_1
						  * RKT.DIS_APR)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_1
						  * RKT.DIS_APR)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_1
						  * RKT.DIS_APR)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_1
						  * RKT.DIS_APR)
					  ELSE
						 0
				   END
					  DIS_APR,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_1
						  * RKT.DIS_MAY)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_1
						  * RKT.DIS_MAY)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_1
						  * RKT.DIS_MAY)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_1
						  * RKT.DIS_MAY)
					  ELSE
						 0
				   END
					  DIS_MAY,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_1
						  * RKT.DIS_JUN)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_1
						  * RKT.DIS_JUN)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_1
						  * RKT.DIS_JUN)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_1 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS1_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_1
						  * RKT.DIS_JUN)
					  ELSE
						 0
				   END
					  DIS_JUN,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_2
						  * RKT.DIS_JUL)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_2
						  * RKT.DIS_JUL)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_2
						  * RKT.DIS_JUL)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_2
						  * RKT.DIS_JUL)
					  ELSE
						 0
				   END
					  DIS_JUL,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_2
						  * RKT.DIS_AUG)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_2
						  * RKT.DIS_AUG)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_2
						  * RKT.DIS_AUG)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_2
						  * RKT.DIS_AUG)
					  ELSE
						 0
				   END
					  DIS_AUG,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_2
						  * RKT.DIS_SEP)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_2
						  * RKT.DIS_SEP)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_2
						  * RKT.DIS_SEP)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_2
						  * RKT.DIS_SEP)
					  ELSE
						 0
				   END
					  DIS_SEP,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_2
						  * RKT.DIS_OCT)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_2
						  * RKT.DIS_OCT)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_2
						  * RKT.DIS_OCT)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_2
						  * RKT.DIS_OCT)
					  ELSE
						 0
				   END
					  DIS_OCT,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_2
						  * RKT.DIS_NOV)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_2
						  * RKT.DIS_NOV)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_2
						  * RKT.DIS_NOV)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_2
						  * RKT.DIS_NOV)
					  ELSE
						 0
				   END
					  DIS_NOV,
				   CASE
					  WHEN     RKT.MATURITY_STAGE = 'TBM0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM0_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM0
						  / SEBARAN_HA.TOTAL_HA_TBM0_SMS_2
						  * RKT.DIS_DEC)
					  WHEN     RKT.MATURITY_STAGE = 'TBM1'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM1_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM1
						  / SEBARAN_HA.TOTAL_HA_TBM1_SMS_2
						  * RKT.DIS_DEC)
					  WHEN     RKT.MATURITY_STAGE = 'TBM2'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM2_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM2
						  / SEBARAN_HA.TOTAL_HA_TBM2_SMS_2
						  * RKT.DIS_DEC)
					  WHEN     RKT.MATURITY_STAGE = 'TBM3'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 <> '0'
						   AND SEBARAN_HA.TOTAL_HA_TBM3_SMS_2 IS NOT NULL
					  THEN
						 (  SEBARAN_HA.SMS2_TBM3
						  / SEBARAN_HA.TOTAL_HA_TBM3_SMS_2
						  * RKT.DIS_DEC)
					  ELSE
						 0
				   END
					  DIS_DEC,
				   0 RP_ROTASI_SMS1,
				   0 RP_ROTASI_SMS2
			  FROM (SELECT SUMHA_AFD.PERIOD_BUDGET,
						   SUMHA_AFD.BA_CODE,
						   SUMHA_AFD.AFD_CODE,
						   SMS1_TBM0,
						   TOTAL_HA_TBM0_SMS_1,
						   SMS1_TBM1,
						   TOTAL_HA_TBM1_SMS_1,
						   SMS1_TBM2,
						   TOTAL_HA_TBM2_SMS_1,
						   SMS1_TBM3,
						   TOTAL_HA_TBM3_SMS_1,
						   SMS2_TBM0,
						   TOTAL_HA_TBM0_SMS_2,
						   SMS2_TBM1,
						   TOTAL_HA_TBM1_SMS_2,
						   SMS2_TBM2,
						   TOTAL_HA_TBM2_SMS_2,
						   SMS2_TBM3,
						   TOTAL_HA_TBM3_SMS_2
					  FROM    V_REPORT_SEBARAN_HS SUMHA_AFD
						   LEFT JOIN
							  (  SELECT PERIOD_BUDGET,
										BA_CODE,
										SUM (SMS1_TBM0) TOTAL_HA_TBM0_SMS_1,
										SUM (SMS2_TBM0) TOTAL_HA_TBM0_SMS_2,
										SUM (SMS1_TBM1) TOTAL_HA_TBM1_SMS_1,
										SUM (SMS2_TBM1) TOTAL_HA_TBM1_SMS_2,
										SUM (SMS1_TBM2) TOTAL_HA_TBM2_SMS_1,
										SUM (SMS2_TBM2) TOTAL_HA_TBM2_SMS_2,
										SUM (SMS1_TBM3) TOTAL_HA_TBM3_SMS_1,
										SUM (SMS2_TBM3) TOTAL_HA_TBM3_SMS_2
								   FROM V_REPORT_SEBARAN_HS
							   GROUP BY PERIOD_BUDGET, BA_CODE) SUMHA_BA
						   ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
							  AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE) SEBARAN_HA
				   LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
					  ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
						 AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
				   LEFT JOIN TM_ORGANIZATION ORG
					  ON ORG.BA_CODE = RKT.BA_CODE
			 WHERE     RKT.REPORT_TYPE = 'CR_ALOKASI'
				   AND RKT.DELETE_USER IS NULL
				   AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
					$where
			) REPORT
			GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				TIPE_TRANSAKSI,
				ACTIVITY_CODE,
				ACTIVITY_DESC,
				COST_ELEMENT,
				KETERANGAN,
				UOM
		";
		
		$this->_db->query($query);
		$this->_db->commit();
		return true;
	}
	
	//hapus temp table untuk dev cost
	public function delTmpRptDevCost($params = array())
    {
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		//hapus dev cost per BA
		$query = "
			DELETE FROM TMP_RPT_DEV_COST 
			WHERE 1 = 1
			$where 
		";
		$this->_db->query($query);
		$this->_db->commit();
		
		//hapus dev cost per afd
		$query = "
			DELETE FROM TMP_RPT_DEV_COST_AFD 
			WHERE 1 = 1
			$where 
		";
		$this->_db->query($query);
		$this->_db->commit();
		
		return true;
	}
	
	//generate report development cost
    public function reportDevelopmentCost($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel development cost ################################################### */
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND ALL_ACT.BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT 	$select_group
					REPORT.*,
					ORG.ESTATE_NAME
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_DEV_COST ALL_ACT
				WHERE 1 = 1 
				$where
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			LEFT JOIN TM_ORGANIZATION ORG
				ON ORG.BA_CODE = REPORT.BA_CODE
			WHERE REPORT.ACTIVITY_CODE IS NOT NULL
			ORDER BY REPORT.PERIOD_BUDGET,
					 REPORT.BA_CODE,
					 $order_group
					 REPORT.ACTIVITY_CODE,
					 REPORT.COST_ELEMENT,
					 REPORT.KETERANGAN
		";
	
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}		
		/* ################################################### generate excel development cost ################################################### */
		
		return $result;
	}
	
	//generate report development cost per AFD
    public function reportDevelopmentCostAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel development cost ################################################### */
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND ALL_ACT.BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT 	$select_group
					REPORT.*,
					ORG.ESTATE_NAME
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_DEV_COST_AFD ALL_ACT
				WHERE 1 = 1 
				$where
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			LEFT JOIN TM_ORGANIZATION ORG
				ON ORG.BA_CODE = REPORT.BA_CODE
			WHERE REPORT.ACTIVITY_CODE IS NOT NULL
			ORDER BY REPORT.PERIOD_BUDGET,
					 REPORT.BA_CODE,
					 REPORT.AFD_CODE,
					 $order_group
					 REPORT.ACTIVITY_CODE,
					 REPORT.COST_ELEMENT,
					 REPORT.KETERANGAN
		";

		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}		
		/* ################################################### generate excel development cost ################################################### */
		
		return $result;
	}
	
	//query summary development cost per BA
    public function querySummaryDevelopmentCostPerBa($params = array())
    {
		$where = $select_group = $order_group = "";
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT CASE
                 WHEN DESCRIPTION = 'LAND CLEARING' THEN 'LC' ELSE DESCRIPTION
            END AS DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			
		}else{
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND ALL_ACT.BA_CODE = '".$params['key_find']."'
            ";
			$xwhere .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			  SELECT STR.*,
				   CASE
					  WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
					  THEN
						(CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
							THEN
								(SELECT PRICE
								   FROM TN_HARGA_BORONG
								   WHERE     1 = 1
									AND PERIOD_BUDGET = STR.PERIOD_BUDGET
									AND BA_CODE = STR.BA_CODE
									AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
							ELSE
							    INFRA.RP_HA_INTERNAL
							END
						  )              
					  ELSE
						NORM.PRICE_ROTASI
				   END
				   AS NORMA
			  FROM (SELECT 	$select_group
					STRUKTUR_REPORT.PERIOD_BUDGET, 
					STRUKTUR_REPORT.REGION_CODE, 
					STRUKTUR_REPORT.BA_CODE, 
					STRUKTUR_REPORT.ESTATE_NAME, 
					STRUKTUR_REPORT.ACTIVITY_CODE, 
					STRUKTUR_REPORT.ACTIVITY_DESC, 
					STRUKTUR_REPORT.UOM, 
					STRUKTUR_REPORT.QTY_SMS1, 
					STRUKTUR_REPORT.QTY_SMS2, 
					STRUKTUR_REPORT.COST_SMS1, 
					STRUKTUR_REPORT.COST_SMS2, 
					STRUKTUR_REPORT.COST_SETAHUN,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
						THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
						ELSE 0
					END as RP_HA_SMS1,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
						ELSE 0
					END as RP_HA_SMS2,
					CASE
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) > 0
						THEN STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2)
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) = 0
						THEN 0
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND STRUKTUR_REPORT.QTY_SMS1 = 0 
							 AND STRUKTUR_REPORT.QTY_SMS2 = 0
						THEN 0
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND STRUKTUR_REPORT.QTY_SMS1 > 0 
							 AND STRUKTUR_REPORT.QTY_SMS2 = 0
						THEN STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND STRUKTUR_REPORT.QTY_SMS1 = 0 
							 AND STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2
						ELSE
							(STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1) + (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
					END as RP_HA_SETAHUN
			FROM (
				SELECT 	$select_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM, 
						CASE
							WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM1)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS1_TBM0)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS1_TBM1)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS1_TBM2)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS1_TBM3)
							ELSE 0
						END AS QTY_SMS1,
						CASE
							WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM2)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS2_TBM0)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS2_TBM1)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS2_TBM2)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS2_TBM3)
							ELSE 0
						END AS QTY_SMS2,
						SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
						SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
						SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN
				FROM (
					SELECT 	CASE
								WHEN INSTR(HIRARKI, '/',1, 2) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
								ELSE NULL
							END GROUP01,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 3) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP02,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 4) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP03,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 5) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP04,
							GROUP_CODE
					FROM (
						SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
								LVL, 
								TO_CHAR(GROUP_CODE) AS GROUP_CODE
						FROM (
							SELECT 	GROUP_CODE, 
									CONNECT_BY_ISCYCLE \"CYCLE\",
									LEVEL as LVL, 
									SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
							FROM TM_RPT_MAPPING_ACT
							WHERE level > 1
							START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
							CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
						)
						GROUP BY HIRARKI, LVL, GROUP_CODE
						ORDER BY HIRARKI
					)
				) STRUKTUR_REPORT
				LEFT JOIN TM_RPT_MAPPING_ACT MAPP
					ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
				LEFT JOIN (
					SELECT *
					FROM TMP_RPT_DEV_COST ALL_ACT
					WHERE 1 = 1
					$where
				)REPORT
					ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
					AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
					AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = REPORT.BA_CODE
				LEFT JOIN (  
					SELECT 	PERIOD_BUDGET,
							BA_CODE,
							SUM (SMS1_TBM0) SMS1_TBM0,
							SUM (SMS1_TBM1) SMS1_TBM1,
							SUM (SMS1_TBM2) SMS1_TBM2,
							SUM (SMS1_TBM3) SMS1_TBM3,
							SUM (SMS2_TBM0) SMS2_TBM0,
							SUM (SMS2_TBM1) SMS2_TBM1,
							SUM (SMS2_TBM2) SMS2_TBM2,
							SUM (SMS2_TBM3) SMS2_TBM3
					FROM V_REPORT_SEBARAN_HS
					GROUP BY PERIOD_BUDGET, 
						BA_CODE
				) TOTAL_SEBARAN_HA
					ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
					AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
				LEFT JOIN (  
					SELECT 	PERIOD_BUDGET,
							BA_CODE,
							ACTIVITY_CODE,
							(SUM (PLAN_JAN) + SUM (PLAN_FEB) + SUM (PLAN_MAR)
							 + SUM (PLAN_APR) + SUM (PLAN_MAY) + SUM (PLAN_JUN)) AS SEM1,
							(SUM (PLAN_JUL) + SUM (PLAN_AUG) + SUM (PLAN_SEP)
							 + SUM (PLAN_OCT) + SUM (PLAN_NOV) + SUM (PLAN_DEC)) AS SEM2
					FROM TR_RKT_LC
					WHERE DELETE_TIME IS NULL
						AND FLAG_TEMP IS NULL
					GROUP BY PERIOD_BUDGET, 
						BA_CODE, 
						ACTIVITY_CODE
				) LC
					ON LC.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
					AND LC.BA_CODE = REPORT.BA_CODE
					AND LC.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				WHERE REPORT.ACTIVITY_CODE IS NOT NULL
				GROUP BY $order_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM,
						REPORT.TIPE_TRANSAKSI
			) STRUKTUR_REPORT
			ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
					 STRUKTUR_REPORT.BA_CODE,
					 $order_group
					 STRUKTUR_REPORT.ACTIVITY_CODE) STR
			 LEFT JOIN (
			 SELECT PERIOD_BUDGET,
					  BA_CODE,
					  ACTIVITY_GROUP,
					  ACTIVITY_CODE,
					  PRICE_ROTASI
				 FROM (SELECT RANK ()
								 OVER (PARTITION BY PERIOD_BUDGET,
                                                    BA_CODE,
                                                    ACTIVITY_GROUP,
													ACTIVITY_CODE
									   ORDER BY BACOUNT DESC, PRIORITY ASC)
								 RANK_Z,
							  PRIORITY,
							  BACOUNT,
							  PERIOD_BUDGET,
							  BA_CODE,
							  ACTIVITY_GROUP,
							  ACTIVITY_CODE,
							  PRICE_ROTASI
						 FROM (  SELECT BACOUNT,
										PRIORITY,
										PERIOD_BUDGET,
										BA_CODE,
										ACTIVITY_GROUP,
										ACTIVITY_CODE,
										SUM (PRICE_ROTASI) PRICE_ROTASI
								   FROM (SELECT HS.BACOUNT,
												HS.PERIOD_BUDGET,
												HS.BA_CODE,
												TB.ACTIVITY_GROUP,
												TB.ACTIVITY_CODE,
												TB.ACTIVITY_CLASS,
												TB.LAND_TYPE,
												TB.TOPOGRAPHY,
												TB.COST_ELEMENT,
												TB.PRICE_ROTASI,
												'1' AS PRIORITY
										   FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
															 PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE
														FROM TM_HECTARE_STATEMENT
													   WHERE 1 = 1 
															 $xwhere
															 AND MATURITY_STAGE_SMS2 NOT IN
																	  ('TM')
													GROUP BY PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE) HS
												LEFT JOIN
												   TN_BIAYA TB
												ON TB.BA_CODE = HS.BA_CODE
												   AND TB.PERIOD_BUDGET =
														 HS.PERIOD_BUDGET
												   AND TB.ACTIVITY_GROUP =
														 HS.MATURITY_STAGE_SMS2
												   AND TB.TOPOGRAPHY =
														 HS.TOPOGRAPHY
												   AND TB.LAND_TYPE = HS.LAND_TYPE
										 UNION ALL
										 -- INI BUAT YANG LAND TYPE NYA ALL
										 SELECT HS.BACOUNT,
												HS.PERIOD_BUDGET,
												HS.BA_CODE,
												TB.ACTIVITY_GROUP,
												TB.ACTIVITY_CODE,
												TB.ACTIVITY_CLASS,
												TB.LAND_TYPE,
												TB.TOPOGRAPHY,
												TB.COST_ELEMENT,
												TB.PRICE_ROTASI,
												'2' AS PRIORITY
										   FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
															 PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE
														FROM TM_HECTARE_STATEMENT
													   WHERE 1 = 1 
															 $xwhere
															 AND MATURITY_STAGE_SMS2 NOT IN
																	  ('TM')
													GROUP BY PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE) HS
												LEFT JOIN
												   TN_BIAYA TB
												ON TB.BA_CODE = HS.BA_CODE
												   AND TB.PERIOD_BUDGET =
														 HS.PERIOD_BUDGET
												   AND TB.ACTIVITY_GROUP =
														 HS.MATURITY_STAGE_SMS2
												   AND TB.TOPOGRAPHY =
														 HS.TOPOGRAPHY
												   AND TB.LAND_TYPE = 'ALL'
										 UNION ALL
										 -- INI BUAT YANG TOPOGRAPHY NYA ALL
										 SELECT HS.BACOUNT,
												HS.PERIOD_BUDGET,
												HS.BA_CODE,
												TB.ACTIVITY_GROUP,
												TB.ACTIVITY_CODE,
												TB.ACTIVITY_CLASS,
												TB.LAND_TYPE,
												TB.TOPOGRAPHY,
												TB.COST_ELEMENT,
												TB.PRICE_ROTASI,
												'3' AS PRIORITY
										   FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
															 PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE
														FROM TM_HECTARE_STATEMENT
													   WHERE 1 = 1 
															 $xwhere
															 AND MATURITY_STAGE_SMS2 NOT IN
																	  ('TM')
													GROUP BY PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE) HS
												LEFT JOIN
												   TN_BIAYA TB
												ON TB.BA_CODE = HS.BA_CODE
												   AND TB.PERIOD_BUDGET =
														 HS.PERIOD_BUDGET
												   AND TB.ACTIVITY_GROUP =
														 HS.MATURITY_STAGE_SMS2
												   AND TB.TOPOGRAPHY = 'ALL'
												   AND TB.LAND_TYPE = HS.LAND_TYPE
										 UNION ALL
										 -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
										 SELECT HS.BACOUNT,
												HS.PERIOD_BUDGET,
												HS.BA_CODE,
												TB.ACTIVITY_GROUP,
												TB.ACTIVITY_CODE,
												TB.ACTIVITY_CLASS,
												TB.LAND_TYPE,
												TB.TOPOGRAPHY,
												TB.COST_ELEMENT,
												TB.PRICE_ROTASI,
												'4' AS PRIORITY
										   FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
															 PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE
														FROM TM_HECTARE_STATEMENT
													   WHERE 1 = 1 
															 $xwhere
															 AND MATURITY_STAGE_SMS2 NOT IN
																	  ('TM')
													GROUP BY PERIOD_BUDGET,
															 BA_CODE,
															 MATURITY_STAGE_SMS2,
															 TOPOGRAPHY,
															 LAND_TYPE) HS
												LEFT JOIN
												   TN_BIAYA TB
												ON TB.BA_CODE = HS.BA_CODE
												   AND TB.PERIOD_BUDGET =
														 HS.PERIOD_BUDGET
												   AND TB.ACTIVITY_GROUP =
														 HS.MATURITY_STAGE_SMS2
												   AND TB.TOPOGRAPHY = 'ALL'
												   AND TB.LAND_TYPE = 'ALL')
							   GROUP BY BACOUNT,
										PRIORITY,
										PERIOD_BUDGET,
										BA_CODE,
										ACTIVITY_GROUP,
                                        ACTIVITY_CODE
							   ORDER BY BACOUNT DESC, PRIORITY ASC)
						WHERE PRICE_ROTASI IS NOT NULL)
				WHERE RANK_Z = 1    
				) NORM
			   ON     NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
			  AND NORM.BA_CODE = STR.BA_CODE
			  AND NORM.ACTIVITY_GROUP = STR.GROUP01_DESC
			  AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE 
			  -- INI UNTUK PERHITUNGAN DI TN INFRASTRUKTUR
       LEFT JOIN ( 
            SELECT PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  RP_HA_INTERNAL
             FROM (SELECT RANK ()
                             OVER (
                                PARTITION BY PERIOD_BUDGET,
                                             BA_CODE,
                                             ACTIVITY_CODE
                                ORDER BY BACOUNT DESC, PRIORITY ASC)
                             RANK_Z,
                          PRIORITY,
                          BACOUNT,
                          PERIOD_BUDGET,
                          BA_CODE,
                          ACTIVITY_CODE,
                          RP_HA_INTERNAL
                     FROM (  SELECT BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE,
                                    SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                               FROM (SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '1' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '2' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = 'ALL'
                                     UNION ALL
                                     -- INI BUAT YANG TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '3' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '4' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = 'ALL')
                           GROUP BY BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE
                           ORDER BY BACOUNT DESC, PRIORITY ASC)
                    WHERE RP_HA_INTERNAL IS NOT NULL)
            WHERE RANK_Z = 1) INFRA   
            ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
          AND INFRA.BA_CODE = STR.BA_CODE
          AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
		";
		
		return $query;
	}
	
	//generate report summary development cost
    public function reportSummaryDevelopmentCost($params = array())
    {
		$where = $select_group = $order_group = "";
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);
		
		/* ################################################### generate excel development cost ################################################### */
		$query = $this->querySummaryDevelopmentCostPerBa($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}		
		/* ################################################### generate excel development cost ################################################### */
				
		return $result;
	}
	
	//generate report summary development cost AFD
    public function reportSummaryDevelopmentCostAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);
		
		/* ################################################### generate excel development cost ################################################### */
		$query = $this->querySummaryDevelopmentCostPerAfd($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}		
		/* ################################################### generate excel development cost ################################################### */
				
		return $result;
	}
	
	//generate module review development cost per BA
    public function modReviewDevelopmentCostPerBa($params = array())
    {
		$where = $select_group = $order_group = "";
		
		// ############################################# get all BA #############################################
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		$query = "
			SELECT REGION_NAME, BA_CODE
			FROM TM_ORGANIZATION
			WHERE DELETE_USER IS NULL
			$where
			ORDER BY REGION_NAME, BA_CODE
		";
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['BA_CODE'] = array(); // distinct BA
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct BA_CODE
				if (in_array($row['BA_CODE'], $result['BA_CODE']) == false) {
					array_push($result['BA_CODE'], $row['BA_CODE']);
				}
				
				$result['REGION_NAME'] = $row['REGION_NAME'];
			}
		}
		
		// ############################################# get all group + activity #############################################
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		$query = "
			SELECT 	$select_group
					MAPP.ACTIVITY_CODE,
					REPORT.ACTIVITY_DESC
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_DEV_COST ALL_ACT
				WHERE 1 = 1
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			WHERE MAPP.ACTIVITY_CODE IS NOT NULL
				AND REPORT.ACTIVITY_DESC IS NOT NULL
			ORDER BY $order_group
					 MAPP.ACTIVITY_CODE
		";
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct GROUP_ACTIVITY
				if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
					array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
					
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
				}
			}
		}
		
		/* ################################################### generate excel module review development cost ################################################### */
		$query = $this->querySummaryDevelopmentCostPerBa($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['NORMA'] = $row['NORMA'];
				
				$result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
			}
		}		
		/* ################################################### generate excel module review development cost ################################################### */

		return $result;
	}
	
	//query summary development cost per AFD
    public function querySummaryDevelopmentCostPerAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT CASE
                        WHEN DESCRIPTION = 'LAND CLEARING' THEN 'LC' ELSE DESCRIPTION
                   END AS DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND ALL_ACT.BA_CODE = '".$params['key_find']."'
            ";
			$xwhere .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT STR.*, 
				CASE
					  WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
					  THEN
						(CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
							THEN
								(SELECT PRICE
								   FROM TN_HARGA_BORONG
								   WHERE     1 = 1
									AND PERIOD_BUDGET = STR.PERIOD_BUDGET
									AND BA_CODE = STR.BA_CODE
									AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
							ELSE
							    INFRA.RP_HA_INTERNAL
							END
						  )              
					  ELSE
						NORM.PRICE_ROTASI
				   END
				   AS NORMA
                 FROM (     
			SELECT 	$select_group
					STRUKTUR_REPORT.PERIOD_BUDGET, 
					STRUKTUR_REPORT.REGION_CODE, 
					STRUKTUR_REPORT.BA_CODE, 
					STRUKTUR_REPORT.ESTATE_NAME, 
					STRUKTUR_REPORT.AFD_CODE, 
					STRUKTUR_REPORT.ACTIVITY_CODE, 
					STRUKTUR_REPORT.ACTIVITY_DESC, 
					STRUKTUR_REPORT.UOM, 
					STRUKTUR_REPORT.QTY_SMS1, 
					STRUKTUR_REPORT.QTY_SMS2, 
					STRUKTUR_REPORT.COST_SMS1, 
					STRUKTUR_REPORT.COST_SMS2, 
					STRUKTUR_REPORT.COST_SETAHUN,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
						THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
						ELSE 0
					END as RP_HA_SMS1,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
						ELSE 0
					END as RP_HA_SMS2,
					CASE
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) > 0
						THEN STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2)
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND (STRUKTUR_REPORT.QTY_SMS1 + STRUKTUR_REPORT.QTY_SMS2) = 0
						THEN 0
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND STRUKTUR_REPORT.QTY_SMS1 = 0 
							 AND STRUKTUR_REPORT.QTY_SMS2 = 0
						THEN 0
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND STRUKTUR_REPORT.QTY_SMS1 > 0 
							 AND STRUKTUR_REPORT.QTY_SMS2 = 0
						THEN STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1
						WHEN STRUKTUR_REPORT.ACTIVITY_CODE NOT IN ('10100', '10200', '10300', '10400', '10500', '10600', '40400', '40500', '40600') 
							 AND STRUKTUR_REPORT.QTY_SMS1 = 0 
							 AND STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2
						ELSE
							(STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1) + (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
					END as RP_HA_SETAHUN
			FROM (
				SELECT 	$select_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.AFD_CODE, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM, 
						CASE
							WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM1)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS1_TBM0)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS1_TBM1)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS1_TBM2)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS1_TBM3)
							ELSE 0
						END AS QTY_SMS1,
						CASE
							WHEN REPORT.TIPE_TRANSAKSI = 'LC' THEN MAX(SEM2)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM0' THEN MAX(SMS2_TBM0)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM1' THEN MAX(SMS2_TBM1)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM2' THEN MAX(SMS2_TBM2)
							WHEN REPORT.TIPE_TRANSAKSI = 'TBM3' THEN MAX(SMS2_TBM3)
							ELSE 0
						END AS QTY_SMS2,
						SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
						SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
						SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN
				FROM (
					SELECT 	CASE
								WHEN INSTR(HIRARKI, '/',1, 2) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
								ELSE NULL
							END GROUP01,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 3) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP02,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 4) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP03,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 5) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP04,
							GROUP_CODE
					FROM (
						SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
								LVL, 
								TO_CHAR(GROUP_CODE) AS GROUP_CODE
						FROM (
							SELECT 	GROUP_CODE, 
									CONNECT_BY_ISCYCLE \"CYCLE\",
									LEVEL as LVL, 
									SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
							FROM TM_RPT_MAPPING_ACT
							WHERE level > 1
							START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
							CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
						)
						GROUP BY HIRARKI, LVL, GROUP_CODE
						ORDER BY HIRARKI
					)
				) STRUKTUR_REPORT
				LEFT JOIN TM_RPT_MAPPING_ACT MAPP
					ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
				LEFT JOIN (
					SELECT *
					FROM TMP_RPT_DEV_COST_AFD ALL_ACT
					WHERE 1 = 1
					$where
				)REPORT
					ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
					AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
					AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = REPORT.BA_CODE
				LEFT JOIN (  
					SELECT 	PERIOD_BUDGET,
							BA_CODE,
							AFD_CODE,
							SMS1_TBM0,
							SMS1_TBM1,
							SMS1_TBM2,
							SMS1_TBM3,
							SMS2_TBM0,
							SMS2_TBM1,
							SMS2_TBM2,
							SMS2_TBM3
					FROM V_REPORT_SEBARAN_HS
				) TOTAL_SEBARAN_HA
					ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
					AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
					AND TOTAL_SEBARAN_HA.AFD_CODE = REPORT.AFD_CODE
				LEFT JOIN (  
					SELECT 	PERIOD_BUDGET,
							BA_CODE,
							AFD_CODE,
							ACTIVITY_CODE,
							(SUM (PLAN_JAN) + SUM (PLAN_FEB) + SUM (PLAN_MAR)
							 + SUM (PLAN_APR) + SUM (PLAN_MAY) + SUM (PLAN_JUN)) AS SEM1,
							(SUM (PLAN_JUL) + SUM (PLAN_AUG) + SUM (PLAN_SEP)
							 + SUM (PLAN_OCT) + SUM (PLAN_NOV) + SUM (PLAN_DEC)) AS SEM2
					FROM TR_RKT_LC
					WHERE DELETE_TIME IS NULL
						AND FLAG_TEMP IS NULL
					GROUP BY PERIOD_BUDGET, 
						BA_CODE, 
						AFD_CODE,
						ACTIVITY_CODE
				) LC
					ON LC.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
					AND LC.BA_CODE = REPORT.BA_CODE
					AND LC.AFD_CODE = REPORT.AFD_CODE
					AND LC.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				WHERE REPORT.ACTIVITY_CODE IS NOT NULL
				GROUP BY $order_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						REPORT.AFD_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM,
						REPORT.TIPE_TRANSAKSI
			) STRUKTUR_REPORT
			ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
					 STRUKTUR_REPORT.BA_CODE,
					 STRUKTUR_REPORT.AFD_CODE,
					 $order_group
					 STRUKTUR_REPORT.ACTIVITY_CODE) STR
					 LEFT JOIN (
					 SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, PRICE_ROTASI FROM (
			SELECT RANK () OVER (PARTITION BY PERIOD_BUDGET,
                                             BA_CODE,
											 ACTIVITY_GROUP,
                                             ACTIVITY_CODE
                                ORDER BY BACOUNT DESC,PRIORITY ASC) RANK_Z, 
				PRIORITY, 
				BACOUNT, 
				PERIOD_BUDGET, 
				BA_CODE, 
				AFD_CODE, 
				ACTIVITY_GROUP,
				ACTIVITY_CODE, 
				PRICE_ROTASI
			  FROM (  
			  SELECT BACOUNT, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, SUM (PRICE_ROTASI) PRICE_ROTASI
						FROM (
						SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '1' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 NOT IN ('TM')
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE  
										   ) HS        
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = HS.TOPOGRAPHY
										AND TB.LAND_TYPE = HS.LAND_TYPE        
							  UNION ALL                 -- INI BUAT YANG LAND TYPE NYA ALL   
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '2' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 NOT IN ('TM')
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = HS.TOPOGRAPHY
										AND TB.LAND_TYPE = 'ALL'    
							  UNION ALL                -- INI BUAT YANG TOPOGRAPHY NYA ALL
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '3' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 NOT IN ('TM')
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = 'ALL'
										AND TB.LAND_TYPE = HS.LAND_TYPE  
							  UNION ALL -- INI BUAT YANG LAND TYPE  DAN TOPOGRAPHY NYA ALL
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '4' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 NOT IN ('TM')
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = 'ALL'
										AND TB.LAND_TYPE = 'ALL'
										)
					GROUP BY BACOUNT, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE
					ORDER BY BACOUNT DESC, PRIORITY ASC 
					)
			 WHERE PRICE_ROTASI IS NOT NULL
			 )
			 WHERE RANK_Z = 1
			 ) NORM
			 ON NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
			 AND NORM.BA_CODE = STR.BA_CODE
			 AND NORM.AFD_CODE = STR.AFD_CODE
			 AND NORM.ACTIVITY_GROUP = STR.GROUP01_DESC
			 AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE
			 LEFT JOIN ( 
            SELECT PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  RP_HA_INTERNAL
             FROM (SELECT RANK ()
                             OVER (
                                PARTITION BY PERIOD_BUDGET,
                                             BA_CODE,
                                             ACTIVITY_CODE
                                ORDER BY BACOUNT DESC, PRIORITY ASC)
                             RANK_Z,
                          PRIORITY,
                          BACOUNT,
                          PERIOD_BUDGET,
                          BA_CODE,
                          ACTIVITY_CODE,
                          RP_HA_INTERNAL
                     FROM (  SELECT BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE,
                                    SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                               FROM (SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '1' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '2' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = 'ALL'
                                     UNION ALL
                                     -- INI BUAT YANG TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '3' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '4' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 NOT IN
                                                                  ('TM')
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = 'ALL')
                           GROUP BY BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE
                           ORDER BY BACOUNT DESC, PRIORITY ASC)
                    WHERE RP_HA_INTERNAL IS NOT NULL)
            WHERE RANK_Z = 1) INFRA   
            ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
          AND INFRA.BA_CODE = STR.BA_CODE
          AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
		";
		
		return $query;
	}
	
	//generate module review development cost per AFD
    public function modReviewDevelopmentCostPerAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		
		// ############################################# get all BA #############################################
		//filter period budget
		if ($params['budgetperiod'] != '') {
			$where .= "
                AND TO_CHAR(A.PERIOD_BUDGET, 'RRRR') = '".$params['budgetperiod']."'
            ";
        }
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND B.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND A.BA_CODE = '".$params['key_find']."'
            ";
        }
		$query = "
			SELECT *
			FROM (
				SELECT B.REGION_NAME, B.COMPANY_NAME, B.ESTATE_NAME, A.AFD_CODE
				FROM TM_HECTARE_STATEMENT A
				LEFT JOIN TM_ORGANIZATION B
					ON A.BA_CODE = B.BA_CODE
				WHERE A.DELETE_USER IS NULL
				$where
				UNION
				SELECT B.REGION_NAME, B.COMPANY_NAME, B.ESTATE_NAME, A.AFD_CODE
				FROM TR_RKT_LC A
				LEFT JOIN TM_ORGANIZATION B
					ON A.BA_CODE = B.BA_CODE
				WHERE A.DELETE_USER IS NULL
				$where
			)	
			GROUP BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
			ORDER BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
		";
		
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['AFD_CODE'] = array(); // distinct BA
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct AFD_CODE
				if (in_array($row['AFD_CODE'], $result['AFD_CODE']) == false) {
					array_push($result['AFD_CODE'], $row['AFD_CODE']);
				}
				
				$result['REGION_NAME'] = $row['REGION_NAME'];
				$result['COMPANY_NAME'] = $row['COMPANY_NAME'];
				$result['ESTATE_NAME'] = $row['ESTATE_NAME'];
			}
		}
		
		// ############################################# get all group + activity #############################################
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		$query = "
			SELECT 	$select_group
					MAPP.ACTIVITY_CODE,
					REPORT.ACTIVITY_DESC
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_DEV_COST ALL_ACT
				WHERE 1 = 1
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			WHERE MAPP.ACTIVITY_CODE IS NOT NULL
				AND REPORT.ACTIVITY_DESC IS NOT NULL
			ORDER BY $order_group
					 MAPP.ACTIVITY_CODE
		";
		
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct GROUP_ACTIVITY
				if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
					array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
					
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
				}
			}
		}
		
		/* ################################################### generate excel module review development cost ################################################### */
		$query = $this->querySummaryDevelopmentCostPerAfd($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['NORMA'] = $row['NORMA'];
				
				$result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
			}
		}		
		/* ################################################### generate excel module review development cost ################################################### */

		return $result;
	}
	
	//generate temp table untuk estate cost
	public function tmpRptEstCost($params = array())
    {
		$where = "";
		$where1 = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$where1 .= "
                AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$where1 .= "
                AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";  
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND RKT.BA_CODE = '".$params['key_find']."'
            ";
			$where1 .= "
                AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
            ";
        }
		//generate estate cost per BA
		$query = "
			INSERT INTO TMP_RPT_EST_COST (
				PERIOD_BUDGET, 
				REGION_CODE, 
				BA_CODE, 
				TIPE_TRANSAKSI, 
				ACTIVITY_CODE, 
				ACTIVITY_DESC, 
				COST_ELEMENT, 
				KETERANGAN,
				UOM, 
				QTY_JAN, 
				QTY_FEB, 
				QTY_MAR, 
				QTY_APR, 
				QTY_MAY, 
				QTY_JUN, 
				QTY_JUL, 
				QTY_AUG, 
				QTY_SEP, 
				QTY_OCT, 
				QTY_NOV, 
				QTY_DEC, 
				QTY_SMS1, 
				QTY_SMS2, 
				QTY_SETAHUN, 
				COST_JAN, 
				COST_FEB, 
				COST_MAR, 
				COST_APR, 
				COST_MAY, 
				COST_JUN, 
				COST_JUL, 
				COST_AUG, 
				COST_SEP, 
				COST_OCT, 
				COST_NOV, 
				COST_DEC, 
				COST_SMS1, 
				COST_SMS2, 
				COST_SETAHUN, 
				RP_ROTASI_SMS1, 
				RP_ROTASI_SMS2, 
				RP_ROTASI_TOTAL,
				INSERT_USER, 
				INSERT_TIME
			)
			SELECT 	PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					TIPE_TRANSAKSI,
					ACTIVITY_CODE,
					ACTIVITY_DESC,
					COST_ELEMENT,
					KETERANGAN,
					UOM,
					SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
					SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
					SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
					SUM (NVL (QTY_APR, 0)) AS QTY_APR,
					SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
					SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
					SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
					SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
					SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
					SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
					SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
					SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
					CASE
						WHEN ACTIVITY_CODE = 'HA_TM'
						THEN SUM (QTY_JAN)
						ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
							  + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0)))
					END AS QTY_SMS1,
					CASE
						WHEN ACTIVITY_CODE = 'HA_TM'
						THEN SUM (QTY_JUL)
						ELSE (SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
							  + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
					END AS QTY_SMS2,
					CASE
						WHEN ACTIVITY_CODE = 'HA_TM'
						THEN 0
						ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
							  + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
							  + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
							  + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
					END AS QTY_SETAHUN,
					SUM (NVL (COST_JAN, 0)) COST_JAN,
					SUM (NVL (COST_FEB, 0)) COST_FEB,
					SUM (NVL (COST_MAR, 0)) COST_MAR,
					SUM (NVL (COST_APR, 0)) COST_APR,
					SUM (NVL (COST_MAY, 0)) COST_MAY,
					SUM (NVL (COST_JUN, 0)) COST_JUN,
					SUM (NVL (COST_JUL, 0)) COST_JUL,
					SUM (NVL (COST_AUG, 0)) COST_AUG,
					SUM (NVL (COST_SEP, 0)) COST_SEP,
					SUM (NVL (COST_OCT, 0)) COST_OCT,
					SUM (NVL (COST_NOV, 0)) COST_NOV,
					SUM (NVL (COST_DEC, 0)) COST_DEC,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
					(SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
					 + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
					SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
					SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
					CASE
						WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
						THEN SUM (NVL (RP_ROTASI_SMS1, 0))
						ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
					END AS RP_ROTASI_TOTAL,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
			FROM (
				-- HECTARE TANAM TM - SMS 1
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'HA_TM' ACTIVITY_CODE,
						'HEKTAR TM' AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'HA' AS UOM,
						RKT.HA_PLANTED AS QTY_JAN,
						RKT.HA_PLANTED AS QTY_FEB,
						RKT.HA_PLANTED AS QTY_MAR,
						RKT.HA_PLANTED AS QTY_APR,
						RKT.HA_PLANTED AS QTY_MAY,
						RKT.HA_PLANTED AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TM_HECTARE_STATEMENT RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL 
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS1 = 'TM'
					$where
				UNION ALL	
				-- HECTARE TANAM TM - SMS 2
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'HA_TM' ACTIVITY_CODE,
						'HEKTAR TM' AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'HA' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.HA_PLANTED AS QTY_JUL,
						RKT.HA_PLANTED AS QTY_AUG,
						RKT.HA_PLANTED AS QTY_SEP,
						RKT.HA_PLANTED AS QTY_OCT,
						RKT.HA_PLANTED AS QTY_NOV,
						RKT.HA_PLANTED AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TM_HECTARE_STATEMENT RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL 
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 = 'TM'
					$where
				UNION ALL
				-- PRODUKSI TBS	
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' TIPE_TRANSAKSI,
						'PRODUKSI_TBS' ACTIVITY_CODE,
						'PRODUKSI TBS' ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'TON' UOM,
						RKT.JAN QTY_JAN,
						RKT.FEB QTY_FEB,
						RKT.MAR QTY_MAR,
						RKT.APR QTY_APR,
						RKT.MAY QTY_MAY,
						RKT.JUN QTY_JUN,
						RKT.JUL QTY_JUL,
						RKT.AUG QTY_AUG,
						RKT.SEP QTY_SEP,
						RKT.OCT QTY_OCT,
						RKT.NOV QTY_NOV,
						RKT.DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_PRODUKSI_PERIODE_BUDGET RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					$where
				UNION ALL	
				-- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 1 TM
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN AS QTY_JAN,
						RKT.PLAN_FEB AS QTY_FEB,
						RKT.PLAN_MAR AS QTY_MAR,
						RKT.PLAN_APR AS QTY_APR,
						RKT.PLAN_MAY AS QTY_MAY,
						RKT.PLAN_JUN AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN AS COST_JAN,
						RKT.DIS_FEB AS COST_FEB,
						RKT.DIS_MAR AS COST_MAR,
						RKT.DIS_APR AS COST_APR,
						RKT.DIS_MAY AS COST_MAY,
						RKT.DIS_JUN AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.RP_ROTASI_SMS1 AS RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI')
					AND RKT.MATURITY_STAGE_SMS1 = 'TM'
					$where
				UNION ALL	
				-- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 2 TM
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL AS QTY_JUL,
						RKT.PLAN_AUG AS QTY_AUG,
						RKT.PLAN_SEP AS QTY_SEP,
						RKT.PLAN_OCT AS QTY_OCT,
						RKT.PLAN_NOV AS QTY_NOV,
						RKT.PLAN_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL AS COST_JUL,
						RKT.DIS_AUG AS COST_AUG,
						RKT.DIS_SEP AS COST_SEP,
						RKT.DIS_OCT AS COST_OCT,
						RKT.DIS_NOV AS COST_NOV,
						RKT.DIS_DEC AS COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.RP_ROTASI_SMS2 AS RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI')
					AND RKT.MATURITY_STAGE_SMS2 = 'TM'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101, 5101030504) UNTUK TM
				SELECT	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_RELATION_COST RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							SUM (HS.SMS1_TM) SMS1_TM,
							SUM (HS.TOTAL_HA_SMS1) TOTAL_HA_SMS1,
							SUM (HS.SMS2_TM) SMS2_TM,
							SUM (HS.TOTAL_HA_SMS2) TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
					GROUP BY HS.PERIOD_BUDGET, HS.BA_CODE
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE NOT IN ( '1212010101',  '5101030504')
					$where
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS1 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '1' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JAN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '2' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_FEB,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '3' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '4' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_APR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '5' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAY,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '6' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS1 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (1, 2, 3, 4, 5, 6) -- SMS1
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020400' -- UNTUK PUPUK  MAJEMUK
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS2 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '7' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUL,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '8' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_AUG,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '9' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_SEP,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '10' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_OCT,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '11' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_NOV,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '12' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS2 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (7, 8, 9, 10, 11, 12) -- SMS2
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020400' -- UNTUK PUPUK  MAJEMUK
				UNION ALL	
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS1 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '1' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JAN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '2' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_FEB,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '3' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '4' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_APR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '5' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAY,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '6' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS1 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (1, 2, 3, 4, 5, 6) -- SMS1
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020300' -- UNTUK PUPUK  TUNGGAL
				UNION ALL	
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS2 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '7' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUL,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '8' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_AUG,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '9' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_SEP,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '10' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_OCT,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '11' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_NOV,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '12' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS2 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (7, 8, 9, 10, 11, 12) -- SMS2
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020300' -- UNTUK PUPUK  TUNGGAL
				UNION ALL	
				-- QTY KG PUPUK MAJEMUK - TM
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
						RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
						RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
						RKT.QTY_MAJEMUK_APR AS QTY_APR,
						RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
						RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
						RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
						RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
						RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
						RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
						RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
						RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.MATURITY_STAGE = 'TM' 
					AND RKT.COA_CODE = '5101020400' -- UNTUK PUPUK MAJEMUK
					$where
				UNION ALL	
				-- QTY KG PUPUK TUNGGAL - TM
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
						RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
						RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
						RKT.QTY_TUNGGAL_APR AS QTY_APR,
						RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
						RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
						RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
						RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
						RKT.QTY_TUNGGAL_SEP AS QTY_SEP,
						RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
						RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
						RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_TOTAL_KG_PUPUK_PER_MATERIAL RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.MATURITY_STAGE = 'TM' 
					AND RKT.COA_CODE = '5101020300' -- UNTUK PUPUK TUNGGAL
					$where
				UNION ALL	
				-- RKT PUPUK TUNGGAL SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						COST.COST_ELEMENT,
						'' AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (  
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 AS MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_TOTAL_KG_PUPUK KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL	
				-- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						COST.COST_ELEMENT,
						'' AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (  
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 AS MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_TOTAL_KG_PUPUK KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL					
				-- PANEN - BIAYA PEMANEN
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030101' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'BIAYA PEMANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - PREMI PANEN JANJANG
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030201' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'PREMI PANEN JANJANG' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_JAN,
                        (SEBARAN.FEB / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_FEB,
                        (SEBARAN.MAR / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_MAR, 
                        (SEBARAN.APR / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_APR,
                        (SEBARAN.MAY / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_MAY,
                        (SEBARAN.JUN / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_JUN,
                        (SEBARAN.JUL / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_JUL,
                        (SEBARAN.AUG / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_AUG,
                        (SEBARAN.SEP / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_SEP,
                        (SEBARAN.OCT / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_OCT,
                        (SEBARAN.NOV / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_NOV,
                        (SEBARAN.DEC / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL
				-- PANEN - PREMI PANEN BRD
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030301' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'PREMI PANEN BRD' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - KRANI BUAH
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030701' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'KRANI BUAH' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.KRANI_BUAH_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - ALAT PANEN
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030103' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'ALAT PANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - SUPERVISI PEMANEN
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030701' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'SUPERVISI PEMANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.BIAYA_SPV_RP_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - PREMI SUPIR
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030504-3' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'PREMI SUPIR' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.SUPIR_PREMI) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.SUPIR_PREMI) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.SUPIR_PREMI) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.SUPIR_PREMI) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.SUPIR_PREMI) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.SUPIR_PREMI) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.SUPIR_PREMI) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.SUPIR_PREMI) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.SUPIR_PREMI) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.SUPIR_PREMI) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.SUPIR_PREMI) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.SUPIR_PREMI) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - ANGKUT - LANGSIR
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030404-2' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'LANGSIR' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_JAN,
						(SEBARAN.FEB / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_FEB,
						(SEBARAN.MAR / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_MAR,
						(SEBARAN.APR / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_APR,
						(SEBARAN.MAY / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_MAY,
						(SEBARAN.JUN / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_JUN,
						(SEBARAN.JUL / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_JUL,
						(SEBARAN.AUG / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_AUG,
						(SEBARAN.SEP / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_SEP,
						(SEBARAN.OCT / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_OCT,
						(SEBARAN.NOV / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_NOV,
						(SEBARAN.DEC / 100 * (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - TRANSPORT TBS - BONGKAR MUAT
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030404-1' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'BONGKAR MUAT' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.TUKANG_MUAT_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - ANGKUT - TRANSPORT TBS INTERNAL
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030504-2' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'TRANSPORT TBS INTERNAL - PANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.SUMBER_BIAYA_UNIT = 'INTERNAL'
					$where
				UNION ALL	
				-- PANEN - ANGKUT - TRANSPORT TBS EKSTERNAL
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030605' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'TRANSPORT TBS EKSTERNAL' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JAN,
						(SEBARAN.FEB / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_FEB,
						(SEBARAN.MAR / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAR,
						(SEBARAN.APR / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_APR,
						(SEBARAN.MAY / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAY,
						(SEBARAN.JUN / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUN,
						(SEBARAN.JUL / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUL,
						(SEBARAN.AUG / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_AUG,
						(SEBARAN.SEP / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_SEP,
						(SEBARAN.OCT / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_OCT,
						(SEBARAN.NOV / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_NOV,
						(SEBARAN.DEC / 100 * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON RKT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND RKT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.SUMBER_BIAYA_UNIT = 'EXTERNAL'
					$where
				UNION ALL	
				-- PANEN : PENGANGKUTAN TBS INTERNAL (COA : 5101030504)
				SELECT 	ANGKUT.PERIOD_BUDGET,
						ANGKUT.REGION_CODE,
						ANGKUT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030504-1' AS ACTIVITY_CODE,  -- BY ADI 16/11/2014
						'PENGANGKUTAN INTERNAL TBS - VRA' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN / 100 * ANGKUT.TOTAL) COST_JAN,
						(SEBARAN.FEB / 100 * ANGKUT.TOTAL) COST_FEB,
						(SEBARAN.MAR / 100 * ANGKUT.TOTAL) COST_MAR,
						(SEBARAN.APR / 100 * ANGKUT.TOTAL) COST_APR,
						(SEBARAN.MAY / 100 * ANGKUT.TOTAL) COST_MAY,
						(SEBARAN.JUN / 100 * ANGKUT.TOTAL) COST_JUN,
						(SEBARAN.JUL / 100 * ANGKUT.TOTAL) COST_JUL,
						(SEBARAN.AUG / 100 * ANGKUT.TOTAL) COST_AUG,
						(SEBARAN.SEP / 100 * ANGKUT.TOTAL) COST_SEP,
						(SEBARAN.OCT / 100 * ANGKUT.TOTAL) COST_OCT,
						(SEBARAN.NOV / 100 * ANGKUT.TOTAL) COST_NOV,
						(SEBARAN.DEC / 100 * ANGKUT.TOTAL) COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT 	RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							(NVL (RKT.COST_JAN, 0) + NVL (RKT.COST_FEB, 0) + NVL (RKT.COST_MAR, 0)
							 + NVL (RKT.COST_APR, 0) + NVL (RKT.COST_MAY, 0) + NVL (RKT.COST_JUN, 0)
							 + NVL (RKT.COST_JUL, 0) + NVL (RKT.COST_AUG, 0) + NVL (RKT.COST_SEP, 0)
							 + NVL (RKT.COST_OCT, 0) + NVL (RKT.COST_NOV, 0) + NVL (RKT.COST_DEC, 0)) AS TOTAL
					FROM V_TOTAL_RELATION_COST RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.COA_CODE = '5101030504'
						$where
				) ANGKUT
				LEFT JOIN TM_SEBARAN_PRODUKSI SEBARAN
					ON ANGKUT.PERIOD_BUDGET = SEBARAN.PERIOD_BUDGET
					AND ANGKUT.BA_CODE = SEBARAN.BA_CODE
					AND SEBARAN.DELETE_USER IS NULL
				UNION ALL	
				-- ALOKASI CHECKROLL
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
						RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
						'LABOUR' AS COST_ELEMENT,
						'' KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN,
						RKT.DIS_FEB,
						RKT.DIS_MAR,
						RKT.DIS_APR,
						RKT.DIS_MAY,
						RKT.DIS_JUN,
						RKT.DIS_JUL,
						RKT.DIS_AUG,
						RKT.DIS_SEP,
						RKT.DIS_OCT,
						RKT.DIS_NOV,
						RKT.DIS_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RPT_DISTRIBUSI_COA RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.REPORT_TYPE = 'CR_ALOKASI'
					AND RKT.DELETE_USER IS NULL
					AND RKT.MATURITY_STAGE = 'TM'
					$where
				UNION ALL
				-- RKT PERKERASAN JALAN : SMS 1 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS1 = 'TM'
					AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
					$where
				UNION ALL
				-- RKT PERKERASAN JALAN : SMS 2 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 = 'TM'
					AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
					$where
			) REPORT
			GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				TIPE_TRANSAKSI,
				ACTIVITY_CODE,
				ACTIVITY_DESC,
				COST_ELEMENT,
				KETERANGAN,
				UOM
		";
		
		$this->_db->query($query);
		$this->_db->commit();
		
		//generate estate cost per AFD
		$query = "
			INSERT INTO TMP_RPT_EST_COST_AFD (
				PERIOD_BUDGET, 
				REGION_CODE, 
				BA_CODE, 
				AFD_CODE, 
				TIPE_TRANSAKSI, 
				ACTIVITY_CODE, 
				ACTIVITY_DESC, 
				COST_ELEMENT, 
				KETERANGAN,
				UOM, 
				QTY_JAN, 
				QTY_FEB, 
				QTY_MAR, 
				QTY_APR, 
				QTY_MAY, 
				QTY_JUN, 
				QTY_JUL, 
				QTY_AUG, 
				QTY_SEP, 
				QTY_OCT, 
				QTY_NOV, 
				QTY_DEC, 
				QTY_SMS1, 
				QTY_SMS2, 
				QTY_SETAHUN, 
				COST_JAN, 
				COST_FEB, 
				COST_MAR, 
				COST_APR, 
				COST_MAY, 
				COST_JUN, 
				COST_JUL, 
				COST_AUG, 
				COST_SEP, 
				COST_OCT, 
				COST_NOV, 
				COST_DEC, 
				COST_SMS1, 
				COST_SMS2, 
				COST_SETAHUN, 
				RP_ROTASI_SMS1, 
				RP_ROTASI_SMS2, 
				RP_ROTASI_TOTAL,
				INSERT_USER, 
				INSERT_TIME
			)
			SELECT 	PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					TIPE_TRANSAKSI,
					ACTIVITY_CODE,
					ACTIVITY_DESC,
					COST_ELEMENT,
					KETERANGAN,
					UOM,
					SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
					SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
					SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
					SUM (NVL (QTY_APR, 0)) AS QTY_APR,
					SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
					SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
					SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
					SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
					SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
					SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
					SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
					SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
					CASE
						WHEN ACTIVITY_CODE = 'HA_TM'
						THEN SUM (QTY_JAN)
						ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
							  + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0)))
					END AS QTY_SMS1,
					CASE
						WHEN ACTIVITY_CODE = 'HA_TM'
						THEN SUM (QTY_JUL)
						ELSE (SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
							  + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
					END AS QTY_SMS2,
					CASE
						WHEN ACTIVITY_CODE = 'HA_TM'
						THEN 0
						ELSE (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
							  + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
							  + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
							  + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
					END AS QTY_SETAHUN,
					SUM (NVL (COST_JAN, 0)) COST_JAN,
					SUM (NVL (COST_FEB, 0)) COST_FEB,
					SUM (NVL (COST_MAR, 0)) COST_MAR,
					SUM (NVL (COST_APR, 0)) COST_APR,
					SUM (NVL (COST_MAY, 0)) COST_MAY,
					SUM (NVL (COST_JUN, 0)) COST_JUN,
					SUM (NVL (COST_JUL, 0)) COST_JUL,
					SUM (NVL (COST_AUG, 0)) COST_AUG,
					SUM (NVL (COST_SEP, 0)) COST_SEP,
					SUM (NVL (COST_OCT, 0)) COST_OCT,
					SUM (NVL (COST_NOV, 0)) COST_NOV,
					SUM (NVL (COST_DEC, 0)) COST_DEC,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))) AS COST_SMS1,
					(SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SMS2,
					(SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
					 + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) AS COST_SETAHUN,
					SUM (NVL (RP_ROTASI_SMS1, 0)) AS RP_ROTASI_SMS1,
					SUM (NVL (RP_ROTASI_SMS2, 0)) AS RP_ROTASI_SMS2,
					CASE
						WHEN (SUM (NVL (RP_ROTASI_SMS1, 0))) = (SUM (NVL (RP_ROTASI_SMS2, 0)))
						THEN SUM (NVL (RP_ROTASI_SMS1, 0))
						ELSE (SUM (NVL (RP_ROTASI_SMS1, 0)) + SUM (NVL (RP_ROTASI_SMS2, 0)))
					END AS RP_ROTASI_TOTAL,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
			FROM (
				-- HECTARE TANAM TM - SMS 1
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'HA_TM' ACTIVITY_CODE,
						'HEKTAR TM' AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'HA' AS UOM,
						RKT.HA_PLANTED AS QTY_JAN,
						RKT.HA_PLANTED AS QTY_FEB,
						RKT.HA_PLANTED AS QTY_MAR,
						RKT.HA_PLANTED AS QTY_APR,
						RKT.HA_PLANTED AS QTY_MAY,
						RKT.HA_PLANTED AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TM_HECTARE_STATEMENT RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL 
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS1 = 'TM'
					$where
				UNION ALL	
				-- HECTARE TANAM TM - SMS 2
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'HA_TM' ACTIVITY_CODE,
						'HEKTAR TM' AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'HA' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.HA_PLANTED AS QTY_JUL,
						RKT.HA_PLANTED AS QTY_AUG,
						RKT.HA_PLANTED AS QTY_SEP,
						RKT.HA_PLANTED AS QTY_OCT,
						RKT.HA_PLANTED AS QTY_NOV,
						RKT.HA_PLANTED AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TM_HECTARE_STATEMENT RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL 
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 = 'TM'
					$where
				UNION ALL
				-- PRODUKSI TBS	
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' TIPE_TRANSAKSI,
						'PRODUKSI_TBS' ACTIVITY_CODE,
						'PRODUKSI TBS' ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'TON' UOM,
						RKT.JAN QTY_JAN,
						RKT.FEB QTY_FEB,
						RKT.MAR QTY_MAR,
						RKT.APR QTY_APR,
						RKT.MAY QTY_MAY,
						RKT.JUN QTY_JUN,
						RKT.JUL QTY_JUL,
						RKT.AUG QTY_AUG,
						RKT.SEP QTY_SEP,
						RKT.OCT QTY_OCT,
						RKT.NOV QTY_NOV,
						RKT.DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_PRODUKSI_PERIODE_BUDGET RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					$where					
				UNION ALL	
				-- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 1 TM
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN AS QTY_JAN,
						RKT.PLAN_FEB AS QTY_FEB,
						RKT.PLAN_MAR AS QTY_MAR,
						RKT.PLAN_APR AS QTY_APR,
						RKT.PLAN_MAY AS QTY_MAY,
						RKT.PLAN_JUN AS QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN AS COST_JAN,
						RKT.DIS_FEB AS COST_FEB,
						RKT.DIS_MAR AS COST_MAR,
						RKT.DIS_APR AS COST_APR,
						RKT.DIS_MAY AS COST_MAY,
						RKT.DIS_JUN AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.RP_ROTASI_SMS1 AS RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI')
					AND RKT.MATURITY_STAGE_SMS1 = 'TM'
					$where
				UNION ALL	
				-- BIAYA PRODUKSI UNTUK RKT RAWAT : SMS 2 TM
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL AS QTY_JUL,
						RKT.PLAN_AUG AS QTY_AUG,
						RKT.PLAN_SEP AS QTY_SEP,
						RKT.PLAN_OCT AS QTY_OCT,
						RKT.PLAN_NOV AS QTY_NOV,
						RKT.PLAN_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL AS COST_JUL,
						RKT.DIS_AUG AS COST_AUG,
						RKT.DIS_SEP AS COST_SEP,
						RKT.DIS_OCT AS COST_OCT,
						RKT.DIS_NOV AS COST_NOV,
						RKT.DIS_DEC AS COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.RP_ROTASI_SMS2 AS RP_ROTASI_SMS2
				FROM TR_RKT_COST_ELEMENT RKT
				LEFT JOIN TR_RKT RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE 
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.TIPE_TRANSAKSI IN ('MANUAL_INFRA', 'MANUAL_NON_INFRA', 'MANUAL_NON_INFRA_OPSI')
					AND RKT.MATURITY_STAGE_SMS2 = 'TM'
					$where
				UNION ALL	
				-- BIAYA UMUM + RELATION (SELAIN COA 1212010101, 5101030504) UNTUK TM
				SELECT	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.COA_CODE AS ACTIVITY_CODE,
						RKT.COA_DESC AS ACTIVITY_DESC,
						'' COST_ELEMENT,
						'' KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JAN) AS COST_JAN,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_FEB) AS COST_FEB,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAR) AS COST_MAR,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_APR) AS COST_APR,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_MAY) AS COST_MAY,
						(HS.SMS1_TM / NULLIF(HS.TOTAL_HA_SMS1, 0) * RKT.COST_JUN) AS COST_JUN,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_JUL) AS COST_JUL,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_AUG) AS COST_AUG,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_SEP) AS COST_SEP,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_OCT) AS COST_OCT,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_NOV) AS COST_NOV,
						(HS.SMS2_TM / NULLIF(HS.TOTAL_HA_SMS2, 0) * RKT.COST_DEC) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT 	SEBARAN_HA.PERIOD_BUDGET,
							SEBARAN_HA.BA_CODE,
							SEBARAN_HA.AFD_CODE,
							RKT.REPORT_TYPE,
							RKT.COA_CODE,
							RKT.COA_DESC,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
							(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
							(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
					FROM (
                        SELECT SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2                                    
                        FROM V_REPORT_SEBARAN_HS SUMHA_AFD
                        LEFT JOIN (
                            SELECT PERIOD_BUDGET,
                                        BA_CODE,
                                        SUM(TOTAL_HA_SMS1) HA_BA_1,
                                        SUM(TOTAL_HA_SMS2) HA_BA_2
                            FROM V_REPORT_SEBARAN_HS
                            GROUP BY PERIOD_BUDGET,
                                        BA_CODE                                        
                        ) SUMHA_BA
                            ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                            AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                        GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2
					) SEBARAN_HA
					LEFT JOIN V_TOTAL_RELATION_COST RKT
						ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
						AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
				) RKT
				LEFT JOIN (
					SELECT 	HS.PERIOD_BUDGET,
							HS.BA_CODE,
							HS.AFD_CODE,
							HS.SMS1_TM,
							HS.TOTAL_HA_SMS1,
							HS.SMS2_TM,
							HS.TOTAL_HA_SMS2
					FROM V_REPORT_SEBARAN_HS HS
				) HS
					ON HS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND HS.BA_CODE = RKT.BA_CODE
					AND HS.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.COA_CODE NOT IN ( '1212010101',  '5101030504')
					$where
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS1 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						HS.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '1' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JAN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '2' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_FEB,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '3' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '4' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_APR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '5' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAY,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '6' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS1 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (1, 2, 3, 4, 5, 6) -- SMS1
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020400' -- UNTUK PUPUK  MAJEMUK
				UNION ALL	
				-- RKT PUPUK MAJEMUK COST ELEMENT MATERIAL : MATURITY STAGE SMS2 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						HS.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '7' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUL,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '8' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_AUG,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '9' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_SEP,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '10' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_OCT,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '11' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_NOV,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '12' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS2 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (7, 8, 9, 10, 11, 12) -- SMS2
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020400' -- UNTUK PUPUK  MAJEMUK
				UNION ALL	
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS1 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						HS.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '1' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JAN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '2' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_FEB,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '3' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '4' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_APR,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '5' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_MAY,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '6' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS1 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (1, 2, 3, 4, 5, 6) -- SMS1
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020300' -- UNTUK PUPUK  TUNGGAL
				UNION ALL	
				-- RKT PUPUK TUNGGAL COST ELEMENT MATERIAL : MATURITY STAGE SMS2 = TM
				SELECT 	HS.PERIOD_BUDGET,
						HS.REGION_CODE,
						HS.BA_CODE,
						HS.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						MATERIAL.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '7' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_JUL,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '8' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_AUG,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '9' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_SEP,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '10' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_OCT,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '11' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_NOV,
						CASE NORMA_PUPUK.BULAN_PEMUPUKAN
						   WHEN '12' THEN NORMA_PUPUK.BIAYA
						   ELSE 0
						END AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT RKT.*, ORG.REGION_CODE
					FROM TM_HECTARE_STATEMENT RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.DELETE_USER IS NULL
						AND RKT.FLAG_TEMP IS NULL
						AND RKT.MATURITY_STAGE_SMS2 = 'TM'
						$where
				)HS
				LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
					ON HS.PERIOD_BUDGET = NORMA_PUPUK.PERIOD_BUDGET
					AND HS.BA_CODE = NORMA_PUPUK.BA_CODE
					AND HS.AFD_CODE = NORMA_PUPUK.AFD_CODE
					AND HS.BLOCK_CODE = NORMA_PUPUK.BLOCK_CODE
					AND NORMA_PUPUK.DELETE_USER IS NULL
					AND NORMA_PUPUK.BULAN_PEMUPUKAN IN (7, 8, 9, 10, 11, 12) -- SMS2
				LEFT JOIN TM_MATERIAL MATERIAL
					ON NORMA_PUPUK.PERIOD_BUDGET = MATERIAL.PERIOD_BUDGET
					AND NORMA_PUPUK.BA_CODE = MATERIAL.BA_CODE
					AND NORMA_PUPUK.MATERIAL_CODE = MATERIAL.MATERIAL_CODE
					AND MATERIAL.DELETE_USER IS NULL
				WHERE MATERIAL.COA_CODE = '5101020300' -- UNTUK PUPUK  TUNGGAL
				UNION ALL	
				-- QTY KG PUPUK MAJEMUK - TM				
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
						RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
						RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
						RKT.QTY_MAJEMUK_APR AS QTY_APR,
						RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
						RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
						RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
						RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
						RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
						RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
						RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
						RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.MATURITY_STAGE = 'TM' 
					AND RKT.COA_CODE = '5101020400' -- UNTUK PUPUK MAJEMUK
					$where					
				UNION ALL	
				-- QTY KG PUPUK TUNGGAL - TM
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						'MATERIAL' AS COST_ELEMENT,
						RKT.MATERIAL_NAME AS  KETERANGAN,
						'KG' AS UOM,
						RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
						RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
						RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
						RKT.QTY_TUNGGAL_APR AS QTY_APR,
						RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
						RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
						RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
						RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
						RKT.QTY_TUNGGAL_SEP AS QTY_SEP,
						RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
						RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
						RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM V_KG_PUPUK_PER_MATERIAL_AFD RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.MATURITY_STAGE = 'TM' 
					AND RKT.COA_CODE = '5101020300' -- UNTUK PUPUK TUNGGAL
					$where
				UNION ALL	
				-- RKT PUPUK TUNGGAL SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						COST.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020300' AS ACTIVITY_CODE,
						'PUPUK TUNGGAL' AS ACTIVITY_DESC,
						COST.COST_ELEMENT,
						'' AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (  
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							AFD_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 AS MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						AFD_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL	
				-- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
				SELECT 	COST.PERIOD_BUDGET,
						COST.REGION_CODE,
						COST.BA_CODE,
						COST.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101020400' AS ACTIVITY_CODE,
						'PUPUK MAJEMUK' AS ACTIVITY_DESC,
						COST.COST_ELEMENT,
						'' AS  KETERANGAN,
						'KG' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
							ELSE 0
						END AS COST_JAN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
							ELSE 0
						END AS COST_FEB,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
							ELSE 0
						END AS COST_MAR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
							ELSE 0
						END AS COST_APR,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
							ELSE 0
						END AS COST_MAY,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
							ELSE 0
						END AS COST_JUN,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
							ELSE 0
						END AS COST_JUL,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
							ELSE 0
						END AS COST_AUG,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
							ELSE 0
						END AS COST_SEP,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
							ELSE 0
						END AS COST_OCT,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
							ELSE 0
						END AS COST_NOV,
						CASE
							WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
							THEN (KG_PUPUK.QTY_MAJEMUK_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
							ELSE 0
						END AS COST_DEC,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS1,
						CASE
							WHEN COST.COST_ELEMENT = 'LABOUR'
							THEN COST.COST_LABOUR_POKOK
							WHEN COST.COST_ELEMENT = 'TOOLS'
							THEN COST.COST_TOOLS_KG
							WHEN COST.COST_ELEMENT = 'TRANSPORT'
							THEN COST.COST_TRANSPORT_KG
							ELSE 0
						END AS RP_ROTASI_SMS2
				FROM (  
					SELECT 	PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							AFD_CODE,
							COST_ELEMENT,
							MATURITY_STAGE,
							SUM (DIS_COST_JAN) DIS_COST_JAN,
							SUM (DIS_COST_FEB) DIS_COST_FEB,
							SUM (DIS_COST_MAR) DIS_COST_MAR,
							SUM (DIS_COST_APR) DIS_COST_APR,
							SUM (DIS_COST_MAY) DIS_COST_MAY,
							SUM (DIS_COST_JUN) DIS_COST_JUN,
							SUM (DIS_COST_JUL) DIS_COST_JUL,
							SUM (DIS_COST_AUG) DIS_COST_AUG,
							SUM (DIS_COST_SEP) DIS_COST_SEP,
							SUM (DIS_COST_OCT) DIS_COST_OCT,
							SUM (DIS_COST_NOV) DIS_COST_NOV,
							SUM (DIS_COST_DEC) DIS_COST_DEC,
							MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
							MAX (COST_TOOLS_KG) COST_TOOLS_KG,
							MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
					FROM (  
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
								SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
								SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
								SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
								SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
								SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
								SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
								0 DIS_COST_JUL,
								0 DIS_COST_AUG,
								0 DIS_COST_SEP,
								0 DIS_COST_OCT,
								0 DIS_COST_NOV,
								0 DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS1 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS1
						UNION ALL
						SELECT 	RKT.PERIOD_BUDGET,
								ORG.REGION_CODE,
								RKT.BA_CODE,
								RKT.AFD_CODE,
								RKT.COST_ELEMENT,
								RKT.MATURITY_STAGE_SMS2 AS MATURITY_STAGE,
								0 DIS_COST_JAN,
								0 DIS_COST_FEB,
								0 DIS_COST_MAR,
								0 DIS_COST_APR,
								0 DIS_COST_MAY,
								0 DIS_COST_JUN,
								SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
								SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
								SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
								SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
								SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
								SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
								MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
								MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
								MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
						FROM TR_RKT_PUPUK_COST_ELEMENT RKT
						LEFT JOIN TM_ORGANIZATION ORG
							ON ORG.BA_CODE = RKT.BA_CODE
						WHERE RKT.DELETE_USER IS NULL
							AND RKT.MATURITY_STAGE_SMS2 = 'TM'
							AND RKT.COST_ELEMENT <> 'MATERIAL'
							$where
						GROUP BY RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							RKT.COST_ELEMENT,
							RKT.MATURITY_STAGE_SMS2
					)
					GROUP BY PERIOD_BUDGET,
						REGION_CODE,
						BA_CODE,
						AFD_CODE,
						COST_ELEMENT,
						MATURITY_STAGE
				) COST
				LEFT JOIN V_KG_PUPUK_AFD KG_PUPUK
					ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
					AND COST.BA_CODE = KG_PUPUK.BA_CODE
					AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
					AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
				UNION ALL					
				-- PANEN - BIAYA PEMANEN
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030101' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'BIAYA PEMANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JAN,
						(SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_FEB,
						(SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_MAR,
						(SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_APR,
						(SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_MAY,
						(SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JUN,
						(SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_JUL,
						(SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_AUG,
						(SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_SEP,
						(SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_OCT,
						(SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_NOV,
						(SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_BASIS) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
						SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
							JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (
						SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                norma.BA_CODE BA_CODE,
                                norma.AFD_CODE AFD_CODE,
                                sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                   sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                  sum((norma.JAN + norma.FEB+ norma.MAR +
                               norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                               norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                            FROM TR_PRODUKSI_PERIODE_BUDGET norma
                            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                AND norma.BA_CODE = thn_berjalan.BA_CODE
                                AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                            WHERE norma.DELETE_USER IS NULL
                                $where1
                            group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - PREMI PANEN JANJANG
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030201' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'PREMI PANEN JANJANG' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JAN,
                        (SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_FEB,
                        (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_MAR,
                        (SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_APR,
                        (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_MAY,
                        (SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JUN,
                        (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_JUL,
                        (SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_AUG,
                        (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_SEP,
                        (SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_OCT,
                        (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_NOV,
                        (SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_JANJANG) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
						SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
							JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (
						SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                norma.BA_CODE BA_CODE,
                                norma.AFD_CODE AFD_CODE,
                                sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                   sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                  sum((norma.JAN + norma.FEB+ norma.MAR +
                               norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                               norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                            FROM TR_PRODUKSI_PERIODE_BUDGET norma
                            LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                AND norma.BA_CODE = thn_berjalan.BA_CODE
                                AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                            WHERE norma.DELETE_USER IS NULL
                                $where1
                            group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL
					-- PANEN - PREMI PANEN BRD
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030301' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'PREMI PANEN BRD' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JAN,
                        (SEBARAN.FEB * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_FEB,
                        (SEBARAN.MAR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAR,
                        (SEBARAN.APR * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_APR,
                        (SEBARAN.MAY * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_MAY,
                        (SEBARAN.JUN * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUN,
                        (SEBARAN.JUL * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_JUL,
                        (SEBARAN.AUG * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_AUG,
                        (SEBARAN.SEP * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_SEP,
                        (SEBARAN.OCT * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_OCT,
                        (SEBARAN.NOV * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_NOV,
                        (SEBARAN.DEC * RKT.BIAYA_PEMANEN_RP_PREMI_BRD) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - KRANI BUAH
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030701' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'KRANI BUAH' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.KRANI_BUAH_TOTAL) AS COST_JAN,
						(SEBARAN.FEB * RKT.KRANI_BUAH_TOTAL) AS COST_FEB,
						(SEBARAN.MAR * RKT.KRANI_BUAH_TOTAL) AS COST_MAR,
						(SEBARAN.APR * RKT.KRANI_BUAH_TOTAL) AS COST_APR,
						(SEBARAN.MAY * RKT.KRANI_BUAH_TOTAL) AS COST_MAY,
						(SEBARAN.JUN * RKT.KRANI_BUAH_TOTAL) AS COST_JUN,
						(SEBARAN.JUL * RKT.KRANI_BUAH_TOTAL) AS COST_JUL,
						(SEBARAN.AUG * RKT.KRANI_BUAH_TOTAL) AS COST_AUG,
						(SEBARAN.SEP * RKT.KRANI_BUAH_TOTAL) AS COST_SEP,
						(SEBARAN.OCT * RKT.KRANI_BUAH_TOTAL) AS COST_OCT,
						(SEBARAN.NOV * RKT.KRANI_BUAH_TOTAL) AS COST_NOV,
						(SEBARAN.DEC * RKT.KRANI_BUAH_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - ALAT PANEN
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030103' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'ALAT PANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JAN,
						(SEBARAN.FEB * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_FEB,
						(SEBARAN.MAR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAR,
						(SEBARAN.APR * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_APR,
						(SEBARAN.MAY * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_MAY,
						(SEBARAN.JUN * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUN,
						(SEBARAN.JUL * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_JUL,
						(SEBARAN.AUG * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_AUG,
						(SEBARAN.SEP * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_SEP,
						(SEBARAN.OCT * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_OCT,
						(SEBARAN.NOV * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_NOV,
						(SEBARAN.DEC * RKT.BIAYA_ALAT_PANEN_RP_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - SUPERVISI PEMANEN
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030701' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'SUPERVISI PEMANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JAN,
						(SEBARAN.FEB * RKT.BIAYA_SPV_RP_TOTAL) AS COST_FEB,
						(SEBARAN.MAR * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAR,
						(SEBARAN.APR * RKT.BIAYA_SPV_RP_TOTAL) AS COST_APR,
						(SEBARAN.MAY * RKT.BIAYA_SPV_RP_TOTAL) AS COST_MAY,
						(SEBARAN.JUN * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUN,
						(SEBARAN.JUL * RKT.BIAYA_SPV_RP_TOTAL) AS COST_JUL,
						(SEBARAN.AUG * RKT.BIAYA_SPV_RP_TOTAL) AS COST_AUG,
						(SEBARAN.SEP * RKT.BIAYA_SPV_RP_TOTAL) AS COST_SEP,
						(SEBARAN.OCT * RKT.BIAYA_SPV_RP_TOTAL) AS COST_OCT,
						(SEBARAN.NOV * RKT.BIAYA_SPV_RP_TOTAL) AS COST_NOV,
						(SEBARAN.DEC * RKT.BIAYA_SPV_RP_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - PREMI SUPIR
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030504-3' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'PREMI SUPIR' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.SUPIR_PREMI) AS COST_JAN,
						(SEBARAN.FEB * RKT.SUPIR_PREMI) AS COST_FEB,
						(SEBARAN.MAR * RKT.SUPIR_PREMI) AS COST_MAR,
						(SEBARAN.APR * RKT.SUPIR_PREMI) AS COST_APR,
						(SEBARAN.MAY * RKT.SUPIR_PREMI) AS COST_MAY,
						(SEBARAN.JUN * RKT.SUPIR_PREMI) AS COST_JUN,
						(SEBARAN.JUL * RKT.SUPIR_PREMI) AS COST_JUL,
						(SEBARAN.AUG * RKT.SUPIR_PREMI) AS COST_AUG,
						(SEBARAN.SEP * RKT.SUPIR_PREMI) AS COST_SEP,
						(SEBARAN.OCT * RKT.SUPIR_PREMI) AS COST_OCT,
						(SEBARAN.NOV * RKT.SUPIR_PREMI) AS COST_NOV,
						(SEBARAN.DEC * RKT.SUPIR_PREMI) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - ANGKUT - LANGSIR
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030404-2' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'LANGSIR' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_JAN,	-- By Aries (13-07-15) 
						(SEBARAN.FEB *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_FEB,
						(SEBARAN.MAR *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_MAR,
						(SEBARAN.APR *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_APR,
						(SEBARAN.MAY *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_MAY,
						(SEBARAN.JUN *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_JUN,
						(SEBARAN.JUL *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_JUL,
						(SEBARAN.AUG *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_AUG,
						(SEBARAN.SEP *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_SEP,
						(SEBARAN.OCT *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_OCT,
						(SEBARAN.NOV *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_NOV,
						(SEBARAN.DEC *  (RKT.LANGSIR_RP + RKT.LANGSIR_TUKANG_MUAT)) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - TRANSPORT TBS - BONGKAR MUAT
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030404-1' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'BONGKAR MUAT' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.TUKANG_MUAT_TOTAL) AS COST_JAN,
						(SEBARAN.FEB * RKT.TUKANG_MUAT_TOTAL) AS COST_FEB,
						(SEBARAN.MAR * RKT.TUKANG_MUAT_TOTAL) AS COST_MAR,
						(SEBARAN.APR * RKT.TUKANG_MUAT_TOTAL) AS COST_APR,
						(SEBARAN.MAY * RKT.TUKANG_MUAT_TOTAL) AS COST_MAY,
						(SEBARAN.JUN * RKT.TUKANG_MUAT_TOTAL) AS COST_JUN,
						(SEBARAN.JUL * RKT.TUKANG_MUAT_TOTAL) AS COST_JUL,
						(SEBARAN.AUG * RKT.TUKANG_MUAT_TOTAL) AS COST_AUG,
						(SEBARAN.SEP * RKT.TUKANG_MUAT_TOTAL) AS COST_SEP,
						(SEBARAN.OCT * RKT.TUKANG_MUAT_TOTAL) AS COST_OCT,
						(SEBARAN.NOV * RKT.TUKANG_MUAT_TOTAL) AS COST_NOV,
						(SEBARAN.DEC * RKT.TUKANG_MUAT_TOTAL) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL	
				-- PANEN - ANGKUT - TRANSPORT TBS INTERNAL
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030504-2' AS ACTIVITY_CODE, -- BY ADI 16/11/2014
						'TRANSPORT TBS INTERNAL - PANEN' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JAN,
						(SEBARAN.FEB * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_FEB,
						(SEBARAN.MAR * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAR,
						(SEBARAN.APR * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_APR,
						(SEBARAN.MAY * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAY,
						(SEBARAN.JUN * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUN,
						(SEBARAN.JUL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUL,
						(SEBARAN.AUG * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_AUG,
						(SEBARAN.SEP * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_SEP,
						(SEBARAN.OCT * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_OCT,
						(SEBARAN.NOV * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_NOV,
						(SEBARAN.DEC * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.SUMBER_BIAYA_UNIT = 'INTERNAL'
					$where
				UNION ALL	
				-- PANEN - ANGKUT - TRANSPORT TBS EKSTERNAL
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030605' AS ACTIVITY_CODE, -- BY ADI 30/08/2014
						'TRANSPORT TBS EKSTERNAL' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JAN,
						(SEBARAN.FEB * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_FEB,
						(SEBARAN.MAR * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAR,
						(SEBARAN.APR * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_APR,
						(SEBARAN.MAY * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_MAY,
						(SEBARAN.JUN * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUN,
						(SEBARAN.JUL * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_JUL,
						(SEBARAN.AUG * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_AUG,
						(SEBARAN.SEP * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_SEP,
						(SEBARAN.OCT * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_OCT,
						(SEBARAN.NOV * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_NOV,
						(SEBARAN.DEC * RKT.ANGKUT_TBS_RP_ANGKUT) AS COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PANEN RKT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = RKT.PERIOD_BUDGET and sebaran.BA_CODE = RKT.BA_CODE and sebaran.AFD_CODE = RKT.AFD_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.SUMBER_BIAYA_UNIT = 'EXTERNAL'
					$where
				UNION ALL	
				-- PANEN : PENGANGKUTAN TBS INTERNAL (COA : 5101030504)
				SELECT 	ANGKUT.PERIOD_BUDGET,
						ANGKUT.REGION_CODE,
						ANGKUT.BA_CODE,
						ANGKUT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						'5101030504-1' AS ACTIVITY_CODE,  -- BY ADI 16/11/2014
						'PENGANGKUTAN INTERNAL TBS - VRA' AS ACTIVITY_DETAIL,
						'' AS COST_ELEMENT,
						'' KETERANGAN,
						'' AS UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN.JAN * ANGKUT.TOTAL) COST_JAN,
						(SEBARAN.FEB * ANGKUT.TOTAL) COST_FEB,
						(SEBARAN.MAR * ANGKUT.TOTAL) COST_MAR,
						(SEBARAN.APR * ANGKUT.TOTAL) COST_APR,
						(SEBARAN.MAY * ANGKUT.TOTAL) COST_MAY,
						(SEBARAN.JUN * ANGKUT.TOTAL) COST_JUN,
						(SEBARAN.JUL * ANGKUT.TOTAL) COST_JUL,
						(SEBARAN.AUG * ANGKUT.TOTAL) COST_AUG,
						(SEBARAN.SEP * ANGKUT.TOTAL) COST_SEP,
						(SEBARAN.OCT * ANGKUT.TOTAL) COST_OCT,
						(SEBARAN.NOV * ANGKUT.TOTAL) COST_NOV,
						(SEBARAN.DEC * ANGKUT.TOTAL) COST_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM (
					SELECT 	RKT.PERIOD_BUDGET,
							ORG.REGION_CODE,
							RKT.BA_CODE,
							RKT.AFD_CODE,
							(NVL (RKT.COST_JAN, 0) + NVL (RKT.COST_FEB, 0) + NVL (RKT.COST_MAR, 0)
							 + NVL (RKT.COST_APR, 0) + NVL (RKT.COST_MAY, 0) + NVL (RKT.COST_JUN, 0)
							 + NVL (RKT.COST_JUL, 0) + NVL (RKT.COST_AUG, 0) + NVL (RKT.COST_SEP, 0)
							 + NVL (RKT.COST_OCT, 0) + NVL (RKT.COST_NOV, 0) + NVL (RKT.COST_DEC, 0)) AS TOTAL
					FROM (
						SELECT 	SEBARAN_HA.PERIOD_BUDGET,
								SEBARAN_HA.BA_CODE,
								SEBARAN_HA.AFD_CODE,
								RKT.REPORT_TYPE,
								RKT.COA_CODE,
								RKT.COA_DESC,
								(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JAN) COST_JAN,
								(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_FEB) COST_FEB,
								(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAR) COST_MAR,
								(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_APR) COST_APR,
								(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_MAY) COST_MAY,
								(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.COST_JUN) COST_JUN,
								(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_JUL) COST_JUL,
								(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_AUG) COST_AUG,
								(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_SEP) COST_SEP,
								(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_OCT) COST_OCT,
								(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_NOV) COST_NOV,
								(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.COST_DEC) COST_DEC
						FROM (
                        SELECT SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS1) as HA_AFD_1,
                                    SUM(SUMHA_AFD.TOTAL_HA_SMS2) as HA_AFD_2,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2                                    
                        FROM V_REPORT_SEBARAN_HS SUMHA_AFD
                        LEFT JOIN (
                            SELECT PERIOD_BUDGET,
                                        BA_CODE,
                                        SUM(TOTAL_HA_SMS1) HA_BA_1,
                                        SUM(TOTAL_HA_SMS2) HA_BA_2
                            FROM V_REPORT_SEBARAN_HS
                            GROUP BY PERIOD_BUDGET,
                                        BA_CODE                                        
                        ) SUMHA_BA
                            ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                            AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                        GROUP BY SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUMHA_BA.HA_BA_1,
                                    SUMHA_BA.HA_BA_2
						) SEBARAN_HA
						LEFT JOIN V_TOTAL_RELATION_COST RKT
							ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
					) RKT
					LEFT JOIN TM_ORGANIZATION ORG
						ON ORG.BA_CODE = RKT.BA_CODE
					WHERE RKT.COA_CODE = '5101030504'
						$where
				) ANGKUT
				LEFT JOIN (
                        SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, JAN/TOTAL AS JAN, FEB/TOTAL AS FEB, MAR/TOTAL AS MAR, APR/TOTAL AS APR, MAY/TOTAL AS MAY, JUN/TOTAL AS JUN, 
                                JUL/TOTAL AS JUL, AUG/TOTAL AS AUG, SEP/TOTAL AS SEP, OCT/TOTAL AS OCT, NOV/TOTAL AS NOV, DEC/TOTAL AS DEC, TOTAL FROM (          
                            SELECT norma.PERIOD_BUDGET PERIOD_BUDGET,
                                    norma.BA_CODE BA_CODE,
                                    norma.AFD_CODE AFD_CODE,
                                    sum(norma.JAN) JAN, sum(norma.FEB) FEB, sum(norma.MAR) MAR, sum(norma.APR) APR, sum(norma.MAY) MAY, sum(norma.JUN) JUN,  
                                       sum(norma.JUL) JUL, sum(norma.AUG) AUG, sum(norma.SEP) SEP, sum(norma.OCT) OCT, sum(norma.NOV) NOV, sum(norma.DEC) DEC,  
                                      sum((norma.JAN + norma.FEB+ norma.MAR +
                                   norma.APR+ norma.MAY+  norma.JUN+ norma.JUL+  
                                   norma.AUG+ norma.SEP+  norma.OCT+ norma.NOV+  norma.DEC)) total
                                FROM TR_PRODUKSI_PERIODE_BUDGET norma
                                LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
                                    ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
                                    AND norma.BA_CODE = thn_berjalan.BA_CODE
                                    AND norma.AFD_CODE = thn_berjalan.AFD_CODE
                                    AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
                                WHERE norma.DELETE_USER IS NULL
                                    $where1
                                group by norma.PERIOD_BUDGET, norma.BA_CODE, norma.AFD_CODE )
                    )  SEBARAN on sebaran.PERIOD_BUDGET = ANGKUT.PERIOD_BUDGET and sebaran.BA_CODE = ANGKUT.BA_CODE and sebaran.AFD_CODE = ANGKUT.AFD_CODE
				UNION ALL
				-- ALOKASI CHECKROLL
				SELECT 	SEBARAN_HA.PERIOD_BUDGET,
						ORG.REGION_CODE,
						SEBARAN_HA.BA_CODE,
						SEBARAN_HA.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.TUNJANGAN_TYPE AS ACTIVITY_CODE,
						RKT.TUNJANGAN_TYPE AS ACTIVITY_DESC,
						'LABOUR' AS COST_ELEMENT,
						'' KETERANGAN,
						'' UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_JAN) DIS_JAN,
						(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_FEB) DIS_FEB,
						(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_MAR) DIS_MAR,
						(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_APR) DIS_APR,
						(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_MAY) DIS_MAY,
						(SEBARAN_HA.HA_AFD_1 / SEBARAN_HA.HA_BA_1 * RKT.DIS_JUN) DIS_JUN,
						(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_JUL) DIS_JUL,
						(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_AUG) DIS_AUG,
						(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_SEP) DIS_SEP,
						(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_OCT) DIS_OCT,
						(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_NOV) DIS_NOV,
						(SEBARAN_HA.HA_AFD_2 / SEBARAN_HA.HA_BA_2 * RKT.DIS_DEC) DIS_DEC,
						0 RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM ( SELECT SUMHA_AFD.PERIOD_BUDGET,
                                    SUMHA_AFD.BA_CODE,
                                    SUMHA_AFD.AFD_CODE,
                                    SUMHA_AFD.SMS1_TM as HA_AFD_1,
                                    SUMHA_AFD.SMS2_TM as HA_AFD_2,
                                    SUMHA_BA.TOTAL_SMS1_TM HA_BA_1,
                                    SUMHA_BA.TOTAL_SMS2_TM HA_BA_2                                  
                        FROM V_REPORT_SEBARAN_HS SUMHA_AFD
                        LEFT JOIN (
                            SELECT PERIOD_BUDGET,
                                        BA_CODE,
                                        SUM(SMS1_TM) TOTAL_SMS1_TM,
                                        SUM(SMS2_TM) TOTAL_SMS2_TM
                            FROM V_REPORT_SEBARAN_HS
                            GROUP BY PERIOD_BUDGET,
                                        BA_CODE                                        
                        ) SUMHA_BA
                            ON SUMHA_BA.PERIOD_BUDGET = SUMHA_AFD.PERIOD_BUDGET
                            AND SUMHA_BA.BA_CODE = SUMHA_AFD.BA_CODE                            
                ) SEBARAN_HA
				LEFT JOIN TR_RPT_DISTRIBUSI_COA RKT
					ON SEBARAN_HA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
					AND SEBARAN_HA.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.REPORT_TYPE = 'CR_ALOKASI'
					AND RKT.DELETE_USER IS NULL
					AND RKT.MATURITY_STAGE = 'TM'
					$where
				UNION ALL
				-- RKT PERKERASAN JALAN : SMS 1 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.DIS_JAN COST_JAN,
						RKT.DIS_FEB COST_FEB,
						RKT.DIS_MAR COST_MAR,
						RKT.DIS_APR COST_APR,
						RKT.DIS_MAY COST_MAY,
						RKT.DIS_JUN COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS1,
						0 RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS1 = 'TM'
					AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
					$where
				UNION ALL
				-- RKT PERKERASAN JALAN : SMS 2 = TM & JENIS = PERULANGAN (DIKATEGORIKAN SBG BIAYA RAWAT TM)
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.AFD_CODE,
						'TM' AS TIPE_TRANSAKSI,
						RKT.ACTIVITY_CODE,
						ACT.DESCRIPTION AS ACTIVITY_DESC,
						RKT.COST_ELEMENT,
						'' KETERANGAN,
						ACT.UOM,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.DIS_JUL COST_JUL,
						RKT.DIS_AUG COST_AUG,
						RKT.DIS_SEP COST_SEP,
						RKT.DIS_OCT COST_OCT,
						RKT.DIS_NOV COST_NOV,
						RKT.DIS_DEC COST_DEC,
						0 RP_ROTASI_SMS1,
						RKT.TOTAL_RP_QTY RP_ROTASI_SMS2
				FROM TR_RKT_PK_COST_ELEMENT RKT
				LEFT JOIN TR_RKT_PK RKT_INDUK
					ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT_INDUK.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 = 'TM'
					AND RKT_INDUK.JENIS_PEKERJAAN = 'PERULANGAN'
					$where
			) REPORT
			GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				TIPE_TRANSAKSI,
				ACTIVITY_CODE,
				ACTIVITY_DESC,
				COST_ELEMENT,
				KETERANGAN,
				UOM
		";
		
		$this->_db->query($query);
		$this->_db->commit();
		
		return true;
	}
	
	//hapus temp table untuk estate cost
	public function delTmpRptEstCost($params = array())
    {
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		//hapus estate cost per BA
		$query = "
			DELETE FROM TMP_RPT_EST_COST 
			WHERE 1 = 1
			$where 
		";
		$this->_db->query($query);
		$this->_db->commit();
		
		//hapus estate cost per afd
		$query = "
			DELETE FROM TMP_RPT_EST_COST_AFD 
			WHERE 1 = 1
			$where 
		";
		
		$this->_db->query($query);
		$this->_db->commit();
		
		return true;
	}
	
	//ARIES 15-JUN-2015
	public function tmpRptKebActEstCostBlock($params = array())
	{
		$where = "";
		$where1 = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$where1 .= "
                AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$where1 .= "
                AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";  
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND RKT.BA_CODE = '".$params['key_find']."'
            ";
			$where1 .= "
                AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
            ";
        }
		//generate estate cost per BLOCK
		$query = "
			INSERT INTO TMP_RPT_KEB_EST_COST_BLOCK (
				PERIOD_BUDGET, 
				REGION_CODE, 
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				TIPE_TRANSAKSI, 
				COST_ELEMENT,
                ACTIVITY_CODE,
                ACTIVITY_DESC,
				SUB_COST_ELEMENT,
				SUB_COST_ELEMENT_DESC,
				KETERANGAN,
				UOM, 
				QTY_JAN, 
				QTY_FEB, 
				QTY_MAR, 
				QTY_APR, 
				QTY_MAY, 
				QTY_JUN, 
				QTY_JUL, 
				QTY_AUG, 
				QTY_SEP, 
				QTY_OCT, 
				QTY_NOV, 
				QTY_DEC,
				COST_JAN, 
				COST_FEB, 
				COST_MAR, 
				COST_APR, 
				COST_MAY, 
				COST_JUN, 
				COST_JUL, 
				COST_AUG, 
				COST_SEP, 
				COST_OCT, 
				COST_NOV, 
				COST_DEC,
				QTY_SETAHUN,
				COST_SETAHUN,
				INSERT_USER, 
				INSERT_TIME
			)
		SELECT PERIOD_BUDGET,
		 REGION_CODE,	  
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         ACTIVITY_GROUP,
         COST_ELEMENT,
         ACTIVITY_CODE,
		 ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         '' KETERANGAN,
		 UOM,
         SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
         SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
         SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
         SUM (NVL (QTY_APR, 0)) AS QTY_APR,
         SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
         SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
         SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
         SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
         SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
         SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
         SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
         SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
         SUM (NVL (COST_JAN, 0)) AS COST_JAN,
         SUM (NVL (COST_FEB, 0)) AS COST_FEB,
         SUM (NVL (COST_MAR, 0)) AS COST_MAR,
         SUM (NVL (COST_APR, 0)) AS COST_APR,
         SUM (NVL (COST_MAY, 0)) AS COST_MAY,
         SUM (NVL (COST_JUN, 0)) AS COST_JUN,
         SUM (NVL (COST_JUL, 0)) AS COST_JUL,
         SUM (NVL (COST_AUG, 0)) AS COST_AUG,
         SUM (NVL (COST_SEP, 0)) AS COST_SEP,
         SUM (NVL (COST_OCT, 0)) AS COST_OCT,
         SUM (NVL (COST_NOV, 0)) AS COST_NOV,
         SUM (NVL (COST_DEC, 0)) AS COST_DEC,
		 (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                              + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
                              + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                              + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
		 AS QTY_SETAHUN,
		 (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
                     + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
                     + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
                     + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) 
         AS COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
		 SYSDATE AS INSERT_TIME
    FROM (-- MANUAL_NON_INFRA SM 1
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     BIAYA.QTY_HA,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     (RKT.PLAN_JAN * BIAYA.QTY_HA)
                                        AS QTY_JAN,
                                     (RKT.PLAN_FEB * BIAYA.QTY_HA)
                                        AS QTY_FEB,
                                     (RKT.PLAN_MAR * BIAYA.QTY_HA)
                                        AS QTY_MAR,
                                     (RKT.PLAN_APR * BIAYA.QTY_HA)
                                        AS QTY_APR,
                                     (RKT.PLAN_MAY * BIAYA.QTY_HA)
                                        AS QTY_MAY,
                                     (RKT.PLAN_JUN * BIAYA.QTY_HA)
                                        AS QTY_JUN,
                                     0 QTY_JUL,
                                     0 QTY_AUG,
                                     0 QTY_SEP,
                                     0 QTY_OCT,
                                     0 QTY_NOV,
                                     0 QTY_DEC,
                                     (RKT.PLAN_JAN * BIAYA.PRICE_ROTASI)
                                        AS COST_JAN,
                                     (RKT.PLAN_FEB * BIAYA.PRICE_ROTASI)
                                        AS COST_FEB,
                                     (RKT.PLAN_MAR * BIAYA.PRICE_ROTASI)
                                        AS COST_MAR,
                                     (RKT.PLAN_APR * BIAYA.PRICE_ROTASI)
                                        AS COST_APR,
                                     (RKT.PLAN_MAY * BIAYA.PRICE_ROTASI)
                                        AS COST_MAY,
                                     (RKT.PLAN_JUN * BIAYA.PRICE_ROTASI)
                                        AS COST_JUN,
                                     0 COST_JUL,
                                     0 COST_AUG,
                                     0 COST_SEP,
                                     0 COST_OCT,
                                     0 COST_NOV,
                                     0 COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA'
                                     $where
                                                             )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          -- MANUAL_NON_INFRA SM 2
          UNION ALL
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     0 AS QTY_JAN,
                                     0 AS QTY_FEB,
                                     0 AS QTY_MAR,
                                     0 AS QTY_APR,
                                     0 AS QTY_MAY,
                                     0 AS QTY_JUN,
                                     (RKT.PLAN_JUL * BIAYA.QTY_HA)
                                        AS QTY_JUL,
                                     (RKT.PLAN_AUG * BIAYA.QTY_HA)
                                        AS QTY_AUG,
                                     (RKT.PLAN_SEP * BIAYA.QTY_HA)
                                        AS QTY_SEP,
                                     (RKT.PLAN_OCT * BIAYA.QTY_HA)
                                        AS QTY_OCT,
                                     (RKT.PLAN_NOV * BIAYA.QTY_HA)
                                        AS QTY_NOV,
                                     (RKT.PLAN_DEC * BIAYA.QTY_HA)
                                        AS QTY_DEC,
                                     0 COST_JAN,
                                     0 COST_FEB,
                                     0 COST_MAR,
                                     0 COST_APR,
                                     0 COST_MAY,
                                     0 AS COST_JUN,
                                     (RKT.PLAN_JUL * BIAYA.PRICE_ROTASI)
                                        AS COST_JUL,
                                     (RKT.PLAN_AUG * BIAYA.PRICE_ROTASI)
                                        AS COST_AUG,
                                     (RKT.PLAN_SEP * BIAYA.PRICE_ROTASI)
                                        AS COST_SEP,
                                     (RKT.PLAN_OCT * BIAYA.PRICE_ROTASI)
                                        AS COST_OCT,
                                     (RKT.PLAN_NOV * BIAYA.PRICE_ROTASI)
                                        AS COST_NOV,
                                     (RKT.PLAN_DEC * BIAYA.PRICE_ROTASI)
                                        AS COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          UNION ALL
          SELECT *
            FROM                                 -- MANUAL_NON_INFRA_OPSI SMS1
                 (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     (RKT.PLAN_JAN * BIAYA.QTY_HA)
                                        AS QTY_JAN,
                                     (RKT.PLAN_FEB * BIAYA.QTY_HA)
                                        AS QTY_FEB,
                                     (RKT.PLAN_MAR * BIAYA.QTY_HA)
                                        AS QTY_MAR,
                                     (RKT.PLAN_APR * BIAYA.QTY_HA)
                                        AS QTY_APR,
                                     (RKT.PLAN_MAY * BIAYA.QTY_HA)
                                        AS QTY_MAY,
                                     (RKT.PLAN_JUN * BIAYA.QTY_HA)
                                        AS QTY_JUN,
                                     0 QTY_JUL,
                                     0 QTY_AUG,
                                     0 QTY_SEP,
                                     0 QTY_OCT,
                                     0 QTY_NOV,
                                     0 QTY_DEC,
                                     (RKT.PLAN_JAN * BIAYA.PRICE_ROTASI)
                                        AS COST_JAN,
                                     (RKT.PLAN_FEB * BIAYA.PRICE_ROTASI)
                                        AS COST_FEB,
                                     (RKT.PLAN_MAR * BIAYA.PRICE_ROTASI)
                                        AS COST_MAR,
                                     (RKT.PLAN_APR * BIAYA.PRICE_ROTASI)
                                        AS COST_APR,
                                     (RKT.PLAN_MAY * BIAYA.PRICE_ROTASI)
                                        AS COST_MAY,
                                     (RKT.PLAN_JUN * BIAYA.PRICE_ROTASI)
                                        AS COST_JUN,
                                     0 COST_JUL,
                                     0 COST_AUG,
                                     0 COST_SEP,
                                     0 COST_OCT,
                                     0 COST_NOV,
                                     0 COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ATRIBUT =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q)
           WHERE rank_z = 1
          UNION ALL                              -- MANUAL_NON_INFRA_OPSI SMS2
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     0 AS QTY_JAN,
                                     0 AS QTY_FEB,
                                     0 AS QTY_MAR,
                                     0 AS QTY_APR,
                                     0 AS QTY_MAY,
                                     0 AS QTY_JUN,
                                     (RKT.PLAN_JUL * BIAYA.QTY_HA)
                                        AS QTY_JUL,
                                     (RKT.PLAN_AUG * BIAYA.QTY_HA)
                                        AS QTY_AUG,
                                     (RKT.PLAN_SEP * BIAYA.QTY_HA)
                                        AS QTY_SEP,
                                     (RKT.PLAN_OCT * BIAYA.QTY_HA)
                                        AS QTY_OCT,
                                     (RKT.PLAN_NOV * BIAYA.QTY_HA)
                                        AS QTY_NOV,
                                     (RKT.PLAN_DEC * BIAYA.QTY_HA)
                                        AS QTY_DEC,
                                     0 COST_JAN,
                                     0 COST_FEB,
                                     0 COST_MAR,
                                     0 COST_APR,
                                     0 COST_MAY,
                                     0 AS COST_JUN,
                                     (RKT.PLAN_JUL * BIAYA.PRICE_ROTASI)
                                        AS COST_JUL,
                                     (RKT.PLAN_AUG * BIAYA.PRICE_ROTASI)
                                        AS COST_AUG,
                                     (RKT.PLAN_SEP * BIAYA.PRICE_ROTASI)
                                        AS COST_SEP,
                                     (RKT.PLAN_OCT * BIAYA.PRICE_ROTASI)
                                        AS COST_OCT,
                                     (RKT.PLAN_NOV * BIAYA.PRICE_ROTASI)
                                        AS COST_NOV,
                                     (RKT.PLAN_DEC * BIAYA.PRICE_ROTASI)
                                        AS COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ATRIBUT =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
									 $where
                                                                  )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          UNION ALL
          SELECT *
            FROM                                          -- MANUAL_INFRA SMS1
                 (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     (RKT.PLAN_JAN * BIAYA.QTY_HA)
                                        AS QTY_JAN,
                                     (RKT.PLAN_FEB * BIAYA.QTY_HA)
                                        AS QTY_FEB,
                                     (RKT.PLAN_MAR * BIAYA.QTY_HA)
                                        AS QTY_MAR,
                                     (RKT.PLAN_APR * BIAYA.QTY_HA)
                                        AS QTY_APR,
                                     (RKT.PLAN_MAY * BIAYA.QTY_HA)
                                        AS QTY_MAY,
                                     (RKT.PLAN_JUN * BIAYA.QTY_HA)
                                        AS QTY_JUN,
                                     0 QTY_JUL,
                                     0 QTY_AUG,
                                     0 QTY_SEP,
                                     0 QTY_OCT,
                                     0 QTY_NOV,
                                     0 QTY_DEC,
                                     (RKT.PLAN_JAN * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_JAN,
                                     (RKT.PLAN_FEB * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_FEB,
                                     (RKT.PLAN_MAR * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_MAR,
                                     (RKT.PLAN_APR * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_APR,
                                     (RKT.PLAN_MAY * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_MAY,
                                     (RKT.PLAN_JUN * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_JUN,
                                     0 COST_JUL,
                                     0 COST_AUG,
                                     0 COST_SEP,
                                     0 COST_OCT,
                                     0 COST_NOV,
                                     0 COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_INFRASTRUKTUR BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          UNION ALL                                       -- MANUAL INFRA SMS2
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     0 AS QTY_JAN,
                                     0 AS QTY_FEB,
                                     0 AS QTY_MAR,
                                     0 AS QTY_APR,
                                     0 AS QTY_MAY,
                                     0 AS QTY_JUN,
                                     (RKT.PLAN_JUL * BIAYA.QTY_HA)
                                        AS QTY_JUL,
                                     (RKT.PLAN_AUG * BIAYA.QTY_HA)
                                        AS QTY_AUG,
                                     (RKT.PLAN_SEP * BIAYA.QTY_HA)
                                        AS QTY_SEP,
                                     (RKT.PLAN_OCT * BIAYA.QTY_HA)
                                        AS QTY_OCT,
                                     (RKT.PLAN_NOV * BIAYA.QTY_HA)
                                        AS QTY_NOV,
                                     (RKT.PLAN_DEC * BIAYA.QTY_HA)
                                        AS QTY_DEC,
                                     0 COST_JAN,
                                     0 COST_FEB,
                                     0 COST_MAR,
                                     0 COST_APR,
                                     0 COST_MAY,
                                     0 AS COST_JUN,
                                     (RKT.PLAN_JUL * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_JUL,
                                     (RKT.PLAN_AUG * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_AUG,
                                     (RKT.PLAN_SEP * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_SEP,
                                     (RKT.PLAN_OCT * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_OCT,
                                     (RKT.PLAN_NOV * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_NOV,
                                     (RKT.PLAN_DEC * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_INFRASTRUKTUR BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1) REPORT
		GROUP BY PERIOD_BUDGET,
				 REGION_CODE,
				 BA_CODE,
				 AFD_CODE,
				 BLOCK_CODE,
				 ACTIVITY_GROUP,
				 COST_ELEMENT,
				 ACTIVITY_CODE,
				 TIPE_TRANSAKSI,
				 ACTIVITY_DESC,
				 SUB_COST_ELEMENT,
				 MATERIAL_NAME,
				 UOM
		UNION ALL --PERHITUNGAN UNTUK PANEN LABOUR		 
		SELECT RKT.PERIOD_BUDGET,
			   ORG.REGION_CODE,
			   RKT.BA_CODE,
			   RKT.AFD_CODE,
			   RKT.BLOCK_CODE,
			   'TM' ACTIVITY_GROUP,
			   RKT.COST_ELEMENT,
			   RKT.ACTIVITY_CODE,
			   'BIAYA PEMANEN' ACTIVITY_DESC,
			   '' SUB_COST_ELEMENT,
			   '' MATERIAL_NAME,
			   '' KETERANGAN,
			   'HK' UOM,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JAN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JAN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT FEB
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_FEB,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT MAR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_MAR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT APR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_APR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT MAY
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_MAY,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JUN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JUN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JUL
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JUL,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT AUG
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_AUG,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT SEP
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_SEP,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT OCT
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_OCT,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT NOV
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_NOV,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT DEC
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_DEC,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT JAN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JAN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT FEB
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_FEB,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT MAR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_MAR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT APR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_APR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT MAY
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_MAY,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT JUN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JUN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT JUL
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JUL,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT AUG
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_AUG,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT SEP
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_SEP,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT OCT
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_OCT,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT NOV
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_NOV,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_BASIS
				  * (SELECT DEC
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_DEC,
			   RKT_INDUK.BIAYA_PEMANEN_HK AS QTY_SETAHUN,   
			   RKT_INDUK.BIAYA_PEMANEN_RP_BASIS AS COST_SETAHUN,
			   '".$this->_userName."' AS INSERT_USER,
			   SYSDATE AS INSERT_TIME
		  FROM TR_RKT_PANEN_COST_ELEMENT RKT
			   LEFT JOIN TR_RKT_PANEN RKT_INDUK
				  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
			   LEFT JOIN TM_ORGANIZATION ORG
				  ON ORG.BA_CODE = RKT.BA_CODE
		WHERE     RKT.COST_ELEMENT = 'LABOUR'
		$where
		UNION ALL
		--INI BUAT PREMI PANEN JANJANG
		SELECT RKT.PERIOD_BUDGET,
			   ORG.REGION_CODE,
			   RKT.BA_CODE,
			   RKT.AFD_CODE,
			   RKT.BLOCK_CODE,
			   'TM' ACTIVITY_GROUP,
			   RKT.COST_ELEMENT,
			   RKT.ACTIVITY_CODE,
			   'PREMI PANEN JANJANG' ACTIVITY_DESC,
			   '' SUB_COST_ELEMENT,
			   '' MATERIAL_NAME,
			   '' KETERANGAN,
			   'HK' UOM,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JAN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JAN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT FEB
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_FEB,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT MAR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_MAR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT APR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_APR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT MAY
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_MAY,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JUN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JUN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JUL
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JUL,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT AUG
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_AUG,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT SEP
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_SEP,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT OCT
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_OCT,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT NOV
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_NOV,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT DEC
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_DEC,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT JAN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JAN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT FEB
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_FEB,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT MAR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_MAR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT APR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_APR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT MAY
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_MAY,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT JUN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JUN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT JUL
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JUL,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT AUG
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_AUG,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT SEP
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_SEP,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT OCT
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_OCT,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT NOV
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_NOV,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG
				  * (SELECT DEC
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_DEC,
			   RKT_INDUK.BIAYA_PEMANEN_HK AS QTY_SETAHUN,   
			   RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG AS COST_SETAHUN,
			   '".$this->_userName."' AS INSERT_USER,
			   SYSDATE AS INSERT_TIME
		  FROM TR_RKT_PANEN_COST_ELEMENT RKT
			   LEFT JOIN TR_RKT_PANEN RKT_INDUK
				  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
			   LEFT JOIN TM_ORGANIZATION ORG
				  ON ORG.BA_CODE = RKT.BA_CODE
		WHERE     RKT.COST_ELEMENT = 'LABOUR'
		$where
		UNION ALL
		-- INI UNTUK PREMI PANEN BRD
		SELECT RKT.PERIOD_BUDGET,
			   ORG.REGION_CODE,
			   RKT.BA_CODE,
			   RKT.AFD_CODE,
			   RKT.BLOCK_CODE,
			   'TM' ACTIVITY_GROUP,
			   RKT.COST_ELEMENT,
			   RKT.ACTIVITY_CODE,
			   'PREMI PANEN BRD' ACTIVITY_DESC,
			   '' SUB_COST_ELEMENT,
			   '' MATERIAL_NAME,
			   '' KETERANGAN,
			   'HK' UOM,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JAN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JAN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT FEB
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_FEB,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT MAR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_MAR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT APR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_APR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT MAY
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_MAY,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JUN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JUN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT JUL
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_JUL,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT AUG
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_AUG,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT SEP
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_SEP,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT OCT
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_OCT,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT NOV
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_NOV,
			   ( (RKT_INDUK.BIAYA_PEMANEN_HK
				  * (SELECT DEC
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS QTY_DEC,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT JAN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JAN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT FEB
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_FEB,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT MAR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_MAR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT APR
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_APR,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT MAY
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_MAY,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT JUN
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JUN,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT JUL
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_JUL,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT AUG
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_AUG,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT SEP
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_SEP,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT OCT
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_OCT,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT NOV
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_NOV,
			   ( (RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_BRD
				  * (SELECT DEC
					   FROM TM_SEBARAN_PRODUKSI
					  WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
							AND BA_CODE = RKT.BA_CODE))
				/ 100)
				  AS COST_DEC,
			   RKT_INDUK.BIAYA_PEMANEN_HK AS QTY_SETAHUN,   
			   RKT_INDUK.BIAYA_PEMANEN_RP_PREMI_JANJANG AS COST_SETAHUN,
			   '".$this->_userName."' AS INSERT_USER,
			   SYSDATE AS INSERT_TIME
		  FROM TR_RKT_PANEN_COST_ELEMENT RKT
			   LEFT JOIN TR_RKT_PANEN RKT_INDUK
				  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
			   LEFT JOIN TM_ORGANIZATION ORG
				  ON ORG.BA_CODE = RKT.BA_CODE
		WHERE     RKT.COST_ELEMENT = 'LABOUR'
		$where
		UNION ALL
		-- UNTUK PERHITUGAN ALAT PANEN (TOOLS)
		SELECT PERIOD_BUDGET,
			   REGION_CODE,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   'TM' ACTIVITY_GROUP,
			   COST_ELEMENT,
			   ACTIVITY_CODE,
			   'ALAT PANEN' ACTIVITY_DESC,
			   SUB_COST_ELEMENT,
			   MATERIAL_NAME,
			   '' KETERANGAN,
			   UOM,
			   (BANYAK_ALAT * PERSEN_JAN / 100) QTY_JAN,
			   (BANYAK_ALAT * PERSEN_FEB / 100) QTY_FEB,
			   (BANYAK_ALAT * PERSEN_MAR / 100) QTY_MAR,
			   (BANYAK_ALAT * PERSEN_APR / 100) QTY_APR,
			   (BANYAK_ALAT * PERSEN_MAY / 100) QTY_MAY,
			   (BANYAK_ALAT * PERSEN_JUN / 100) QTY_JUN,
			   (BANYAK_ALAT * PERSEN_JUL / 100) QTY_JUL,
			   (BANYAK_ALAT * PERSEN_AUG / 100) QTY_AUG,
			   (BANYAK_ALAT * PERSEN_SEP / 100) QTY_SEP,
			   (BANYAK_ALAT * PERSEN_OCT / 100) QTY_OCT,
			   (BANYAK_ALAT * PERSEN_NOV / 100) QTY_NOV,
			   (BANYAK_ALAT * PERSEN_DEC / 100) QTY_DEC,
			   ((BANYAK_ALAT * PRICE) * PERSEN_JAN / 100) COST_JAN,
			   ((BANYAK_ALAT * PRICE) * PERSEN_FEB / 100) COST_FEB,
			   ((BANYAK_ALAT * PRICE) * PERSEN_MAR / 100) COST_MAR,
			   ((BANYAK_ALAT * PRICE) * PERSEN_APR / 100) COST_APR,
			   ((BANYAK_ALAT * PRICE) * PERSEN_MAY / 100) COST_MAY,
			   ((BANYAK_ALAT * PRICE) * PERSEN_JUN / 100) COST_JUN,
			   ((BANYAK_ALAT * PRICE) * PERSEN_JUL / 100) COST_JUL,
			   ((BANYAK_ALAT * PRICE) * PERSEN_AUG / 100) COST_AUG,
			   ((BANYAK_ALAT * PRICE) * PERSEN_SEP / 100) COST_SEP,
			   ((BANYAK_ALAT * PRICE) * PERSEN_OCT / 100) COST_OCT,
			   ((BANYAK_ALAT * PRICE) * PERSEN_NOV / 100) COST_NOV,
			   ((BANYAK_ALAT * PRICE) * PERSEN_DEC / 100) COST_DEC,
			   BANYAK_ALAT AS QTY_SETAHUN,
			   (BANYAK_ALAT * PRICE) AS COST_SETAHUN,
			   '".$this->_userName."' AS INSERT_USER,
			   SYSDATE AS INSERT_TIME
			   FROM (
		SELECT RKT.PERIOD_BUDGET,
			   ORG.REGION_CODE,
			   RKT.BA_CODE,
			   RKT.AFD_CODE,
			   RKT.BLOCK_CODE,
			   'TM' ACTIVITY_GROUP,
			   RKT.ACTIVITY_CODE,
			   RKT.COST_ELEMENT,
			   ALAT.MATERIAL_CODE AS SUB_COST_ELEMENT,
			   MATERIAL.MATERIAL_NAME,
			   '' KETERANGAN,
			   MATERIAL.UOM,
			   ALAT.PRICE,
			   ALAT.TOTAL,
				(SELECT SUM (PRICE)
					  FROM TN_ALAT_KERJA_PANEN
					 WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE)
					  AS TOTAL_PRICE,
				   (SELECT SUM (BIAYA_ALAT_PANEN_RP_TOTAL)
					  FROM TR_RKT_PANEN
					 WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE)
					  AS RKT_TOTAL_ALAT,
				   ((ALAT.TOTAL/(SELECT SUM (PRICE) FROM TN_ALAT_KERJA_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE)*
				   (SELECT SUM (BIAYA_ALAT_PANEN_RP_TOTAL) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE))/ALAT.PRICE) AS BANYAK_ALAT,
				   (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_JAN,
					(SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_FEB,
					(SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_MAR,
					(SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_APR,
					(SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_MAY,
					(SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_JUN,
					(SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_JUL,
					(SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_AUG,
					(SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_SEP,
					(SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_OCT,
					(SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_NOV,
					(SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET AND BA_CODE = RKT.BA_CODE) AS PERSEN_DEC
			   FROM 
		  TR_RKT_PANEN_COST_ELEMENT RKT
			   LEFT JOIN TR_RKT_PANEN RKT_INDUK
				  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
			   LEFT JOIN TM_ORGANIZATION ORG
				  ON ORG.BA_CODE = RKT.BA_CODE
			   LEFT JOIN  TN_ALAT_KERJA_PANEN ALAT
				  ON RKT.PERIOD_BUDGET = ALAT.PERIOD_BUDGET
				  AND RKT.BA_CODE = ALAT.BA_CODE
			   LEFT JOIN TM_MATERIAL MATERIAL
				  ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
				  AND MATERIAL.BA_CODE = RKT.BA_CODE
				  AND MATERIAL.MATERIAL_CODE = ALAT.MATERIAL_CODE   
		WHERE     RKT.COST_ELEMENT = 'TOOLS'
		$where
		)
		UNION ALL
		-- INI UNTUK PERHITUNGAN SUPERVISI	5101030701 SUPERVISI PEMANEN LABOUR
		SELECT 
			PERIOD_BUDGET,
			REGION_CODE,
			BA_CODE,
			AFD_CODE,
			BLOCK_CODE,
			ACTIVITY_GROUP,
			COST_ELEMENT,
			ACTIVITY_CODE,
			ACTIVITY_DESC,
			'' SUB_COST_ELEMENT,
			'' MATERIAL_NAME,
			'' KETERANGAN,
			'MPP' UOM,
			(TON/TOTAL_TON * JUMLAH * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JAN,
			(TON/TOTAL_TON * JUMLAH * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_FEB,
			(TON/TOTAL_TON * JUMLAH * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAR,
			(TON/TOTAL_TON * JUMLAH * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_APR,
			(TON/TOTAL_TON * JUMLAH * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAY,
			(TON/TOTAL_TON * JUMLAH * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUN,
			(TON/TOTAL_TON * JUMLAH * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUL,
			(TON/TOTAL_TON * JUMLAH * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_AUG,
			(TON/TOTAL_TON * JUMLAH * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_SEP,
			(TON/TOTAL_TON * JUMLAH * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_OCT,
			(TON/TOTAL_TON * JUMLAH * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_NOV,
			(TON/TOTAL_TON * JUMLAH * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_DEC,
			(BIAYA_SPV_RP_TOTAL * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JAN,
			(BIAYA_SPV_RP_TOTAL * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_FEB,
			(BIAYA_SPV_RP_TOTAL * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAR,
			(BIAYA_SPV_RP_TOTAL * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_APR,
			(BIAYA_SPV_RP_TOTAL * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAY,
			(BIAYA_SPV_RP_TOTAL * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUN,
			(BIAYA_SPV_RP_TOTAL * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUL,
			(BIAYA_SPV_RP_TOTAL * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_AUG,
			(BIAYA_SPV_RP_TOTAL * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_SEP,
			(BIAYA_SPV_RP_TOTAL * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_OCT,
			(BIAYA_SPV_RP_TOTAL * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_NOV,
			(BIAYA_SPV_RP_TOTAL * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_DEC,
			(TON/TOTAL_TON * JUMLAH) AS QTY_SETAHUN,
			BIAYA_SPV_RP_TOTAL AS COST_SETAHUN,
			'".$this->_userName."' AS INSERT_USER,
		   SYSDATE AS INSERT_TIME
		FROM (
	SELECT
		   RKT.PERIOD_BUDGET,
		   ORG.REGION_CODE,
		   RKT.BA_CODE,
		   RKT.AFD_CODE,
		   RKT.BLOCK_CODE,
		   'TM' ACTIVITY_GROUP,
		   RKT.COST_ELEMENT,
		   '5101030701' ACTIVITY_CODE,
		   'SUPERVISI PEMANEN' ACTIVITY_DESC,
		   RKT.TON,
		   (SELECT SUM(TON) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
				 AND BA_CODE = RKT.BA_CODE) TOTAL_TON,
		   (SELECT SUM(MPP_PERIOD_BUDGET) FROM TR_RKT_CHECKROLL 
			  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
				 AND BA_CODE = RKT.BA_CODE
				 AND JOB_CODE IN ('FX140', 'FX230')) AS JUMLAH,
		   RKT.BIAYA_SPV_RP_TOTAL
	  FROM TR_RKT_PANEN_COST_ELEMENT RKT
		   LEFT JOIN TR_RKT_PANEN RKT_INDUK
			  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
		   LEFT JOIN TM_ORGANIZATION ORG
			  ON ORG.BA_CODE = RKT.BA_CODE
	 WHERE  RKT.COST_ELEMENT = 'LABOUR'
		$where
		   ) SS 
	UNION ALL
	-- INI UNTUK PERHITUNGAN SUPERVISI	5101030701 KRANI BUAH LABOUR
		   SELECT 
				PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				ACTIVITY_GROUP,
				COST_ELEMENT,
				ACTIVITY_CODE,
				ACTIVITY_DESC,
				'' SUB_COST_ELEMENT,
				'' MATERIAL_NAME,
				'' KETERANGAN,
				'MPP' UOM,
				(TON/TOTAL_TON * JUMLAH * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JAN,
				(TON/TOTAL_TON * JUMLAH * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_FEB,
				(TON/TOTAL_TON * JUMLAH * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAR,
				(TON/TOTAL_TON * JUMLAH * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_APR,
				(TON/TOTAL_TON * JUMLAH * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAY,
				(TON/TOTAL_TON * JUMLAH * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUN,
				(TON/TOTAL_TON * JUMLAH * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUL,
				(TON/TOTAL_TON * JUMLAH * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_AUG,
				(TON/TOTAL_TON * JUMLAH * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_SEP,
				(TON/TOTAL_TON * JUMLAH * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_OCT,
				(TON/TOTAL_TON * JUMLAH * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_NOV,
				(TON/TOTAL_TON * JUMLAH * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_DEC,
				(KRANI_BUAH_TOTAL * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JAN,
				(KRANI_BUAH_TOTAL * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_FEB,
				(KRANI_BUAH_TOTAL * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAR,
				(KRANI_BUAH_TOTAL * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_APR,
				(KRANI_BUAH_TOTAL * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAY,
				(KRANI_BUAH_TOTAL * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUN,
				(KRANI_BUAH_TOTAL * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUL,
				(KRANI_BUAH_TOTAL * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_AUG,
				(KRANI_BUAH_TOTAL * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_SEP,
				(KRANI_BUAH_TOTAL * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_OCT,
				(KRANI_BUAH_TOTAL * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_NOV,
				(KRANI_BUAH_TOTAL * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_DEC,
				(TON/TOTAL_TON * JUMLAH) AS QTY_SETAHUN,
				KRANI_BUAH_TOTAL AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
			   SYSDATE AS INSERT_TIME
		FROM (
	SELECT RKT.PERIOD_BUDGET,
		   ORG.REGION_CODE,
		   RKT.BA_CODE,
		   RKT.AFD_CODE,
		   RKT.BLOCK_CODE,
		   'TM' ACTIVITY_GROUP,
		   RKT.COST_ELEMENT,
		   '5101030701' ACTIVITY_CODE,
		   'KRANI BUAH' ACTIVITY_DESC,
		   RKT.TON,
		   (SELECT SUM(TON) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
				 AND BA_CODE = RKT.BA_CODE) TOTAL_TON,
		   (SELECT SUM(MPP_PERIOD_BUDGET) FROM TR_RKT_CHECKROLL 
			  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
				 AND BA_CODE = RKT.BA_CODE
				 AND JOB_CODE IN ('FX160')) AS JUMLAH,
		   RKT.KRANI_BUAH_TOTAL
	  FROM TR_RKT_PANEN_COST_ELEMENT RKT
		   LEFT JOIN TR_RKT_PANEN RKT_INDUK
			  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
		   LEFT JOIN TM_ORGANIZATION ORG
			  ON ORG.BA_CODE = RKT.BA_CODE
	 WHERE RKT.COST_ELEMENT = 'LABOUR'
		$where
		   ) SS      
	UNION ALL
	-- INI UNTUK PERHITUNGAN SUPERVISI	5101030701 BONGKAR MUAT LABOUR
		   SELECT 
				PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				ACTIVITY_GROUP,
				COST_ELEMENT,
				ACTIVITY_CODE,
				ACTIVITY_DESC,
				'' SUB_COST_ELEMENT,
				'' MATERIAL_NAME,
				'' KETERANGAN,
				'MPP' UOM,
				(TON/TOTAL_TON * JUMLAH * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JAN,
				(TON/TOTAL_TON * JUMLAH * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_FEB,
				(TON/TOTAL_TON * JUMLAH * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAR,
				(TON/TOTAL_TON * JUMLAH * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_APR,
				(TON/TOTAL_TON * JUMLAH * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_MAY,
				(TON/TOTAL_TON * JUMLAH * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUN,
				(TON/TOTAL_TON * JUMLAH * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_JUL,
				(TON/TOTAL_TON * JUMLAH * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_AUG,
				(TON/TOTAL_TON * JUMLAH * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_SEP,
				(TON/TOTAL_TON * JUMLAH * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_OCT,
				(TON/TOTAL_TON * JUMLAH * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_NOV,
				(TON/TOTAL_TON * JUMLAH * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS QTY_DEC,
				(TUKANG_MUAT_TOTAL * (SELECT JAN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JAN,
				(TUKANG_MUAT_TOTAL * (SELECT FEB FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_FEB,
				(TUKANG_MUAT_TOTAL * (SELECT MAR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAR,
				(TUKANG_MUAT_TOTAL * (SELECT APR FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_APR,
				(TUKANG_MUAT_TOTAL * (SELECT MAY FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_MAY,
				(TUKANG_MUAT_TOTAL * (SELECT JUN FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUN,
				(TUKANG_MUAT_TOTAL * (SELECT JUL FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_JUL,
				(TUKANG_MUAT_TOTAL * (SELECT AUG FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_AUG,
				(TUKANG_MUAT_TOTAL * (SELECT SEP FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_SEP,
				(TUKANG_MUAT_TOTAL * (SELECT OCT FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_OCT,
				(TUKANG_MUAT_TOTAL * (SELECT NOV FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_NOV,
				(TUKANG_MUAT_TOTAL * (SELECT DEC FROM TM_SEBARAN_PRODUKSI WHERE PERIOD_BUDGET = SS.PERIOD_BUDGET AND BA_CODE = SS.BA_CODE) / 100) AS COST_DEC,
				(TON/TOTAL_TON * JUMLAH) AS QTY_SETAHUN,
				TUKANG_MUAT_TOTAL AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
			   SYSDATE AS INSERT_TIME
		FROM (
	SELECT RKT.PERIOD_BUDGET,
		   ORG.REGION_CODE,
		   RKT.BA_CODE,
		   RKT.AFD_CODE,
		   RKT.BLOCK_CODE,
		   'TM' ACTIVITY_GROUP,
		   RKT.COST_ELEMENT,
		   '5101030404-1' ACTIVITY_CODE,
		   'BONGKAR MUAT' ACTIVITY_DESC,
		   RKT.TON,
		   (SELECT SUM(TON) FROM TR_RKT_PANEN WHERE PERIOD_BUDGET = RKT.PERIOD_BUDGET
				 AND BA_CODE = RKT.BA_CODE) TOTAL_TON,
		   (SELECT SUM(MPP_PERIOD_BUDGET) FROM TR_RKT_CHECKROLL 
			  WHERE     PERIOD_BUDGET = RKT.PERIOD_BUDGET
				 AND BA_CODE = RKT.BA_CODE
				 AND JOB_CODE IN ('FW041')) AS JUMLAH,
		   RKT.TUKANG_MUAT_TOTAL
	  FROM TR_RKT_PANEN_COST_ELEMENT RKT
		   LEFT JOIN TR_RKT_PANEN RKT_INDUK
			  ON RKT_INDUK.TRX_RKT_CODE = RKT.TRX_RKT_CODE
		   LEFT JOIN TM_ORGANIZATION ORG
			  ON ORG.BA_CODE = RKT.BA_CODE
	 WHERE  RKT.COST_ELEMENT = 'LABOUR'
			$where
		   ) SS
		";

		$this->_db->query($query);
		$this->_db->commit();
		
		//labour pemupukan (majemuk tunggal)
		$xquery = "INSERT INTO TMP_RPT_KEB_EST_COST_BLOCK (PERIOD_BUDGET,
                                        REGION_CODE,
                                        BA_CODE,
                                        AFD_CODE,
                                        BLOCK_CODE,
                                        TIPE_TRANSAKSI,
                                        COST_ELEMENT,
                                        ACTIVITY_CODE,
                                        ACTIVITY_DESC,
                                        SUB_COST_ELEMENT,
                                        SUB_COST_ELEMENT_DESC,
                                        KETERANGAN,
                                        UOM,
                                        QTY_JAN,
                                        QTY_FEB,
                                        QTY_MAR,
                                        QTY_APR,
                                        QTY_MAY,
                                        QTY_JUN,
                                        QTY_JUL,
                                        QTY_AUG,
                                        QTY_SEP,
                                        QTY_OCT,
                                        QTY_NOV,
                                        QTY_DEC,
                                        COST_JAN,
                                        COST_FEB,
                                        COST_MAR,
                                        COST_APR,
                                        COST_MAY,
                                        COST_JUN,
                                        COST_JUL,
                                        COST_AUG,
                                        COST_SEP,
                                        COST_OCT,
                                        COST_NOV,
                                        COST_DEC,
                                        QTY_SETAHUN,
                                        COST_SETAHUN,
                                        INSERT_USER,
                                        INSERT_TIME)                
			 SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					TIPE_TRANSAKSI,
					COST_ELEMENT,
					ACTIVITY_CODE,
					ACTIVITY_DESC,
					SUB_COST_ELEMENT,
					MATERIAL_NAME,
					'' KETERANGAN,
					UOM,
					SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
					SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
					SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
					SUM (NVL (QTY_APR, 0)) AS QTY_APR,
					SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
					SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
					SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
					SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
					SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
					SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
					SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
					SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
					SUM (NVL (COST_JAN, 0)) AS COST_JAN,
					SUM (NVL (COST_FEB, 0)) AS COST_FEB,
					SUM (NVL (COST_MAR, 0)) AS COST_MAR,
					SUM (NVL (COST_APR, 0)) AS COST_APR,
					SUM (NVL (COST_MAY, 0)) AS COST_MAY,
					SUM (NVL (COST_JUN, 0)) AS COST_JUN,
					SUM (NVL (COST_JUL, 0)) AS COST_JUL,
					SUM (NVL (COST_AUG, 0)) AS COST_AUG,
					SUM (NVL (COST_SEP, 0)) AS COST_SEP,
					SUM (NVL (COST_OCT, 0)) AS COST_OCT,
					SUM (NVL (COST_NOV, 0)) AS COST_NOV,
					SUM (NVL (COST_DEC, 0)) AS COST_DEC,
					(  SUM (NVL (QTY_JAN, 0))
					 + SUM (NVL (QTY_FEB, 0))
					 + SUM (NVL (QTY_MAR, 0))
					 + SUM (NVL (QTY_APR, 0))
					 + SUM (NVL (QTY_MAY, 0))
					 + SUM (NVL (QTY_JUN, 0))
					 + SUM (NVL (QTY_JUL, 0))
					 + SUM (NVL (QTY_AUG, 0))
					 + SUM (NVL (QTY_SEP, 0))
					 + SUM (NVL (QTY_OCT, 0))
					 + SUM (NVL (QTY_NOV, 0))
					 + SUM (NVL (QTY_DEC, 0)))
					   AS QTY_SETAHUN,
					(  SUM (NVL (COST_JAN, 0))
					 + SUM (NVL (COST_FEB, 0))
					 + SUM (NVL (COST_MAR, 0))
					 + SUM (NVL (COST_APR, 0))
					 + SUM (NVL (COST_MAY, 0))
					 + SUM (NVL (COST_JUN, 0))
					 + SUM (NVL (COST_JUL, 0))
					 + SUM (NVL (COST_AUG, 0))
					 + SUM (NVL (COST_SEP, 0))
					 + SUM (NVL (COST_OCT, 0))
					 + SUM (NVL (COST_NOV, 0))
					 + SUM (NVL (COST_DEC, 0)))
					   AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
			   FROM (
					 -- INI UNTUK PERHITUNGAN PEMUPUKAN (MAJEMUK TUNGGAL)
					 SELECT PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							AFD_CODE,
							BLOCK_CODE,
							ACTIVITY_GROUP AS TIPE_TRANSAKSI,
							COST_ELEMENT,
							ACTIVITY_CODE,
							ACTIVITY_DESC,
							SUB_COST_ELEMENT,
							MATERIAL_NAME,
							'' RANK_Z,
							UOM,
							JAN_QTY AS QTY_JAN,
							FEB_QTY AS QTY_FEB,
							MAR_QTY AS QTY_MAR,
							APR_QTY AS QTY_APR,
							MAY_QTY AS QTY_MAY,
							JUN_QTY AS QTY_JUN,
							JUL_QTY AS QTY_JUL,
							AUG_QTY AS QTY_AUG,
							SEP_QTY AS QTY_SEP,
							OCT_QTY AS QTY_OCT,
							NOV_QTY AS QTY_NOV,
							DEC_QTY AS QTY_DEC,
							JAN_COST AS COST_JAN,
							FEB_COST AS COST_FEB,
							MAR_COST AS COST_MAR,
							APR_COST AS COST_APR,
							MAY_COST AS COST_MAY,
							JUN_COST AS COST_JUN,
							JUL_COST AS COST_JUL,
							AUG_COST AS COST_AUG,
							SEP_COST AS COST_SEP,
							OCT_COST AS COST_OCT,
							NOV_COST AS COST_NOV,
							DEC_COST AS COST_DEC
					   FROM (SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  MAJEMUK
							   FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS1
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS1,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
														'PUPUK MAJEMUK' DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                                                $where
                                                        )HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020400' -- UNTUK PUPUK  MAJEMUK
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('1' JAN,
                                               '2' FEB,
                                               '3' MAR,
                                               '4' APR,
                                               '5' MAY,
                                               '6' JUN,
                                               '91' JUL,
                                               '92' AUG,
                                               '93' SEP,
                                               '94' OCT,
                                               '95' NOV,
                                               '96' DEC)))
                     UNION ALL
                     SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  MAJEMUK
                       FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS2
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS2,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
														'PUPUK MAJEMUK' DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                                                $where
                                                        )HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020400' -- UNTUK PUPUK  MAJEMUK
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('91' JAN,
                                               '92' FEB,
                                               '93' MAR,
                                               '94' APR,
                                               '95' MAY,
                                               '96' JUN,
                                               '7' JUL,
                                               '8' AUG,
                                               '9' SEP,
                                               '10' OCT,
                                               '11' NOV,
                                               '12' DEC)))
                     UNION ALL
                     SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  TUNGGAL
                       FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS1
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS1,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
														'PUPUK TUNGGAL' DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                                                $where
                                                        )HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020300' -- UNTUK PUPUK  TUNGGAL
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('1' JAN,
                                               '2' FEB,
                                               '3' MAR,
                                               '4' APR,
                                               '5' MAY,
                                               '6' JUN,
                                               '97' JUL,
                                               '98' AUG,
                                               '99' SEP,
                                               '90' OCT,
                                               '91' NOV,
                                               '92' DEC)))
                     UNION ALL
                     SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  TUNGGAL
                       FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS2
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS2,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
														'PUPUK TUNGGAL' DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                                                $where
                                                        )HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020300' -- UNTUK PUPUK  TUNGGAL
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('91' JAN,
                                               '92' FEB,
                                               '93' MAR,
                                               '94' APR,
                                               '95' MAY,
                                               '96' JUN,
                                               '7' JUL,
                                               '8' AUG,
                                               '9' SEP,
                                               '10' OCT,
                                               '11' NOV,
                                               '12' DEC))))
                                               ) REPORT
				   GROUP BY PERIOD_BUDGET,
							REGION_CODE,
							BA_CODE,
							AFD_CODE,
							BLOCK_CODE,
							TIPE_TRANSAKSI,
							COST_ELEMENT,
							ACTIVITY_CODE,
							ACTIVITY_DESC,
							SUB_COST_ELEMENT,
							MATERIAL_NAME,
							UOM
				UNION ALL --PERHITUNGAN PUPUK MAJEMUK & TUNGGAL (MATERIAL)
   SELECT RKT.PERIOD_BUDGET,
          ORG.REGION_CODE,
          RKT.BA_CODE,
          RKT.AFD_CODE,
          RKT.BLOCK_CODE,
          RKT.MATURITY_STAGE TIPE_TRANSAKSI,
          'MATERIAL' AS COST_ELEMENT,
          RKT.COA_CODE AS ACTIVITY_CODE,
          'PUPUK MAJEMUK' AS ACTIVITY_DESC,
          RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
          RKT.MATERIAL_NAME,
          '' KETERANGAN,
          'KG' UOM,
          RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
          RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
          RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
          RKT.QTY_MAJEMUK_APR AS QTY_APR,
          RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
          RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
          RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
          RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
          RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
          RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
          RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
          RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
          (  RKT.QTY_MAJEMUK_JAN
           + RKT.QTY_MAJEMUK_FEB
           + RKT.QTY_MAJEMUK_MAR
           + RKT.QTY_MAJEMUK_APR
           + RKT.QTY_MAJEMUK_MAY
           + RKT.QTY_MAJEMUK_JUN
           + RKT.QTY_MAJEMUK_JUL
           + RKT.QTY_MAJEMUK_AUG
           + RKT.QTY_MAJEMUK_SEP
           + RKT.QTY_MAJEMUK_OCT
           + RKT.QTY_MAJEMUK_NOV
           + RKT.QTY_MAJEMUK_DEC)
             AS QTY_SETAHUN,
          (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
          (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
          (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
          (RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
          (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
          (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
          (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
          (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
          (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
          (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
          (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
          (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
          (  (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_APR * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE))
             AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
     FROM (  SELECT PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE MATERIAL_CODE,
                    ACTIVITY_NAME MATERIAL_NAME,
                    SUM (QTY_MAJEMUK_JAN) QTY_MAJEMUK_JAN,
                    SUM (QTY_MAJEMUK_FEB) QTY_MAJEMUK_FEB,
                    SUM (QTY_MAJEMUK_MAR) QTY_MAJEMUK_MAR,
                    SUM (QTY_MAJEMUK_APR) QTY_MAJEMUK_APR,
                    SUM (QTY_MAJEMUK_MAY) QTY_MAJEMUK_MAY,
                    SUM (QTY_MAJEMUK_JUN) QTY_MAJEMUK_JUN,
                    SUM (QTY_MAJEMUK_JUL) QTY_MAJEMUK_JUL,
                    SUM (QTY_MAJEMUK_AUG) QTY_MAJEMUK_AUG,
                    SUM (QTY_MAJEMUK_SEP) QTY_MAJEMUK_SEP,
                    SUM (QTY_MAJEMUK_OCT) QTY_MAJEMUK_OCT,
                    SUM (QTY_MAJEMUK_NOV) QTY_MAJEMUK_NOV,
                    SUM (QTY_MAJEMUK_DEC) QTY_MAJEMUK_DEC
               FROM (SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            RKT.DIS_JAN QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_JAN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            RKT.DIS_FEB QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_FEB
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            RKT.DIS_MAR QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_MAR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            RKT.DIS_APR QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_APR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            RKT.DIS_MAY QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_MAY
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            RKT.DIS_JUN QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_JUN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            RKT.DIS_JUL QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_JUL
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            RKT.DIS_AUG QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_AUG
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            RKT.DIS_SEP QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_SEP
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            RKT.DIS_OCT QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_OCT
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            RKT.DIS_NOV QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_NOV
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            RKT.DIS_DEC QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_DEC
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400')
           GROUP BY PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE,
                    ACTIVITY_NAME
           ORDER BY PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE) RKT
          LEFT JOIN TN_HARGA_BARANG HARGA
             ON     HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND HARGA.BA_CODE = RKT.BA_CODE
                AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
                AND HARGA.DELETE_USER IS NULL
                AND HARGA.FLAG_TEMP IS NULL
          LEFT JOIN TM_ORGANIZATION ORG
             ON ORG.BA_CODE = RKT.BA_CODE
    WHERE     1 = 1
          AND RKT.MATURITY_STAGE = 'TM'
          $where
	UNION ALL
	SELECT     RKT.PERIOD_BUDGET,
                        ORG.REGION_CODE,
                        RKT.BA_CODE,
                        RKT.AFD_CODE,
                        RKT.BLOCK_CODE,
                        RKT.MATURITY_STAGE TIPE_TRANSAKSI,
                        'MATERIAL' AS COST_ELEMENT,
                        RKT.COA_CODE AS ACTIVITY_CODE,
                        'PUPUK TUNGGAL' AS ACTIVITY_DESC,
                        RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
                        RKT.MATERIAL_NAME,
                        '' KETERANGAN,
                        'KG' UOM,
                        RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
                        RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
                        RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
                        RKT.QTY_TUNGGAL_APR AS QTY_APR,
                        RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
                        RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
                        RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
                        RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
                        RKT.QTY_TUNGGAL_SEP AS  QTY_SEP,
                        RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
                        RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
                        RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
                        (RKT.QTY_TUNGGAL_JAN +
                        RKT.QTY_TUNGGAL_FEB +
                        RKT.QTY_TUNGGAL_MAR +
                        RKT.QTY_TUNGGAL_APR +
                        RKT.QTY_TUNGGAL_MAY +
                        RKT.QTY_TUNGGAL_JUN +
                        RKT.QTY_TUNGGAL_JUL +
                        RKT.QTY_TUNGGAL_AUG +
                        RKT.QTY_TUNGGAL_SEP +
                        RKT.QTY_TUNGGAL_OCT +
                        RKT.QTY_TUNGGAL_NOV +
                        RKT.QTY_TUNGGAL_DEC)
                        AS QTY_SETAHUN,
                        (RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
                        (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
                        (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
                        (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
                        (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
                        (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
                        (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
                        (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
                        (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
                        (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
                        (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
                        (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
                        ((RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE)) 
                        AS COST_SETAHUN,
                        '".$this->_userName."' AS INSERT_USER,
                        SYSDATE AS INSERT_TIME
          FROM (
        SELECT PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE MATERIAL_CODE,
                    ACTIVITY_NAME MATERIAL_NAME,
                    SUM (QTY_TUNGGAL_JAN) QTY_TUNGGAL_JAN,
                    SUM (QTY_TUNGGAL_FEB) QTY_TUNGGAL_FEB,
                    SUM (QTY_TUNGGAL_MAR) QTY_TUNGGAL_MAR,
                    SUM (QTY_TUNGGAL_APR) QTY_TUNGGAL_APR,
                    SUM (QTY_TUNGGAL_MAY) QTY_TUNGGAL_MAY,
                    SUM (QTY_TUNGGAL_JUN) QTY_TUNGGAL_JUN,
                    SUM (QTY_TUNGGAL_JUL) QTY_TUNGGAL_JUL,
                    SUM (QTY_TUNGGAL_AUG) QTY_TUNGGAL_AUG,
                    SUM (QTY_TUNGGAL_SEP) QTY_TUNGGAL_SEP,
                    SUM (QTY_TUNGGAL_OCT) QTY_TUNGGAL_OCT,
                    SUM (QTY_TUNGGAL_NOV) QTY_TUNGGAL_NOV,
                    SUM (QTY_TUNGGAL_DEC) QTY_TUNGGAL_DEC
               FROM (
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            RKT.DIS_JAN QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JAN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            RKT.DIS_FEB QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_FEB
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300' 
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            RKT.DIS_MAR QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            RKT.DIS_APR QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_APR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            RKT.DIS_MAY QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAY
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            RKT.DIS_JUN QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            RKT.DIS_JUL QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUL
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            RKT.DIS_AUG QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_AUG
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            RKT.DIS_SEP QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_SEP
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            RKT.DIS_OCT QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_OCT
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            RKT.DIS_NOV QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_NOV
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            RKT.DIS_DEC QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_DEC
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                            )
           GROUP BY PERIOD_BUDGET,
                    BA_CODE,
                    BLOCK_CODE,
                    AFD_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE,
                    ACTIVITY_NAME
           ORDER BY PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE
        )RKT
                LEFT JOIN TN_HARGA_BARANG HARGA
                    ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND HARGA.BA_CODE = RKT.BA_CODE
                    AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
                    AND HARGA.DELETE_USER IS NULL
                    AND HARGA.FLAG_TEMP IS NULL
                LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                WHERE 1 = 1
                    AND RKT.MATURITY_STAGE = 'TM'
                    $where  
		UNION ALL 
		--PERHITUNGAN PUPUK MAJEMUK / TUNGGAL SELAIN COST ELEMENT LABOUR DAN MATERIAL
   SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       TIPE_TRANSAKSI,
       COST_ELEMENT,
       ACTIVITY_CODE,
       ACTIVITY_DESC,
       SUB_COST_ELEMENT,
       MATERIAL_NAME,
       KETERANGAN,
       UOM,
       QTY_JAN,
       QTY_FEB,
       QTY_MAR,
       QTY_APR,
       QTY_MAY,
       QTY_JUN,
       QTY_JUL,
       QTY_AUG,
       QTY_SEP,
       QTY_OCT,
       QTY_NOV,
       QTY_DEC,
       (  QTY_JAN
        + QTY_FEB
        + QTY_MAR
        + QTY_APR
        + QTY_MAY
        + QTY_JUN
        + QTY_JUL
        + QTY_AUG
        + QTY_SEP
        + QTY_OCT
        + QTY_NOV
        + QTY_DEC)
          AS QTY_SETAHUN,
       COST_JAN,
       COST_FEB,
       COST_MAR,
       COST_APR,
       COST_MAY,
       COST_JUN,
       COST_JUL,
       COST_AUG,
       COST_SEP,
       COST_OCT,
       COST_NOV,
       COST_DEC,
       (  COST_JAN
        + COST_FEB
        + COST_MAR
        + COST_APR
        + COST_MAY
        + COST_JUN
        + COST_JUL
        + COST_AUG
        + COST_SEP
        + COST_OCT
        + COST_NOV
        + COST_DEC)
          AS COST_SETAHUN,
           '".$this->_userName."' AS INSERT_USER,
            SYSDATE AS INSERT_TIME
  FROM (SELECT COST.PERIOD_BUDGET,
               COST.REGION_CODE,
               COST.BA_CODE,
               COST.AFD_CODE,
               COST.BLOCK_CODE,
               KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
               COST.COST_ELEMENT,
               '5101020300' AS ACTIVITY_CODE,
               'PUPUK TUNGGAL' AS ACTIVITY_DESC,
               '' AS SUB_COST_ELEMENT,
               '' AS MATERIAL_NAME,
               '' AS KETERANGAN,
               'KG' UOM,
               0 QTY_JAN,
               0 QTY_FEB,
               0 QTY_MAR,
               0 QTY_APR,
               0 QTY_MAY,
               0 QTY_JUN,
               0 QTY_JUL,
               0 QTY_AUG,
               0 QTY_SEP,
               0 QTY_OCT,
               0 QTY_NOV,
               0 QTY_DEC,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_JAN
                      / KG_PUPUK.QTY_TOTAL_JAN
                      * COST.DIS_COST_JAN)
                  ELSE
                     0
               END
                  AS COST_JAN,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_FEB
                      / KG_PUPUK.QTY_TOTAL_FEB
                      * COST.DIS_COST_FEB)
                  ELSE
                     0
               END
                  AS COST_FEB,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_MAR
                      / KG_PUPUK.QTY_TOTAL_MAR
                      * COST.DIS_COST_MAR)
                  ELSE
                     0
               END
                  AS COST_MAR,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_APR
                      / KG_PUPUK.QTY_TOTAL_APR
                      * COST.DIS_COST_APR)
                  ELSE
                     0
               END
                  AS COST_APR,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_MAY
                      / KG_PUPUK.QTY_TOTAL_MAY
                      * COST.DIS_COST_MAY)
                  ELSE
                     0
               END
                  AS COST_MAY,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_JUN
                      / KG_PUPUK.QTY_TOTAL_JUN
                      * COST.DIS_COST_JUN)
                  ELSE
                     0
               END
                  AS COST_JUN,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_JUL
                      / KG_PUPUK.QTY_TOTAL_JUL
                      * COST.DIS_COST_JUL)
                  ELSE
                     0
               END
                  AS COST_JUL,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_AUG
                      / KG_PUPUK.QTY_TOTAL_AUG
                      * COST.DIS_COST_AUG)
                  ELSE
                     0
               END
                  AS COST_AUG,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_SEP
                      / KG_PUPUK.QTY_TOTAL_SEP
                      * COST.DIS_COST_SEP)
                  ELSE
                     0
               END
                  AS COST_SEP,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_OCT
                      / KG_PUPUK.QTY_TOTAL_OCT
                      * COST.DIS_COST_OCT)
                  ELSE
                     0
               END
                  AS COST_OCT,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_NOV
                      / KG_PUPUK.QTY_TOTAL_NOV
                      * COST.DIS_COST_NOV)
                  ELSE
                     0
               END
                  AS COST_NOV,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
                  THEN
                     (  KG_PUPUK.QTY_TUNGGAL_DEC
                      / KG_PUPUK.QTY_TOTAL_DEC
                      * COST.DIS_COST_DEC)
                  ELSE
                     0
               END
                  AS COST_DEC
          FROM    (  SELECT PERIOD_BUDGET,
                            REGION_CODE,
                            BA_CODE,
                            AFD_CODE,
                            BLOCK_CODE,
                            COST_ELEMENT,
                            MATURITY_STAGE,
                            SUM (DIS_COST_JAN) DIS_COST_JAN,
                            SUM (DIS_COST_FEB) DIS_COST_FEB,
                            SUM (DIS_COST_MAR) DIS_COST_MAR,
                            SUM (DIS_COST_APR) DIS_COST_APR,
                            SUM (DIS_COST_MAY) DIS_COST_MAY,
                            SUM (DIS_COST_JUN) DIS_COST_JUN,
                            SUM (DIS_COST_JUL) DIS_COST_JUL,
                            SUM (DIS_COST_AUG) DIS_COST_AUG,
                            SUM (DIS_COST_SEP) DIS_COST_SEP,
                            SUM (DIS_COST_OCT) DIS_COST_OCT,
                            SUM (DIS_COST_NOV) DIS_COST_NOV,
                            SUM (DIS_COST_DEC) DIS_COST_DEC,
                            MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
                            MAX (COST_TOOLS_KG) COST_TOOLS_KG,
                            MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
                       FROM (  SELECT RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                                      SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                                      SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                                      SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                                      SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                                      SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                                      SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                                      0 DIS_COST_JUL,
                                      0 DIS_COST_AUG,
                                      0 DIS_COST_SEP,
                                      0 DIS_COST_OCT,
                                      0 DIS_COST_NOV,
                                      0 DIS_COST_DEC,
                                      MAX (RKT.COST_LABOUR_POKOK)
                                         AS COST_LABOUR_POKOK,
                                      MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                                      MAX (RKT.COST_TRANSPORT_KG)
                                         AS COST_TRANSPORT_KG
                                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                                      LEFT JOIN
                                         TM_ORGANIZATION ORG
                                      ON ORG.BA_CODE = RKT.BA_CODE
                                WHERE RKT.DELETE_USER IS NULL
                                      AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                      AND RKT.COST_ELEMENT <> 'MATERIAL'
                                      $where
                             GROUP BY RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS1
                             UNION ALL
                               SELECT RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                                      0 DIS_COST_JAN,
                                      0 DIS_COST_FEB,
                                      0 DIS_COST_MAR,
                                      0 DIS_COST_APR,
                                      0 DIS_COST_MAY,
                                      0 DIS_COST_JUN,
                                      SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                                      SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                                      SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                                      SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                                      SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                                      SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                                      MAX (RKT.COST_LABOUR_POKOK)
                                         AS COST_LABOUR_POKOK,
                                      MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                                      MAX (RKT.COST_TRANSPORT_KG)
                                         AS COST_TRANSPORT_KG
                                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                                      LEFT JOIN
                                         TM_ORGANIZATION ORG
                                      ON ORG.BA_CODE = RKT.BA_CODE
                                WHERE RKT.DELETE_USER IS NULL
                                      AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                      AND RKT.COST_ELEMENT <> 'MATERIAL'
                                      $where
                             GROUP BY RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS2)
                   GROUP BY PERIOD_BUDGET,
                            REGION_CODE,
                            BA_CODE,
                            AFD_CODE,
                            BLOCK_CODE,
                            COST_ELEMENT,
                            MATURITY_STAGE) COST
               LEFT JOIN
                  V_KG_PUPUK_AFD KG_PUPUK
               ON     COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
                  AND COST.BA_CODE = KG_PUPUK.BA_CODE
                  AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
                  AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
        UNION ALL
        -- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
        SELECT COST.PERIOD_BUDGET,
               COST.REGION_CODE,
               COST.BA_CODE,
               COST.AFD_CODE,
               COST.BLOCK_CODE,
               KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
               COST.COST_ELEMENT,
               '5101020400' AS ACTIVITY_CODE,
               'PUPUK MAJEMUK' AS ACTIVITY_NAME,
               '' AS SUB_COST_ELEMENT,
               '' AS MATERIAL_NAME,
               '' AS KETERANGAN,
               'KG' UOM,
               0 QTY_JAN,
               0 QTY_FEB,
               0 QTY_MAR,
               0 QTY_APR,
               0 QTY_MAY,
               0 QTY_JUN,
               0 QTY_JUL,
               0 QTY_AUG,
               0 QTY_SEP,
               0 QTY_OCT,
               0 QTY_NOV,
               0 QTY_DEC,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_JAN
                      / KG_PUPUK.QTY_TOTAL_JAN
                      * COST.DIS_COST_JAN)
                  ELSE
                     0
               END
                  AS COST_JAN,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_FEB
                      / KG_PUPUK.QTY_TOTAL_FEB
                      * COST.DIS_COST_FEB)
                  ELSE
                     0
               END
                  AS COST_FEB,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_MAR
                      / KG_PUPUK.QTY_TOTAL_MAR
                      * COST.DIS_COST_MAR)
                  ELSE
                     0
               END
                  AS COST_MAR,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_APR
                      / KG_PUPUK.QTY_TOTAL_APR
                      * COST.DIS_COST_APR)
                  ELSE
                     0
               END
                  AS COST_APR,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_MAY
                      / KG_PUPUK.QTY_TOTAL_MAY
                      * COST.DIS_COST_MAY)
                  ELSE
                     0
               END
                  AS COST_MAY,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_JUN
                      / KG_PUPUK.QTY_TOTAL_JUN
                      * COST.DIS_COST_JUN)
                  ELSE
                     0
               END
                  AS COST_JUN,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_JUL
                      / KG_PUPUK.QTY_TOTAL_JUL
                      * COST.DIS_COST_JUL)
                  ELSE
                     0
               END
                  AS COST_JUL,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_AUG
                      / KG_PUPUK.QTY_TOTAL_AUG
                      * COST.DIS_COST_AUG)
                  ELSE
                     0
               END
                  AS COST_AUG,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_SEP
                      / KG_PUPUK.QTY_TOTAL_SEP
                      * COST.DIS_COST_SEP)
                  ELSE
                     0
               END
                  AS COST_SEP,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_OCT
                      / KG_PUPUK.QTY_TOTAL_OCT
                      * COST.DIS_COST_OCT)
                  ELSE
                     0
               END
                  AS COST_OCT,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_NOV
                      / KG_PUPUK.QTY_TOTAL_NOV
                      * COST.DIS_COST_NOV)
                  ELSE
                     0
               END
                  AS COST_NOV,
               CASE
                  WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
                  THEN
                     (  KG_PUPUK.QTY_MAJEMUK_DEC
                      / KG_PUPUK.QTY_TOTAL_DEC
                      * COST.DIS_COST_DEC)
                  ELSE
                     0
               END
                  AS COST_DEC
          FROM    (  SELECT PERIOD_BUDGET,
                            REGION_CODE,
                            BA_CODE,
                            AFD_CODE,
                            BLOCK_CODE,
                            COST_ELEMENT,
                            MATURITY_STAGE,
                            SUM (DIS_COST_JAN) DIS_COST_JAN,
                            SUM (DIS_COST_FEB) DIS_COST_FEB,
                            SUM (DIS_COST_MAR) DIS_COST_MAR,
                            SUM (DIS_COST_APR) DIS_COST_APR,
                            SUM (DIS_COST_MAY) DIS_COST_MAY,
                            SUM (DIS_COST_JUN) DIS_COST_JUN,
                            SUM (DIS_COST_JUL) DIS_COST_JUL,
                            SUM (DIS_COST_AUG) DIS_COST_AUG,
                            SUM (DIS_COST_SEP) DIS_COST_SEP,
                            SUM (DIS_COST_OCT) DIS_COST_OCT,
                            SUM (DIS_COST_NOV) DIS_COST_NOV,
                            SUM (DIS_COST_DEC) DIS_COST_DEC,
                            MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
                            MAX (COST_TOOLS_KG) COST_TOOLS_KG,
                            MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
                       FROM (  SELECT RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                                      SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                                      SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                                      SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                                      SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                                      SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                                      SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                                      0 DIS_COST_JUL,
                                      0 DIS_COST_AUG,
                                      0 DIS_COST_SEP,
                                      0 DIS_COST_OCT,
                                      0 DIS_COST_NOV,
                                      0 DIS_COST_DEC,
                                      MAX (RKT.COST_LABOUR_POKOK)
                                         AS COST_LABOUR_POKOK,
                                      MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                                      MAX (RKT.COST_TRANSPORT_KG)
                                         AS COST_TRANSPORT_KG
                                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                                      LEFT JOIN
                                         TM_ORGANIZATION ORG
                                      ON ORG.BA_CODE = RKT.BA_CODE
                                WHERE RKT.DELETE_USER IS NULL
                                      AND RKT.MATURITY_STAGE_SMS1 = 'TM'
                                      AND RKT.COST_ELEMENT <> 'MATERIAL'
                                      $where
                             GROUP BY RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS1
                             UNION ALL
                               SELECT RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                                      0 DIS_COST_JAN,
                                      0 DIS_COST_FEB,
                                      0 DIS_COST_MAR,
                                      0 DIS_COST_APR,
                                      0 DIS_COST_MAY,
                                      0 DIS_COST_JUN,
                                      SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                                      SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                                      SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                                      SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                                      SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                                      SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                                      MAX (RKT.COST_LABOUR_POKOK)
                                         AS COST_LABOUR_POKOK,
                                      MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                                      MAX (RKT.COST_TRANSPORT_KG)
                                         AS COST_TRANSPORT_KG
                                 FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                                      LEFT JOIN
                                         TM_ORGANIZATION ORG
                                      ON ORG.BA_CODE = RKT.BA_CODE
                                WHERE RKT.DELETE_USER IS NULL
                                      AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                                      AND RKT.COST_ELEMENT <> 'MATERIAL'
                                      $where
                             GROUP BY RKT.PERIOD_BUDGET,
                                      ORG.REGION_CODE,
                                      RKT.BA_CODE,
                                      RKT.AFD_CODE,
                                      RKT.BLOCK_CODE,
                                      RKT.COST_ELEMENT,
                                      RKT.MATURITY_STAGE_SMS2)
                   GROUP BY PERIOD_BUDGET,
                            REGION_CODE,
                            BA_CODE,
                            AFD_CODE,
                            BLOCK_CODE,
                            COST_ELEMENT,
                            MATURITY_STAGE) COST
               LEFT JOIN
                  V_KG_PUPUK_AFD KG_PUPUK
               ON     COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
                  AND COST.BA_CODE = KG_PUPUK.BA_CODE
                  AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
                  AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE)
	UNION ALL 
	-- REPORT KEBUTUHAN AKTIVITAS DISTRIBUSI NON INFRA
	SELECT PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            BLOCK_CODE,
            MATURITY_STAGE AS TIPE_TRANSAKSI,
            COST_ELEMENT,
            ACTIVITY_CODE, 
            DESCRIPTION AS ACTIVITY_DESC,
            VRA_CODE AS SUB_COST_ELEMENT, 
            VRA_CODE||' - '||VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
            '' KETERANGAN,
            UOM,
            SUM (NVL (PLAN_JAN, 0)) AS QTY_JAN,
            SUM (NVL (PLAN_FEB, 0)) AS QTY_FEB,
            SUM (NVL (PLAN_MAR, 0)) AS QTY_MAR,
            SUM (NVL (PLAN_APR, 0)) AS QTY_APR,
            SUM (NVL (PLAN_MAY, 0)) AS QTY_MAY,
            SUM (NVL (PLAN_JUN, 0)) AS QTY_JUN,
            SUM (NVL (PLAN_JUL, 0)) AS QTY_JUL,
            SUM (NVL (PLAN_AUG, 0)) AS QTY_AUG,
            SUM (NVL (PLAN_SEP, 0)) AS QTY_SEP,
            SUM (NVL (PLAN_OCT, 0)) AS QTY_OCT,
            SUM (NVL (PLAN_NOV, 0)) AS QTY_NOV,
            SUM (NVL (PLAN_DEC, 0)) AS QTY_DEC,
            SUM (NVL (DIS_JAN, 0)) AS COST_JAN,
            SUM (NVL (DIS_FEB, 0)) AS COST_FEB,
            SUM (NVL (DIS_MAR, 0)) AS COST_MAR,
            SUM (NVL (DIS_APR, 0)) AS COST_APR,
            SUM (NVL (DIS_MAY, 0)) AS COST_MAY,
            SUM (NVL (DIS_JUN, 0)) AS COST_JUN,
            SUM (NVL (DIS_JUL, 0)) AS COST_JUL,
            SUM (NVL (DIS_AUG, 0)) AS COST_AUG,
            SUM (NVL (DIS_SEP, 0)) AS COST_SEP,
            SUM (NVL (DIS_OCT, 0)) AS COST_OCT,
            SUM (NVL (DIS_NOV, 0)) AS COST_NOV,
            SUM (NVL (DIS_DEC, 0)) AS COST_DEC,
            (SUM (NVL (PLAN_JAN, 0)) +
            SUM (NVL (PLAN_FEB, 0)) +
            SUM (NVL (PLAN_MAR, 0)) +
            SUM (NVL (PLAN_APR, 0)) +
            SUM (NVL (PLAN_MAY, 0)) +
            SUM (NVL (PLAN_JUN, 0)) +
            SUM (NVL (PLAN_JUL, 0)) +
            SUM (NVL (PLAN_AUG, 0)) +
            SUM (NVL (PLAN_SEP, 0)) +
            SUM (NVL (PLAN_OCT, 0)) +
            SUM (NVL (PLAN_NOV, 0)) +
            SUM (NVL (PLAN_DEC, 0))) AS QTYPERTAHUN,
            (SUM (NVL (DIS_JAN, 0)) +
            SUM (NVL (DIS_FEB, 0)) +
            SUM (NVL (DIS_MAR, 0)) +
            SUM (NVL (DIS_APR, 0)) +
            SUM (NVL (DIS_MAY, 0)) +
            SUM (NVL (DIS_JUN, 0)) +
            SUM (NVL (DIS_JUL, 0)) +
            SUM (NVL (DIS_AUG, 0)) +
            SUM (NVL (DIS_SEP, 0)) +
            SUM (NVL (DIS_OCT, 0)) +
            SUM (NVL (DIS_NOV, 0)) +
            SUM (NVL (DIS_DEC, 0))) AS COSTSETAHUN,
            '".$this->_userName."' AS INSERT_USER,
            SYSDATE AS INSERT_TIME
       FROM (   SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE,
       COST_ELEMENT,
       ACTIVITY_CODE,
       DESCRIPTION,
       TIPE_TRANSAKSI,
       VRA_CODE,
       VRA_SUB_CAT_DESCRIPTION,
       UOM,
       (NVL (PLAN_JAN, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_JAN,
       (NVL (PLAN_FEB, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_FEB,
       (NVL (PLAN_MAR, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_MAR,
       (NVL (PLAN_APR, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_APR,
       (NVL (PLAN_MAY, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_MAY,
       (NVL (PLAN_JUN, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_JUN,
       0 PLAN_JUL,
       0 PLAN_AUG,
       0 PLAN_SEP,
       0 PLAN_OCT,
       0 PLAN_NOV,
       0 PLAN_DEC,
       DIS_JAN,
       DIS_FEB,
       DIS_MAR,
       DIS_APR,
       DIS_MAY,
       DIS_JUN,
       0 DIS_JUL,
       0 DIS_AUG,
       0 DIS_SEP,
       0 DIS_OCT,
       0 DIS_NOV,
       0 DIS_DEC
  FROM (
  SELECT *
          FROM    (
          SELECT RKT.PERIOD_BUDGET,
                          ORG.REGION_CODE,
                          RKT.BA_CODE,
                          RKT.AFD_CODE,
                          RKT.BLOCK_CODE,
                          RKT.COST_ELEMENT,
                          RKT.ACTIVITY_CODE,
                          RKT.TIPE_TRANSAKSI,
                          ACT.DESCRIPTION,
                          VRADIS.VRA_CODE,
                          VRADIS.HM_KM,
                          TMVRA.UOM,
                          TMVRA.VRA_SUB_CAT_DESCRIPTION,
                          RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                          RKT.PLAN_JAN,
                          RKT.PLAN_FEB,
                          RKT.PLAN_MAR,
                          RKT.PLAN_APR,
                          RKT.PLAN_MAY,
                          RKT.PLAN_JUN,
                          RKT.PLAN_JUL,
                          RKT.PLAN_AUG,
                          RKT.PLAN_SEP,
                          RKT.PLAN_OCT,
                          RKT.PLAN_NOV,
                          RKT.PLAN_DEC,
                          DIS_JAN,
                          DIS_FEB,
                          DIS_MAR,
                          DIS_APR,
                          DIS_MAY,
                          DIS_JUN,
                          DIS_JUL,
                          DIS_AUG,
                          DIS_SEP,
                          DIS_OCT,
                          DIS_NOV,
                          DIS_DEC
                     FROM TR_RKT_COST_ELEMENT RKT
                          LEFT JOIN TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE
                          LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRADIS
                             ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                                AND RKT.BA_CODE = VRADIS.BA_CODE
                                AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                                AND RKT.AFD_CODE = VRADIS.LOCATION_CODE
                                AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
--                          LEFT JOIN TR_RKT_VRA VRARKT
--                             ON     RKT.PERIOD_BUDGET = VRARKT.PERIOD_BUDGET
--                                AND RKT.BA_CODE = VRARKT.BA_CODE
--                                AND VRADIS.VRA_CODE = VRARKT.VRA_CODE
                         LEFT JOIN TM_VRA TMVRA 
                            ON TMVRA.VRA_CODE = VRADIS.VRA_CODE
                         LEFT JOIN TM_ACTIVITY ACT
                            ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE   
                    WHERE RKT.DELETE_USER IS NULL
                          AND RKT.MATURITY_STAGE_SMS1  = 'TM'
                          AND RKT.COST_ELEMENT = 'TRANSPORT'
                          $where
                          ) RKT
               LEFT JOIN
                  (  SELECT RKT.BA_CODE AS A_BA_CODE,
                            RKT.AFD_CODE AS A_AFD_CODE,
                            RKT.ACTIVITY_CODE AS A_ACTIVITY_CODE,
                            SUM (RKT.PLAN_SETAHUN) SUMAFD
                       FROM    TR_RKT_COST_ELEMENT RKT
					    LEFT JOIN TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE
                            LEFT JOIN
                               TR_RKT_VRA_DISTRIBUSI VRADIS
                            ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                               AND RKT.BA_CODE = VRADIS.BA_CODE
                               AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                               AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.MATURITY_STAGE_SMS1  = 'TM'
                            AND RKT.COST_ELEMENT = 'TRANSPORT'
                            $where
                   GROUP BY RKT.BA_CODE, RKT.AFD_CODE, RKT.ACTIVITY_CODE)
                  PERAFD
               ON     RKT.BA_CODE = PERAFD.A_BA_CODE
                  AND RKT.AFD_CODE = PERAFD.A_AFD_CODE
                  AND RKT.ACTIVITY_CODE = PERAFD.A_ACTIVITY_CODE
                )                     
UNION ALL
SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE,
       COST_ELEMENT,
       ACTIVITY_CODE,
       DESCRIPTION,
       TIPE_TRANSAKSI,
       VRA_CODE,
       VRA_SUB_CAT_DESCRIPTION,
       UOM,
       0 PLAN_JAN,
       0 PLAN_FEB,
       0 PLAN_MAR,
       0 PLAN_APR,
       0 PLAN_MAY,
       0 PLAN_JUN,
       (NVL (PLAN_JUL, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_JUL,
       (NVL (PLAN_AUG, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_AUG,
       (NVL (PLAN_SEP, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_SEP,
       (NVL (PLAN_OCT, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_OCT,
       (NVL (PLAN_NOV, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_NOV,
       (NVL (PLAN_DEC, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_DEC,
       0 DIS_JAN,
       0 DIS_FEB,
       0 DIS_MAR,
       0 DIS_APR,
       0 DIS_MAY,
       0 DIS_JUN,
       DIS_JUL,
       DIS_AUG,
       DIS_SEP,
       DIS_OCT,
       DIS_NOV,
       DIS_DEC
  FROM (SELECT *
          FROM    (SELECT RKT.PERIOD_BUDGET,
                          ORG.REGION_CODE,
                          RKT.BA_CODE,
                          RKT.AFD_CODE,
                          RKT.BLOCK_CODE,
                          RKT.COST_ELEMENT,
                          RKT.ACTIVITY_CODE,
                          RKT.TIPE_TRANSAKSI,
                          ACT.DESCRIPTION,
                          VRADIS.VRA_CODE,
                          VRADIS.HM_KM,
                          TMVRA.UOM,
                          TMVRA.VRA_SUB_CAT_DESCRIPTION,
                          RKT.MATURITY_STAGE_SMS2 AS MATURITY_STAGE,
                          RKT.PLAN_JAN,
                          RKT.PLAN_FEB,
                          RKT.PLAN_MAR,
                          RKT.PLAN_APR,
                          RKT.PLAN_MAY,
                          RKT.PLAN_JUN,
                          RKT.PLAN_JUL,
                          RKT.PLAN_AUG,
                          RKT.PLAN_SEP,
                          RKT.PLAN_OCT,
                          RKT.PLAN_NOV,
                          RKT.PLAN_DEC,
                          DIS_JAN,
                          DIS_FEB,
                          DIS_MAR,
                          DIS_APR,
                          DIS_MAY,
                          DIS_JUN,
                          DIS_JUL,
                          DIS_AUG,
                          DIS_SEP,
                          DIS_OCT,
                          DIS_NOV,
                          DIS_DEC
                     FROM TR_RKT_COST_ELEMENT RKT
                          LEFT JOIN TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE
                          LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRADIS
                             ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                                AND RKT.BA_CODE = VRADIS.BA_CODE
                                AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                                AND RKT.AFD_CODE = VRADIS.LOCATION_CODE
                                AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
--                          LEFT JOIN TR_RKT_VRA VRARKT
--                             ON     RKT.PERIOD_BUDGET = VRARKT.PERIOD_BUDGET
--                                AND RKT.BA_CODE = VRARKT.BA_CODE
--                                AND VRADIS.VRA_CODE = VRARKT.VRA_CODE
                         LEFT JOIN TM_VRA TMVRA 
                            ON TMVRA.VRA_CODE = VRADIS.VRA_CODE
                         LEFT JOIN TM_ACTIVITY ACT
                            ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE   
                    WHERE RKT.DELETE_USER IS NULL
                          AND RKT.MATURITY_STAGE_SMS2  = 'TM'
                          AND RKT.COST_ELEMENT = 'TRANSPORT'
                          $where
                          ) RKT
               LEFT JOIN
                  (  SELECT RKT.BA_CODE AS A_BA_CODE,
                            RKT.AFD_CODE AS A_AFD_CODE,
                            RKT.ACTIVITY_CODE AS A_ACTIVITY_CODE,
                            SUM (RKT.PLAN_SETAHUN) SUMAFD
                       FROM    TR_RKT_COST_ELEMENT RKT
					    LEFT JOIN TM_ORGANIZATION ORG
                            ON ORG.BA_CODE = RKT.BA_CODE
                            LEFT JOIN
                               TR_RKT_VRA_DISTRIBUSI VRADIS
                            ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                               AND RKT.BA_CODE = VRADIS.BA_CODE
                               AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                               AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.MATURITY_STAGE_SMS2 = 'TM'
                            AND RKT.COST_ELEMENT = 'TRANSPORT'
                            $where
                   GROUP BY RKT.BA_CODE, RKT.AFD_CODE, RKT.ACTIVITY_CODE)
                  PERAFD
               ON     RKT.BA_CODE = PERAFD.A_BA_CODE
                  AND RKT.AFD_CODE = PERAFD.A_AFD_CODE
                  AND RKT.ACTIVITY_CODE = PERAFD.A_ACTIVITY_CODE)    
) GROUP BY 
            PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            BLOCK_CODE,
            MATURITY_STAGE,
            COST_ELEMENT,
            ACTIVITY_CODE, 
            TIPE_TRANSAKSI,
            DESCRIPTION,
            VRA_CODE, 
            VRA_SUB_CAT_DESCRIPTION,
            UOM
	UNION ALL	
		-- INI UNTUK DISTRIBUSI NON INFRA PENGANKUTAN ONTERNAL TBS(5101030504-1)
	SELECT   RKTFIRST.PERIOD_BUDGET,
                          RKTFIRST.REGION_CODE,
                          RKTFIRST.BA_CODE,
                          RKTFIRST.AFD_CODE,
                          RKTFIRST.BLOCK_CODE,
                          'TM' AS TIPE_TRANSAKSI,
                          'TRANSPORT' AS COST_ELEMENT,
                          '5101030504-1' AS ACTIVITY_CODE, 
                          'PENGANGKUTAN INTERNAL TBS - VRA' AS ACTIVITY_DESC,
                          RKTFIRST.VRA_CODE AS SUB_COST_ELEMENT, 
                          RKTFIRST.VRA_CODE||' - '||RKTFIRST.VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
                          '' KETERANGAN,
                          RKTFIRST.UOM,
                          (RKTFIRST.JAN/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISJAN,
                          (RKTFIRST.FEB/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISFEB,
                          (RKTFIRST.MAR/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISMAR,
                          (RKTFIRST.APR/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISAPR,
                          (RKTFIRST.MAY/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISMAY,
                          (RKTFIRST.JUN/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISJUN,
                          (RKTFIRST.JUL/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISJUL,
                          (RKTFIRST.AUG/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISAUG,
                          (RKTFIRST.SEP/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISSEP,
                          (RKTFIRST.OCT/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISOCT,
                          (RKTFIRST.NOV/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISNOV,
                          (RKTFIRST.DEC/RKTSEC.TOTAL*RKTFIRST.HM_KM) DISDEC,
                          (RKTFIRST.JAN/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTJAN,
                          (RKTFIRST.FEB/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTFEB,
                          (RKTFIRST.MAR/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTMAR,
                          (RKTFIRST.APR/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTAPR,
                          (RKTFIRST.MAY/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTMAY,
                          (RKTFIRST.JUN/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTJUN,
                          (RKTFIRST.JUL/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTJUL,
                          (RKTFIRST.AUG/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTAUG,
                          (RKTFIRST.SEP/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTSEP,
                          (RKTFIRST.OCT/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTOCT,
                          (RKTFIRST.NOV/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTNOV,
                          (RKTFIRST.DEC/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) COSTDEC,
                          ((RKTFIRST.JAN/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.FEB/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.MAR/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.APR/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.MAY/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.JUN/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.JUL/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.AUG/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.SEP/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.OCT/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.NOV/RKTSEC.TOTAL*RKTFIRST.HM_KM) +
                          (RKTFIRST.DEC/RKTSEC.TOTAL*RKTFIRST.HM_KM)) DIS_SETAHUN,
                          ((RKTFIRST.JAN/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.FEB/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.MAR/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.APR/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.MAY/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.JUN/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.JUL/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.AUG/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.SEP/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.OCT/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.NOV/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM) +
                          (RKTFIRST.DEC/RKTSEC.TOTAL*RKTFIRST.PRICE_HM_KM)) COS_SETAHUN,
						  '".$this->_userName."' AS INSERT_USER,
						  SYSDATE AS INSERT_TIME
                    FROM (SELECT RKT.PERIOD_BUDGET,
                          ORG.REGION_CODE,  
                          RKT.BA_CODE,
                          RKT.AFD_CODE,
                          RKT.BLOCK_CODE,
                          TMVRA.VRA_CODE,
                          TMVRA.VRA_SUB_CAT_DESCRIPTION, 
                          TMVRA.UOM,
                          RKT.JAN,
                          RKT.FEB,
                          RKT.MAR,
                          RKT.APR,
                          RKT.MAY,
                          RKT.JUN,
                          RKT.JUL,
                          RKT.AUG,
                          RKT.SEP,
                          RKT.OCT,
                          RKT.NOV,
                          RKT.DEC,
                          VRADIS.HM_KM,
                          VRADIS.PRICE_HM_KM
                     FROM TR_PRODUKSI_PERIODE_BUDGET RKT
                          LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRADIS
                             ON     VRADIS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                                AND VRADIS.BA_CODE = RKT.BA_CODE
                                AND VRADIS.LOCATION_CODE = RKT.AFD_CODE
                                AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
                                AND VRADIS.ACTIVITY_CODE = '5101030504'
                         LEFT JOIN TM_VRA TMVRA 
                            ON TMVRA.VRA_CODE = VRADIS.VRA_CODE 
                         LEFT JOIN TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE   
                    WHERE RKT.DELETE_USER IS NULL
                          $where
                          ) RKTFIRST
            LEFT JOIN (              
            SELECT RKT.PERIOD_BUDGET,
                          RKT.BA_CODE,
                          RKT.AFD_CODE,
                          (SUM (RKT.JAN) +
                          SUM (RKT.FEB) +
                          SUM (RKT.MAR) +
                          SUM (RKT.APR) +
                          SUM (RKT.MAY) +
                          SUM (RKT.JUN) +
                          SUM (RKT.JUL) +
                          SUM (RKT.AUG) +
                          SUM (RKT.SEP) +
                          SUM (RKT.OCT) +
                          SUM (RKT.NOV) +
                          SUM (RKT.DEC) ) TOTAL
                     FROM TR_PRODUKSI_PERIODE_BUDGET RKT
						LEFT JOIN TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE
                          LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRADIS
                             ON     VRADIS.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                                AND VRADIS.BA_CODE = RKT.BA_CODE
                                AND VRADIS.LOCATION_CODE = RKT.AFD_CODE
                                AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
                                AND VRADIS.ACTIVITY_CODE = '5101030504'
                    WHERE RKT.DELETE_USER IS NULL
                          $where
                    GROUP BY RKT.PERIOD_BUDGET,
                          RKT.BA_CODE,
                          RKT.AFD_CODE
                          ) RKTSEC
           ON RKTFIRST.PERIOD_BUDGET = RKTSEC.PERIOD_BUDGET
           AND RKTFIRST.BA_CODE = RKTSEC.BA_CODE
           AND RKTFIRST.AFD_CODE = RKTSEC.AFD_CODE
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (ASTEK)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'ASTEK' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1 
	 $xwhere
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	   $xwhere
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
		   $twhere
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
					   $twhere
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
		$xwhere
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
	 $twhere
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
					   $twhere
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (BONUS)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'BONUS' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	   $xwhere
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
		   $twhere
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
					   $twhere
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	   $xwhere
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
		   $twhere
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
					   $twhere
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1             
	UNION ALL 
	-- INI UNTUK PERHITUNGAN TUNJANGAN (CATU)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'CATU' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_CATU TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
	 WHERE  1 = 1
			$twhere 
		   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
						TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_CATU TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
				 WHERE   1=1  
					$twhere 
					   AND TCR.TUNJANGAN_TYPE = 'CATU'
					   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_CATU TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
	 WHERE  1 = 1
		$twhere 
		   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
						TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_CATU TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
				 WHERE  1 = 1
						$xwhere 
					   AND TCR.TUNJANGAN_TYPE = 'CATU'
					   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (HHR)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'HHR' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	 $xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
			$twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
					$xwhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1
	UNION ALL
	-- INI UNTUK PERHITUGAN TUNJANGAN (JABATAN)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'JABATAN' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE  1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
		$twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
		$twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (KEHADIRAN)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'KEHADIRAN' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	 $xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE  1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN LAINNYA
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'LAINNYA' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE  1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE  1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (OBAT)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'OBAT' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	 $xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	 $xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (PPH21)
	 SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'PPH_21' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	 $xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
	 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	 $xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
		 $twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (PPH_21)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'PPH_21' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
		$xwhere 
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
		$twhere 
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
					$twhere 
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere 
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
	   $xwhere
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
		   $twhere
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
					   $twhere
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 
	UNION ALL
	-- INI UNTUK PERHITUNGAN TUNJANGAN (THR)
	SELECT PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
				'' AS COST_ELEMENT,
				'' AS ACTIVITY_CODE, 
				'THR' AS ACTIVITY_DESC,
				'' AS SUB_COST_ELEMENT, 
				'' AS MATERIAL_NAME,
				'' KETERANGAN,
				'' UOM,
				SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
				SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
				SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
				SUM(NVL (DIS_APR,0)) AS DIS_APR,
				SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
				SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
				SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
				SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
				SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
				SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
				SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
				SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
				SUM(NVL (COST_JAN,0)) AS COST_JAN,
				SUM(NVL (COST_FEB,0)) AS COST_FEB,
				SUM(NVL (COST_MAR,0)) AS COST_MAR,
				SUM(NVL (COST_APR,0)) AS COST_APR,
				SUM(NVL (COST_MAY,0)) AS COST_MAY,
				SUM(NVL (COST_JUN,0)) AS COST_JUN,
				SUM(NVL (COST_JUL,0)) AS COST_JUL,
				SUM(NVL (COST_AUG,0)) AS COST_AUG,
				SUM(NVL (COST_SEP,0)) AS COST_SEP,
				SUM(NVL (COST_OCT,0)) AS COST_OCT,
				SUM(NVL (COST_NOV,0)) AS COST_NOV,
				SUM(NVL (COST_DEC,0)) AS COST_DEC,
				(SUM(NVL (DIS_JAN,0)) +
				SUM(NVL (DIS_FEB,0)) +
				SUM(NVL (DIS_MAR,0)) +
				SUM(NVL (DIS_APR,0)) +
				SUM(NVL (DIS_MAY,0)) +
				SUM(NVL (DIS_JUN,0)) +
				SUM(NVL (DIS_JUL,0)) +
				SUM(NVL (DIS_AUG,0)) +
				SUM(NVL (DIS_SEP,0)) +
				SUM(NVL (DIS_OCT,0)) +
				SUM(NVL (DIS_NOV,0)) +
				SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
				(SUM(NVL (COST_JAN,0)) +
				SUM(NVL (COST_FEB,0)) +
				SUM(NVL (COST_MAR,0)) +
				SUM(NVL (COST_APR,0)) +
				SUM(NVL (COST_MAY,0)) +
				SUM(NVL (COST_JUN,0)) +
				SUM(NVL (COST_JUL,0)) +
				SUM(NVL (COST_AUG,0)) +
				SUM(NVL (COST_SEP,0)) +
				SUM(NVL (COST_OCT,0)) +
				SUM(NVL (COST_NOV,0)) +
				SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
				'".$this->_userName."' AS INSERT_USER,
				SYSDATE AS INSERT_TIME
	FROM (            
	--HITUNG TUNJANGAN UNTUK SMS1
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS1,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
				0 AS DIS_JUL,
				0 AS DIS_AUG,
				0 AS DIS_SEP,
				0 AS DIS_OCT,
				0 AS DIS_NOV,
				0 AS DIS_DEC,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
				0 AS COST_JUL,
				0 AS COST_AUG,
				0 AS COST_SEP,
				0 AS COST_OCT,
				0 AS COST_NOV,
				0 AS COST_DEC       
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS1,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere
	 AND MATURITY_STAGE_SMS1 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE  1 = 1
	 $xwhere
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
	 $twhere
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
					$twhere
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	UNION ALL
	--HITUNG TUNJANGAN UNTUK SMS2
	SELECT 
				HA_TM.PERIOD_BUDGET,
				ORG.REGION_CODE,
				HA_TM.BA_CODE,
				HA_TM.AFD_CODE,
				HA_TM.BLOCK_CODE,
				HA_TM.MATURITY_STAGE_SMS2,
				0 AS DIS_JAN,
				0 AS DIS_FEB,
				0 AS DIS_MAR,
				0 AS DIS_APR,
				0 AS DIS_MAY,
				0 AS DIS_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
				0 AS COST_JAN,
				0 AS COST_FEB,
				0 AS COST_MAR,
				0 AS COST_APR,
				0 AS COST_MAY,
				0 AS COST_JUN,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
				(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
	FROM (
	SELECT PERIOD_BUDGET,
		   BA_CODE,
		   AFD_CODE,
		   BLOCK_CODE,
		   MATURITY_STAGE_SMS2,
		   HA_PLANTED
	  FROM TM_HECTARE_STATEMENT
	 WHERE 1 = 1
	 $xwhere
	 AND MATURITY_STAGE_SMS2 = 'TM'
	) HA_TM
	LEFT JOIN (       
	SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
	   FROM TM_HECTARE_STATEMENT
	   WHERE 1 = 1
		$xwhere
	GROUP BY PERIOD_BUDGET, BA_CODE
	) HA_BA
	ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND HA_TM.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN (
	SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
	  FROM    TM_TARIF_TUNJANGAN TTJ
		   LEFT JOIN
			  TR_RKT_CHECKROLL TRC
		   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
			  AND TRC.BA_CODE = TTJ.BA_CODE
			  AND TRC.JOB_CODE = TTJ.JOB_CODE
			  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
	 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
	 $twhere
	GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
	) ALL_MPP
	ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
	AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
	LEFT JOIN TM_ORGANIZATION ORG
	ON ORG.BA_CODE = HA_TM.BA_CODE
	LEFT JOIN (
	SELECT PERIOD_BUDGET,
				BA_CODE,
				SUM(COSTTYPE) AS COST_BA
	FROM (            
				SELECT TTJ.PERIOD_BUDGET,
					   TTJ.BA_CODE,
					   TTJ.JOB_CODE,
					   TCR.TUNJANGAN_TYPE,
					   TCR.JUMLAH,
					   TRC.MPP_PERIOD_BUDGET,
					   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
				  FROM TM_TARIF_TUNJANGAN TTJ
					   LEFT JOIN TR_RKT_CHECKROLL TRC
						  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
							 AND TRC.BA_CODE = TTJ.BA_CODE
							 AND TRC.JOB_CODE = TTJ.JOB_CODE
							 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
					   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
						  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
							 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
				 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
					$twhere
	) GROUP BY PERIOD_BUDGET, BA_CODE
	) TTL_COST
	ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
	AND HA_TM.BA_CODE = TTL_COST.BA_CODE
	)
	GROUP BY PERIOD_BUDGET,
				REGION_CODE,
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				MATURITY_STAGE_SMS1 	
				";
		
		$this->_db->query($xquery);
		$this->_db->commit();
		
		return true;		 
	}		
	
	//hapus temp table untuk kebutuhan activity estate cost
	public function delTmpRptKebActEstCostBlock($params = array())
    {
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		//hapus estate cost per BLOCK
		$query = "
			DELETE FROM TMP_RPT_KEB_EST_COST_BLOCK 
			WHERE 1 = 1
			$where 
		";
		
		$this->_db->query($query);
		$this->_db->commit();
		
		return true;
	}
	
	
	//ARIES 15-JUN-2015
	public function tmpRptKebActDevCostBlock($params = array())
	{
		$where = "";
		$where1 = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$where1 .= "
                AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$where1 .= "
                AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";  
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND RKT.BA_CODE = '".$params['key_find']."'
            ";
			$where1 .= "
                AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
            ";
        }
		//generate dev cost per BLOCK
		$query = "
			INSERT INTO TMP_RPT_KEB_DEV_COST_BLOCK (
				PERIOD_BUDGET, 
				REGION_CODE, 
				BA_CODE,
				AFD_CODE,
				BLOCK_CODE,
				TIPE_TRANSAKSI, 
				COST_ELEMENT,
                ACTIVITY_CODE,
                ACTIVITY_DESC,
				SUB_COST_ELEMENT,
				SUB_COST_ELEMENT_DESC,
				KETERANGAN,
				UOM, 
				QTY_JAN, 
				QTY_FEB, 
				QTY_MAR, 
				QTY_APR, 
				QTY_MAY, 
				QTY_JUN, 
				QTY_JUL, 
				QTY_AUG, 
				QTY_SEP, 
				QTY_OCT, 
				QTY_NOV, 
				QTY_DEC,
				COST_JAN, 
				COST_FEB, 
				COST_MAR, 
				COST_APR, 
				COST_MAY, 
				COST_JUN, 
				COST_JUL, 
				COST_AUG, 
				COST_SEP, 
				COST_OCT, 
				COST_NOV, 
				COST_DEC,
				QTY_SETAHUN,
				COST_SETAHUN,
				INSERT_USER, 
				INSERT_TIME
			)
		SELECT PERIOD_BUDGET,
		 REGION_CODE,	  
         BA_CODE,
         AFD_CODE,
         BLOCK_CODE,
         ACTIVITY_GROUP,
         COST_ELEMENT,
         ACTIVITY_CODE,
		 ACTIVITY_DESC,
         SUB_COST_ELEMENT,
         MATERIAL_NAME,
         '' KETERANGAN,
		 UOM,
         SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
         SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
         SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
         SUM (NVL (QTY_APR, 0)) AS QTY_APR,
         SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
         SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
         SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
         SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
         SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
         SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
         SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
         SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
         SUM (NVL (COST_JAN, 0)) AS COST_JAN,
         SUM (NVL (COST_FEB, 0)) AS COST_FEB,
         SUM (NVL (COST_MAR, 0)) AS COST_MAR,
         SUM (NVL (COST_APR, 0)) AS COST_APR,
         SUM (NVL (COST_MAY, 0)) AS COST_MAY,
         SUM (NVL (COST_JUN, 0)) AS COST_JUN,
         SUM (NVL (COST_JUL, 0)) AS COST_JUL,
         SUM (NVL (COST_AUG, 0)) AS COST_AUG,
         SUM (NVL (COST_SEP, 0)) AS COST_SEP,
         SUM (NVL (COST_OCT, 0)) AS COST_OCT,
         SUM (NVL (COST_NOV, 0)) AS COST_NOV,
         SUM (NVL (COST_DEC, 0)) AS COST_DEC,
		 (SUM (NVL (QTY_JAN, 0)) + SUM (NVL (QTY_FEB, 0)) + SUM (NVL (QTY_MAR, 0)) 
                              + SUM (NVL (QTY_APR, 0)) + SUM (NVL (QTY_MAY, 0)) + SUM (NVL (QTY_JUN, 0))
                              + SUM (NVL (QTY_JUL, 0)) + SUM (NVL (QTY_AUG, 0)) + SUM (NVL (QTY_SEP, 0)) 
                              + SUM (NVL (QTY_OCT, 0)) + SUM (NVL (QTY_NOV, 0)) + SUM (NVL (QTY_DEC, 0)))
		 AS QTY_SETAHUN,
		 (SUM (NVL (COST_JAN, 0)) + SUM (NVL (COST_FEB, 0)) + SUM (NVL (COST_MAR, 0))
                     + SUM (NVL (COST_APR, 0)) + SUM (NVL (COST_MAY, 0)) + SUM (NVL (COST_JUN, 0))
                     + SUM (NVL (COST_JUL, 0)) + SUM (NVL (COST_AUG, 0)) + SUM (NVL (COST_SEP, 0))
                     + SUM (NVL (COST_OCT, 0)) + SUM (NVL (COST_NOV, 0)) + SUM (NVL (COST_DEC, 0))) 
         AS COST_SETAHUN,
         '".$this->_userName."' AS INSERT_USER,
		 SYSDATE AS INSERT_TIME
    FROM (-- MANUAL_NON_INFRA SM 1
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     BIAYA.QTY_HA,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     (RKT.PLAN_JAN * BIAYA.QTY_HA)
                                        AS QTY_JAN,
                                     (RKT.PLAN_FEB * BIAYA.QTY_HA)
                                        AS QTY_FEB,
                                     (RKT.PLAN_MAR * BIAYA.QTY_HA)
                                        AS QTY_MAR,
                                     (RKT.PLAN_APR * BIAYA.QTY_HA)
                                        AS QTY_APR,
                                     (RKT.PLAN_MAY * BIAYA.QTY_HA)
                                        AS QTY_MAY,
                                     (RKT.PLAN_JUN * BIAYA.QTY_HA)
                                        AS QTY_JUN,
                                     0 QTY_JUL,
                                     0 QTY_AUG,
                                     0 QTY_SEP,
                                     0 QTY_OCT,
                                     0 QTY_NOV,
                                     0 QTY_DEC,
                                     (RKT.PLAN_JAN * BIAYA.PRICE_ROTASI)
                                        AS COST_JAN,
                                     (RKT.PLAN_FEB * BIAYA.PRICE_ROTASI)
                                        AS COST_FEB,
                                     (RKT.PLAN_MAR * BIAYA.PRICE_ROTASI)
                                        AS COST_MAR,
                                     (RKT.PLAN_APR * BIAYA.PRICE_ROTASI)
                                        AS COST_APR,
                                     (RKT.PLAN_MAY * BIAYA.PRICE_ROTASI)
                                        AS COST_MAY,
                                     (RKT.PLAN_JUN * BIAYA.PRICE_ROTASI)
                                        AS COST_JUN,
                                     0 COST_JUL,
                                     0 COST_AUG,
                                     0 COST_SEP,
                                     0 COST_OCT,
                                     0 COST_NOV,
                                     0 COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS1 <> 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA'
                                     $where
                                                             )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          -- MANUAL_NON_INFRA SM 2
          UNION ALL
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     0 AS QTY_JAN,
                                     0 AS QTY_FEB,
                                     0 AS QTY_MAR,
                                     0 AS QTY_APR,
                                     0 AS QTY_MAY,
                                     0 AS QTY_JUN,
                                     (RKT.PLAN_JUL * BIAYA.QTY_HA)
                                        AS QTY_JUL,
                                     (RKT.PLAN_AUG * BIAYA.QTY_HA)
                                        AS QTY_AUG,
                                     (RKT.PLAN_SEP * BIAYA.QTY_HA)
                                        AS QTY_SEP,
                                     (RKT.PLAN_OCT * BIAYA.QTY_HA)
                                        AS QTY_OCT,
                                     (RKT.PLAN_NOV * BIAYA.QTY_HA)
                                        AS QTY_NOV,
                                     (RKT.PLAN_DEC * BIAYA.QTY_HA)
                                        AS QTY_DEC,
                                     0 COST_JAN,
                                     0 COST_FEB,
                                     0 COST_MAR,
                                     0 COST_APR,
                                     0 COST_MAY,
                                     0 AS COST_JUN,
                                     (RKT.PLAN_JUL * BIAYA.PRICE_ROTASI)
                                        AS COST_JUL,
                                     (RKT.PLAN_AUG * BIAYA.PRICE_ROTASI)
                                        AS COST_AUG,
                                     (RKT.PLAN_SEP * BIAYA.PRICE_ROTASI)
                                        AS COST_SEP,
                                     (RKT.PLAN_OCT * BIAYA.PRICE_ROTASI)
                                        AS COST_OCT,
                                     (RKT.PLAN_NOV * BIAYA.PRICE_ROTASI)
                                        AS COST_NOV,
                                     (RKT.PLAN_DEC * BIAYA.PRICE_ROTASI)
                                        AS COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS2 <> 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          UNION ALL
          SELECT *
            FROM                                 -- MANUAL_NON_INFRA_OPSI SMS1
                 (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     (RKT.PLAN_JAN * BIAYA.QTY_HA)
                                        AS QTY_JAN,
                                     (RKT.PLAN_FEB * BIAYA.QTY_HA)
                                        AS QTY_FEB,
                                     (RKT.PLAN_MAR * BIAYA.QTY_HA)
                                        AS QTY_MAR,
                                     (RKT.PLAN_APR * BIAYA.QTY_HA)
                                        AS QTY_APR,
                                     (RKT.PLAN_MAY * BIAYA.QTY_HA)
                                        AS QTY_MAY,
                                     (RKT.PLAN_JUN * BIAYA.QTY_HA)
                                        AS QTY_JUN,
                                     0 QTY_JUL,
                                     0 QTY_AUG,
                                     0 QTY_SEP,
                                     0 QTY_OCT,
                                     0 QTY_NOV,
                                     0 QTY_DEC,
                                     (RKT.PLAN_JAN * BIAYA.PRICE_ROTASI)
                                        AS COST_JAN,
                                     (RKT.PLAN_FEB * BIAYA.PRICE_ROTASI)
                                        AS COST_FEB,
                                     (RKT.PLAN_MAR * BIAYA.PRICE_ROTASI)
                                        AS COST_MAR,
                                     (RKT.PLAN_APR * BIAYA.PRICE_ROTASI)
                                        AS COST_APR,
                                     (RKT.PLAN_MAY * BIAYA.PRICE_ROTASI)
                                        AS COST_MAY,
                                     (RKT.PLAN_JUN * BIAYA.PRICE_ROTASI)
                                        AS COST_JUN,
                                     0 COST_JUL,
                                     0 COST_AUG,
                                     0 COST_SEP,
                                     0 COST_OCT,
                                     0 COST_NOV,
                                     0 COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ATRIBUT =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS1 <> 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q)
           WHERE rank_z = 1
          UNION ALL                              -- MANUAL_NON_INFRA_OPSI SMS2
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     0 AS QTY_JAN,
                                     0 AS QTY_FEB,
                                     0 AS QTY_MAR,
                                     0 AS QTY_APR,
                                     0 AS QTY_MAY,
                                     0 AS QTY_JUN,
                                     (RKT.PLAN_JUL * BIAYA.QTY_HA)
                                        AS QTY_JUL,
                                     (RKT.PLAN_AUG * BIAYA.QTY_HA)
                                        AS QTY_AUG,
                                     (RKT.PLAN_SEP * BIAYA.QTY_HA)
                                        AS QTY_SEP,
                                     (RKT.PLAN_OCT * BIAYA.QTY_HA)
                                        AS QTY_OCT,
                                     (RKT.PLAN_NOV * BIAYA.QTY_HA)
                                        AS QTY_NOV,
                                     (RKT.PLAN_DEC * BIAYA.QTY_HA)
                                        AS QTY_DEC,
                                     0 COST_JAN,
                                     0 COST_FEB,
                                     0 COST_MAR,
                                     0 COST_APR,
                                     0 COST_MAY,
                                     0 AS COST_JUN,
                                     (RKT.PLAN_JUL * BIAYA.PRICE_ROTASI)
                                        AS COST_JUL,
                                     (RKT.PLAN_AUG * BIAYA.PRICE_ROTASI)
                                        AS COST_AUG,
                                     (RKT.PLAN_SEP * BIAYA.PRICE_ROTASI)
                                        AS COST_SEP,
                                     (RKT.PLAN_OCT * BIAYA.PRICE_ROTASI)
                                        AS COST_OCT,
                                     (RKT.PLAN_NOV * BIAYA.PRICE_ROTASI)
                                        AS COST_NOV,
                                     (RKT.PLAN_DEC * BIAYA.PRICE_ROTASI)
                                        AS COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_BIAYA BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.MATURITY_STAGE_SMS1 =
                                                 BIAYA.ACTIVITY_GROUP
                                           AND RKT.ATRIBUT =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS2 <> 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
									 $where
                                                                  )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          UNION ALL
          SELECT *
            FROM                                          -- MANUAL_INFRA SMS1
                 (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS1 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     (RKT.PLAN_JAN * BIAYA.QTY_HA)
                                        AS QTY_JAN,
                                     (RKT.PLAN_FEB * BIAYA.QTY_HA)
                                        AS QTY_FEB,
                                     (RKT.PLAN_MAR * BIAYA.QTY_HA)
                                        AS QTY_MAR,
                                     (RKT.PLAN_APR * BIAYA.QTY_HA)
                                        AS QTY_APR,
                                     (RKT.PLAN_MAY * BIAYA.QTY_HA)
                                        AS QTY_MAY,
                                     (RKT.PLAN_JUN * BIAYA.QTY_HA)
                                        AS QTY_JUN,
                                     0 QTY_JUL,
                                     0 QTY_AUG,
                                     0 QTY_SEP,
                                     0 QTY_OCT,
                                     0 QTY_NOV,
                                     0 QTY_DEC,
                                     (RKT.PLAN_JAN * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_JAN,
                                     (RKT.PLAN_FEB * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_FEB,
                                     (RKT.PLAN_MAR * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_MAR,
                                     (RKT.PLAN_APR * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_APR,
                                     (RKT.PLAN_MAY * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_MAY,
                                     (RKT.PLAN_JUN * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_JUN,
                                     0 COST_JUL,
                                     0 COST_AUG,
                                     0 COST_SEP,
                                     0 COST_OCT,
                                     0 COST_NOV,
                                     0 COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_INFRASTRUKTUR BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS1 <> 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1
          UNION ALL                                       -- MANUAL INFRA SMS2
          SELECT *
            FROM (WITH Q
                          AS (SELECT RKT.PERIOD_BUDGET,
                                     ORG.REGION_CODE,
                                     RKT.BA_CODE,
                                     RKT.AFD_CODE,
                                     RKT.BLOCK_CODE,
                                     RKT.MATURITY_STAGE_SMS2 AS ACTIVITY_GROUP,
                                     RKT.ACTIVITY_CODE,
                                     RKT.TIPE_TRANSAKSI,
                                     ACT.DESCRIPTION AS ACTIVITY_DESC,
                                     RKT.COST_ELEMENT,
                                     BIAYA.ACTIVITY_CLASS,
                                     BIAYA.LAND_TYPE,
                                     BIAYA.TOPOGRAPHY,
                                     BIAYA.SUB_COST_ELEMENT,
                                     TM_MAT.MATERIAL_NAME,
                                     CASE
                                        WHEN RKT.COST_ELEMENT = 'LABOUR'
                                        THEN
                                           'HK'
                                        WHEN RKT.COST_ELEMENT = 'CONTRACT'
                                        THEN
                                           (SELECT ACT.UOM
                                              FROM TM_ACTIVITY ACT
                                             WHERE ACT.ACTIVITY_CODE =
                                                      BIAYA.SUB_COST_ELEMENT)
                                        ELSE
                                           (SELECT material.UOM
                                              FROM TM_MATERIAL material
                                             WHERE material.MATERIAL_CODE =
                                                      BIAYA.SUB_COST_ELEMENT
                                                   AND material.PERIOD_BUDGET =
                                                         BIAYA.PERIOD_BUDGET
                                                   AND material.BA_CODE =
                                                         BIAYA.BA_CODE)
                                     END
                                        AS UOM,
                                     0 AS QTY_JAN,
                                     0 AS QTY_FEB,
                                     0 AS QTY_MAR,
                                     0 AS QTY_APR,
                                     0 AS QTY_MAY,
                                     0 AS QTY_JUN,
                                     (RKT.PLAN_JUL * BIAYA.QTY_HA)
                                        AS QTY_JUL,
                                     (RKT.PLAN_AUG * BIAYA.QTY_HA)
                                        AS QTY_AUG,
                                     (RKT.PLAN_SEP * BIAYA.QTY_HA)
                                        AS QTY_SEP,
                                     (RKT.PLAN_OCT * BIAYA.QTY_HA)
                                        AS QTY_OCT,
                                     (RKT.PLAN_NOV * BIAYA.QTY_HA)
                                        AS QTY_NOV,
                                     (RKT.PLAN_DEC * BIAYA.QTY_HA)
                                        AS QTY_DEC,
                                     0 COST_JAN,
                                     0 COST_FEB,
                                     0 COST_MAR,
                                     0 COST_APR,
                                     0 COST_MAY,
                                     0 AS COST_JUN,
                                     (RKT.PLAN_JUL * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_JUL,
                                     (RKT.PLAN_AUG * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_AUG,
                                     (RKT.PLAN_SEP * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_SEP,
                                     (RKT.PLAN_OCT * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_OCT,
                                     (RKT.PLAN_NOV * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_NOV,
                                     (RKT.PLAN_DEC * BIAYA.RP_QTY_INTERNAL)
                                        AS COST_DEC
                                FROM TR_RKT_COST_ELEMENT RKT
                                     LEFT JOIN TR_RKT RKT_INDUK
                                        ON RKT_INDUK.TRX_RKT_CODE =
                                              RKT.TRX_RKT_CODE
                                     LEFT JOIN TM_ACTIVITY ACT
                                        ON ACT.ACTIVITY_CODE =
                                              RKT.ACTIVITY_CODE
                                     LEFT JOIN TM_ORGANIZATION ORG
                                        ON ORG.BA_CODE = RKT.BA_CODE
                                     LEFT JOIN TM_HECTARE_STATEMENT TM_HS
                                        ON TM_HS.PERIOD_BUDGET =
                                              RKT.PERIOD_BUDGET
                                           AND TM_HS.BA_CODE = RKT.BA_CODE
                                           AND TM_HS.AFD_CODE = RKT.AFD_CODE
                                           AND TM_HS.BLOCK_CODE =
                                                 RKT.BLOCK_CODE
                                     LEFT JOIN TN_INFRASTRUKTUR BIAYA
                                        ON RKT.BA_CODE = BIAYA.BA_CODE
                                           AND RKT.PERIOD_BUDGET =
                                                 BIAYA.PERIOD_BUDGET
                                           AND RKT.ACTIVITY_CODE =
                                                 BIAYA.ACTIVITY_CODE
                                           AND RKT.COST_ELEMENT =
                                                 BIAYA.COST_ELEMENT
                                           AND BIAYA.LAND_TYPE IN
                                                    ('ALL', TM_HS.LAND_TYPE)
                                           AND BIAYA.TOPOGRAPHY IN
                                                    ('ALL', TM_HS.TOPOGRAPHY)
                                     LEFT JOIN TM_MATERIAL TM_MAT
                                        ON TM_MAT.PERIOD_BUDGET =
                                              BIAYA.PERIOD_BUDGET
                                           AND TM_MAT.BA_CODE = BIAYA.BA_CODE
                                           AND TM_MAT.MATERIAL_CODE =
                                                 BIAYA.SUB_COST_ELEMENT
                               WHERE     RKT.DELETE_USER IS NULL
                                     AND RKT_INDUK.FLAG_TEMP IS NULL
                                     AND RKT.MATURITY_STAGE_SMS2 <> 'TM'
                                     AND RKT.TIPE_TRANSAKSI = 'MANUAL_INFRA'
									 $where
                                     )
                  SELECT PERIOD_BUDGET,
						 REGION_CODE,
                         BA_CODE,
                         AFD_CODE,
                         BLOCK_CODE,
                         ACTIVITY_GROUP,
                         COST_ELEMENT,
                         ACTIVITY_CODE,
                         TIPE_TRANSAKSI,
                         ACTIVITY_DESC,
                         SUB_COST_ELEMENT,
                         MATERIAL_NAME,
                         RANK ()
                            OVER (
                               PARTITION BY PERIOD_BUDGET,
                                            BA_CODE,
                                            AFD_CODE,
                                            BLOCK_CODE,
                                            ACTIVITY_GROUP,
                                            ACTIVITY_CODE
                               ORDER BY
                                  ACTIVITY_CLASS,
                                  LAND_TYPE,
                                  TOPOGRAPHY NULLS FIRST)
                            rank_z,
                         UOM,
                         QTY_JAN,
                         QTY_FEB,
                         QTY_MAR,
                         QTY_APR,
                         QTY_MAY,
                         QTY_JUN,
                         QTY_JUL,
                         QTY_AUG,
                         QTY_SEP,
                         QTY_OCT,
                         QTY_NOV,
                         QTY_DEC,
                         COST_JAN,
                         COST_FEB,
                         COST_MAR,
                         COST_APR,
                         COST_MAY,
                         COST_JUN,
                         COST_JUL,
                         COST_AUG,
                         COST_SEP,
                         COST_OCT,
                         COST_NOV,
                         COST_DEC
                    FROM Q) ASD
           WHERE rank_z = 1) REPORT
		GROUP BY PERIOD_BUDGET,
				 REGION_CODE,
				 BA_CODE,
				 AFD_CODE,
				 BLOCK_CODE,
				 ACTIVITY_GROUP,
				 COST_ELEMENT,
				 ACTIVITY_CODE,
				 TIPE_TRANSAKSI,
				 ACTIVITY_DESC,
				 SUB_COST_ELEMENT,
				 MATERIAL_NAME,
				 UOM";
		
		$this->_db->query($query);
		$this->_db->commit();
		
		//QUERY INSERT UNTUK PUPUK (LABOUR & MATERIAL)
		$xquery = "INSERT INTO TMP_RPT_KEB_DEV_COST_BLOCK (PERIOD_BUDGET,
                                        REGION_CODE,
                                        BA_CODE,
                                        AFD_CODE,
                                        BLOCK_CODE,
                                        TIPE_TRANSAKSI,
                                        COST_ELEMENT,
                                        ACTIVITY_CODE,
                                        ACTIVITY_DESC,
                                        SUB_COST_ELEMENT,
                                        SUB_COST_ELEMENT_DESC,
                                        KETERANGAN,
                                        UOM,
                                        QTY_JAN,
                                        QTY_FEB,
                                        QTY_MAR,
                                        QTY_APR,
                                        QTY_MAY,
                                        QTY_JUN,
                                        QTY_JUL,
                                        QTY_AUG,
                                        QTY_SEP,
                                        QTY_OCT,
                                        QTY_NOV,
                                        QTY_DEC,
                                        COST_JAN,
                                        COST_FEB,
                                        COST_MAR,
                                        COST_APR,
                                        COST_MAY,
                                        COST_JUN,
                                        COST_JUL,
                                        COST_AUG,
                                        COST_SEP,
                                        COST_OCT,
                                        COST_NOV,
                                        COST_DEC,
                                        QTY_SETAHUN,
                                        COST_SETAHUN,
                                        INSERT_USER,
                                        INSERT_TIME)
     SELECT PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            BLOCK_CODE,
            TIPE_TRANSAKSI,
            COST_ELEMENT,
            ACTIVITY_CODE,
            ACTIVITY_DESC,
            SUB_COST_ELEMENT,
            MATERIAL_NAME,
            '' KETERANGAN,
            UOM,
            SUM (NVL (QTY_JAN, 0)) AS QTY_JAN,
            SUM (NVL (QTY_FEB, 0)) AS QTY_FEB,
            SUM (NVL (QTY_MAR, 0)) AS QTY_MAR,
            SUM (NVL (QTY_APR, 0)) AS QTY_APR,
            SUM (NVL (QTY_MAY, 0)) AS QTY_MAY,
            SUM (NVL (QTY_JUN, 0)) AS QTY_JUN,
            SUM (NVL (QTY_JUL, 0)) AS QTY_JUL,
            SUM (NVL (QTY_AUG, 0)) AS QTY_AUG,
            SUM (NVL (QTY_SEP, 0)) AS QTY_SEP,
            SUM (NVL (QTY_OCT, 0)) AS QTY_OCT,
            SUM (NVL (QTY_NOV, 0)) AS QTY_NOV,
            SUM (NVL (QTY_DEC, 0)) AS QTY_DEC,
            SUM (NVL (COST_JAN, 0)) AS COST_JAN,
            SUM (NVL (COST_FEB, 0)) AS COST_FEB,
            SUM (NVL (COST_MAR, 0)) AS COST_MAR,
            SUM (NVL (COST_APR, 0)) AS COST_APR,
            SUM (NVL (COST_MAY, 0)) AS COST_MAY,
            SUM (NVL (COST_JUN, 0)) AS COST_JUN,
            SUM (NVL (COST_JUL, 0)) AS COST_JUL,
            SUM (NVL (COST_AUG, 0)) AS COST_AUG,
            SUM (NVL (COST_SEP, 0)) AS COST_SEP,
            SUM (NVL (COST_OCT, 0)) AS COST_OCT,
            SUM (NVL (COST_NOV, 0)) AS COST_NOV,
            SUM (NVL (COST_DEC, 0)) AS COST_DEC,
            (  SUM (NVL (QTY_JAN, 0))
             + SUM (NVL (QTY_FEB, 0))
             + SUM (NVL (QTY_MAR, 0))
             + SUM (NVL (QTY_APR, 0))
             + SUM (NVL (QTY_MAY, 0))
             + SUM (NVL (QTY_JUN, 0))
             + SUM (NVL (QTY_JUL, 0))
             + SUM (NVL (QTY_AUG, 0))
             + SUM (NVL (QTY_SEP, 0))
             + SUM (NVL (QTY_OCT, 0))
             + SUM (NVL (QTY_NOV, 0))
             + SUM (NVL (QTY_DEC, 0)))
               AS QTY_SETAHUN,
            (  SUM (NVL (COST_JAN, 0))
             + SUM (NVL (COST_FEB, 0))
             + SUM (NVL (COST_MAR, 0))
             + SUM (NVL (COST_APR, 0))
             + SUM (NVL (COST_MAY, 0))
             + SUM (NVL (COST_JUN, 0))
             + SUM (NVL (COST_JUL, 0))
             + SUM (NVL (COST_AUG, 0))
             + SUM (NVL (COST_SEP, 0))
             + SUM (NVL (COST_OCT, 0))
             + SUM (NVL (COST_NOV, 0))
             + SUM (NVL (COST_DEC, 0)))
               AS COST_SETAHUN,
            '".$this->_userName."' AS INSERT_USER,
            SYSDATE AS INSERT_TIME
       FROM (-- INI UNTUK PERHITUNGAN PEMUPUKAN (MAJEMUK TUNGGAL)
             SELECT PERIOD_BUDGET,
                    REGION_CODE,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    ACTIVITY_GROUP AS TIPE_TRANSAKSI,
                    COST_ELEMENT,
                    ACTIVITY_CODE,
                    ACTIVITY_DESC,
                    SUB_COST_ELEMENT,
                    MATERIAL_NAME,
                    '' RANK_Z,
                    UOM,
                    JAN_QTY AS QTY_JAN,
                    FEB_QTY AS QTY_FEB,
                    MAR_QTY AS QTY_MAR,
                    APR_QTY AS QTY_APR,
                    MAY_QTY AS QTY_MAY,
                    JUN_QTY AS QTY_JUN,
                    JUL_QTY AS QTY_JUL,
                    AUG_QTY AS QTY_AUG,
                    SEP_QTY AS QTY_SEP,
                    OCT_QTY AS QTY_OCT,
                    NOV_QTY AS QTY_NOV,
                    DEC_QTY AS QTY_DEC,
                    JAN_COST AS COST_JAN,
                    FEB_COST AS COST_FEB,
                    MAR_COST AS COST_MAR,
                    APR_COST AS COST_APR,
                    MAY_COST AS COST_MAY,
                    JUN_COST AS COST_JUN,
                    JUL_COST AS COST_JUL,
                    AUG_COST AS COST_AUG,
                    SEP_COST AS COST_SEP,
                    OCT_COST AS COST_OCT,
                    NOV_COST AS COST_NOV,
                    DEC_COST AS COST_DEC
               FROM (SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  MAJEMUK
                       FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS1
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS1,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
                                                        'PUPUK MAJEMUK'
                                                           DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS1 IN
                                                                         ('TBM0',
                                                                          'TBM1',
                                                                          'TBM2',
                                                                          'TBM3')
                                                                $where
															)
                                                        HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020400' -- UNTUK PUPUK  MAJEMUK
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('1' JAN,
                                               '2' FEB,
                                               '3' MAR,
                                               '4' APR,
                                               '5' MAY,
                                               '6' JUN,
                                               '91' JUL,
                                               '92' AUG,
                                               '93' SEP,
                                               '94' OCT,
                                               '95' NOV,
                                               '96' DEC)))
                     UNION ALL
                     SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  MAJEMUK
                       FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS2
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS2,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
                                                        'PUPUK MAJEMUK'
                                                           DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS2 IN
                                                                         ('TBM0',
                                                                          'TBM1',
                                                                          'TBM2',
                                                                          'TBM3')
                                                                $where
															)
                                                        HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020400' -- UNTUK PUPUK  MAJEMUK
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('91' JAN,
                                               '92' FEB,
                                               '93' MAR,
                                               '94' APR,
                                               '95' MAY,
                                               '96' JUN,
                                               '7' JUL,
                                               '8' AUG,
                                               '9' SEP,
                                               '10' OCT,
                                               '11' NOV,
                                               '12' DEC)))
                     UNION ALL
                     SELECT *        -- UNTUK PERHITUNGAN SMS 1 PUPUK  TUNGGAL
                       FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS1
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS1,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
                                                        'PUPUK TUNGGAL'
                                                           DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS1 IN
                                                                         ('TBM0',
                                                                          'TBM1',
                                                                          'TBM2',
                                                                          'TBM3')
                                                                $where
															)
                                                        HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020300' -- UNTUK PUPUK  TUNGGAL
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('1' JAN,
                                               '2' FEB,
                                               '3' MAR,
                                               '4' APR,
                                               '5' MAY,
                                               '6' JUN,
                                               '97' JUL,
                                               '98' AUG,
                                               '99' SEP,
                                               '90' OCT,
                                               '91' NOV,
                                               '92' DEC)))
                     UNION ALL
                     SELECT *        -- UNTUK PERHITUNGAN SMS 2 PUPUK  TUNGGAL
                       FROM (WITH PIVOT_BLOK
                                     AS (SELECT PERIOD_BUDGET,
                                                REGION_CODE,
                                                BA_CODE,
                                                AFD_CODE,
                                                BLOCK_CODE,
                                                MATURITY_STAGE_SMS2
                                                   AS ACTIVITY_GROUP,
                                                'LABOUR' AS COST_ELEMENT,
                                                COA_CODE AS ACTIVITY_CODE,
                                                DESCRIPTION AS ACTIVITY_DESC,
                                                '' SUB_COST_ELEMENT,
                                                '' MATERIAL_NAME,
                                                UOM,
                                                QTY_BLN,
                                                COST_BLN,
                                                BULAN_PEMUPUKAN AS BLN
                                           FROM (SELECT HS.PERIOD_BUDGET,
                                                        HS.REGION_CODE,
                                                        HS.BA_CODE,
                                                        HS.AFD_CODE,
                                                        HS.BLOCK_CODE,
                                                        HS.HA_PLANTED,
                                                        HS.MATURITY_STAGE_SMS2,
                                                        MATERIAL.FLAG,
                                                        MATERIAL.UOM,
                                                        MATERIAL.COA_CODE,
                                                        'PUPUK TUNGGAL'
                                                           DESCRIPTION,
                                                        HS.TAHUN_TANAM,
                                                        BULAN_PEMUPUKAN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.QTY_HA)
                                                           AS QTY_BLN,
                                                        (HS.HA_PLANTED
                                                         * INFRA.HARGA_INTERNAL)
                                                           AS COST_BLN
                                                   FROM (SELECT RKT.*,
                                                                ORG.REGION_CODE
                                                           FROM    TM_HECTARE_STATEMENT RKT
                                                                LEFT JOIN
                                                                   TM_ORGANIZATION ORG
                                                                ON ORG.BA_CODE =
                                                                      RKT.BA_CODE
                                                          WHERE RKT.DELETE_USER IS NULL
                                                                AND RKT.FLAG_TEMP IS NULL
                                                                AND RKT.MATURITY_STAGE_SMS2 IN
                                                                         ('TBM0',
                                                                          'TBM1',
                                                                          'TBM2',
                                                                          'TBM3')
                                                                $where
															)
                                                        HS
                                                        LEFT JOIN TN_PUPUK_TBM2_TM NORMA_PUPUK
                                                           ON HS.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND HS.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND HS.AFD_CODE =
                                                                    NORMA_PUPUK.AFD_CODE
                                                              AND HS.BLOCK_CODE =
                                                                    NORMA_PUPUK.BLOCK_CODE
                                                              AND NORMA_PUPUK.DELETE_USER IS NULL
                                                        LEFT JOIN TM_MATERIAL MATERIAL
                                                           ON NORMA_PUPUK.PERIOD_BUDGET =
                                                                 MATERIAL.PERIOD_BUDGET
                                                              AND NORMA_PUPUK.BA_CODE =
                                                                    MATERIAL.BA_CODE
                                                              AND NORMA_PUPUK.MATERIAL_CODE =
                                                                    MATERIAL.MATERIAL_CODE
                                                              AND MATERIAL.DELETE_USER IS NULL
                                                        LEFT JOIN TN_INFRASTRUKTUR INFRA
                                                           ON INFRA.PERIOD_BUDGET =
                                                                 NORMA_PUPUK.PERIOD_BUDGET
                                                              AND INFRA.BA_CODE =
                                                                    NORMA_PUPUK.BA_CODE
                                                              AND INFRA.ACTIVITY_CODE =
                                                                    CASE MATERIAL.FLAG
                                                                       WHEN 'MAKRO'
                                                                       THEN
                                                                          43751
                                                                       ELSE
                                                                          43750
                                                                    END
                                                  WHERE MATERIAL.COA_CODE =
                                                           '5101020300' -- UNTUK PUPUK  TUNGGAL
                                                                       ))
                             SELECT *
                               FROM PIVOT_BLOK PIVOT (SUM (NVL (QTY_BLN, 0)) AS QTY,
                                                     SUM (NVL (COST_BLN, 0)) AS COST
                                               FOR BLN
                                               IN ('91' JAN,
                                               '92' FEB,
                                               '93' MAR,
                                               '94' APR,
                                               '95' MAY,
                                               '96' JUN,
                                               '7' JUL,
                                               '8' AUG,
                                               '9' SEP,
                                               '10' OCT,
                                               '11' NOV,
                                               '12' DEC))))) REPORT
   GROUP BY PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            BLOCK_CODE,
            TIPE_TRANSAKSI,
            COST_ELEMENT,
            ACTIVITY_CODE,
            ACTIVITY_DESC,
            SUB_COST_ELEMENT,
            MATERIAL_NAME,
            UOM
   UNION ALL
   SELECT RKT.PERIOD_BUDGET,
          ORG.REGION_CODE,
          RKT.BA_CODE,
          RKT.AFD_CODE,
          RKT.BLOCK_CODE,
          RKT.MATURITY_STAGE TIPE_TRANSAKSI,
          'MATERIAL' AS COST_ELEMENT,
          RKT.COA_CODE AS ACTIVITY_CODE,
          'PUPUK MAJEMUK' AS ACTIVITY_DESC,
          RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
          RKT.MATERIAL_NAME,
          '' KETERANGAN,
          'KG' UOM,
          RKT.QTY_MAJEMUK_JAN AS QTY_JAN,
          RKT.QTY_MAJEMUK_FEB AS QTY_FEB,
          RKT.QTY_MAJEMUK_MAR AS QTY_MAR,
          RKT.QTY_MAJEMUK_APR AS QTY_APR,
          RKT.QTY_MAJEMUK_MAY AS QTY_MAY,
          RKT.QTY_MAJEMUK_JUN AS QTY_JUN,
          RKT.QTY_MAJEMUK_JUL AS QTY_JUL,
          RKT.QTY_MAJEMUK_AUG AS QTY_AUG,
          RKT.QTY_MAJEMUK_SEP AS QTY_SEP,
          RKT.QTY_MAJEMUK_OCT AS QTY_OCT,
          RKT.QTY_MAJEMUK_NOV AS QTY_NOV,
          RKT.QTY_MAJEMUK_DEC AS QTY_DEC,
          (  RKT.QTY_MAJEMUK_JAN
           + RKT.QTY_MAJEMUK_FEB
           + RKT.QTY_MAJEMUK_MAR
           + RKT.QTY_MAJEMUK_APR
           + RKT.QTY_MAJEMUK_MAY
           + RKT.QTY_MAJEMUK_JUN
           + RKT.QTY_MAJEMUK_JUL
           + RKT.QTY_MAJEMUK_AUG
           + RKT.QTY_MAJEMUK_SEP
           + RKT.QTY_MAJEMUK_OCT
           + RKT.QTY_MAJEMUK_NOV
           + RKT.QTY_MAJEMUK_DEC)
             AS QTY_SETAHUN,
          (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE) AS COST_JAN,
          (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE) AS COST_FEB,
          (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE) AS COST_MAR,
          (RKT.QTY_MAJEMUK_APR * HARGA.PRICE) AS COST_APR,
          (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE) AS COST_MAY,
          (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE) AS COST_JUN,
          (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE) AS COST_JUL,
          (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE) AS COST_AUG,
          (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE) AS COST_SEP,
          (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE) AS COST_OCT,
          (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE) AS COST_NOV,
          (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE) AS COST_DEC,
          (  (RKT.QTY_MAJEMUK_JAN * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_FEB * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_MAR * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_APR * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_MAY * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_JUN * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_JUL * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_AUG * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_SEP * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_OCT * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_NOV * HARGA.PRICE)
           + (RKT.QTY_MAJEMUK_DEC * HARGA.PRICE))
             AS COST_SETAHUN,
          '".$this->_userName."' AS INSERT_USER,
          SYSDATE AS INSERT_TIME
     FROM (  SELECT PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE MATERIAL_CODE,
                    ACTIVITY_NAME MATERIAL_NAME,
                    SUM (QTY_MAJEMUK_JAN) QTY_MAJEMUK_JAN,
                    SUM (QTY_MAJEMUK_FEB) QTY_MAJEMUK_FEB,
                    SUM (QTY_MAJEMUK_MAR) QTY_MAJEMUK_MAR,
                    SUM (QTY_MAJEMUK_APR) QTY_MAJEMUK_APR,
                    SUM (QTY_MAJEMUK_MAY) QTY_MAJEMUK_MAY,
                    SUM (QTY_MAJEMUK_JUN) QTY_MAJEMUK_JUN,
                    SUM (QTY_MAJEMUK_JUL) QTY_MAJEMUK_JUL,
                    SUM (QTY_MAJEMUK_AUG) QTY_MAJEMUK_AUG,
                    SUM (QTY_MAJEMUK_SEP) QTY_MAJEMUK_SEP,
                    SUM (QTY_MAJEMUK_OCT) QTY_MAJEMUK_OCT,
                    SUM (QTY_MAJEMUK_NOV) QTY_MAJEMUK_NOV,
                    SUM (QTY_MAJEMUK_DEC) QTY_MAJEMUK_DEC
               FROM (SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            RKT.DIS_JAN QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_JAN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            RKT.DIS_FEB QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_FEB
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            RKT.DIS_MAR QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_MAR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            RKT.DIS_APR QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_APR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            RKT.DIS_MAY QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_MAY
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            RKT.DIS_JUN QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_JUN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            RKT.DIS_JUL QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_JUL
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            RKT.DIS_AUG QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_AUG
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            RKT.DIS_SEP QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_SEP
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            RKT.DIS_OCT QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_OCT
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            RKT.DIS_NOV QTY_MAJEMUK_NOV,
                            0 QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_NOV
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_MAJEMUK_JAN,
                            0 QTY_MAJEMUK_FEB,
                            0 QTY_MAJEMUK_MAR,
                            0 QTY_MAJEMUK_APR,
                            0 QTY_MAJEMUK_MAY,
                            0 QTY_MAJEMUK_JUN,
                            0 QTY_MAJEMUK_JUL,
                            0 QTY_MAJEMUK_AUG,
                            0 QTY_MAJEMUK_SEP,
                            0 QTY_MAJEMUK_OCT,
                            0 QTY_MAJEMUK_NOV,
                            RKT.DIS_DEC QTY_MAJEMUK_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE =
                                     RKT.MATERIAL_CODE_DEC
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020400')
           GROUP BY PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE,
                    ACTIVITY_NAME
           ORDER BY PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE) RKT
          LEFT JOIN TN_HARGA_BARANG HARGA
             ON     HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                AND HARGA.BA_CODE = RKT.BA_CODE
                AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
                AND HARGA.DELETE_USER IS NULL
                AND HARGA.FLAG_TEMP IS NULL
          LEFT JOIN TM_ORGANIZATION ORG
             ON ORG.BA_CODE = RKT.BA_CODE
    WHERE     1 = 1
          AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
          $where
	UNION ALL
	SELECT     RKT.PERIOD_BUDGET,
                        ORG.REGION_CODE,
                        RKT.BA_CODE,
                        RKT.AFD_CODE,
                        RKT.BLOCK_CODE,
                        RKT.MATURITY_STAGE TIPE_TRANSAKSI,
                        'MATERIAL' AS COST_ELEMENT,
                        RKT.COA_CODE AS ACTIVITY_CODE,
                        'PUPUK TUNGGAL' AS ACTIVITY_DESC,
                        RKT.MATERIAL_CODE AS SUB_COST_ELEMENT,
                        RKT.MATERIAL_NAME,
                        '' KETERANGAN,
                        'KG' UOM,
                        RKT.QTY_TUNGGAL_JAN AS QTY_JAN,
                        RKT.QTY_TUNGGAL_FEB AS QTY_FEB,
                        RKT.QTY_TUNGGAL_MAR AS QTY_MAR,
                        RKT.QTY_TUNGGAL_APR AS QTY_APR,
                        RKT.QTY_TUNGGAL_MAY AS QTY_MAY,
                        RKT.QTY_TUNGGAL_JUN AS QTY_JUN,
                        RKT.QTY_TUNGGAL_JUL AS QTY_JUL,
                        RKT.QTY_TUNGGAL_AUG AS QTY_AUG,
                        RKT.QTY_TUNGGAL_SEP AS  QTY_SEP,
                        RKT.QTY_TUNGGAL_OCT AS QTY_OCT,
                        RKT.QTY_TUNGGAL_NOV AS QTY_NOV,
                        RKT.QTY_TUNGGAL_DEC AS QTY_DEC,
                        (RKT.QTY_TUNGGAL_JAN +
                        RKT.QTY_TUNGGAL_FEB +
                        RKT.QTY_TUNGGAL_MAR +
                        RKT.QTY_TUNGGAL_APR +
                        RKT.QTY_TUNGGAL_MAY +
                        RKT.QTY_TUNGGAL_JUN +
                        RKT.QTY_TUNGGAL_JUL +
                        RKT.QTY_TUNGGAL_AUG +
                        RKT.QTY_TUNGGAL_SEP +
                        RKT.QTY_TUNGGAL_OCT +
                        RKT.QTY_TUNGGAL_NOV +
                        RKT.QTY_TUNGGAL_DEC)
                        AS QTY_SETAHUN,
                        (RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) AS COST_JAN,
                        (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) AS COST_FEB,
                        (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) AS COST_MAR,
                        (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) AS COST_APR,
                        (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) AS COST_MAY,
                        (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) AS COST_JUN,
                        (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) AS COST_JUL,
                        (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) AS COST_AUG,
                        (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) AS COST_SEP,
                        (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) AS COST_OCT,
                        (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) AS COST_NOV,
                        (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE) AS COST_DEC,
                        ((RKT.QTY_TUNGGAL_JAN * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_FEB * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_MAR * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_APR * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_MAY * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_JUN * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_JUL * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_AUG * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_SEP * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_OCT * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_NOV * HARGA.PRICE) +
                        (RKT.QTY_TUNGGAL_DEC * HARGA.PRICE)) 
                        AS COST_SETAHUN,
                        '".$this->_userName."' AS INSERT_USER,
                        SYSDATE AS INSERT_TIME
          FROM (
        SELECT PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE MATERIAL_CODE,
                    ACTIVITY_NAME MATERIAL_NAME,
                    SUM (QTY_TUNGGAL_JAN) QTY_TUNGGAL_JAN,
                    SUM (QTY_TUNGGAL_FEB) QTY_TUNGGAL_FEB,
                    SUM (QTY_TUNGGAL_MAR) QTY_TUNGGAL_MAR,
                    SUM (QTY_TUNGGAL_APR) QTY_TUNGGAL_APR,
                    SUM (QTY_TUNGGAL_MAY) QTY_TUNGGAL_MAY,
                    SUM (QTY_TUNGGAL_JUN) QTY_TUNGGAL_JUN,
                    SUM (QTY_TUNGGAL_JUL) QTY_TUNGGAL_JUL,
                    SUM (QTY_TUNGGAL_AUG) QTY_TUNGGAL_AUG,
                    SUM (QTY_TUNGGAL_SEP) QTY_TUNGGAL_SEP,
                    SUM (QTY_TUNGGAL_OCT) QTY_TUNGGAL_OCT,
                    SUM (QTY_TUNGGAL_NOV) QTY_TUNGGAL_NOV,
                    SUM (QTY_TUNGGAL_DEC) QTY_TUNGGAL_DEC
               FROM (
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            RKT.DIS_JAN QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JAN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            RKT.DIS_FEB QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_FEB
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300' 
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            RKT.DIS_MAR QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            RKT.DIS_APR QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_APR
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            RKT.DIS_MAY QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_MAY
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '1' SEMESTER,
                            RKT.MATURITY_STAGE_SMS1 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            RKT.DIS_JUN QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUN
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            RKT.DIS_JUL QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_JUL
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            RKT.DIS_AUG QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_AUG
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            RKT.DIS_SEP QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_SEP
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            RKT.DIS_OCT QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_OCT
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            RKT.DIS_NOV QTY_TUNGGAL_NOV,
                            0 QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_NOV
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                     UNION ALL
                     SELECT RKT.PERIOD_BUDGET,
                            RKT.BA_CODE,
                            RKT.AFD_CODE,
                            RKT.BLOCK_CODE,
                            '2' SEMESTER,
                            RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                            MATERIAL.COA_CODE COA_CODE,
                            MATERIAL.MATERIAL_CODE ACTIVITY_CODE,
                            MATERIAL.MATERIAL_NAME ACTIVITY_NAME,
                            0 QTY_TUNGGAL_JAN,
                            0 QTY_TUNGGAL_FEB,
                            0 QTY_TUNGGAL_MAR,
                            0 QTY_TUNGGAL_APR,
                            0 QTY_TUNGGAL_MAY,
                            0 QTY_TUNGGAL_JUN,
                            0 QTY_TUNGGAL_JUL,
                            0 QTY_TUNGGAL_AUG,
                            0 QTY_TUNGGAL_SEP,
                            0 QTY_TUNGGAL_OCT,
                            0 QTY_TUNGGAL_NOV,
                            RKT.DIS_DEC QTY_TUNGGAL_DEC
                       FROM    TR_RKT_PUPUK_DISTRIBUSI RKT
                            LEFT JOIN
                               TM_MATERIAL MATERIAL
                            ON     MATERIAL.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                               AND MATERIAL.BA_CODE = RKT.BA_CODE
                               AND MATERIAL.MATERIAL_CODE = RKT.MATERIAL_CODE_DEC
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.TIPE_TRANSAKSI LIKE '%KG%'
                            AND MATERIAL.COA_CODE = '5101020300'
                            )
           GROUP BY PERIOD_BUDGET,
                    BA_CODE,
                    BLOCK_CODE,
                    AFD_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE,
                    ACTIVITY_NAME
           ORDER BY PERIOD_BUDGET,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    SEMESTER,
                    MATURITY_STAGE,
                    COA_CODE,
                    ACTIVITY_CODE
        )RKT
                LEFT JOIN TN_HARGA_BARANG HARGA
                    ON HARGA.PERIOD_BUDGET = RKT.PERIOD_BUDGET
                    AND HARGA.BA_CODE = RKT.BA_CODE
                    AND HARGA.MATERIAL_CODE = RKT.MATERIAL_CODE
                    AND HARGA.DELETE_USER IS NULL
                    AND HARGA.FLAG_TEMP IS NULL
                LEFT JOIN TM_ORGANIZATION ORG
                    ON ORG.BA_CODE = RKT.BA_CODE
                WHERE 1 = 1
                    AND RKT.MATURITY_STAGE IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                    $where 
				UNION ALL	
				SELECT PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE, TIPE_TRANSAKSI, COST_ELEMENT, ACTIVITY_CODE, ACTIVITY_DESC, SUB_COST_ELEMENT,
      MATERIAL_NAME, KETERANGAN, UOM, QTY_JAN, QTY_FEB, QTY_MAR, QTY_APR, QTY_MAY, QTY_JUN, QTY_JUL, QTY_AUG, QTY_SEP, QTY_OCT, QTY_NOV, QTY_DEC, ( QTY_JAN
      + QTY_FEB + QTY_MAR + QTY_APR + QTY_MAY + QTY_JUN + QTY_JUL + QTY_AUG + QTY_SEP + QTY_OCT + QTY_NOV + QTY_DEC) AS QTY_SETAHUN, COST_JAN, COST_FEB,
      COST_MAR, COST_APR, COST_MAY, COST_JUN, COST_JUL, COST_AUG, COST_SEP, COST_OCT, COST_NOV, COST_DEC, ( COST_JAN + COST_FEB + COST_MAR + COST_APR +
      COST_MAY + COST_JUN + COST_JUL + COST_AUG + COST_SEP + COST_OCT + COST_NOV + COST_DEC) AS COST_SETAHUN, '".$this->_userName."' AS INSERT_USER, SYSDATE
      AS INSERT_TIME
      FROM (
      SELECT COST.PERIOD_BUDGET, COST.REGION_CODE, COST.BA_CODE, COST.AFD_CODE, COST.BLOCK_CODE, KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI, COST.
      COST_ELEMENT, '5101020300' AS ACTIVITY_CODE, 'PUPUK TUNGGAL' AS ACTIVITY_DESC, '' AS SUB_COST_ELEMENT, '' AS MATERIAL_NAME, '' AS KETERANGAN, 'KG' UOM
      , 0 QTY_JAN, 0 QTY_FEB, 0 QTY_MAR, 0 QTY_APR, 0 QTY_MAY, 0 QTY_JUN, 0 QTY_JUL, 0 QTY_AUG, 0 QTY_SEP, 0 QTY_OCT, 0 QTY_NOV, 0 QTY_DEC,
      CASE WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_JAN / KG_PUPUK.QTY_TOTAL_JAN * COST.DIS_COST_JAN)
      ELSE 0
      END AS COST_JAN,
      CASE WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_FEB / KG_PUPUK.QTY_TOTAL_FEB * COST.DIS_COST_FEB)
      ELSE 0
      END AS COST_FEB,
      CASE WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_MAR / KG_PUPUK.QTY_TOTAL_MAR * COST.DIS_COST_MAR)
      ELSE 0
      END AS COST_MAR,
      CASE WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_APR / KG_PUPUK.QTY_TOTAL_APR * COST.DIS_COST_APR)
      ELSE 0
      END AS COST_APR,
      CASE WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_MAY / KG_PUPUK.QTY_TOTAL_MAY * COST.DIS_COST_MAY)
      ELSE 0
      END AS COST_MAY,
      CASE WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_JUN / KG_PUPUK.QTY_TOTAL_JUN * COST.DIS_COST_JUN)
      ELSE 0
      END AS COST_JUN,
      CASE WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_JUL / KG_PUPUK.QTY_TOTAL_JUL * COST.DIS_COST_JUL)
      ELSE 0
      END AS COST_JUL,
      CASE WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_AUG / KG_PUPUK.QTY_TOTAL_AUG * COST.DIS_COST_AUG)
      ELSE 0
      END AS COST_AUG,
      CASE WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_SEP / KG_PUPUK.QTY_TOTAL_SEP * COST.DIS_COST_SEP)
      ELSE 0
      END AS COST_SEP,
      CASE WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_OCT / KG_PUPUK.QTY_TOTAL_OCT * COST.DIS_COST_OCT)
      ELSE 0
      END AS COST_OCT,
      CASE WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_NOV / KG_PUPUK.QTY_TOTAL_NOV * COST.DIS_COST_NOV)
      ELSE 0
      END AS COST_NOV,
      CASE WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
      THEN ( KG_PUPUK.QTY_TUNGGAL_DEC / KG_PUPUK.QTY_TOTAL_DEC * COST.DIS_COST_DEC)
      ELSE 0
      END AS COST_DEC
      FROM (
      SELECT PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE, COST_ELEMENT, MATURITY_STAGE, SUM (DIS_COST_JAN) DIS_COST_JAN, SUM (DIS_COST_FEB)
      DIS_COST_FEB, SUM (DIS_COST_MAR) DIS_COST_MAR, SUM (DIS_COST_APR) DIS_COST_APR, SUM (DIS_COST_MAY) DIS_COST_MAY, SUM (DIS_COST_JUN) DIS_COST_JUN, SUM
      (DIS_COST_JUL) DIS_COST_JUL, SUM (DIS_COST_AUG) DIS_COST_AUG, SUM (DIS_COST_SEP) DIS_COST_SEP, SUM (DIS_COST_OCT) DIS_COST_OCT, SUM (DIS_COST_NOV)
      DIS_COST_NOV, SUM (DIS_COST_DEC) DIS_COST_DEC, MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK, MAX (COST_TOOLS_KG) COST_TOOLS_KG, MAX (COST_TRANSPORT_KG)
      COST_TRANSPORT_KG
      FROM (
      SELECT RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE, SUM
      (RKT.DIS_COST_JAN) AS DIS_COST_JAN, SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB, SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR, SUM (RKT.DIS_COST_APR) AS
      DIS_COST_APR, SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY, SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN, 0 DIS_COST_JUL, 0 DIS_COST_AUG, 0 DIS_COST_SEP, 0
      DIS_COST_OCT, 0 DIS_COST_NOV, 0 DIS_COST_DEC, MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK, MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG, MAX (RKT.
      COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
      FROM TR_RKT_PUPUK_COST_ELEMENT RKT LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
      WHERE RKT.DELETE_USER IS NULL
      AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
      AND RKT.COST_ELEMENT <> 'MATERIAL'
      $where
	  GROUP BY RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.
      MATURITY_STAGE_SMS1 UNION ALL
      SELECT RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE, 0
      DIS_COST_JAN, 0 DIS_COST_FEB, 0 DIS_COST_MAR, 0 DIS_COST_APR, 0 DIS_COST_MAY, 0 DIS_COST_JUN, SUM (RKT.DIS_COST_JUL) DIS_COST_JUL, SUM (RKT.
      DIS_COST_AUG) DIS_COST_AUG, SUM (RKT.DIS_COST_SEP) DIS_COST_SEP, SUM (RKT.DIS_COST_OCT) DIS_COST_OCT, SUM (RKT.DIS_COST_NOV) DIS_COST_NOV, SUM (RKT.
      DIS_COST_DEC) DIS_COST_DEC, MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK, MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG, MAX (RKT.COST_TRANSPORT_KG) AS
      COST_TRANSPORT_KG
      FROM TR_RKT_PUPUK_COST_ELEMENT RKT LEFT JOIN TM_ORGANIZATION ORG ON ORG.BA_CODE = RKT.BA_CODE
      WHERE RKT.DELETE_USER IS NULL
      AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
      AND RKT.COST_ELEMENT <> 'MATERIAL'
      $where
	  GROUP BY RKT.PERIOD_BUDGET, ORG.REGION_CODE, RKT.BA_CODE, RKT.AFD_CODE, RKT.BLOCK_CODE, RKT.COST_ELEMENT, RKT.
      MATURITY_STAGE_SMS2) GROUP BY PERIOD_BUDGET, REGION_CODE, BA_CODE, AFD_CODE, BLOCK_CODE, COST_ELEMENT, MATURITY_STAGE) COST LEFT JOIN V_KG_PUPUK_AFD
      KG_PUPUK ON COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
      AND COST.BA_CODE = KG_PUPUK.BA_CODE
      AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
      AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE UNION ALL
      -- RKT PUPUK MAJEMUK SELAIN COST ELEMENT MATERIAL
      /* Formatted on 03-Jul-15 6:31:32 PM (QP5 v5.136.908.31019) */
SELECT COST.PERIOD_BUDGET,
       COST.REGION_CODE,
       COST.BA_CODE,
       COST.AFD_CODE,
       COST.BLOCK_CODE,
       KG_PUPUK.MATURITY_STAGE AS TIPE_TRANSAKSI,
       COST.COST_ELEMENT,
       '5101020400' AS ACTIVITY_CODE,
       'PUPUK MAJEMUK' AS ACTIVITY_NAME,
       '' AS SUB_COST_ELEMENT,
       '' AS MATERIAL_NAME,
       '' AS KETERANGAN,
       'KG' UOM,
       0 QTY_JAN,
       0 QTY_FEB,
       0 QTY_MAR,
       0 QTY_APR,
       0 QTY_MAY,
       0 QTY_JUN,
       0 QTY_JUL,
       0 QTY_AUG,
       0 QTY_SEP,
       0 QTY_OCT,
       0 QTY_NOV,
       0 QTY_DEC,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_JAN <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_JAN
              / KG_PUPUK.QTY_TOTAL_JAN
              * COST.DIS_COST_JAN)
          ELSE
             0
       END
          AS COST_JAN,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_FEB <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_FEB
              / KG_PUPUK.QTY_TOTAL_FEB
              * COST.DIS_COST_FEB)
          ELSE
             0
       END
          AS COST_FEB,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_MAR <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_MAR
              / KG_PUPUK.QTY_TOTAL_MAR
              * COST.DIS_COST_MAR)
          ELSE
             0
       END
          AS COST_MAR,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_APR <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_APR
              / KG_PUPUK.QTY_TOTAL_APR
              * COST.DIS_COST_APR)
          ELSE
             0
       END
          AS COST_APR,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_MAY <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_MAY
              / KG_PUPUK.QTY_TOTAL_MAY
              * COST.DIS_COST_MAY)
          ELSE
             0
       END
          AS COST_MAY,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_JUN <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_JUN
              / KG_PUPUK.QTY_TOTAL_JUN
              * COST.DIS_COST_JUN)
          ELSE
             0
       END
          AS COST_JUN,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_JUL <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_JUL
              / KG_PUPUK.QTY_TOTAL_JUL
              * COST.DIS_COST_JUL)
          ELSE
             0
       END
          AS COST_JUL,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_AUG <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_AUG
              / KG_PUPUK.QTY_TOTAL_AUG
              * COST.DIS_COST_AUG)
          ELSE
             0
       END
          AS COST_AUG,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_SEP <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_SEP
              / KG_PUPUK.QTY_TOTAL_SEP
              * COST.DIS_COST_SEP)
          ELSE
             0
       END
          AS COST_SEP,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_OCT <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_OCT
              / KG_PUPUK.QTY_TOTAL_OCT
              * COST.DIS_COST_OCT)
          ELSE
             0
       END
          AS COST_OCT,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_NOV <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_NOV
              / KG_PUPUK.QTY_TOTAL_NOV
              * COST.DIS_COST_NOV)
          ELSE
             0
       END
          AS COST_NOV,
       CASE
          WHEN KG_PUPUK.QTY_TOTAL_DEC <> 0
          THEN
             (  KG_PUPUK.QTY_MAJEMUK_DEC
              / KG_PUPUK.QTY_TOTAL_DEC
              * COST.DIS_COST_DEC)
          ELSE
             0
       END
          AS COST_DEC
  FROM    (  SELECT PERIOD_BUDGET,
                    REGION_CODE,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    COST_ELEMENT,
                    MATURITY_STAGE,
                    SUM (DIS_COST_JAN) DIS_COST_JAN,
                    SUM (DIS_COST_FEB) DIS_COST_FEB,
                    SUM (DIS_COST_MAR) DIS_COST_MAR,
                    SUM (DIS_COST_APR) DIS_COST_APR,
                    SUM (DIS_COST_MAY) DIS_COST_MAY,
                    SUM (DIS_COST_JUN) DIS_COST_JUN,
                    SUM (DIS_COST_JUL) DIS_COST_JUL,
                    SUM (DIS_COST_AUG) DIS_COST_AUG,
                    SUM (DIS_COST_SEP) DIS_COST_SEP,
                    SUM (DIS_COST_OCT) DIS_COST_OCT,
                    SUM (DIS_COST_NOV) DIS_COST_NOV,
                    SUM (DIS_COST_DEC) DIS_COST_DEC,
                    MAX (COST_LABOUR_POKOK) COST_LABOUR_POKOK,
                    MAX (COST_TOOLS_KG) COST_TOOLS_KG,
                    MAX (COST_TRANSPORT_KG) COST_TRANSPORT_KG
               FROM (  SELECT RKT.PERIOD_BUDGET,
                              ORG.REGION_CODE,
                              RKT.BA_CODE,
                              RKT.AFD_CODE,
                              RKT.BLOCK_CODE,
                              RKT.COST_ELEMENT,
                              RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                              SUM (RKT.DIS_COST_JAN) AS DIS_COST_JAN,
                              SUM (RKT.DIS_COST_FEB) AS DIS_COST_FEB,
                              SUM (RKT.DIS_COST_MAR) AS DIS_COST_MAR,
                              SUM (RKT.DIS_COST_APR) AS DIS_COST_APR,
                              SUM (RKT.DIS_COST_MAY) AS DIS_COST_MAY,
                              SUM (RKT.DIS_COST_JUN) AS DIS_COST_JUN,
                              0 DIS_COST_JUL,
                              0 DIS_COST_AUG,
                              0 DIS_COST_SEP,
                              0 DIS_COST_OCT,
                              0 DIS_COST_NOV,
                              0 DIS_COST_DEC,
                              MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                              MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                              MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
                         FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                              LEFT JOIN
                                 TM_ORGANIZATION ORG
                              ON ORG.BA_CODE = RKT.BA_CODE
                        WHERE RKT.DELETE_USER IS NULL
                              AND RKT.MATURITY_STAGE_SMS1 IN
                                       ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                              AND RKT.COST_ELEMENT <> 'MATERIAL'
                              $where
                     GROUP BY RKT.PERIOD_BUDGET,
                              ORG.REGION_CODE,
                              RKT.BA_CODE,
                              RKT.AFD_CODE,
                              RKT.BLOCK_CODE,
                              RKT.COST_ELEMENT,
                              RKT.MATURITY_STAGE_SMS1
                     UNION ALL
                       SELECT RKT.PERIOD_BUDGET,
                              ORG.REGION_CODE,
                              RKT.BA_CODE,
                              RKT.AFD_CODE,
                              RKT.BLOCK_CODE,
                              RKT.COST_ELEMENT,
                              RKT.MATURITY_STAGE_SMS2 MATURITY_STAGE,
                              0 DIS_COST_JAN,
                              0 DIS_COST_FEB,
                              0 DIS_COST_MAR,
                              0 DIS_COST_APR,
                              0 DIS_COST_MAY,
                              0 DIS_COST_JUN,
                              SUM (RKT.DIS_COST_JUL) DIS_COST_JUL,
                              SUM (RKT.DIS_COST_AUG) DIS_COST_AUG,
                              SUM (RKT.DIS_COST_SEP) DIS_COST_SEP,
                              SUM (RKT.DIS_COST_OCT) DIS_COST_OCT,
                              SUM (RKT.DIS_COST_NOV) DIS_COST_NOV,
                              SUM (RKT.DIS_COST_DEC) DIS_COST_DEC,
                              MAX (RKT.COST_LABOUR_POKOK) AS COST_LABOUR_POKOK,
                              MAX (RKT.COST_TOOLS_KG) AS COST_TOOLS_KG,
                              MAX (RKT.COST_TRANSPORT_KG) AS COST_TRANSPORT_KG
                         FROM    TR_RKT_PUPUK_COST_ELEMENT RKT
                              LEFT JOIN
                                 TM_ORGANIZATION ORG
                              ON ORG.BA_CODE = RKT.BA_CODE
                        WHERE RKT.DELETE_USER IS NULL
                              AND RKT.MATURITY_STAGE_SMS2 IN
                                       ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                              AND RKT.COST_ELEMENT <> 'MATERIAL'
                              $where
                     GROUP BY RKT.PERIOD_BUDGET,
                              ORG.REGION_CODE,
                              RKT.BA_CODE,
                              RKT.AFD_CODE,
                              RKT.BLOCK_CODE,
                              RKT.COST_ELEMENT,
                              RKT.MATURITY_STAGE_SMS2)
           GROUP BY PERIOD_BUDGET,
                    REGION_CODE,
                    BA_CODE,
                    AFD_CODE,
                    BLOCK_CODE,
                    COST_ELEMENT,
                    MATURITY_STAGE) COST
       LEFT JOIN
          V_KG_PUPUK_AFD KG_PUPUK
       ON     COST.PERIOD_BUDGET = KG_PUPUK.PERIOD_BUDGET
          AND COST.BA_CODE = KG_PUPUK.BA_CODE
          AND COST.AFD_CODE = KG_PUPUK.AFD_CODE
          AND COST.MATURITY_STAGE = KG_PUPUK.MATURITY_STAGE
		)
		UNION ALL
		-- PERHITUNGAN UNTUK AKTIVITAS DISTRIBUSI NON INFRA
		SELECT PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            BLOCK_CODE,
            MATURITY_STAGE AS TIPE_TRANSAKSI,
            COST_ELEMENT,
            ACTIVITY_CODE, 
            DESCRIPTION AS ACTIVITY_DESC,
            VRA_CODE AS SUB_COST_ELEMENT, 
            VRA_CODE||' - '||VRA_SUB_CAT_DESCRIPTION AS MATERIAL_NAME,
            '' KETERANGAN,
            UOM,
            SUM (NVL (PLAN_JAN, 0)) AS QTY_JAN,
            SUM (NVL (PLAN_FEB, 0)) AS QTY_FEB,
            SUM (NVL (PLAN_MAR, 0)) AS QTY_MAR,
            SUM (NVL (PLAN_APR, 0)) AS QTY_APR,
            SUM (NVL (PLAN_MAY, 0)) AS QTY_MAY,
            SUM (NVL (PLAN_JUN, 0)) AS QTY_JUN,
            SUM (NVL (PLAN_JUL, 0)) AS QTY_JUL,
            SUM (NVL (PLAN_AUG, 0)) AS QTY_AUG,
            SUM (NVL (PLAN_SEP, 0)) AS QTY_SEP,
            SUM (NVL (PLAN_OCT, 0)) AS QTY_OCT,
            SUM (NVL (PLAN_NOV, 0)) AS QTY_NOV,
            SUM (NVL (PLAN_DEC, 0)) AS QTY_DEC,
            SUM (NVL (DIS_JAN, 0)) AS COST_JAN,
            SUM (NVL (DIS_FEB, 0)) AS COST_FEB,
            SUM (NVL (DIS_MAR, 0)) AS COST_MAR,
            SUM (NVL (DIS_APR, 0)) AS COST_APR,
            SUM (NVL (DIS_MAY, 0)) AS COST_MAY,
            SUM (NVL (DIS_JUN, 0)) AS COST_JUN,
            SUM (NVL (DIS_JUL, 0)) AS COST_JUL,
            SUM (NVL (DIS_AUG, 0)) AS COST_AUG,
            SUM (NVL (DIS_SEP, 0)) AS COST_SEP,
            SUM (NVL (DIS_OCT, 0)) AS COST_OCT,
            SUM (NVL (DIS_NOV, 0)) AS COST_NOV,
            SUM (NVL (DIS_DEC, 0)) AS COST_DEC,
            (SUM (NVL (PLAN_JAN, 0)) +
            SUM (NVL (PLAN_FEB, 0)) +
            SUM (NVL (PLAN_MAR, 0)) +
            SUM (NVL (PLAN_APR, 0)) +
            SUM (NVL (PLAN_MAY, 0)) +
            SUM (NVL (PLAN_JUN, 0)) +
            SUM (NVL (PLAN_JUL, 0)) +
            SUM (NVL (PLAN_AUG, 0)) +
            SUM (NVL (PLAN_SEP, 0)) +
            SUM (NVL (PLAN_OCT, 0)) +
            SUM (NVL (PLAN_NOV, 0)) +
            SUM (NVL (PLAN_DEC, 0))) AS QTYPERTAHUN,
            (SUM (NVL (DIS_JAN, 0)) +
            SUM (NVL (DIS_FEB, 0)) +
            SUM (NVL (DIS_MAR, 0)) +
            SUM (NVL (DIS_APR, 0)) +
            SUM (NVL (DIS_MAY, 0)) +
            SUM (NVL (DIS_JUN, 0)) +
            SUM (NVL (DIS_JUL, 0)) +
            SUM (NVL (DIS_AUG, 0)) +
            SUM (NVL (DIS_SEP, 0)) +
            SUM (NVL (DIS_OCT, 0)) +
            SUM (NVL (DIS_NOV, 0)) +
            SUM (NVL (DIS_DEC, 0))) AS COSTSETAHUN,
            '".$this->_userName."' AS INSERT_USER,
            SYSDATE AS INSERT_TIME
       FROM (   SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE,
       COST_ELEMENT,
       ACTIVITY_CODE,
       DESCRIPTION,
       TIPE_TRANSAKSI,
       VRA_CODE,
       VRA_SUB_CAT_DESCRIPTION,
       UOM,
       (NVL (PLAN_JAN, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_JAN,
       (NVL (PLAN_FEB, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_FEB,
       (NVL (PLAN_MAR, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_MAR,
       (NVL (PLAN_APR, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_APR,
       (NVL (PLAN_MAY, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_MAY,
       (NVL (PLAN_JUN, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_JUN,
       0 PLAN_JUL,
       0 PLAN_AUG,
       0 PLAN_SEP,
       0 PLAN_OCT,
       0 PLAN_NOV,
       0 PLAN_DEC,
       DIS_JAN,
       DIS_FEB,
       DIS_MAR,
       DIS_APR,
       DIS_MAY,
       DIS_JUN,
       0 DIS_JUL,
       0 DIS_AUG,
       0 DIS_SEP,
       0 DIS_OCT,
       0 DIS_NOV,
       0 DIS_DEC
  FROM (
  SELECT *
          FROM    (
          SELECT RKT.PERIOD_BUDGET,
                          ORG.REGION_CODE,
                          RKT.BA_CODE,
                          RKT.AFD_CODE,
                          RKT.BLOCK_CODE,
                          RKT.COST_ELEMENT,
                          RKT.ACTIVITY_CODE,
                          RKT.TIPE_TRANSAKSI,
                          ACT.DESCRIPTION,
                          VRADIS.VRA_CODE,
                          VRADIS.HM_KM,
                          TMVRA.UOM,
                          TMVRA.VRA_SUB_CAT_DESCRIPTION,
                          RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                          RKT.PLAN_JAN,
                          RKT.PLAN_FEB,
                          RKT.PLAN_MAR,
                          RKT.PLAN_APR,
                          RKT.PLAN_MAY,
                          RKT.PLAN_JUN,
                          RKT.PLAN_JUL,
                          RKT.PLAN_AUG,
                          RKT.PLAN_SEP,
                          RKT.PLAN_OCT,
                          RKT.PLAN_NOV,
                          RKT.PLAN_DEC,
                          DIS_JAN,
                          DIS_FEB,
                          DIS_MAR,
                          DIS_APR,
                          DIS_MAY,
                          DIS_JUN,
                          DIS_JUL,
                          DIS_AUG,
                          DIS_SEP,
                          DIS_OCT,
                          DIS_NOV,
                          DIS_DEC
                     FROM TR_RKT_COST_ELEMENT RKT
                          LEFT JOIN TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE
                          LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRADIS
                             ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                                AND RKT.BA_CODE = VRADIS.BA_CODE
                                AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                                AND RKT.AFD_CODE = VRADIS.LOCATION_CODE
                                AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
--                          LEFT JOIN TR_RKT_VRA VRARKT
--                             ON     RKT.PERIOD_BUDGET = VRARKT.PERIOD_BUDGET
--                                AND RKT.BA_CODE = VRARKT.BA_CODE
--                                AND VRADIS.VRA_CODE = VRARKT.VRA_CODE
                         LEFT JOIN TM_VRA TMVRA 
                            ON TMVRA.VRA_CODE = VRADIS.VRA_CODE
                         LEFT JOIN TM_ACTIVITY ACT
                            ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE   
                    WHERE RKT.DELETE_USER IS NULL
                          AND RKT.MATURITY_STAGE_SMS1 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                          AND RKT.COST_ELEMENT = 'TRANSPORT'
                          $where
                          ) RKT
               LEFT JOIN
                  (  SELECT RKT.BA_CODE AS A_BA_CODE,
                            RKT.AFD_CODE AS A_AFD_CODE,
                            RKT.ACTIVITY_CODE AS A_ACTIVITY_CODE,
                            SUM (RKT.PLAN_SETAHUN) SUMAFD
                       FROM    TR_RKT_COST_ELEMENT RKT
							LEFT JOIN TM_ORGANIZATION ORG
                                ON ORG.BA_CODE = RKT.BA_CODE
                            LEFT JOIN
                               TR_RKT_VRA_DISTRIBUSI VRADIS
                            ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                               AND RKT.BA_CODE = VRADIS.BA_CODE
                               AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                               AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.MATURITY_STAGE_SMS1 IN  ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                            AND RKT.COST_ELEMENT = 'TRANSPORT'
                            $where
                   GROUP BY RKT.BA_CODE, RKT.AFD_CODE, RKT.ACTIVITY_CODE)
                  PERAFD
               ON     RKT.BA_CODE = PERAFD.A_BA_CODE
                  AND RKT.AFD_CODE = PERAFD.A_AFD_CODE
                  AND RKT.ACTIVITY_CODE = PERAFD.A_ACTIVITY_CODE
                )
UNION ALL
SELECT PERIOD_BUDGET,
       REGION_CODE,
       BA_CODE,
       AFD_CODE,
       BLOCK_CODE,
       MATURITY_STAGE,
       COST_ELEMENT,
       ACTIVITY_CODE,
       DESCRIPTION,
       TIPE_TRANSAKSI,
       VRA_CODE,
       VRA_SUB_CAT_DESCRIPTION,
       UOM,
       0 PLAN_JAN,
       0 PLAN_FEB,
       0 PLAN_MAR,
       0 PLAN_APR,
       0 PLAN_MAY,
       0 PLAN_JUN,
       (NVL (PLAN_JUL, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_JUL,
       (NVL (PLAN_AUG, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_AUG,
       (NVL (PLAN_SEP, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_SEP,
       (NVL (PLAN_OCT, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_OCT,
       (NVL (PLAN_NOV, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_NOV,
       (NVL (PLAN_DEC, 0) / NULLIF (SUMAFD, 0) * HM_KM) PLAN_DEC,
       0 DIS_JAN,
       0 DIS_FEB,
       0 DIS_MAR,
       0 DIS_APR,
       0 DIS_MAY,
       0 DIS_JUN,
       DIS_JUL,
       DIS_AUG,
       DIS_SEP,
       DIS_OCT,
       DIS_NOV,
       DIS_DEC
  FROM (SELECT *
          FROM    (SELECT RKT.PERIOD_BUDGET,
                          ORG.REGION_CODE,
                          RKT.BA_CODE,
                          RKT.AFD_CODE,
                          RKT.BLOCK_CODE,
                          RKT.COST_ELEMENT,
                          RKT.ACTIVITY_CODE,
                          RKT.TIPE_TRANSAKSI,
                          ACT.DESCRIPTION,
                          VRADIS.VRA_CODE,
                          VRADIS.HM_KM,
                          TMVRA.UOM,
                          TMVRA.VRA_SUB_CAT_DESCRIPTION,
                          RKT.MATURITY_STAGE_SMS1 AS MATURITY_STAGE,
                          RKT.PLAN_JAN,
                          RKT.PLAN_FEB,
                          RKT.PLAN_MAR,
                          RKT.PLAN_APR,
                          RKT.PLAN_MAY,
                          RKT.PLAN_JUN,
                          RKT.PLAN_JUL,
                          RKT.PLAN_AUG,
                          RKT.PLAN_SEP,
                          RKT.PLAN_OCT,
                          RKT.PLAN_NOV,
                          RKT.PLAN_DEC,
                          DIS_JAN,
                          DIS_FEB,
                          DIS_MAR,
                          DIS_APR,
                          DIS_MAY,
                          DIS_JUN,
                          DIS_JUL,
                          DIS_AUG,
                          DIS_SEP,
                          DIS_OCT,
                          DIS_NOV,
                          DIS_DEC
                     FROM TR_RKT_COST_ELEMENT RKT
                          LEFT JOIN TM_ORGANIZATION ORG
                             ON ORG.BA_CODE = RKT.BA_CODE
                          LEFT JOIN TR_RKT_VRA_DISTRIBUSI VRADIS
                             ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                                AND RKT.BA_CODE = VRADIS.BA_CODE
                                AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                                AND RKT.AFD_CODE = VRADIS.LOCATION_CODE
                                AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
--                          LEFT JOIN TR_RKT_VRA VRARKT
--                             ON     RKT.PERIOD_BUDGET = VRARKT.PERIOD_BUDGET
--                                AND RKT.BA_CODE = VRARKT.BA_CODE
--                                AND VRADIS.VRA_CODE = VRARKT.VRA_CODE
                         LEFT JOIN TM_VRA TMVRA 
                            ON TMVRA.VRA_CODE = VRADIS.VRA_CODE
                         LEFT JOIN TM_ACTIVITY ACT
                            ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE   
                    WHERE RKT.DELETE_USER IS NULL
                          AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0', 'TBM1', 'TBM2', 'TBM3')
                          AND RKT.COST_ELEMENT = 'TRANSPORT'
                          $where
                          ) RKT
               LEFT JOIN
                  (  SELECT RKT.BA_CODE AS A_BA_CODE,
                            RKT.AFD_CODE AS A_AFD_CODE,
                            RKT.ACTIVITY_CODE AS A_ACTIVITY_CODE,
                            SUM (RKT.PLAN_SETAHUN) SUMAFD
                       FROM    TR_RKT_COST_ELEMENT RKT
							LEFT JOIN TM_ORGANIZATION ORG
                            ON ORG.BA_CODE = RKT.BA_CODE
                            LEFT JOIN
                               TR_RKT_VRA_DISTRIBUSI VRADIS
                            ON     RKT.PERIOD_BUDGET = VRADIS.PERIOD_BUDGET
                               AND RKT.BA_CODE = VRADIS.BA_CODE
                               AND RKT.ACTIVITY_CODE = VRADIS.ACTIVITY_CODE
                               AND VRADIS.TIPE_TRANSAKSI = 'NON_INFRA'
                      WHERE     RKT.DELETE_USER IS NULL
                            AND RKT.MATURITY_STAGE_SMS2 IN ('TBM0','TBM1','TBM2','TBM3')
                            AND RKT.COST_ELEMENT = 'TRANSPORT'
                            $where
                   GROUP BY RKT.BA_CODE, RKT.AFD_CODE, RKT.ACTIVITY_CODE)
                  PERAFD
               ON     RKT.BA_CODE = PERAFD.A_BA_CODE
                  AND RKT.AFD_CODE = PERAFD.A_AFD_CODE
                  AND RKT.ACTIVITY_CODE = PERAFD.A_ACTIVITY_CODE)    
) GROUP BY 
            PERIOD_BUDGET,
            REGION_CODE,
            BA_CODE,
            AFD_CODE,
            BLOCK_CODE,
            MATURITY_STAGE,
            COST_ELEMENT,
            ACTIVITY_CODE, 
            TIPE_TRANSAKSI,
            DESCRIPTION,
            VRA_CODE, 
            VRA_SUB_CAT_DESCRIPTION,
            UOM
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (ASTEK)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'ASTEK' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1 
		 $xwhere
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		   $xwhere
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
			   $twhere
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
						   $twhere
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
			$xwhere
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
		 $twhere
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'ASTEK'
						   $twhere
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (BONUS)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'BONUS' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		   $xwhere
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
			   $twhere
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
						   $twhere
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		   $xwhere
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
			   $twhere
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'BONUS'
						   $twhere
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1             
		UNION ALL 
		-- INI UNTUK PERHITUNGAN TUNJANGAN (CATU)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'CATU' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_CATU TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
		 WHERE  1 = 1
				$twhere 
			   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
							TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_CATU TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
					 WHERE   1=1  
						$twhere 
						   AND TCR.TUNJANGAN_TYPE = 'CATU'
						   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_CATU TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
		 WHERE  1 = 1
			$twhere 
			   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
							TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_CATU TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
					 WHERE  1 = 1
							$xwhere 
						   AND TCR.TUNJANGAN_TYPE = 'CATU'
						   AND TTJ.EMPLOYEE_STATUS = 'K/1' -- INI NANTI DIHAPUS UNTUK DATA 2016 HANYA PERLU BA UNTUK PENGAMBILAN DATANYA 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (HHR)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'HHR' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		 $xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ('TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
				$twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'HHR'
						$xwhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1
		UNION ALL
		-- INI UNTUK PERHITUGAN TUNJANGAN (JABATAN)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'JABATAN' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE  1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
			$twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
			$twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'JABATAN'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (KEHADIRAN)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'KEHADIRAN' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		 $xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE  1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'KEHADIRAN'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN LAINNYA
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'LAINNYA' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE  1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE  1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'LAINNYA'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (OBAT)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'OBAT' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		 $xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		 $xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'OBAT'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (PPH21)
		 SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'PPH_21' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		 $xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
		 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		 $xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
			 $twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (PPH_21)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'PPH_21' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
			$xwhere 
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
			$twhere 
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
						$twhere 
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere 
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
		   $xwhere
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
			   $twhere
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'PPH_21'
						   $twhere
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 
		UNION ALL
		-- INI UNTUK PERHITUNGAN TUNJANGAN (THR)
		SELECT PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1 AS TIPE_TRANSAKSI,
					'' AS COST_ELEMENT,
					'' AS ACTIVITY_CODE, 
					'THR' AS ACTIVITY_DESC,
					'' AS SUB_COST_ELEMENT, 
					'' AS MATERIAL_NAME,
					'' KETERANGAN,
					'' UOM,
					SUM(NVL (DIS_JAN,0)) AS DIS_JAN,
					SUM(NVL (DIS_FEB,0)) AS DIS_FEB,
					SUM(NVL (DIS_MAR,0)) AS DIS_MAR,
					SUM(NVL (DIS_APR,0)) AS DIS_APR,
					SUM(NVL (DIS_MAY,0)) AS DIS_MAY,
					SUM(NVL (DIS_JUN,0)) AS DIS_JUN,
					SUM(NVL (DIS_JUL,0)) AS DIS_JUL,
					SUM(NVL (DIS_AUG,0)) AS DIS_AUG,
					SUM(NVL (DIS_SEP,0)) AS DIS_SEP,
					SUM(NVL (DIS_OCT,0)) AS DIS_OCT,
					SUM(NVL (DIS_NOV,0)) AS DIS_NOV,
					SUM(NVL (DIS_DEC,0)) AS DIS_DEC,
					SUM(NVL (COST_JAN,0)) AS COST_JAN,
					SUM(NVL (COST_FEB,0)) AS COST_FEB,
					SUM(NVL (COST_MAR,0)) AS COST_MAR,
					SUM(NVL (COST_APR,0)) AS COST_APR,
					SUM(NVL (COST_MAY,0)) AS COST_MAY,
					SUM(NVL (COST_JUN,0)) AS COST_JUN,
					SUM(NVL (COST_JUL,0)) AS COST_JUL,
					SUM(NVL (COST_AUG,0)) AS COST_AUG,
					SUM(NVL (COST_SEP,0)) AS COST_SEP,
					SUM(NVL (COST_OCT,0)) AS COST_OCT,
					SUM(NVL (COST_NOV,0)) AS COST_NOV,
					SUM(NVL (COST_DEC,0)) AS COST_DEC,
					(SUM(NVL (DIS_JAN,0)) +
					SUM(NVL (DIS_FEB,0)) +
					SUM(NVL (DIS_MAR,0)) +
					SUM(NVL (DIS_APR,0)) +
					SUM(NVL (DIS_MAY,0)) +
					SUM(NVL (DIS_JUN,0)) +
					SUM(NVL (DIS_JUL,0)) +
					SUM(NVL (DIS_AUG,0)) +
					SUM(NVL (DIS_SEP,0)) +
					SUM(NVL (DIS_OCT,0)) +
					SUM(NVL (DIS_NOV,0)) +
					SUM(NVL (DIS_DEC,0))) AS DIS_SETAHUN,
					(SUM(NVL (COST_JAN,0)) +
					SUM(NVL (COST_FEB,0)) +
					SUM(NVL (COST_MAR,0)) +
					SUM(NVL (COST_APR,0)) +
					SUM(NVL (COST_MAY,0)) +
					SUM(NVL (COST_JUN,0)) +
					SUM(NVL (COST_JUL,0)) +
					SUM(NVL (COST_AUG,0)) +
					SUM(NVL (COST_SEP,0)) +
					SUM(NVL (COST_OCT,0)) +
					SUM(NVL (COST_NOV,0)) +
					SUM(NVL (COST_DEC,0))) AS COST_SETAHUN,
					'".$this->_userName."' AS INSERT_USER,
					SYSDATE AS INSERT_TIME
		FROM (            
		--HITUNG TUNJANGAN UNTUK SMS1
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS1,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUN,
					0 AS DIS_JUL,
					0 AS DIS_AUG,
					0 AS DIS_SEP,
					0 AS DIS_OCT,
					0 AS DIS_NOV,
					0 AS DIS_DEC,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JAN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_FEB,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_APR,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_MAY,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUN,
					0 AS COST_JUL,
					0 AS COST_AUG,
					0 AS COST_SEP,
					0 AS COST_OCT,
					0 AS COST_NOV,
					0 AS COST_DEC       
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS1,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere
		 AND MATURITY_STAGE_SMS1 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE  1 = 1
		 $xwhere
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
		 $twhere
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
						$twhere
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		UNION ALL
		--HITUNG TUNJANGAN UNTUK SMS2
		SELECT 
					HA_TM.PERIOD_BUDGET,
					ORG.REGION_CODE,
					HA_TM.BA_CODE,
					HA_TM.AFD_CODE,
					HA_TM.BLOCK_CODE,
					HA_TM.MATURITY_STAGE_SMS2,
					0 AS DIS_JAN,
					0 AS DIS_FEB,
					0 AS DIS_MAR,
					0 AS DIS_APR,
					0 AS DIS_MAY,
					0 AS DIS_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*ALL_MPP.MPP) AS DIS_DEC,
					0 AS COST_JAN,
					0 AS COST_FEB,
					0 AS COST_MAR,
					0 AS COST_APR,
					0 AS COST_MAY,
					0 AS COST_JUN,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_JUL,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_AUG,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_SEP,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_OCT,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_NOV,
					(HA_TM.HA_PLANTED/HA_BA.HA*TTL_COST.COST_BA) AS COST_DEC
		FROM (
		SELECT PERIOD_BUDGET,
			   BA_CODE,
			   AFD_CODE,
			   BLOCK_CODE,
			   MATURITY_STAGE_SMS2,
			   HA_PLANTED
		  FROM TM_HECTARE_STATEMENT
		 WHERE 1 = 1
		 $xwhere
		 AND MATURITY_STAGE_SMS2 NOT IN ( 'TM')
		) HA_TM
		LEFT JOIN (       
		SELECT PERIOD_BUDGET, BA_CODE, SUM (HA_PLANTED) AS HA
		   FROM TM_HECTARE_STATEMENT
		   WHERE 1 = 1
			$xwhere
		GROUP BY PERIOD_BUDGET, BA_CODE
		) HA_BA
		ON HA_TM.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND HA_TM.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN (
		SELECT TTJ.PERIOD_BUDGET, TTJ.BA_CODE, SUM (TRC.MPP_PERIOD_BUDGET) AS MPP
		  FROM    TM_TARIF_TUNJANGAN TTJ
			   LEFT JOIN
				  TR_RKT_CHECKROLL TRC
			   ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
				  AND TRC.BA_CODE = TTJ.BA_CODE
				  AND TRC.JOB_CODE = TTJ.JOB_CODE
				  AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
		 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
		 $twhere
		GROUP BY  TTJ.PERIOD_BUDGET, TTJ.BA_CODE 
		) ALL_MPP
		ON ALL_MPP.PERIOD_BUDGET = HA_BA.PERIOD_BUDGET
		AND ALL_MPP.BA_CODE = HA_BA.BA_CODE
		LEFT JOIN TM_ORGANIZATION ORG
		ON ORG.BA_CODE = HA_TM.BA_CODE
		LEFT JOIN (
		SELECT PERIOD_BUDGET,
					BA_CODE,
					SUM(COSTTYPE) AS COST_BA
		FROM (            
					SELECT TTJ.PERIOD_BUDGET,
						   TTJ.BA_CODE,
						   TTJ.JOB_CODE,
						   TCR.TUNJANGAN_TYPE,
						   TCR.JUMLAH,
						   TRC.MPP_PERIOD_BUDGET,
						   (TCR.JUMLAH*TRC.MPP_PERIOD_BUDGET/12) COSTTYPE
					  FROM TM_TARIF_TUNJANGAN TTJ
						   LEFT JOIN TR_RKT_CHECKROLL TRC
							  ON     TRC.PERIOD_BUDGET = TTJ.PERIOD_BUDGET
								 AND TRC.BA_CODE = TTJ.BA_CODE
								 AND TRC.JOB_CODE = TTJ.JOB_CODE
								 AND TRC.EMPLOYEE_STATUS = TTJ.EMPLOYEE_STATUS
						   LEFT JOIN TR_RKT_CHECKROLL_DETAIL TCR
							  ON TCR.TRX_CR_CODE = TRC.TRX_CR_CODE
								 AND TCR.TUNJANGAN_TYPE = TTJ.TUNJANGAN_TYPE
					 WHERE     TTJ.TUNJANGAN_TYPE = 'THR'
						$twhere
		) GROUP BY PERIOD_BUDGET, BA_CODE
		) TTL_COST
		ON HA_TM.PERIOD_BUDGET = TTL_COST.PERIOD_BUDGET
		AND HA_TM.BA_CODE = TTL_COST.BA_CODE
		)
		GROUP BY PERIOD_BUDGET,
					REGION_CODE,
					BA_CODE,
					AFD_CODE,
					BLOCK_CODE,
					MATURITY_STAGE_SMS1
		  ";
		
		$this->_db->query($xquery);
		$this->_db->commit();
		
		return true;		 
	}		
	
	//hapus temp table untuk kebutuhan activity estate cost
	public function delTmpRptKebActDevCostBlock($params = array())
    {
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		//hapus estate cost per BLOCK
		$query = "
			DELETE FROM TMP_RPT_KEB_DEV_COST_BLOCK 
			WHERE 1 = 1
			$where 
		";
		
		$this->_db->query($query);
		$this->_db->commit();
		
		return true;
	}
	//generate report estate cost
    public function reportEstateCost($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel estate cost ################################################### */
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT 	$select_group
					REPORT.*,
					ORG.ESTATE_NAME
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_EST_COST ALL_ACT
				WHERE 1 = 1
				$where
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			LEFT JOIN TM_ORGANIZATION ORG
				ON ORG.BA_CODE = REPORT.BA_CODE
			WHERE REPORT.ACTIVITY_CODE IS NOT NULL
			ORDER BY REPORT.PERIOD_BUDGET,
					 REPORT.BA_CODE,
					 $order_group
					 REPORT.ACTIVITY_CODE,
					 REPORT.COST_ELEMENT,
					 REPORT.KETERANGAN
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel estate cost ################################################### */
		
		return $result;
	}
	
	//generate report estate cost per AFD
    public function reportEstateCostAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel estate cost ################################################### */
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT 	$select_group
					REPORT.*,
					ORG.ESTATE_NAME
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_EST_COST_AFD ALL_ACT
				WHERE 1 = 1
				$where
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			LEFT JOIN TM_ORGANIZATION ORG
				ON ORG.BA_CODE = REPORT.BA_CODE
			WHERE REPORT.ACTIVITY_CODE IS NOT NULL
			ORDER BY REPORT.PERIOD_BUDGET,
					 REPORT.BA_CODE,
					 REPORT.AFD_CODE,
					 $order_group
					 REPORT.ACTIVITY_CODE,
					 REPORT.COST_ELEMENT,
					 REPORT.KETERANGAN
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel estate cost ################################################### */
		
		return $result;
	}
	
	//query summary estate cost per BA
    public function querySummaryEstateCostPerBa($params = array())
    {
		$where = $select_group = $order_group = "";
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$twhere .= "
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$twhere .= "
                AND to_char(TTJ.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
			$xwhere .= "
                AND BA_CODE = '".$params['key_find']."'
            "; 
			$twhere .= "
                AND TTJ.BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "SELECT STR.*,
					CASE
					  WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
					  THEN
						(CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
							THEN
								(SELECT PRICE
								   FROM TN_HARGA_BORONG
								   WHERE     1 = 1
									AND PERIOD_BUDGET = STR.PERIOD_BUDGET
									AND BA_CODE = STR.BA_CODE
									AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
							ELSE
							    INFRA.RP_HA_INTERNAL
							END
						  )              
					  ELSE
						NORM.PRICE_ROTASI
				   END
				   AS NORMA
                 FROM (
			SELECT 	$select_group
					STRUKTUR_REPORT.PERIOD_BUDGET, 
					STRUKTUR_REPORT.REGION_CODE, 
					STRUKTUR_REPORT.BA_CODE, 
					STRUKTUR_REPORT.ESTATE_NAME, 
					STRUKTUR_REPORT.ACTIVITY_CODE, 
					STRUKTUR_REPORT.ACTIVITY_DESC, 
					STRUKTUR_REPORT.UOM, 
					STRUKTUR_REPORT.QTY_SMS1, 
					STRUKTUR_REPORT.QTY_SMS2, 
					STRUKTUR_REPORT.COST_SMS1, 
					STRUKTUR_REPORT.COST_SMS2, 
					STRUKTUR_REPORT.COST_SETAHUN,
					STRUKTUR_REPORT.TOTAL_SEBARAN_KG,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
						THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
						ELSE 0
					END as RP_HA_SMS1,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
						ELSE 0
					END as RP_HA_SMS2,
					CASE
						WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN (STRUKTUR_REPORT.COST_SETAHUN / STRUKTUR_REPORT.QTY_SMS2)
						ELSE 0
					END as RP_HA_SETAHUN,
					CASE
						WHEN STRUKTUR_REPORT.TOTAL_SEBARAN_KG > 0
						THEN (STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.TOTAL_SEBARAN_KG * 1000))
						ELSE 0
					END as RP_KG
			FROM (
				SELECT 	$select_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM, 
						MAX(SMS1_TM) AS QTY_SMS1,
						MAX(SMS2_TM) AS QTY_SMS2,
						SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
						SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
						SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN,
						MAX (sebaran_prod.QTY_SETAHUN) TOTAL_SEBARAN_KG
				FROM (
					SELECT 	CASE
								WHEN INSTR(HIRARKI, '/',1, 2) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
								ELSE NULL
							END GROUP01,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 3) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP02,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 4) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP03,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 5) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP04,
							GROUP_CODE
					FROM (
						SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
								LVL, 
								TO_CHAR(GROUP_CODE) AS GROUP_CODE
						FROM (
							SELECT 	GROUP_CODE, 
									CONNECT_BY_ISCYCLE \"CYCLE\",
									LEVEL as LVL, 
									SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
							FROM TM_RPT_MAPPING_ACT
							WHERE level > 1
							START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
							CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
						)
						GROUP BY HIRARKI, LVL, GROUP_CODE
						ORDER BY HIRARKI
					)
				) STRUKTUR_REPORT
				LEFT JOIN TM_RPT_MAPPING_ACT MAPP
					ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
				LEFT JOIN (
					SELECT *
					FROM TMP_RPT_EST_COST ALL_ACT
					WHERE 1 = 1 
					$where
				)REPORT
					ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
					AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
					AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = REPORT.BA_CODE
				LEFT JOIN (
					SELECT 	PERIOD_BUDGET, 
							BA_CODE, 
							SUM(SMS1_TM) SMS1_TM, 
							SUM(SMS2_TM) SMS2_TM
					FROM V_REPORT_SEBARAN_HS
					GROUP BY PERIOD_BUDGET, BA_CODE
				) TOTAL_SEBARAN_HA
					ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
					AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
				LEFT JOIN V_REPORT_SEBARAN_PRODUKSI sebaran_prod
					ON REPORT.PERIOD_BUDGET = sebaran_prod.PERIOD_BUDGET
					AND REPORT.BA_CODE = sebaran_prod.BA_CODE
					AND sebaran_prod.TIPE_TRANSAKSI = '03_TBS_PANEN'
				WHERE REPORT.ACTIVITY_CODE IS NOT NULL
				GROUP BY $order_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM,
						REPORT.TIPE_TRANSAKSI
			) STRUKTUR_REPORT
			ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
					 STRUKTUR_REPORT.BA_CODE,
					 $order_group
					 STRUKTUR_REPORT.ACTIVITY_CODE) STR
					 LEFT JOIN (SELECT PERIOD_BUDGET, BA_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, PRICE_ROTASI FROM (
			SELECT RANK () OVER (PARTITION BY PERIOD_BUDGET,
                                             BA_CODE,
											 ACTIVITY_GROUP,
                                             ACTIVITY_CODE
                                ORDER BY BACOUNT DESC,PRIORITY ASC) RANK_Z, 
					PRIORITY, 
					BACOUNT, 
					PERIOD_BUDGET, 
					BA_CODE, 
					ACTIVITY_GROUP,
					ACTIVITY_CODE, 
					PRICE_ROTASI
			  FROM (  
			  SELECT BACOUNT, PRIORITY, PERIOD_BUDGET, BA_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, SUM (PRICE_ROTASI) PRICE_ROTASI
						FROM (
						SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '1' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere		
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = HS.TOPOGRAPHY
										AND TB.LAND_TYPE = HS.LAND_TYPE                   
							  UNION ALL                 -- INI BUAT YANG LAND TYPE NYA ALL   
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '2' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = HS.TOPOGRAPHY
										AND TB.LAND_TYPE = 'ALL'             
							  UNION ALL                -- INI BUAT YANG TOPOGRAPHY NYA ALL
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '3' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = 'ALL'
										AND TB.LAND_TYPE = HS.LAND_TYPE         
							  UNION ALL -- INI BUAT YANG LAND TYPE  DAN TOPOGRAPHY NYA ALL
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '4' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = 'ALL'
										AND TB.LAND_TYPE = 'ALL'
										)
					GROUP BY BACOUNT, PRIORITY, PERIOD_BUDGET, BA_CODE, ACTIVITY_GROUP, ACTIVITY_CODE
					ORDER BY BACOUNT DESC, PRIORITY ASC 
					)
			 WHERE PRICE_ROTASI IS NOT NULL
			 )
			 WHERE RANK_Z = 1) NORM
			  ON NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
			 AND NORM.BA_CODE = STR.BA_CODE
			 AND NORM.ACTIVITY_GROUP = STR.GROUP01_DESC
			 AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE
			 LEFT JOIN ( 
            SELECT PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  RP_HA_INTERNAL
             FROM (SELECT RANK ()
                             OVER (
                                PARTITION BY PERIOD_BUDGET,
                                             BA_CODE,
                                             ACTIVITY_CODE
                                ORDER BY BACOUNT DESC, PRIORITY ASC)
                             RANK_Z,
                          PRIORITY,
                          BACOUNT,
                          PERIOD_BUDGET,
                          BA_CODE,
                          ACTIVITY_CODE,
                          RP_HA_INTERNAL
                     FROM (  SELECT BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE,
                                    SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                               FROM (SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '1' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '2' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = 'ALL'
                                     UNION ALL
                                     -- INI BUAT YANG TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '3' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '4' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = 'ALL')
                           GROUP BY BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE
                           ORDER BY BACOUNT DESC, PRIORITY ASC)
                    WHERE RP_HA_INTERNAL IS NOT NULL)
            WHERE RANK_Z = 1) INFRA   
            ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
          AND INFRA.BA_CODE = STR.BA_CODE
          AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
		";

		return $query;
	}
	
	
	//query summary estate cost per AFD
    public function querySummaryEstateCostPerAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$xwhere .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
			
			$xwhere .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "SELECT STR.*, 
					CASE
					  WHEN NORM.PRICE_ROTASI IS NULL OR NORM.PRICE_ROTASI = 0
					  THEN
						(CASE WHEN INFRA.RP_HA_INTERNAL IS NULL OR INFRA.RP_HA_INTERNAL = 0
							THEN
								(SELECT PRICE
								   FROM TN_HARGA_BORONG
								   WHERE     1 = 1
									AND PERIOD_BUDGET = STR.PERIOD_BUDGET
									AND BA_CODE = STR.BA_CODE
									AND ACTIVITY_CODE = STR.ACTIVITY_CODE)
							ELSE
							    INFRA.RP_HA_INTERNAL
							END
						  )              
					  ELSE
						NORM.PRICE_ROTASI
				   END
				   AS NORMA
                 FROM (
			SELECT 	$select_group
					STRUKTUR_REPORT.PERIOD_BUDGET, 
					STRUKTUR_REPORT.REGION_CODE, 
					STRUKTUR_REPORT.BA_CODE, 
					STRUKTUR_REPORT.ESTATE_NAME, 
					STRUKTUR_REPORT.AFD_CODE, 
					STRUKTUR_REPORT.ACTIVITY_CODE, 
					STRUKTUR_REPORT.ACTIVITY_DESC, 
					STRUKTUR_REPORT.UOM, 
					STRUKTUR_REPORT.QTY_SMS1, 
					STRUKTUR_REPORT.QTY_SMS2, 
					STRUKTUR_REPORT.COST_SMS1, 
					STRUKTUR_REPORT.COST_SMS2, 
					STRUKTUR_REPORT.COST_SETAHUN,
					STRUKTUR_REPORT.TOTAL_SEBARAN_KG,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS1 > 0
						THEN (STRUKTUR_REPORT.COST_SMS1 / STRUKTUR_REPORT.QTY_SMS1)
						ELSE 0
					END as RP_HA_SMS1,
					CASE 
						WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN (STRUKTUR_REPORT.COST_SMS2 / STRUKTUR_REPORT.QTY_SMS2)
						ELSE 0
					END as RP_HA_SMS2,
					CASE
						WHEN STRUKTUR_REPORT.QTY_SMS2 > 0
						THEN (STRUKTUR_REPORT.COST_SETAHUN / STRUKTUR_REPORT.QTY_SMS2)
						ELSE 0
					END as RP_HA_SETAHUN,
					CASE
						WHEN STRUKTUR_REPORT.TOTAL_SEBARAN_KG > 0
						THEN (STRUKTUR_REPORT.COST_SETAHUN / (STRUKTUR_REPORT.TOTAL_SEBARAN_KG * 1000))
						ELSE 0
					END as RP_KG
			FROM (
				SELECT 	$select_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.AFD_CODE, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM, 
						MAX(SMS1_TM) AS QTY_SMS1,
						MAX(SMS2_TM) AS QTY_SMS2,
						SUM (NVL(COST_SMS1,0)) as COST_SMS1, 
						SUM (NVL(COST_SMS2,0)) as COST_SMS2, 
						SUM (NVL(COST_SETAHUN,0)) as COST_SETAHUN,
						MAX (sebaran_prod.QTY_SETAHUN) TOTAL_SEBARAN_KG
				FROM (
					SELECT 	CASE
								WHEN INSTR(HIRARKI, '/',1, 2) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
								ELSE NULL
							END GROUP01,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 3) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP02,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 4) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP03,
							CASE
								WHEN INSTR(HIRARKI, '/',1, 5) <> 0
								THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
								ELSE NULL
							END GROUP04,
							GROUP_CODE
					FROM (
						SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
								LVL, 
								TO_CHAR(GROUP_CODE) AS GROUP_CODE
						FROM (
							SELECT 	GROUP_CODE, 
									CONNECT_BY_ISCYCLE \"CYCLE\",
									LEVEL as LVL, 
									SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
							FROM TM_RPT_MAPPING_ACT
							WHERE level > 1
							START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
							CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
						)
						GROUP BY HIRARKI, LVL, GROUP_CODE
						ORDER BY HIRARKI
					)
				) STRUKTUR_REPORT
				LEFT JOIN TM_RPT_MAPPING_ACT MAPP
					ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
				LEFT JOIN (
					SELECT *
					FROM TMP_RPT_EST_COST_AFD ALL_ACT
					WHERE 1 = 1
					$where
				)REPORT
					ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
					AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
					AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = REPORT.BA_CODE
				LEFT JOIN (
					SELECT 	PERIOD_BUDGET, 
							BA_CODE, 
							AFD_CODE,
							SMS1_TM, 
							SMS2_TM
					FROM V_REPORT_SEBARAN_HS
				) TOTAL_SEBARAN_HA
					ON TOTAL_SEBARAN_HA.PERIOD_BUDGET = REPORT.PERIOD_BUDGET
					AND TOTAL_SEBARAN_HA.BA_CODE = REPORT.BA_CODE
					AND TOTAL_SEBARAN_HA.AFD_CODE = REPORT.AFD_CODE
				LEFT JOIN (
					SELECT 	PERIOD_BUDGET,
							BA_CODE,
							AFD_CODE,
							NVL(SUM(JAN),0) QTY_JAN,
							NVL(SUM(FEB),0) QTY_FEB,
							NVL(SUM(MAR),0) QTY_MAR,
							NVL(SUM(APR),0) QTY_APR,
							NVL(SUM(MAY),0) QTY_MAY,
							NVL(SUM(JUN),0) QTY_JUN,
							NVL(SUM(JUL),0) QTY_JUL,
							NVL(SUM(AUG),0) QTY_AUG,
							NVL(SUM(SEP),0) QTY_SEP,
							NVL(SUM(OCT),0) QTY_OCT,
							NVL(SUM(NOV),0) QTY_NOV,
							NVL(SUM(DEC),0) QTY_DEC,
							(  NVL(SUM(JAN),0)
							 + NVL(SUM(FEB),0)
							 + NVL(SUM(MAR),0)
							 + NVL(SUM(APR),0)
							 + NVL(SUM(MAY),0)
							 + NVL(SUM(JUN),0)
							 + NVL(SUM(JUL),0)
							 + NVL(SUM(AUG),0)
							 + NVL(SUM(SEP),0)
							 + NVL(SUM(OCT),0)
							 + NVL(SUM(NOV),0)
							 + NVL(SUM(DEC),0)
							 ) AS QTY_SETAHUN
					FROM TR_PRODUKSI_PERIODE_BUDGET
					WHERE DELETE_USER IS NULL
					GROUP BY PERIOD_BUDGET,
							BA_CODE,
							AFD_CODE
				) sebaran_prod
					ON REPORT.PERIOD_BUDGET = sebaran_prod.PERIOD_BUDGET
					AND REPORT.BA_CODE = sebaran_prod.BA_CODE
					AND REPORT.AFD_CODE = sebaran_prod.AFD_CODE
				WHERE REPORT.ACTIVITY_CODE IS NOT NULL
				GROUP BY $order_group
						REPORT.PERIOD_BUDGET, 
						REPORT.REGION_CODE, 
						REPORT.BA_CODE, 
						ORG.ESTATE_NAME, 
						REPORT.AFD_CODE, 
						REPORT.ACTIVITY_CODE, 
						REPORT.ACTIVITY_DESC, 
						REPORT.UOM,
						REPORT.TIPE_TRANSAKSI
			) STRUKTUR_REPORT
			ORDER BY STRUKTUR_REPORT.PERIOD_BUDGET,
					 STRUKTUR_REPORT.BA_CODE,
					 STRUKTUR_REPORT.AFD_CODE, 
					 $order_group
					 STRUKTUR_REPORT.ACTIVITY_CODE) STR
					 LEFT JOIN ( -- ini buat ambil nilai norma (Aries)
			SELECT PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_CODE, ACTIVITY_GROUP, PRICE_ROTASI FROM (
			SELECT RANK () OVER (PARTITION BY PERIOD_BUDGET,
                                             BA_CODE,
											 ACTIVITY_GROUP,
                                             ACTIVITY_CODE
                                ORDER BY BACOUNT DESC,PRIORITY ASC) RANK_Z, 
				PRIORITY, 
				BACOUNT, 
				PERIOD_BUDGET, 
				BA_CODE, 
				AFD_CODE, 
				ACTIVITY_GROUP,
				ACTIVITY_CODE, 
				PRICE_ROTASI
			  FROM (  
			  SELECT BACOUNT, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE, SUM (PRICE_ROTASI) PRICE_ROTASI
						FROM (
						SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '1' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
												WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = HS.TOPOGRAPHY
										AND TB.LAND_TYPE = HS.LAND_TYPE             
							  UNION ALL                 -- INI BUAT YANG LAND TYPE NYA ALL
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '2' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = HS.TOPOGRAPHY
										AND TB.LAND_TYPE = 'ALL'
							  UNION ALL                -- INI BUAT YANG TOPOGRAPHY NYA ALL
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '3' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = 'ALL'
										AND TB.LAND_TYPE = HS.LAND_TYPE
							  UNION ALL -- INI BUAT YANG LAND TYPE  DAN TOPOGRAPHY NYA ALL
							  SELECT HS.BACOUNT,
									HS.PERIOD_BUDGET,
									 HS.BA_CODE,
									 HS.AFD_CODE,
									 TB.ACTIVITY_GROUP,
									 TB.ACTIVITY_CODE,
									 TB.ACTIVITY_CLASS,
									 TB.LAND_TYPE,
									 TB.TOPOGRAPHY,
									 TB.COST_ELEMENT,
									 TB.PRICE_ROTASI,
									 '4' AS PRIORITY
								FROM    (  
								SELECT COUNT (BA_CODE) BACOUNT,
												  PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
											 FROM TM_HECTARE_STATEMENT
											WHERE 1 = 1
												  $xwhere
												  AND MATURITY_STAGE_SMS2 = 'TM'
										 GROUP BY PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  MATURITY_STAGE_SMS2,
												  TOPOGRAPHY,
												  LAND_TYPE
												  ) HS
									 LEFT JOIN
										TN_BIAYA TB
									 ON     TB.BA_CODE = HS.BA_CODE
										AND TB.PERIOD_BUDGET = HS.PERIOD_BUDGET
										AND TB.ACTIVITY_GROUP = HS.MATURITY_STAGE_SMS2
										AND TB.TOPOGRAPHY = 'ALL'
										AND TB.LAND_TYPE = 'ALL')
					GROUP BY BACOUNT, PRIORITY, PERIOD_BUDGET, BA_CODE, AFD_CODE, ACTIVITY_GROUP, ACTIVITY_CODE
					ORDER BY BACOUNT DESC, PRIORITY ASC 
					)
			 WHERE PRICE_ROTASI IS NOT NULL
			 )
			 WHERE RANK_Z = 1) NORM
			 ON NORM.PERIOD_BUDGET = STR.PERIOD_BUDGET
			 AND NORM.BA_CODE = STR.BA_CODE
			 AND NORM.AFD_CODE = STR.AFD_CODE
			 AND NORM.ACTIVITY_GROUP = STR.GROUP01_DESC
			 AND NORM.ACTIVITY_CODE = STR.ACTIVITY_CODE
			 LEFT JOIN ( 
            SELECT PERIOD_BUDGET,
                  BA_CODE,
                  ACTIVITY_CODE,
                  RP_HA_INTERNAL
             FROM (SELECT RANK ()
                             OVER (
                                PARTITION BY PERIOD_BUDGET,
                                             BA_CODE,
                                             ACTIVITY_CODE
                                ORDER BY BACOUNT DESC, PRIORITY ASC)
                             RANK_Z,
                          PRIORITY,
                          BACOUNT,
                          PERIOD_BUDGET,
                          BA_CODE,
                          ACTIVITY_CODE,
                          RP_HA_INTERNAL
                     FROM (  SELECT BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE,
                                    SUM (RP_HA_INTERNAL) RP_HA_INTERNAL
                               FROM (SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '1' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '2' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY =
                                                     HS.TOPOGRAPHY
                                               AND TB.LAND_TYPE = 'ALL'
                                     UNION ALL
                                     -- INI BUAT YANG TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '3' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = HS.LAND_TYPE
                                     UNION ALL
                                     -- INI BUAT YANG LAND TYPE DAN TOPOGRAPHY NYA ALL
                                     SELECT HS.BACOUNT,
                                            HS.PERIOD_BUDGET,
                                            HS.BA_CODE,
                                            TB.ACTIVITY_CODE,
                                            TB.ACTIVITY_CLASS,
                                            TB.LAND_TYPE,
                                            TB.TOPOGRAPHY,
                                            TB.COST_ELEMENT,
                                            TB.RP_HA_INTERNAL,
                                            '4' AS PRIORITY
                                       FROM    (  SELECT COUNT (BA_CODE) BACOUNT,
                                                         PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE
                                                    FROM TM_HECTARE_STATEMENT
                                                   WHERE 1 = 1
                                                         $xwhere
                                                         AND MATURITY_STAGE_SMS2 = 'TM'
                                                GROUP BY PERIOD_BUDGET,
                                                         BA_CODE,
                                                         MATURITY_STAGE_SMS2,
                                                         TOPOGRAPHY,
                                                         LAND_TYPE) HS
                                            LEFT JOIN
                                               TN_INFRASTRUKTUR TB
                                            ON TB.BA_CODE = HS.BA_CODE
                                               AND TB.PERIOD_BUDGET =
                                                     HS.PERIOD_BUDGET
                                               AND TB.TOPOGRAPHY = 'ALL'
                                               AND TB.LAND_TYPE = 'ALL')
                           GROUP BY BACOUNT,
                                    PRIORITY,
                                    PERIOD_BUDGET,
                                    BA_CODE,
                                    ACTIVITY_CODE
                           ORDER BY BACOUNT DESC, PRIORITY ASC)
                    WHERE RP_HA_INTERNAL IS NOT NULL)
            WHERE RANK_Z = 1) INFRA   
            ON     INFRA.PERIOD_BUDGET = STR.PERIOD_BUDGET
          AND INFRA.BA_CODE = STR.BA_CODE
          AND INFRA.ACTIVITY_CODE = STR.ACTIVITY_CODE
		";
		return $query;
	}
	
	//generate report summary estate cost
    public function reportSummaryEstateCost($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);
		
		/* ################################################### generate excel estate cost ################################################### */
		$query = $this->querySummaryEstateCostPerBa($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel summary estate cost ################################################### */
		
		return $result;
	}
	
	//generate report summary estate cost
    public function reportSummaryEstateCostAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);
		
		/* ################################################### generate excel estate cost ################################################### */
		$query = $this->querySummaryEstateCostPerAfd($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel summary estate cost ################################################### */
		
		return $result;
	}
	
	//generate module review estate cost per BA
    public function modReviewEstateCostPerBa($params = array())
    {
		$where = $select_group = $order_group = "";
		
		// ############################################# get all BA #############################################
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		$query = "
			SELECT REGION_NAME, BA_CODE
			FROM TM_ORGANIZATION
			WHERE DELETE_USER IS NULL
			$where
			ORDER BY REGION_NAME, BA_CODE
		";
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['BA_CODE'] = array(); // distinct BA
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct BA_CODE
				if (in_array($row['BA_CODE'], $result['BA_CODE']) == false) {
					array_push($result['BA_CODE'], $row['BA_CODE']);
				}
				
				$result['REGION_NAME'] = $row['REGION_NAME'];
			}
		}
		
		// ############################################# get all group + activity #############################################
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		$query = "
			SELECT 	$select_group
					MAPP.ACTIVITY_CODE,
					REPORT.ACTIVITY_DESC
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_EST_COST ALL_ACT
				WHERE 1 = 1
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			WHERE MAPP.ACTIVITY_CODE IS NOT NULL
				AND REPORT.ACTIVITY_DESC IS NOT NULL
			ORDER BY $order_group
					 MAPP.ACTIVITY_CODE
		";

		$rows = $this->_db->fetchAll("{$query}");
		
		$result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct GROUP_ACTIVITY
				if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
					array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
					
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
				}
			}
		}
		
		/* ################################################### generate excel module review estate cost ################################################### */
		$query = $this->querySummaryEstateCostPerBa($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['rp_kg'] = $row['RP_KG'];
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['BA_CODE']]['NORMA'] = $row['NORMA'];
				
				$result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
			}
		}		
		/* ################################################### generate excel module review estate cost ################################################### */
		
		return $result;
	}
	
	//generate module review estate cost per AFD
    public function modReviewEstateCostPerAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		
		// ############################################# get all AFD #############################################
		//filter period budget
		if ($params['budgetperiod'] != '') {
			$where .= "
                AND TO_CHAR(A.PERIOD_BUDGET, 'RRRR') = '".$params['budgetperiod']."'
            ";
        }
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND B.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND A.BA_CODE = '".$params['key_find']."'
            ";
        }
		$query = "
			SELECT *
			FROM (
				SELECT B.REGION_NAME, B.COMPANY_NAME, B.ESTATE_NAME, A.AFD_CODE
				FROM TM_HECTARE_STATEMENT A
				LEFT JOIN TM_ORGANIZATION B
					ON A.BA_CODE = B.BA_CODE
				WHERE A.DELETE_USER IS NULL
				$where
			)	
			GROUP BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
			ORDER BY REGION_NAME, COMPANY_NAME, ESTATE_NAME, AFD_CODE
		";
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['AFD_CODE'] = array(); // distinct BA
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct AFD_CODE
				if (in_array($row['AFD_CODE'], $result['AFD_CODE']) == false) {
					array_push($result['AFD_CODE'], $row['AFD_CODE']);
				}
				
				$result['REGION_NAME'] = $row['REGION_NAME'];
				$result['COMPANY_NAME'] = $row['COMPANY_NAME'];
				$result['ESTATE_NAME'] = $row['ESTATE_NAME'];
			}
		}
		
		// ############################################# get all group + activity #############################################
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		$query = "
			SELECT 	$select_group
					MAPP.ACTIVITY_CODE,
					REPORT.ACTIVITY_DESC
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_EST_COST ALL_ACT
				WHERE 1 = 1
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			WHERE MAPP.ACTIVITY_CODE IS NOT NULL
				AND REPORT.ACTIVITY_DESC IS NOT NULL
			ORDER BY $order_group
					 MAPP.ACTIVITY_CODE
		";
		
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['GROUP_ACTIVITY'] = array(); // distinct GROUP - ACTIVITY_CODE
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct GROUP_ACTIVITY
				if (in_array($row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE'], $result['GROUP_ACTIVITY']) == false) {
					array_push($result['GROUP_ACTIVITY'], $row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']);
					
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP01_DESC'] = $row['GROUP01_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['GROUP02_DESC'] = $row['GROUP02_DESC'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_CODE'] = $row['ACTIVITY_CODE'];
					$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['ACTIVITY_DESC'] = $row['ACTIVITY_DESC'];
				}
			}
		}
		
		/* ################################################### generate excel module review estate cost ################################################### */
		$query = $this->querySummaryEstateCostPerAfd($params);
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['rp_ha'] = $row['RP_HA_SETAHUN'];
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['rp_kg'] = $row['RP_KG'];
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']][$row['AFD_CODE']]['norma'] = $row['NORMA'];
				$result['data'][$row['GROUP01'].$row['GROUP02'].$row['ACTIVITY_CODE']]['norma'] = $row['NORMA'];
				
				$result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
			}
		}		
		/* ################################################### generate excel module review estate cost ################################################### */
		
		return $result;
	}
	
	//generate report CAPEX
    public function reportCapex($params = array())
    {
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel report CAPEX ################################################### */
		$where = $where1 = $where2 = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where1 .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where1 .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where2 .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where2 .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
			$where .= "
                AND RKT.BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT 	TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') PERIOD_BUDGET,
					rkt.BA_CODE,
					rkt.COA_CODE,
					rkt.COA_DESC,
					aset.DESCRIPTION AS ASSET_DESC,
					(SUM(rkt.DIS_JAN) + SUM(rkt.DIS_FEB) + SUM(rkt.DIS_MAR) +
					 SUM(rkt.DIS_APR) + SUM(rkt.DIS_MAY) + SUM(rkt.DIS_JUN) +
					 SUM(rkt.DIS_JUL) + SUM(rkt.DIS_AUG) + SUM(rkt.DIS_SEP) +
					 SUM(rkt.DIS_OCT) + SUM(rkt.DIS_NOV) + SUM(rkt.DIS_DEC)) AS DIS_TAHUN_BERJALAN,
					SUM(rkt.DIS_JAN) DIS_JAN,
					SUM(rkt.DIS_FEB) DIS_FEB,
					SUM(rkt.DIS_MAR) DIS_MAR,
					SUM(rkt.DIS_APR) DIS_APR,
					SUM(rkt.DIS_MAY) DIS_MAY,
					SUM(rkt.DIS_JUN) DIS_JUN,
					SUM(rkt.DIS_JUL) DIS_JUL,
					SUM(rkt.DIS_AUG) DIS_AUG,
					SUM(rkt.DIS_SEP) DIS_SEP,
					SUM(rkt.DIS_OCT) DIS_OCT,
					SUM(rkt.DIS_NOV) DIS_NOV,
					SUM(rkt.DIS_DEC) DIS_DEC,
					(SUM(NVL(rkt.DIS_BIAYA_JAN,0)) + SUM(NVL(rkt.DIS_BIAYA_FEB,0)) + SUM(NVL(rkt.DIS_BIAYA_MAR,0)) +
					 SUM(NVL(rkt.DIS_BIAYA_APR,0)) + SUM(NVL(rkt.DIS_BIAYA_MAY,0)) + SUM(NVL(rkt.DIS_BIAYA_JUN,0)) +
					 SUM(NVL(rkt.DIS_BIAYA_JUL,0)) + SUM(NVL(rkt.DIS_BIAYA_AUG,0)) + SUM(NVL(rkt.DIS_BIAYA_SEP,0)) +
					 SUM(NVL(rkt.DIS_BIAYA_OCT,0)) + SUM(NVL(rkt.DIS_BIAYA_NOV,0)) + SUM(NVL(rkt.DIS_BIAYA_DEC,0))) AS DIS_BIAYA_TOTAL,
				    SUM(NVL(rkt.DIS_BIAYA_JAN,0)) DIS_BIAYA_JAN,
				    SUM(NVL(rkt.DIS_BIAYA_FEB,0)) DIS_BIAYA_FEB,
					SUM(NVL(rkt.DIS_BIAYA_MAR,0)) DIS_BIAYA_MAR,
					SUM(NVL(rkt.DIS_BIAYA_APR,0)) DIS_BIAYA_APR,
					SUM(NVL(rkt.DIS_BIAYA_MAY,0)) DIS_BIAYA_MAY,
					SUM(NVL(rkt.DIS_BIAYA_JUN,0)) DIS_BIAYA_JUN,
					SUM(NVL(rkt.DIS_BIAYA_JUL,0)) DIS_BIAYA_JUL,
					SUM(NVL(rkt.DIS_BIAYA_AUG,0)) DIS_BIAYA_AUG,
					SUM(NVL(rkt.DIS_BIAYA_SEP,0)) DIS_BIAYA_SEP,
					SUM(NVL(rkt.DIS_BIAYA_OCT,0)) DIS_BIAYA_OCT,
					SUM(NVL(rkt.DIS_BIAYA_NOV,0)) DIS_BIAYA_NOV,
					SUM(NVL(rkt.DIS_BIAYA_DEC,0)) DIS_BIAYA_DEC
			FROM (  
				-- DARI RKT CAPEX
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.COA_CODE,
						UPPER(coa.DESCRIPTION) COA_DESC,
						RKT.ASSET_CODE,
						SUM (RKT.DIS_JAN) DIS_JAN,
						SUM (RKT.DIS_FEB) DIS_FEB,
						SUM (RKT.DIS_MAR) DIS_MAR,
						SUM (RKT.DIS_APR) DIS_APR,
						SUM (RKT.DIS_MAY) DIS_MAY,
						SUM (RKT.DIS_JUN) DIS_JUN,
						SUM (RKT.DIS_JUL) DIS_JUL,
						SUM (RKT.DIS_AUG) DIS_AUG,
						SUM (RKT.DIS_SEP) DIS_SEP,
						SUM (RKT.DIS_OCT) DIS_OCT,
						SUM (RKT.DIS_NOV) DIS_NOV,
						SUM (RKT.DIS_DEC) DIS_DEC,
						SUM (RKT.DIS_BIAYA_JAN) DIS_BIAYA_JAN,
						SUM (RKT.DIS_BIAYA_FEB) DIS_BIAYA_FEB,
						SUM (RKT.DIS_BIAYA_MAR) DIS_BIAYA_MAR,
						SUM (RKT.DIS_BIAYA_APR) DIS_BIAYA_APR,
						SUM (RKT.DIS_BIAYA_MAY) DIS_BIAYA_MAY,
						SUM (RKT.DIS_BIAYA_JUN) DIS_BIAYA_JUN,
						SUM (RKT.DIS_BIAYA_JUL) DIS_BIAYA_JUL,
						SUM (RKT.DIS_BIAYA_AUG) DIS_BIAYA_AUG,
						SUM (RKT.DIS_BIAYA_SEP) DIS_BIAYA_SEP,
						SUM (RKT.DIS_BIAYA_OCT) DIS_BIAYA_OCT,
						SUM (RKT.DIS_BIAYA_NOV) DIS_BIAYA_NOV,
						SUM (RKT.DIS_BIAYA_DEC) DIS_BIAYA_DEC
				FROM TR_RKT_CAPEX RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_COA coa
					ON RKT.COA_CODE = coa.COA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				GROUP BY RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.COA_CODE,
						UPPER(coa.DESCRIPTION),
						RKT.ASSET_CODE
				UNION ALL
				-- BIAYA UMUM UNTUK COA 1212010101
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.COA_CODE,
						UPPER(coa.DESCRIPTION) COA_DESC,
						'' ASSET_CODE,
						0 DIS_JAN,
						0 DIS_FEB,
						0 DIS_MAR,
						0 DIS_APR,
						0 DIS_MAY,
						0 DIS_JUN,
						0 DIS_JUL,
						0 DIS_AUG,
						0 DIS_SEP,
						0 DIS_OCT,
						0 DIS_NOV,
						0 DIS_DEC,
						SUM (RKT.COST_JAN) DIS_BIAYA_JAN,
						SUM (RKT.COST_FEB) DIS_BIAYA_FEB,
						SUM (RKT.COST_MAR) DIS_BIAYA_MAR,
						SUM (RKT.COST_APR) DIS_BIAYA_APR,
						SUM (RKT.COST_MAY) DIS_BIAYA_MAY,
						SUM (RKT.COST_JUN) DIS_BIAYA_JUN,
						SUM (RKT.COST_JUL) DIS_BIAYA_JUL,
						SUM (RKT.COST_AUG) DIS_BIAYA_AUG,
						SUM (RKT.COST_SEP) DIS_BIAYA_SEP,
						SUM (RKT.COST_OCT) DIS_BIAYA_OCT,
						SUM (RKT.COST_NOV) DIS_BIAYA_NOV,
						SUM (RKT.COST_DEC) DIS_BIAYA_DEC
				FROM V_TOTAL_RELATION_COST RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				LEFT JOIN TM_COA coa
					ON RKT.COA_CODE = coa.COA_CODE	
				WHERE RKT.COA_CODE = '1212010101'
					$where
				GROUP BY RKT.PERIOD_BUDGET,
					ORG.REGION_CODE,
					RKT.BA_CODE,
					RKT.COA_CODE,
					UPPER(coa.DESCRIPTION)
				UNION ALL
				-- RKT PERKERASAN JALAN : SMS 1 = TM & JENIS = BARU & BUKAN PERKERASAN JALAN NEGARA
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.ACTIVITY_CODE COA_CODE,
						ACT.DESCRIPTION COA_DESC,
						'' ASSET_CODE,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.COST_JAN,
						RKT.COST_FEB,
						RKT.COST_MAR,
						RKT.COST_APR,
						RKT.COST_MAY,
						RKT.COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC
				FROM TR_RKT_PK RKT
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS1 = 'TM'
					AND RKT.JENIS_PEKERJAAN = 'BARU'
					AND RKT.ACTIVITY_CODE NOT IN ('10470')
					$where
				UNION ALL
				-- RKT PERKERASAN JALAN : SMS 2 = TM & JENIS = BARU & BUKAN PERKERASAN JALAN NEGARA
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.ACTIVITY_CODE COA_CODE,
						ACT.DESCRIPTION COA_DESC,
						'' ASSET_CODE,
						0 QTY_JAN,
						0 QTY_FEB,
						0 QTY_MAR,
						0 QTY_APR,
						0 QTY_MAY,
						0 QTY_JUN,
						RKT.PLAN_JUL QTY_JUL,
						RKT.PLAN_AUG QTY_AUG,
						RKT.PLAN_SEP QTY_SEP,
						RKT.PLAN_OCT QTY_OCT,
						RKT.PLAN_NOV QTY_NOV,
						RKT.PLAN_DEC QTY_DEC,
						0 COST_JAN,
						0 COST_FEB,
						0 COST_MAR,
						0 COST_APR,
						0 COST_MAY,
						0 COST_JUN,
						RKT.COST_JUL,
						RKT.COST_AUG,
						RKT.COST_SEP,
						RKT.COST_OCT,
						RKT.COST_NOV,
						RKT.COST_DEC
				FROM TR_RKT_PK RKT
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.MATURITY_STAGE_SMS2 = 'TM'
					AND RKT.JENIS_PEKERJAAN = 'BARU'
					AND RKT.ACTIVITY_CODE NOT IN ('10470')
					$where
				UNION ALL
				-- RKT PERKERASAN JALAN : PERKERASAN JALAN NEGARA
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						RKT.ACTIVITY_CODE COA_CODE,
						ACT.DESCRIPTION COA_DESC,
						'' ASSET_CODE,
						RKT.PLAN_JAN QTY_JAN,
						RKT.PLAN_FEB QTY_FEB,
						RKT.PLAN_MAR QTY_MAR,
						RKT.PLAN_APR QTY_APR,
						RKT.PLAN_MAY QTY_MAY,
						RKT.PLAN_JUN QTY_JUN,
						0 QTY_JUL,
						0 QTY_AUG,
						0 QTY_SEP,
						0 QTY_OCT,
						0 QTY_NOV,
						0 QTY_DEC,
						RKT.COST_JAN,
						RKT.COST_FEB,
						RKT.COST_MAR,
						RKT.COST_APR,
						RKT.COST_MAY,
						RKT.COST_JUN,
						0 COST_JUL,
						0 COST_AUG,
						0 COST_SEP,
						0 COST_OCT,
						0 COST_NOV,
						0 COST_DEC
				FROM TR_RKT_PK RKT
				LEFT JOIN TM_ACTIVITY ACT
					ON ACT.ACTIVITY_CODE = RKT.ACTIVITY_CODE
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					AND RKT.ACTIVITY_CODE IN ('10470')
					$where
				UNION ALL 
				-- UNTUK RKT001, RKT002, RKT003, RKT004 YG INFRASTRUKTUR
				SELECT 	ALL_ACT.PERIOD_BUDGET,
						ALL_ACT.REGION_CODE,
                        ALL_ACT.BA_CODE,
                        ALL_ACT.ACTIVITY_CODE COA_CODE,
                        ALL_ACT.ACTIVITY_DESC COA_DESC,
                        '' ASSET_CODE,
                        MAX(NVL (report.QTY_JAN, 0)) QTY_JAN,
                        MAX(NVL (report.QTY_FEB, 0)) QTY_FEB,
                        MAX(NVL (report.QTY_MAR, 0)) QTY_MAR,
                        MAX(NVL (report.QTY_APR, 0)) QTY_APR,
                        MAX(NVL (report.QTY_MAY, 0)) QTY_MAY,
                        MAX(NVL (report.QTY_JUN, 0)) QTY_JUN,
                        MAX(NVL (report.QTY_JUL, 0)) QTY_JUL,
                        MAX(NVL (report.QTY_AUG, 0)) QTY_AUG,
                        MAX(NVL (report.QTY_SEP, 0)) QTY_SEP,
                        MAX(NVL (report.QTY_OCT, 0)) QTY_OCT,
                        MAX(NVL (report.QTY_NOV, 0)) QTY_NOV,
                        MAX(NVL (report.QTY_DEC, 0)) QTY_DEC,
                        SUM(NVL (report.COST_JAN, 0)) COST_JAN,
                        SUM(NVL (report.COST_FEB, 0)) COST_FEB,
                        SUM(NVL (report.COST_MAR, 0)) COST_MAR,
                        SUM(NVL (report.COST_APR, 0)) COST_APR,
                        SUM(NVL (report.COST_MAY, 0)) COST_MAY,
                        SUM(NVL (report.COST_JUN, 0)) COST_JUN,
                        SUM(NVL (report.COST_JUL, 0)) COST_JUL,
                        SUM(NVL (report.COST_AUG, 0)) COST_AUG,
                        SUM(NVL (report.COST_SEP, 0)) COST_SEP,
                        SUM(NVL (report.COST_OCT, 0)) COST_OCT,
                        SUM(NVL (report.COST_NOV, 0)) COST_NOV,
                        SUM(NVL (report.COST_DEC, 0)) COST_DEC
				FROM (
					SELECT 	PERIOD.PERIOD_BUDGET,
							ORG.REGION_CODE,
							ORG.BA_CODE,
							ACT.ACTIVITY_CODE,
							ACT.DESCRIPTION AS ACTIVITY_DESC
					FROM (
						SELECT PERIOD_BUDGET
						FROM TM_PERIOD 
						WHERE 1 = 1
						$where1
					) PERIOD
					LEFT JOIN (
						SELECT REGION_CODE, BA_CODE, COMPANY_NAME
						FROM TM_ORGANIZATION
						WHERE 1 = 1
						$where2
					) ORG
						ON PERIOD.PERIOD_BUDGET IS NOT NULL
					LEFT JOIN (
						SELECT ACTIVITY_CODE, ACTIVITY_GROUP_TYPE_CODE, ACTIVITY_GROUP_TYPE, UI_RKT_CODE
						FROM TM_ACTIVITY_MAPPING
						WHERE UI_RKT_CODE IN ('RKT001', 'RKT002', 'RKT003', 'RKT004')
							AND ACTIVITY_GROUP_TYPE_CODE = 'INFRASTRUKTUR'
							AND ACTIVITY_CODE NOT IN ('42800', '42900', '43000', '43001', '43002', '43003')
					) MAPPING_ACT
						ON MAPPING_ACT.ACTIVITY_CODE IS NOT NULL
					LEFT JOIN TM_ACTIVITY ACT
						ON MAPPING_ACT.ACTIVITY_CODE = ACT.ACTIVITY_CODE
				) ALL_ACT
                LEFT JOIN TMP_RPT_EST_COST report
                    ON ALL_ACT.PERIOD_BUDGET = report.PERIOD_BUDGET
                    AND ALL_ACT.BA_CODE = report.BA_CODE
                    AND ALL_ACT.ACTIVITY_CODE = report.ACTIVITY_CODE
                    AND report.TIPE_TRANSAKSI = '02_BIAYA_RAWAT_TM'
                GROUP BY ALL_ACT.PERIOD_BUDGET,
					ALL_ACT.REGION_CODE,
					ALL_ACT.BA_CODE,
					ALL_ACT.ACTIVITY_CODE,
					ALL_ACT.ACTIVITY_DESC
			) rkt
			LEFT JOIN TM_ASSET aset
				ON rkt.PERIOD_BUDGET = aset.PERIOD_BUDGET
				AND rkt.BA_CODE = aset.BA_CODE
				AND rkt.ASSET_CODE = aset.ASSET_CODE
			GROUP BY TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR'),
				rkt.BA_CODE,
				rkt.COA_CODE,
				rkt.COA_DESC,
				aset.DESCRIPTION
			ORDER BY TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR'),
				rkt.BA_CODE,
				rkt.COA_CODE,
				rkt.COA_DESC,
				aset.DESCRIPTION
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel report CAPEX ################################################### */
		
		return $result;
	}
		
	//generate report sebaran HA
    public function reportSebaranHa($params = array())
    {
		$query = "
			SELECT REPORT.*, ORG.COMPANY_NAME
			  FROM    (SELECT PERIOD_BUDGET,
							  BA_CODE,
							  TIPE_TRANSAKSI,
							  AFD_CODE,
							  SMS1_TBM0,
							  SMS1_TBM1,
							  SMS1_TBM2,
							  SMS1_TBM3,
							  SMS1_TM,
							  TOTAL_HA_SMS1,
							  SMS2_TBM0,
							  SMS2_TBM1,
							  SMS2_TBM2,
							  SMS2_TBM3,
							  SMS2_TM,
							  TOTAL_HA_SMS2,
							  (TOTAL_HA_SMS1 + TOTAL_HA_SMS2) TOTAL_HA
						 FROM V_REPORT_SEBARAN_HS report
					   UNION
					   SELECT PERIOD_BUDGET,
							  BA_CODE,
							  TIPE_TRANSAKSI,
							  SATUAN,
							  QTY_JAN,
							  QTY_FEB,
							  QTY_MAR,
							  QTY_APR,
							  QTY_MAY,
							  QTY_JUN,
							  QTY_JUL,
							  QTY_AUG,
							  QTY_SEP,
							  QTY_OCT,
							  QTY_NOV,
							  QTY_DEC,
							  QTY_SETAHUN
						 FROM V_REPORT_SEBARAN_PRODUKSI) REPORT
				   LEFT JOIN
					  TM_ORGANIZATION ORG
				   ON ORG.BA_CODE = REPORT.BA_CODE
			WHERE 1 = 1 ";
		
		if($params['budgetperiod'] != ''){
			$query .= "
                AND to_char(report.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$query .= "
                AND to_char(report.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		if($this->_siteCode <> 'ALL'){
			if ($this->_referenceRole == 'REGION_CODE')
				$query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(ORG.REGION_CODE)||'%'";
			elseif ($this->_referenceRole == 'BA_CODE')
				$query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(report.BA_CODE)||'%'";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$query .= "
                AND UPPER(ORG.REGION_CODE) = UPPER('".$params['src_region_code']."')
            ";
        }
		
		if ($params['key_find'] != '') {
			$query .= "
                AND UPPER(report.BA_CODE) LIKE UPPER('%".$params['key_find']."%') 
            ";
        }
		
		$query .= " ORDER BY report.PERIOD_BUDGET, report.BA_CODE, report.TIPE_TRANSAKSI";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		return $result;
	}
		
	//generate report vra per BA
    public function reportVraUtilisasi($params = array())
    {
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND RKT.BA_CODE = '".$params['key_find']."'
            ";
        }
	
	
		$query = "
			SELECT 	SUM_HM_KM.PERIOD_BUDGET,
					SUM_HM_KM.REGION_CODE,
					SUM_HM_KM.BA_CODE,
					SUM_HM_KM.COMPANY_NAME,
					SUM_HM_KM.VRA_CODE,
					UPPER (VRA.VRA_SUB_CAT_DESCRIPTION) AS VRA_SUB_CAT_DESCRIPTION,
					UPPER (VRA.TYPE) AS TYPE,
					NVL (SUM (SUM_HM_KM.JUMLAH_ALAT), 0) AS JUMLAH_ALAT,
					UPPER (VRA.UOM) AS UOM,
					NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) AS TOTAL_HM_KM,
					NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0) AS HM_KM_DIGUNAKAN_SENDIRI,
					NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_PINJAM), 0) AS HM_KM_DIGUNAKAN_PINJAM,
					(NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) - NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0)) AS SELISIH_HM_KM
			FROM (
				-- VRA yang dimiliki oleh BA tsb
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						ORG.COMPANY_NAME,
						RKT.VRA_CODE,
						RKT.JUMLAH_ALAT,
						RKT.TOTAL_QTY_TAHUN,
						0 TOTAL_HM_KM_SENDIRI,
						0 TOTAL_HM_KM_PINJAM
				FROM TR_RKT_VRA RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL
				-- VRA yg digunakan oleh BA tsb (bisa milik sendiri atau pinjam VRA dummy ZZ_)
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.BA_CODE,
						ORG.COMPANY_NAME,
						CASE
							WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
							THEN SUBSTR(RKT.VRA_CODE,4)
							ELSE RKT.VRA_CODE
						END AS VRA_CODE,
						0 JUMLAH_ALAT,
						0 TOTAL_QTY_TAHUN,
						CASE
							WHEN SUBSTR(RKT.VRA_CODE,1,3) <> 'ZZ_'
							THEN RKT.HM_KM
							ELSE 0
						END AS TOTAL_HM_KM_SENDIRI,
						CASE
							WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
							THEN RKT.HM_KM
							ELSE 0
						END AS TOTAL_HM_KM_PINJAM
				FROM TR_RKT_VRA_DISTRIBUSI RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
			) SUM_HM_KM 
			LEFT JOIN TM_VRA VRA
				ON SUM_HM_KM.VRA_CODE = VRA.VRA_CODE
			GROUP BY SUM_HM_KM.PERIOD_BUDGET,
				SUM_HM_KM.REGION_CODE,
				SUM_HM_KM.BA_CODE,
				SUM_HM_KM.COMPANY_NAME,
				SUM_HM_KM.VRA_CODE,
				VRA.VRA_SUB_CAT_DESCRIPTION,
				VRA.TYPE,
				VRA.UOM
			ORDER BY SUM_HM_KM.PERIOD_BUDGET, SUM_HM_KM.BA_CODE, SUM_HM_KM.VRA_CODE
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		return $result;
	}
		
	//generate report vra per region
    public function reportVraUtilisasiRegion($params = array())
    {
		// ############################################# get all BA #############################################
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		$query = "
			SELECT REGION_NAME, BA_CODE
			FROM TM_ORGANIZATION ORG
			WHERE DELETE_USER IS NULL
			$where
			ORDER BY REGION_NAME, BA_CODE
		";
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['BA_CODE'] = array(); // distinct BA
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct BA_CODE
				if (in_array($row['BA_CODE'], $result['BA_CODE']) == false) {
					array_push($result['BA_CODE'], $row['BA_CODE']);
				}
				
				$result['REGION_NAME'] = $row['REGION_NAME'];
			}
		}
		
		// ############################################# get all VRA #############################################
		$query = "
			SELECT 	SUM_HM_KM.VRA_CODE,
					UPPER (VRA.TYPE) AS TYPE,
					NVRA.RP_QTY NORMA
			FROM (
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						RKT.VRA_CODE
				FROM TR_RKT_VRA RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
				$where
				UNION ALL
				-- VRA yg digunakan oleh BA tsb (bisa milik sendiri atau pinjam VRA dummy ZZ_)
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						CASE
							WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
							THEN SUBSTR(RKT.VRA_CODE,4)
							ELSE RKT.VRA_CODE
						END AS VRA_CODE
				FROM TR_RKT_VRA_DISTRIBUSI RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
			) SUM_HM_KM
			LEFT JOIN TM_VRA VRA
				ON SUM_HM_KM.VRA_CODE = VRA.VRA_CODE
			LEFT JOIN TN_VRA_PINJAM NVRA
				ON SUM_HM_KM.PERIOD_BUDGET = NVRA.PERIOD_BUDGET
				AND SUM_HM_KM.REGION_CODE = NVRA.REGION_CODE
				AND SUM_HM_KM.VRA_CODE = SUBSTR(NVRA.VRA_CODE,4)
			GROUP BY SUM_HM_KM.VRA_CODE,
					UPPER (VRA.TYPE),
					NVRA.RP_QTY
			ORDER BY SUM_HM_KM.VRA_CODE
		";
		$rows = $this->_db->fetchAll("{$query}");
		
		$result['VRA_CODE'] = array(); // distinct VRA_CODE
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				//distinct VRA_CODE
				if (in_array($row['VRA_CODE'], $result['VRA_CODE']) == false) {
					array_push($result['VRA_CODE'], $row['VRA_CODE']);
					
					$result['data'][$row['VRA_CODE']]['VRA_CODE'] = $row['VRA_CODE'];
					$result['data'][$row['VRA_CODE']]['TYPE'] = $row['TYPE'];
					$result['data'][$row['VRA_CODE']]['NORMA'] = $row['NORMA'];
				}
			}
		}
		
		/* ################################################### generate excel ################################################### */
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(RKT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ORG.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
	
	
		$query = "
			SELECT 	SUM_HM_KM.PERIOD_BUDGET,
					SUM_HM_KM.REGION_CODE,
					SUM_HM_KM.REGION_NAME,
					SUM_HM_KM.BA_CODE,
					SUM_HM_KM.COMPANY_NAME,
					SUM_HM_KM.VRA_CODE,
					NVRA.RP_QTY NORMA,
					RPQTY.VALUE RP_QTY,
					UPPER (VRA.VRA_SUB_CAT_DESCRIPTION) AS VRA_SUB_CAT_DESCRIPTION,
					UPPER (VRA.TYPE) AS TYPE,
					NVL (SUM (SUM_HM_KM.JUMLAH_ALAT), 0) AS JUMLAH_ALAT,
					UPPER (VRA.UOM) AS UOM,
					NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) AS TOTAL_HM_KM,
					NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0) AS HM_KM_DIGUNAKAN_SENDIRI,
					NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_PINJAM), 0) AS HM_KM_DIGUNAKAN_PINJAM,
					(NVL (SUM (SUM_HM_KM.TOTAL_QTY_TAHUN), 0) - NVL (SUM (SUM_HM_KM.TOTAL_HM_KM_SENDIRI), 0)) AS SELISIH_HM_KM
			FROM (
				-- VRA yang dimiliki oleh BA tsb
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						ORG.REGION_NAME,
						RKT.BA_CODE,
						ORG.COMPANY_NAME,
						RKT.VRA_CODE,
						RKT.JUMLAH_ALAT,
						RKT.TOTAL_QTY_TAHUN,
						0 TOTAL_HM_KM_SENDIRI,
						0 TOTAL_HM_KM_PINJAM
				FROM TR_RKT_VRA RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
				UNION ALL
				-- VRA yg digunakan oleh BA tsb (bisa milik sendiri atau pinjam VRA dummy ZZ_)
				SELECT 	RKT.PERIOD_BUDGET,
						ORG.REGION_CODE,
						ORG.REGION_NAME,
						RKT.BA_CODE,
						ORG.COMPANY_NAME,
						CASE
							WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
							THEN SUBSTR(RKT.VRA_CODE,4)
							ELSE RKT.VRA_CODE
						END AS VRA_CODE,
						0 JUMLAH_ALAT,
						0 TOTAL_QTY_TAHUN,
						CASE
							WHEN SUBSTR(RKT.VRA_CODE,1,3) <> 'ZZ_'
							THEN RKT.HM_KM
							ELSE 0
						END AS TOTAL_HM_KM_SENDIRI,
						CASE
							WHEN SUBSTR(RKT.VRA_CODE,1,3) = 'ZZ_'
							THEN RKT.HM_KM
							ELSE 0
						END AS TOTAL_HM_KM_PINJAM
				FROM TR_RKT_VRA_DISTRIBUSI RKT
				LEFT JOIN TM_ORGANIZATION ORG
					ON ORG.BA_CODE = RKT.BA_CODE
				WHERE RKT.DELETE_USER IS NULL
					AND RKT.FLAG_TEMP IS NULL
					$where
			) SUM_HM_KM 
			LEFT JOIN TM_VRA VRA
				ON SUM_HM_KM.VRA_CODE = VRA.VRA_CODE
			LEFT JOIN TR_RKT_VRA_SUM RPQTY
				ON SUM_HM_KM.PERIOD_BUDGET = RPQTY.PERIOD_BUDGET
				AND SUM_HM_KM.BA_CODE = RPQTY.BA_CODE
				AND SUM_HM_KM.VRA_CODE = RPQTY.VRA_CODE
			LEFT JOIN TN_VRA_PINJAM NVRA
				ON SUM_HM_KM.PERIOD_BUDGET = NVRA.PERIOD_BUDGET
				AND SUM_HM_KM.REGION_CODE = NVRA.REGION_CODE
				AND SUM_HM_KM.VRA_CODE = SUBSTR(NVRA.VRA_CODE,4)
			GROUP BY SUM_HM_KM.PERIOD_BUDGET,
				SUM_HM_KM.REGION_CODE,
				SUM_HM_KM.REGION_NAME,
				SUM_HM_KM.BA_CODE,
				SUM_HM_KM.COMPANY_NAME,
				SUM_HM_KM.VRA_CODE,
				NVRA.RP_QTY,
				RPQTY.VALUE,
				VRA.VRA_SUB_CAT_DESCRIPTION,
				VRA.TYPE,
				VRA.UOM
			ORDER BY SUM_HM_KM.PERIOD_BUDGET, SUM_HM_KM.BA_CODE, SUM_HM_KM.VRA_CODE
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}"); 
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['data'][$row['VRA_CODE']][$row['BA_CODE']]['rp_qty'] = $row['RP_QTY'];
				$result['data'][$row['VRA_CODE']][$row['BA_CODE']]['selisih'] = $row['SELISIH_HM_KM'];
				
				$result['PERIOD_BUDGET'] = $row['PERIOD_BUDGET'];
			}
		}
		/* ################################################### generate excel ################################################### */
		
		return $result;
	}
		
	//generate module review produksi per AFD
    public function modReviewProduksiPerAfd($params = array())
    {
		/* ################################################### generate excel ################################################### */
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(A.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}
		
		//filter region
		if($params['src_region_code'] != ''){
			$where .= "
                AND B.REGION_CODE = '".$params['src_region_code']."'
            ";
		}
		
		//filter BA
		if($params['key_find'] != ''){
			$where .= "
                AND A.BA_CODE = '".$params['key_find']."'
            ";
		}
		
		$query = "
			SELECT 	A.PERIOD_BUDGET,
					B.REGION_CODE,
					B.REGION_NAME,
					B.COMPANY_CODE,
					B.COMPANY_NAME,
					A.BA_CODE,
					B.ESTATE_NAME,
					A.AFD_CODE,
					SUM(A.HA_SMS2) as HA_PANEN,
					SUM(A.POKOK_SMS2) as POKOK_PANEN,
					CASE
						WHEN NVL(SUM(A.HA_SMS2),0) = 0
						THEN 0
						ELSE ROUND( SUM(A.POKOK_SMS2) / SUM(A.HA_SMS2) )
					END as SPH_PANEN,
					SUM(A.YPH_PROFILE) as YIELD_PROFILE_YPH,
					SUM(A.TON_PROFILE) as YIELD_PROFILE_TON,
					SUM(A.YPH_PROPORTION) as POTENSI_YPH,
					SUM(A.TON_PROPORTION) as POTENSI_TON,
					SUM(A.YPH_BUDGET) as BUDGET_YPH,
					SUM(A.TON_BUDGET) as BUDGET_TON,
					CASE
						WHEN NVL(SUM(A.YPH_PROPORTION),0) = 0
						THEN 0
						ELSE SUM(A.YPH_BUDGET) / SUM(A.YPH_PROPORTION) * 100
					END VAR_YPH,
					CASE
						WHEN NVL(SUM(A.TON_PROPORTION),0) = 0
						THEN 0
						ELSE SUM(A.TON_BUDGET) / SUM(A.TON_PROPORTION) * 100
					END VAR_TON
			FROM TR_PRODUKSI_PERIODE_BUDGET A
			LEFT JOIN TM_ORGANIZATION B
				ON A.BA_CODE = B.BA_CODE
			WHERE A.DELETE_TIME IS NULL
				$where
			GROUP BY A.PERIOD_BUDGET,
				B.REGION_CODE,
				B.REGION_NAME,
				B.COMPANY_CODE,
				B.COMPANY_NAME,
				A.BA_CODE,
				B.ESTATE_NAME,
				A.AFD_CODE
			ORDER BY 1,2,4,6,8
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}"); 
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel ################################################### */
		
		return $result;
	}
		
	//generate module review produksi per BA
    public function modReviewProduksiPerBa($params = array())
    {
		/* ################################################### generate excel ################################################### */
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(A.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}
		
		//filter region
		if($params['src_region_code'] != ''){
			$where .= "
                AND B.REGION_CODE = '".$params['src_region_code']."'
            ";
		}
		
		$query = "
			SELECT 	A.PERIOD_BUDGET,
					B.REGION_CODE,
					B.REGION_NAME,
					B.COMPANY_CODE,
					B.COMPANY_NAME,
					A.BA_CODE,
					B.ESTATE_NAME,
					SUM(A.HA_SMS2) as HA_PANEN,
					SUM(A.POKOK_SMS2) as POKOK_PANEN,
					CASE
						WHEN NVL(SUM(A.HA_SMS2),0) = 0
						THEN 0
						ELSE ROUND( SUM(A.POKOK_SMS2) / SUM(A.HA_SMS2) )
					END as SPH_PANEN,
					SUM(A.YPH_PROFILE) as YIELD_PROFILE_YPH,
					SUM(A.TON_PROFILE) as YIELD_PROFILE_TON,
					SUM(A.YPH_PROPORTION) as POTENSI_YPH,
					SUM(A.TON_PROPORTION) as POTENSI_TON,
					SUM(A.YPH_BUDGET) as BUDGET_YPH,
					SUM(A.TON_BUDGET) as BUDGET_TON,
					CASE
						WHEN NVL(SUM(A.YPH_PROPORTION),0) = 0
						THEN 0
						ELSE SUM(A.YPH_BUDGET) / SUM(A.YPH_PROPORTION) * 100
					END VAR_YPH,
					CASE
						WHEN NVL(SUM(A.TON_PROPORTION),0) = 0
						THEN 0
						ELSE SUM(A.TON_BUDGET) / SUM(A.TON_PROPORTION) * 100
					END VAR_TON
			FROM TR_PRODUKSI_PERIODE_BUDGET A
			LEFT JOIN TM_ORGANIZATION B
				ON A.BA_CODE = B.BA_CODE
			WHERE A.DELETE_TIME IS NULL
				$where
			GROUP BY A.PERIOD_BUDGET,
				B.REGION_CODE,
				B.REGION_NAME,
				B.COMPANY_CODE,
				B.COMPANY_NAME,
				A.BA_CODE,
				B.ESTATE_NAME
			ORDER BY 1,2,4,6
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}"); 
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel ################################################### */
		
		return $result;
	}
		
	//generate module review produksi per region
    public function modReviewProduksiPerRegion($params = array())
    {
		/* ################################################### generate excel ################################################### */
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(A.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}
		
		$query = "
			SELECT 	A.PERIOD_BUDGET,
					B.REGION_CODE,
					B.REGION_NAME,
					SUM(A.HA_SMS2) as HA_PANEN,
					SUM(A.POKOK_SMS2) as POKOK_PANEN,
					CASE
						WHEN NVL(SUM(A.HA_SMS2),0) = 0
						THEN 0
						ELSE ROUND( SUM(A.POKOK_SMS2) / SUM(A.HA_SMS2) )
					END as SPH_PANEN,
					SUM(A.YPH_PROFILE) as YIELD_PROFILE_YPH,
					SUM(A.TON_PROFILE) as YIELD_PROFILE_TON,
					SUM(A.YPH_PROPORTION) as POTENSI_YPH,
					SUM(A.TON_PROPORTION) as POTENSI_TON,
					SUM(A.YPH_BUDGET) as BUDGET_YPH,
					SUM(A.TON_BUDGET) as BUDGET_TON,
					CASE
						WHEN NVL(SUM(A.YPH_PROPORTION),0) = 0
						THEN 0
						ELSE SUM(A.YPH_BUDGET) / SUM(A.YPH_PROPORTION) * 100
					END VAR_YPH,
					CASE
						WHEN NVL(SUM(A.TON_PROPORTION),0) = 0
						THEN 0
						ELSE SUM(A.TON_BUDGET) / SUM(A.TON_PROPORTION) * 100
					END VAR_TON
			FROM TR_PRODUKSI_PERIODE_BUDGET A
			LEFT JOIN TM_ORGANIZATION B
				ON A.BA_CODE = B.BA_CODE
			WHERE A.DELETE_TIME IS NULL
				$where
			GROUP BY A.PERIOD_BUDGET,
				B.REGION_CODE,
				B.REGION_NAME
			ORDER BY 1,2
		";

		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}"); 
		
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel ################################################### */
		
		return $result;
	}
	
	//get last generate date
    public function getLastGenerate($params = array())
    {
		$where = "";
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
	
	
		$query = "
			SELECT 	MAX(INSERT_USER) INSERT_USER,
					TO_CHAR( MAX(INSERT_TIME), 'DD-MM-RRRR HH24:MI:SS') INSERT_TIME
			FROM (
				SELECT 	MAX(INSERT_USER) INSERT_USER,
						MAX(INSERT_TIME) INSERT_TIME
				FROM TMP_RPT_DEV_COST
				WHERE 1 = 1
				$where
				UNION ALL
				SELECT 	MAX(INSERT_USER) INSERT_USER,
						MAX(INSERT_TIME) INSERT_TIME
				FROM TMP_RPT_EST_COST
				WHERE 1 = 1
				$where
			)
		";
		
		$result = $this->_db->fetchRow("{$query}");
		
		return $result;
	}
	
	//generate report development cost
    public function reportHkDevelopmentCost($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel report hk development cost ################################################### */
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(ALL_ACT.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND ALL_ACT.REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND ALL_ACT.BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT 	$select_group
					REPORT.*,
					ORG.ESTATE_NAME, 
					(SELECT SUM(CEK.RP_HK) 
						FROM TR_RKT_CHECKROLL_SUM CEK 
						LEFT JOIN TN_BIAYA B ON B.SUB_COST_ELEMENT = CEK.JOB_CODE
						WHERE B.COST_ELEMENT='LABOUR' AND 
						B.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND B.BA_CODE = REPORT.BA_CODE AND
						CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE 
						AND B.ACTIVITY_CODE=REPORT.ACTIVITY_CODE
						AND B.ACTIVITY_GROUP = REPORT.TIPE_TRANSAKSI
					) RP_HK ,
					
					( SELECT HKE
						FROM TM_CHECKROLL_HK CEK
						WHERE CEK.EMPLOYEE_STATUS='KT' AND 
						CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE
					) HKE
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '01.00.00.00.00' -- development cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_DEV_COST ALL_ACT
				WHERE 1 = 1 
				$where
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			LEFT JOIN TM_ORGANIZATION ORG
				ON ORG.BA_CODE = REPORT.BA_CODE
			WHERE REPORT.ACTIVITY_CODE IS NOT NULL
			ORDER BY REPORT.PERIOD_BUDGET,
					 REPORT.BA_CODE,
					 $order_group
					 REPORT.ACTIVITY_CODE,
					 REPORT.COST_ELEMENT,
					 REPORT.KETERANGAN
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}		
		/* ################################################### generate excel report hk development cost ################################################### */
		
		return $result;
	}
	
	//generate report HK Estate cost
    public function reportHkEstateCost($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel hk estate cost ################################################### */
		//cari jumlah group report
		$query = "
			SELECT MAX(LVL) - 1
			FROM (
				SELECT 	GROUP_CODE, 
					CONNECT_BY_ISCYCLE \"CYCLE\",
					LEVEL as LVL, 
					SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
			FROM TM_RPT_MAPPING_ACT
			WHERE level > 1
			START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
			CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
			)
		";
		$result['max_group'] = $this->_db->fetchOne($query);

		for ($i = 1 ; $i <= $result['max_group'] ; $i++){
			$select_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
				(SELECT DESCRIPTION FROM TM_RPT_GROUP WHERE GROUP_CODE = STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).") AS GROUP".str_pad($i,2,'0',STR_PAD_LEFT)."_DESC,
			";
			$order_group .= "
				STRUKTUR_REPORT.GROUP".str_pad($i,2,'0',STR_PAD_LEFT).",
			";
		}
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			SELECT 	$select_group
					REPORT.*,
					ORG.ESTATE_NAME, 
					-- get all rkt_panen
					(
						SELECT SUM(BIAYA_PEMANEN_HK)
							FROM TR_RKT_PANEN panen
						LEFT JOIN TM_ACTIVITY activity 
							ON panen.ACTIVITY_CODE = activity.ACTIVITY_CODE
						WHERE panen.DELETE_USER IS NULL AND
						panen.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						panen.BA_CODE = REPORT.BA_CODE 
					) HK_PANEN,
					-- get sebaran perencaan produksi
					(
						SELECT 
						(
							SUM(JAN) + SUM(FEB) + SUM(MAR) + SUM(APR) + SUM(MAY) +
							SUM(JUN) + SUM(JUL) + SUM(AUG) + SUM(SEP) + SUM(OCT) + 
							SUM (NOV) + SUM(DEC)
						)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) TOTAL_COST_PERTAHUN,
						
					(
						SELECT SUM(JAN)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_JAN,
					(
						SELECT SUM(FEB)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_FEB,
					(
						SELECT SUM(MAR)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_MAR,
					(
						SELECT SUM(APR)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_APR,
					(
						SELECT SUM(MAY)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_MAY,
					(
						SELECT SUM(JUN)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_JUN,
					(
						SELECT SUM(JUL)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_JUL,
					(
						SELECT SUM(AUG)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_AUG,
					(
						SELECT SUM(SEP)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_SEP,
					(
						SELECT SUM(OCT)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_OCT,
					(
						SELECT SUM(NOV)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_NOV,
					(
						SELECT SUM(DEC)
						FROM TR_PRODUKSI_PERIODE_BUDGET norma
						LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
							ON norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
							AND norma.BA_CODE = thn_berjalan.BA_CODE
							AND norma.AFD_CODE = thn_berjalan.AFD_CODE
							AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
						LEFT JOIN TM_ORGANIZATION ORG
							ON norma.BA_CODE = ORG.BA_CODE
						WHERE norma.DELETE_USER IS NULL AND
						norma.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND 
						norma.BA_CODE = REPORT.BA_CODE 
					) PEREN_COST_DEC,
					
					(
					SELECT SUM(CEK.RP_HK) 
						FROM TR_RKT_CHECKROLL_SUM CEK 
						LEFT JOIN TN_BIAYA B ON B.SUB_COST_ELEMENT = CEK.JOB_CODE
						WHERE B.COST_ELEMENT='LABOUR' AND 
						B.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND B.BA_CODE = REPORT.BA_CODE AND
						CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE 
						AND B.ACTIVITY_CODE=REPORT.ACTIVITY_CODE
						AND B.ACTIVITY_GROUP = REPORT.TIPE_TRANSAKSI
					) RP_HK ,
					
					( SELECT SUM(HKE)/2
						FROM TM_CHECKROLL_HK CEK
						WHERE  
						CEK.PERIOD_BUDGET = REPORT.PERIOD_BUDGET AND CEK.BA_CODE = REPORT.BA_CODE
					) HKE
					
					
			FROM (
				SELECT 	CASE
							WHEN INSTR(HIRARKI, '/',1, 2) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 2)+1, INSTR(HIRARKI, '/',1, 2) - 2) 
							ELSE NULL
						END GROUP01,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 3) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 3)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP02,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 4) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 4)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP03,
						CASE
							WHEN INSTR(HIRARKI, '/',1, 5) <> 0
							THEN SUBSTR(HIRARKI,  INSTR(HIRARKI, '/',1, 5)+1, INSTR(HIRARKI, '/',1, 2) - 2)
							ELSE NULL
						END GROUP04,
						GROUP_CODE
				FROM (
					SELECT 	TO_CHAR(HIRARKI)  AS HIRARKI, 
							LVL, 
							TO_CHAR(GROUP_CODE) AS GROUP_CODE
					FROM (
						SELECT 	GROUP_CODE, 
								CONNECT_BY_ISCYCLE \"CYCLE\",
								LEVEL as LVL, 
								SYS_CONNECT_BY_PATH(GROUP_CODE, '/') \"HIRARKI\"
						FROM TM_RPT_MAPPING_ACT
						WHERE level > 1
						START WITH GROUP_CODE = '02.00.00.00.00' -- estate cost
						CONNECT BY NOCYCLE PRIOR GROUP_CODE = PARENT_CODE
					)
					GROUP BY HIRARKI, LVL, GROUP_CODE
					ORDER BY HIRARKI
				)
			) STRUKTUR_REPORT
			LEFT JOIN TM_RPT_MAPPING_ACT MAPP
				ON STRUKTUR_REPORT.GROUP_CODE = MAPP.GROUP_CODE
			LEFT JOIN (
				SELECT *
				FROM TMP_RPT_EST_COST ALL_ACT
				WHERE 1 = 1
				$where
			)REPORT
				ON MAPP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI
				AND MAPP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE
				AND NVL(MAPP.COST_ELEMENT, 'NA') = NVL(REPORT.COST_ELEMENT, 'NA')
			LEFT JOIN TM_ORGANIZATION ORG
				ON ORG.BA_CODE = REPORT.BA_CODE
			WHERE REPORT.ACTIVITY_CODE IS NOT NULL
			ORDER BY REPORT.PERIOD_BUDGET,
					 REPORT.BA_CODE,
					 $order_group
					 REPORT.ACTIVITY_CODE,
					 REPORT.COST_ELEMENT,
					 REPORT.KETERANGAN
		";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel hk estate cost ################################################### */
		
		return $result;
	}
	
	//generate report Norma Pupuk TBM
    public function reportNormaPupukTbm($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel Norma Pupuk Tbm ################################################### */
		$query = "
            SELECT ROWIDTOCHAR(norma.ROWID) row_id, rownum, 
				   to_char(norma.PERIOD_BUDGET,'RRRR') PERIOD_BUDGET, 
				   norma.BA_CODE, 
				   norma.LAND_TYPE, 
				   norma.PALM_AGE, 
				   norma.MATURITY_STAGE, 
				   norma.MATERIAL_CODE, 
				   norma.ROTASI, 
				   norma.DOSIS, 
				   norma.JUMLAH,
				   norma.PRICE_ROTASI, 
				   norma.PRICE_YEAR,
				   material.MATERIAL_NAME,
				   norma_harga.PRICE,
				   norma.FLAG_TEMP
            FROM TN_PUPUK_TBM2_LESS norma
			LEFT JOIN TM_MATERIAL material
				ON material.MATERIAL_CODE = norma.MATERIAL_CODE
				AND material.PERIOD_BUDGET = norma.PERIOD_BUDGET
				AND material.BA_CODE = norma.BA_CODE
			LEFT JOIN TN_HARGA_BARANG norma_harga
				ON material.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
				AND material.BA_CODE = norma_harga.BA_CODE
				AND material.MATERIAL_CODE = norma_harga.MATERIAL_CODE
			LEFT JOIN TM_ORGANIZATION ORG
				ON norma.BA_CODE = ORG.BA_CODE
			WHERE norma.DELETE_USER IS NULL
        ";
		
		if($this->_siteCode <> 'ALL'){
			if ($this->_referenceRole == 'REGION_CODE')
				$query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(ORG.REGION_CODE)||'%'";
			elseif ($this->_referenceRole == 'BA_CODE')
				$query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(norma.BA_CODE)||'%'";
		}
		if($params['budgetperiod'] != ''){
			$query .= "
                AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}else{
			$query .= "
                AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$query .= "
                AND UPPER(ORG.REGION_CODE) LIKE UPPER('%".$params['src_region_code']."%')
            ";
        }
		
		if ($params['key_find'] != '') {
			$query .= "
                AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
            ";
        }
		
		if ($params['controller'] == 'download') {
			$params['search'] = ($params['search'] == 'AA==') ? "" : rawurldecode(base64_decode($params['search']));
		}
		
		if ($params['search'] != '') {
			$query .= "
				AND (
					UPPER(norma.PERIOD_BUDGET) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.BA_CODE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(material.MATERIAL_NAME) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma_harga.PRICE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.LAND_TYPE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.PALM_AGE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.MATURITY_STAGE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.ROTASI) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.DOSIS) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.JUMLAH) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.PRICE_ROTASI) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.PRICE_YEAR) LIKE UPPER('%".$params['search']."%')
				)
            ";
        }
		
		//untuk inheritance
		if ($params['sub_cost_element'] != '') {
			$query .= "
                AND UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['sub_cost_element']."%')
            ";
        }
		
		$query .= "
			ORDER BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.LAND_TYPE, norma.PALM_AGE
		";
		
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel Norma Pupuk Tbm ################################################### */
		
		return $result;
	}
	
	//generate report Norma Pupuk TM
    public function reportNormaPupukTm($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		/* ################################################### generate excel Norma Pupuk TM ################################################### */
		$query = "
            SELECT ROWIDTOCHAR(norma.ROWID) row_id, 
				   to_char(norma.PERIOD_BUDGET,'RRRR') PERIOD_BUDGET, 
				   norma.BA_CODE, 
				   norma.AFD_CODE,  
				   CONCAT (CONCAT (norma.BLOCK_CODE, ' - '), ha_statement.BLOCK_DESC) BLOCK_CODE,  
				   norma.JENIS_TANAM,  
				   norma.POKOK,  
				   norma.BULAN_PEMUPUKAN,  
				   norma.MATERIAL_CODE,  
				   norma.DOSIS,  
				   norma.JUMLAH,  
				   norma.BIAYA,
				   norma.HA_PUPUK,
				   material.MATERIAL_NAME,
				   norma_harga.PRICE,
				   ha_statement.HA_PLANTED,
				   to_char(ha_statement.TAHUN_TANAM,'MM.RRRR') TAHUN_TANAM,
				   to_char(ha_statement.TAHUN_TANAM,'RRRR') TAHUN_TANAM_Y,
				   to_char(ha_statement.TAHUN_TANAM,'MM') TAHUN_TANAM_M,
				   ha_statement.MATURITY_STAGE_SMS1,
				   ha_statement.MATURITY_STAGE_SMS2,
				   norma.FLAG_TEMP
            FROM TN_PUPUK_TBM2_TM norma
			LEFT JOIN TM_MATERIAL material
				ON material.MATERIAL_CODE = norma.MATERIAL_CODE
				AND material.PERIOD_BUDGET = norma.PERIOD_BUDGET
				AND material.BA_CODE = norma.BA_CODE
			LEFT JOIN TN_HARGA_BARANG norma_harga
				ON material.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
				AND material.BA_CODE = norma_harga.BA_CODE
				AND material.MATERIAL_CODE = norma_harga.MATERIAL_CODE
			LEFT JOIN TM_HECTARE_STATEMENT ha_statement
				ON norma.BA_CODE  = ha_statement.BA_CODE
				AND norma.PERIOD_BUDGET = ha_statement.PERIOD_BUDGET
				AND norma.AFD_CODE = ha_statement.AFD_CODE
				AND norma.BLOCK_CODE = ha_statement.BLOCK_CODE
			LEFT JOIN TM_ORGANIZATION ORG
				ON norma.BA_CODE = ORG.BA_CODE
			WHERE norma.DELETE_USER IS NULL
        ";
		
		if($this->_siteCode <> 'ALL'){
			if ($this->_referenceRole == 'REGION_CODE')
				$query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(ORG.REGION_CODE)||'%'";
			elseif ($this->_referenceRole == 'BA_CODE')
				$query .= "AND UPPER('".$this->_siteCode."') LIKE '%'||UPPER(norma.BA_CODE)||'%'";
		}
		if($params['budgetperiod'] != ''){
			$query .= "
                AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
		}elseif($params['PERIOD_BUDGET'] != ''){
			$query .= "
                AND to_char(norma.PERIOD_BUDGET,'RRRR') = '".$params['PERIOD_BUDGET']."'
            ";
		}else{
			$query .= "
                AND to_char(norma.PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$query .= "
                AND UPPER(ORG.REGION_CODE) LIKE UPPER('%".$params['src_region_code']."%')
            ";
        }
		
		if ($params['key_find'] != '') {
			$query .= "
                AND UPPER(norma.BA_CODE) LIKE UPPER('%".$params['key_find']."%')
            ";
        }
		
		if (($params['src_matstage_code']) && ($params['src_matstage_code'] != '0')) {
			$query .= "
                AND (
					UPPER(ha_statement.MATURITY_STAGE_SMS1) LIKE UPPER('%".$params['src_matstage_code']."%')
					OR UPPER(ha_statement.MATURITY_STAGE_SMS2) LIKE UPPER('%".$params['src_matstage_code']."%')
				)
            ";
        }
		
		if ($params['controller'] == 'download') {
			$params['search'] = ($params['search'] == 'AA==') ? "" : rawurldecode(base64_decode($params['search']));
		}
		
		if ($params['search'] != '') {
			$query .= "
				AND (
					UPPER(norma.PERIOD_BUDGET) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.BA_CODE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(material.MATERIAL_NAME) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma_harga.PRICE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.AFD_CODE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.BLOCK_CODE) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.JENIS_TANAM) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.POKOK) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.BULAN_PEMUPUKAN) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.DOSIS) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.JUMLAH) LIKE UPPER('%".$params['search']."%')
					OR UPPER(norma.BIAYA) LIKE UPPER('%".$params['search']."%')
				)
            ";
        }
		
		//untuk inheritance
		if ($params['sub_cost_element'] != '') {
			$query .= "
                AND UPPER(norma.MATERIAL_CODE) LIKE UPPER('%".$params['sub_cost_element']."%')
            ";
        }
		
		$query .= "
			ORDER BY norma.PERIOD_BUDGET, norma.BA_CODE, norma.JENIS_TANAM, norma.BULAN_PEMUPUKAN
		";
		
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel Norma Pupuk TM ################################################### */
		
		return $result;
	}
	
	//generate report Status Hitung All
    public function reportStatusHitungAll($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		
		if($params['budgetperiod'] != ''){
			$per_budg =  $params['budgetperiod'];
		}
		if ($params['key_find'] != '') {
			$ba = $params['key_find'];
        }
		/* ################################################### generate excel report Status Hitung All ################################################### */
		$query = "SELECT rownum, RPT_ALL.*
				  FROM (  -- NORMA DASAR --
						  SELECT PERIOD_BUDGET,
								 BA_CODE,
								 'NORMA' GROUP01,
								 'DASAR' GROUP02,
								 BASIC_NORMA_CODE CODE,
								 DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (UPDATE_TIME) IS NULL THEN MAX (INSERT_TIME)
									ELSE MAX (UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (PERCENT_INCREASE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_BASIC
						   WHERE     DELETE_TIME IS NULL
								 AND TO_CHAR (PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY PERIOD_BUDGET,
								 BA_CODE,
								 BASIC_NORMA_CODE,
								 DESCRIPTION
						UNION ALL
						  -- NORMA HARGA BARANG --
						  SELECT TMAT.PERIOD_BUDGET,
								 TMAT.BA_CODE,
								 'NORMA' GROUP01,
								 'HARGA BARANG' GROUP02,
								 TMAT.MATERIAL_CODE CODE,
								 TMAT.MATERIAL_NAME AKTIVITAS,
								 CASE
									WHEN MAX (THB.UPDATE_TIME) IS NULL
									THEN
									   MAX (THB.INSERT_TIME)
									ELSE
									   MAX (THB.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (THB.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM    TM_MATERIAL TMAT
								 LEFT JOIN
									TN_HARGA_BARANG THB
								 ON     THB.PERIOD_BUDGET = TMAT.PERIOD_BUDGET
									AND THB.BA_CODE = TMAT.BA_CODE
									AND THB.MATERIAL_CODE = TMAT.MATERIAL_CODE
						   WHERE     THB.DELETE_TIME IS NULL
								 AND TO_CHAR (THB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND THB.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TMAT.PERIOD_BUDGET,
								 TMAT.BA_CODE,
								 TMAT.MATERIAL_CODE,
								 TMAT.MATERIAL_NAME
						UNION ALL
						  -- NORMA HARGA BORONG --
						  SELECT THB.PERIOD_BUDGET,
								 THB.BA_CODE,
								 'NORMA' GROUP01,
								 'HARGA BORONG' GROUP02,
								 TA.ACTIVITY_CODE CODE,
								 TA.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (THB.UPDATE_TIME) IS NULL
									THEN
									   MAX (THB.INSERT_TIME)
									ELSE
									   MAX (THB.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (THB.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_ACTIVITY TA LEFT JOIN TN_HARGA_BORONG THB
									ON THB.ACTIVITY_CODE = TA.ACTIVITY_CODE
						   WHERE     THB.DELETE_TIME IS NULL
								 AND TO_CHAR (THB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND THB.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY THB.PERIOD_BUDGET,
								 THB.BA_CODE,
								 TA.ACTIVITY_CODE,
								 TA.DESCRIPTION
						UNION ALL
						  -- NORMA BIAYA --
						  SELECT TB.PERIOD_BUDGET,
								 TB.BA_CODE,
								 'NORMA' GROUP01,
								 'BIAYA' GROUP02,
								 TA.ACTIVITY_CODE CODE,
								 TA.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TB.UPDATE_TIME) IS NULL THEN MAX (TB.INSERT_TIME)
									ELSE MAX (TB.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TB.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_ACTIVITY TA LEFT JOIN TN_BIAYA TB
									ON TB.ACTIVITY_CODE = TA.ACTIVITY_CODE
						   WHERE     TB.DELETE_TIME IS NULL
								 AND TO_CHAR (TB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TB.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TB.PERIOD_BUDGET,
								 TB.BA_CODE,
								 TA.ACTIVITY_CODE,
								 TA.DESCRIPTION
						UNION ALL
						  -- NORMA PERKERASAN JALAN --
						  SELECT TPJ.PERIOD_BUDGET,
								 TPJ.BA_CODE,
								 'NORMA' GROUP01,
								 'PERKERASAN JALAN' GROUP02,
								 TA.ACTIVITY_CODE CODE,
								 TA.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TPJ.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPJ.INSERT_TIME)
									ELSE
									   MAX (TPJ.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPJ.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_ACTIVITY TA LEFT JOIN TN_PERKERASAN_JALAN TPJ
									ON TPJ.ACTIVITY_CODE = TA.ACTIVITY_CODE
						   WHERE     TPJ.DELETE_TIME IS NULL
								 AND TO_CHAR (TPJ.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPJ.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPJ.PERIOD_BUDGET,
								 TPJ.BA_CODE,
								 TA.ACTIVITY_CODE,
								 TA.DESCRIPTION
						UNION ALL
						  -- NORMA HARGA PERKERASAN JALAN --
						  SELECT TPJH.PERIOD_BUDGET,
								 TPJH.BA_CODE,
								 'NORMA' GROUP01,
								 'HARGA PERKERASAN JALAN' GROUP02,
								 TA.ACTIVITY_CODE CODE,
								 TA.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TPJH.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPJH.INSERT_TIME)
									ELSE
									   MAX (TPJH.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN (  MAX (TPJH.DT_PRICE)
										  + MAX (TPJH.EXCAV_PRICE)
										  + MAX (TPJH.COMPACTOR_PRICE)
										  + MAX (TPJH.GRADER_PRICE)) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TM_ACTIVITY TA LEFT JOIN TN_PERKERASAN_JALAN_HARGA TPJH
									ON TPJH.ACTIVITY_CODE = TA.ACTIVITY_CODE
						   WHERE     TPJH.DELETE_TIME IS NULL
								 AND TO_CHAR (TPJH.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPJH.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPJH.PERIOD_BUDGET,
								 TPJH.BA_CODE,
								 TA.ACTIVITY_CODE,
								 TA.DESCRIPTION
						UNION ALL
						  -- NORMA VRA --
						  SELECT TV.PERIOD_BUDGET,
								 TV.BA_CODE,
								 'NORMA' GROUP01,
								 'VRA' GROUP02,
								 TMV.VRA_CODE CODE,
								 TMV.TYPE AKTIVITAS,
								 CASE
									WHEN MAX (TV.UPDATE_TIME) IS NULL THEN MAX (TV.INSERT_TIME)
									ELSE MAX (TV.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TV.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_VRA TMV LEFT JOIN TN_VRA TV
									ON TMV.VRA_CODE = TV.VRA_CODE
						   WHERE     TV.DELETE_TIME IS NULL
								 AND TO_CHAR (TV.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TV.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TV.PERIOD_BUDGET,
								 TV.BA_CODE,
								 TMV.VRA_CODE,
								 TMV.TYPE
						UNION ALL
						  -- NORMA INFRASTRUKTUR --
						  SELECT TI.PERIOD_BUDGET,
								 TI.BA_CODE,
								 'NORMA' GROUP01,
								 'INFRASTRUKTUR' GROUP02,
								 TA.ACTIVITY_CODE CODE,
								 TA.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TI.UPDATE_TIME) IS NULL THEN MAX (TI.INSERT_TIME)
									ELSE MAX (TI.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TI.RP_HA_INTERNAL) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_ACTIVITY TA LEFT JOIN TN_INFRASTRUKTUR TI
									ON TI.ACTIVITY_CODE = TA.ACTIVITY_CODE
						   WHERE     TI.DELETE_TIME IS NULL
								 AND TO_CHAR (TI.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TI.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TI.PERIOD_BUDGET,
								 TI.BA_CODE,
								 TA.ACTIVITY_CODE,
								 TA.DESCRIPTION
						UNION ALL
						  -- NORMA PUPUK TM --
						  SELECT TPTM.PERIOD_BUDGET,
								 TPTM.BA_CODE,
								 'NORMA' GROUP01,
								 'PUPUK TM' GROUP02,
								 TPTM.MATERIAL_CODE CODE,
								 TM.MATERIAL_NAME AKTIVITAS,
								 CASE
									WHEN MAX (TPTM.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPTM.INSERT_TIME)
									ELSE
									   MAX (TPTM.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPTM.HARGA) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PUPUK_TBM2_TM TPTM LEFT JOIN TM_MATERIAL TM
									ON TM.MATERIAL_CODE = TPTM.MATERIAL_CODE
						   WHERE     TPTM.DELETE_TIME IS NULL
								 AND TO_CHAR (TPTM.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPTM.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPTM.PERIOD_BUDGET,
								 TPTM.BA_CODE,
								 TPTM.MATERIAL_CODE,
								 TM.MATERIAL_NAME
						UNION ALL
						  -- NORMA PUPUK TBM --
						  SELECT TPTL.PERIOD_BUDGET,
								 TPTL.BA_CODE,
								 'NORMA' GROUP01,
								 'PUPUK TBM' GROUP02,
								 TPTL.MATERIAL_CODE CODE,
								 TM.MATERIAL_NAME AKTIVITAS,
								 CASE
									WHEN MAX (TPTL.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPTL.INSERT_TIME)
									ELSE
									   MAX (TPTL.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPTL.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PUPUK_TBM2_LESS TPTL LEFT JOIN TM_MATERIAL TM
									ON TM.MATERIAL_CODE = TPTL.MATERIAL_CODE
						   WHERE     TPTL.DELETE_TIME IS NULL
								 AND TO_CHAR (TPTL.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPTL.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPTL.PERIOD_BUDGET,
								 TPTL.BA_CODE,
								 TPTL.MATERIAL_CODE,
								 TM.MATERIAL_NAME
						UNION ALL
						  -- NORMA PANEN OER BJR --
						  SELECT TPOB.PERIOD_BUDGET,
								 TPOB.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN OER BJR' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TPOB.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPOB.INSERT_TIME)
									ELSE
									   MAX (TPOB.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPOB.NILAI) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_OER_BJR TPOB
						   WHERE     TPOB.DELETE_TIME IS NULL
								 AND TO_CHAR (TPOB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPOB.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPOB.PERIOD_BUDGET,
								 TPOB.BA_CODE,
								 TPOB.PREMI_PANEN,
								 OER_MIN,
								 OER_MAX,
								 BJR_MIN,
								 BJR_MAX
						UNION ALL
						  -- NORMA PANEN PREMI MANDOR --
						  SELECT TPPM.PERIOD_BUDGET,
								 TPPM.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN PREMI MANDOR' GROUP02,
								 TPPM.PREMI_MANDOR_CODE CODE,
								 TPPM.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TPPM.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPPM.INSERT_TIME)
									ELSE
									   MAX (TPPM.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPPM.VALUE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_PREMI_MANDOR TPPM
						   WHERE     TPPM.DELETE_TIME IS NULL
								 AND TO_CHAR (TPPM.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPPM.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPPM.PERIOD_BUDGET,
								 TPPM.BA_CODE,
								 TPPM.PREMI_MANDOR_CODE,
								 TPPM.DESCRIPTION
						UNION ALL
						  -- NORMA PANEN VARIABEL --
						  SELECT TPV.PERIOD_BUDGET,
								 TPV.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN VARIABEL' GROUP02,
								 TPV.PANEN_CODE CODE,
								 TPV.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TPV.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPV.INSERT_TIME)
									ELSE
									   MAX (TPV.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPV.VALUE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_VARIABLE TPV
						   WHERE     TPV.DELETE_TIME IS NULL
								 AND TO_CHAR (TPV.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPV.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPV.PERIOD_BUDGET,
								 TPV.BA_CODE,
								 TPV.PANEN_CODE,
								 TPV.DESCRIPTION
						UNION ALL
						  -- NORMA PANEN LOADING --
						  SELECT TPL.PERIOD_BUDGET,
								 TPL.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN VARIABEL' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TPL.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPL.INSERT_TIME)
									ELSE
									   MAX (TPL.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN (MAX (TPL.RP_HK_TM) + MAX (TPL.RP_PREMI_SUPIR)) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_LOADING TPL
						   WHERE     TPL.DELETE_TIME IS NULL
								 AND TO_CHAR (TPL.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPL.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPL.PERIOD_BUDGET, TPL.BA_CODE
						UNION ALL
						  -- NORMA PANEN SUPERVISI --
						  SELECT TPS.PERIOD_BUDGET,
								 TPS.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN SUPERVISI' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TPS.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPS.INSERT_TIME)
									ELSE
									   MAX (TPS.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN (MAX (TPS.RP_KG)) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_SUPERVISI TPS
						   WHERE     TPS.DELETE_TIME IS NULL
								 AND TO_CHAR (TPS.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPS.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPS.PERIOD_BUDGET, TPS.BA_CODE
						UNION ALL
						  -- NORMA PANEN KRANI BUAH --
						  SELECT TPKB.PERIOD_BUDGET,
								 TPKB.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN KRANI BUAH' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TPKB.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPKB.INSERT_TIME)
									ELSE
									   MAX (TPKB.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN (MAX (TPKB.RP_HK)) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_KRANI_BUAH TPKB
						   WHERE     TPKB.DELETE_TIME IS NULL
								 AND TO_CHAR (TPKB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPKB.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPKB.PERIOD_BUDGET, TPKB.BA_CODE
						UNION ALL
						  -- NORMA PANEN PREMI COST UNIT --
						  SELECT TPPCU.PERIOD_BUDGET,
								 TPPCU.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN PREMI COST UNIT' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TPPCU.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPPCU.INSERT_TIME)
									ELSE
									   MAX (TPPCU.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN (MAX (TPPCU.RP_KM_INTERNAL)
										  + MAX (NVL (TPPCU.RP_KM_EXTERNAL, 0))) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_PREMI_COST_UNIT TPPCU
						   WHERE     TPPCU.DELETE_TIME IS NULL
								 AND TO_CHAR (TPPCU.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPPCU.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPPCU.PERIOD_BUDGET, TPPCU.BA_CODE
						UNION ALL
						  -- NORMA PANEN PREMI PEMANEN --
						  SELECT TPOB.PERIOD_BUDGET,
								 TPOB.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN PREMI PEMANEN' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TPOB.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPOB.INSERT_TIME)
									ELSE
									   MAX (TPOB.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPOB.PREMI_PANEN) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_OER_BJR TPOB
						   WHERE     TPOB.DELETE_TIME IS NULL
								 AND TO_CHAR (TPOB.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPOB.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPOB.PERIOD_BUDGET,
								 TPOB.BA_CODE,
								 '',
								 ''
						UNION ALL
						  -- NORMA KASTRASI SANITASI --
						  SELECT TO_DATE ('') PERIOD_BUDGET,
								 '' BA_CODE,
								 'NORMA' GROUP01,
								 'KASTRASI SANITASI' GROUP02,
								 TKS.ACTIVITY_CODE CODE,
								 TA.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TKS.UPDATE_TIME) IS NULL
									THEN
									   MAX (TKS.INSERT_TIME)
									ELSE
									   MAX (TKS.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TKS.UMUR) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_KASTRASI_SANITASI TKS LEFT JOIN TM_ACTIVITY TA
									ON TA.ACTIVITY_CODE = TKS.ACTIVITY_CODE
						   WHERE TKS.DELETE_TIME IS NULL
						GROUP BY '',
								 '',
								 TKS.ACTIVITY_CODE,
								 TA.DESCRIPTION
						UNION ALL
						  -- NORMA VRA PINJAM --
						  SELECT TO_DATE ('') PERIOD_BUDGET,
								 '' BA_CODE,
								 'NORMA' GROUP01,
								 'VRA PINJAM' GROUP02,
								 TVP.VRA_CODE CODE,
								 TV.TYPE AKTIVITAS,
								 CASE
									WHEN MAX (TVP.UPDATE_TIME) IS NULL
									THEN
									   MAX (TVP.INSERT_TIME)
									ELSE
									   MAX (TVP.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TVP.RP_QTY) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_VRA_PINJAM TVP LEFT JOIN TM_VRA TV
									ON TVP.VRA_CODE = TV.VRA_CODE
						   WHERE TVP.DELETE_TIME IS NULL
						GROUP BY TVP.VRA_CODE, TV.TYPE
						UNION ALL
						  -- NORMA PANEN PREMI TOPOGRAPHY --
						  SELECT TPPT.PERIOD_BUDGET,
								 TPPT.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN PREMI TOPOGRAPHY' GROUP02,
								 AFD_CODE CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TPPT.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPPT.INSERT_TIME)
									ELSE
									   MAX (TPPT.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPPT.PERCENTAGE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_ORGANIZATION TOR LEFT JOIN TN_PANEN_PREMI_TOPOGRAPHY TPPT
									ON TPPT.BA_CODE = TOR.BA_CODE
						   WHERE     TPPT.DELETE_TIME IS NULL
								 AND TO_CHAR (TPPT.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPPT.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPPT.PERIOD_BUDGET, TPPT.BA_CODE, TPPT.AFD_CODE
						UNION ALL
						  -- NORMA PANEN PROD PEMANEN --
						  SELECT TPV.PERIOD_BUDGET,
								 TPV.BA_CODE,
								 'NORMA' GROUP01,
								 'PANEN PROD PEMANEN' GROUP02,
								 TPV.PANEN_CODE CODE,
								 TPV.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (TPV.UPDATE_TIME) IS NULL
									THEN
									   MAX (TPV.INSERT_TIME)
									ELSE
									   MAX (TPV.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TPV.VALUE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_PANEN_VARIABLE TPV
						   WHERE     TPV.DELETE_TIME IS NULL
								 AND TPV.PANEN_CODE = 'PRO_PEMANEN'
								 AND TO_CHAR (TPV.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TPV.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TPV.PERIOD_BUDGET,
								 TPV.BA_CODE,
								 TPV.PANEN_CODE,
								 TPV.DESCRIPTION
						UNION ALL
						  -- NORMA WRA --
						  SELECT TW.PERIOD_BUDGET,
								 TW.BA_CODE,
								 'NORMA' GROUP01,
								 'WRA' GROUP02,
								 TW.SUB_WRA_GROUP CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (TW.UPDATE_TIME) IS NULL THEN MAX (TW.INSERT_TIME)
									ELSE MAX (TW.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (TW.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_WRA TW
								 LEFT JOIN TN_HARGA_BARANG norma_harga
									ON     TW.SUB_WRA_GROUP = norma_harga.MATERIAL_CODE
									   AND TW.BA_CODE = norma_harga.BA_CODE
									   AND TW.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
								 LEFT JOIN TM_MATERIAL material
									ON     TW.SUB_WRA_GROUP = material.MATERIAL_CODE
									   AND TW.BA_CODE = material.BA_CODE
									   AND TW.PERIOD_BUDGET = material.PERIOD_BUDGET
								 LEFT JOIN TM_ORGANIZATION ORG
									ON TW.BA_CODE = ORG.BA_CODE
						   WHERE     TW.DELETE_USER IS NULL
								 AND TO_CHAR (TW.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND TW.BA_CODE LIKE UPPER ('%".$ba."%')
						GROUP BY TW.PERIOD_BUDGET, TW.BA_CODE, TW.SUB_WRA_GROUP
						UNION ALL
						  -- NORMA CHECKROLL --
						  SELECT norma.PERIOD_BUDGET,
								 norma.BA_CODE,
								 'NORMA' GROUP01,
								 'WRA' GROUP02,
								 norma.JOB_CODE CODE,
								 job.JOB_DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (norma.UPDATE_TIME) IS NULL
									THEN
									   MAX (norma.INSERT_TIME)
									ELSE
									   MAX (norma.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (norma.GP) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_CHECKROLL norma
								 LEFT JOIN TM_JOB_TYPE job
									ON norma.JOB_CODE = job.JOB_CODE
								 LEFT JOIN T_PARAMETER_VALUE grupjob
									ON grupjob.PARAMETER_VALUE_CODE = job.GROUP_CHECKROLL_CODE
									   AND grupjob.PARAMETER_CODE = 'GROUP_JOB'
								 LEFT JOIN TM_ORGANIZATION ORG
									ON norma.BA_CODE = ORG.BA_CODE
						   WHERE     norma.DELETE_USER IS NULL
								 AND TO_CHAR (norma.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (norma.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY norma.PERIOD_BUDGET,
								 norma.BA_CODE,
								 norma.JOB_CODE,
								 job.JOB_DESCRIPTION
						UNION ALL
						  -- HECTARE STATEMENT --
						  SELECT A.PERIOD_BUDGET,
								 A.BA_CODE,
								 'RKT' GROUP01,
								 'HECTARE STATEMENT' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (A.UPDATE_TIME) IS NULL THEN MAX (A.INSERT_TIME)
									ELSE MAX (A.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (A.HA_PLANTED) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_HECTARE_STATEMENT A LEFT JOIN TM_ORGANIZATION B
									ON A.BA_CODE = B.BA_CODE
						   WHERE     A.DELETE_USER IS NULL
								 AND TO_CHAR (A.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (A.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY A.PERIOD_BUDGET, A.BA_CODE
						UNION ALL
						  -- HECTARE STATEMENT DETAIL --
						  SELECT A.PERIOD_BUDGET,
								 A.BA_CODE,
								 'RKT' GROUP01,
								 'HECTARE STATEMENT DETAIL' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (A.UPDATE_TIME) IS NULL THEN MAX (A.INSERT_TIME)
									ELSE MAX (A.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (A.HA) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TM_HECTARE_STATEMENT_DETAIL A
								 LEFT JOIN TM_HECTARE_STATEMENT C
									ON     A.PERIOD_BUDGET = C.PERIOD_BUDGET
									   AND A.BA_CODE = C.BA_CODE
									   AND A.BLOCK_CODE = C.BLOCK_CODE
								 LEFT JOIN TM_ORGANIZATION B
									ON A.BA_CODE = B.BA_CODE
						   WHERE     A.DELETE_USER IS NULL
								 AND TO_CHAR (A.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (A.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY A.PERIOD_BUDGET, A.BA_CODE
						UNION ALL
						  -- PERENCANAAN PRODUKSI --
						  SELECT norma.PERIOD_BUDGET,
								 norma.BA_CODE,
								 'RKT' GROUP01,
								 'PERENCANAAN PRODUKSI' GROUP02,
								 '' CODE,
								 '' AKTIVITAS,
								 CASE
									WHEN MAX (norma.UPDATE_TIME) IS NULL
									THEN
									   MAX (norma.INSERT_TIME)
									ELSE
									   MAX (norma.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (norma.JAN)
										 + MAX (norma.FEB)
										 + MAX (norma.MAR)
										 + MAX (norma.APR)
										 + MAX (norma.MAY)
										 + MAX (norma.JUN)
										 + MAX (norma.JUL)
										 + MAX (norma.AUG)
										 + MAX (norma.SEP)
										 + MAX (norma.OCT)
										 + MAX (norma.NOV)
										 + MAX (norma.DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_PRODUKSI_PERIODE_BUDGET norma
								 LEFT JOIN TR_PRODUKSI_TAHUN_BERJALAN thn_berjalan
									ON     norma.PERIOD_BUDGET = thn_berjalan.PERIOD_BUDGET
									   AND norma.BA_CODE = thn_berjalan.BA_CODE
									   AND norma.AFD_CODE = thn_berjalan.AFD_CODE
									   AND norma.BLOCK_CODE = thn_berjalan.BLOCK_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON norma.BA_CODE = ORG.BA_CODE
						   WHERE     norma.DELETE_USER IS NULL
								 AND TO_CHAR (norma.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (norma.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY norma.PERIOD_BUDGET, norma.BA_CODE
						UNION ALL
						  -- RKT CAPEX --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'CAPEX' GROUP02,
								 rkt.ASSET_CODE CODE,
								 aset.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (rkt.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT_CAPEX rkt
								 LEFT JOIN TM_COA coa
									ON rkt.COA_CODE = coa.COA_CODE
								 LEFT JOIN TM_ASSET aset
									ON     rkt.PERIOD_BUDGET = aset.PERIOD_BUDGET
									   AND rkt.BA_CODE = aset.BA_CODE
									   AND rkt.ASSET_CODE = aset.ASSET_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ASSET_CODE,
								 aset.DESCRIPTION
						UNION ALL
						  -- RKT LC --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'LC' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 act.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (rkt.COST_SETAHUN) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT_LC rkt
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
								 LEFT JOIN TM_ACTIVITY act
									ON act.ACTIVITY_CODE = rkt.ACTIVITY_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 act.DESCRIPTION
						UNION ALL
						  -- RKT TANAM MANUAL --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'TANAM MANUAL' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (rkt.TOTAL_RP_SETAHUN) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT rkt
								 LEFT JOIN TM_HECTARE_STATEMENT hs
									ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
									   AND hs.BA_CODE = rkt.BA_CODE
									   AND hs.AFD_CODE = rkt.AFD_CODE
									   AND hs.BLOCK_CODE = rkt.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'TANAM_MANUAL'
								 AND hs.STATUS = 'PROYEKSI'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT TANAM OTOMATIS --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'TANAM OTOMATIS' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (rkt.TOTAL_RP_SETAHUN) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT rkt
								 LEFT JOIN TM_HECTARE_STATEMENT hs
									ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
									   AND hs.BA_CODE = rkt.BA_CODE
									   AND hs.AFD_CODE = rkt.AFD_CODE
									   AND hs.BLOCK_CODE = rkt.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'TANAM'
								 AND hs.STATUS = 'PROYEKSI'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT PERKERASAN JALAN --
						  SELECT RKTPK.PERIOD_BUDGET,
								 RKTPK.BA_CODE,
								 'RKT' GROUP01,
								 'PERKERASAN JALAN' GROUP02,
								 RKTPK.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (RKTPK.UPDATE_TIME) IS NULL
									THEN
									   MAX (RKTPK.INSERT_TIME)
									ELSE
									   MAX (RKTPK.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (RKTPK.COST_JAN)
										 + MAX (RKTPK.COST_FEB)
										 + MAX (RKTPK.COST_MAR)
										 + MAX (RKTPK.COST_APR)
										 + MAX (RKTPK.COST_MAY)
										 + MAX (RKTPK.COST_JUN)
										 + MAX (RKTPK.COST_JUL)
										 + MAX (RKTPK.COST_AUG)
										 + MAX (RKTPK.COST_SEP)
										 + MAX (RKTPK.COST_OCT)
										 + MAX (RKTPK.COST_NOV)
										 + MAX (RKTPK.COST_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM (SELECT PK.PERIOD_BUDGET,
										 PK.BA_CODE,
										 PK.AFD_CODE,
										 PK.BLOCK_CODE,
										 PK.ACTIVITY_CODE,
										 PK.TRX_RKT_CODE,
										 PK.PLAN_JAN,
										 PK.PLAN_FEB,
										 PK.PLAN_MAR,
										 PK.PLAN_APR,
										 PK.PLAN_MAY,
										 PK.PLAN_JUN,
										 PK.PLAN_JUL,
										 PK.PLAN_AUG,
										 PK.PLAN_SEP,
										 PK.PLAN_OCT,
										 PK.PLAN_NOV,
										 PK.PLAN_DEC,
										 PK.PLAN_SETAHUN,
										 PK.PRICE_QTY,
										 PK.COST_JAN,
										 PK.COST_FEB,
										 PK.COST_MAR,
										 PK.COST_APR,
										 PK.COST_MAY,
										 PK.COST_JUN,
										 PK.COST_JUL,
										 PK.COST_AUG,
										 PK.COST_SEP,
										 PK.COST_OCT,
										 PK.COST_NOV,
										 PK.COST_DEC,
										 PK.COST_SETAHUN,
										 PK.INSERT_TIME,
										 PK.UPDATE_TIME
									FROM TR_RKT_PK PK
								   WHERE PK.DELETE_USER IS NULL) RKTPK
								 LEFT JOIN TM_HECTARE_STATEMENT HA
									ON     HA.PERIOD_BUDGET = RKTPK.PERIOD_BUDGET
									   AND HA.BA_CODE = RKTPK.BA_CODE
									   AND HA.AFD_CODE = RKTPK.AFD_CODE
									   AND HA.BLOCK_CODE = RKTPK.BLOCK_CODE
									   AND TO_CHAR (RKTPK.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
									   AND UPPER (RKTPK.BA_CODE) LIKE UPPER ('%".$ba."%')
								 LEFT JOIN TM_ORGANIZATION ORG
									ON HA.BA_CODE = ORG.BA_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON RKTPK.ACTIVITY_CODE = activity.ACTIVITY_CODE
						   WHERE     1 = 1
								 AND TO_CHAR (RKTPK.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (RKTPK.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY RKTPK.PERIOD_BUDGET,
								 RKTPK.BA_CODE,
								 RKTPK.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT INFRA --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'INFRA' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.COST_JAN)
										 + MAX (rkt.COST_FEB)
										 + MAX (rkt.COST_MAR)
										 + MAX (rkt.COST_APR)
										 + MAX (rkt.COST_MAY)
										 + MAX (rkt.COST_JUN)
										 + MAX (rkt.COST_JUL)
										 + MAX (rkt.COST_AUG)
										 + MAX (rkt.COST_SEP)
										 + MAX (rkt.COST_OCT)
										 + MAX (rkt.COST_NOV)
										 + MAX (rkt.COST_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT rkt
								 LEFT JOIN TM_HECTARE_STATEMENT hs
									ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
									   AND hs.BA_CODE = rkt.BA_CODE
									   AND hs.AFD_CODE = rkt.AFD_CODE
									   AND hs.BLOCK_CODE = rkt.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'MANUAL_INFRA'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT RAWAT --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'RAWAT' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.COST_JAN)
										 + MAX (rkt.COST_FEB)
										 + MAX (rkt.COST_MAR)
										 + MAX (rkt.COST_APR)
										 + MAX (rkt.COST_MAY)
										 + MAX (rkt.COST_JUN)
										 + MAX (rkt.COST_JUL)
										 + MAX (rkt.COST_AUG)
										 + MAX (rkt.COST_SEP)
										 + MAX (rkt.COST_OCT)
										 + MAX (rkt.COST_NOV)
										 + MAX (rkt.COST_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT rkt
								 LEFT JOIN TM_HECTARE_STATEMENT hs
									ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
									   AND hs.BA_CODE = rkt.BA_CODE
									   AND hs.AFD_CODE = rkt.AFD_CODE
									   AND hs.BLOCK_CODE = rkt.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA'
								 AND rkt.ACTIVITY_CODE <> '42700'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT RAWAT OPSI --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'RAWAT OPSI' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.COST_JAN)
										 + MAX (rkt.COST_FEB)
										 + MAX (rkt.COST_MAR)
										 + MAX (rkt.COST_APR)
										 + MAX (rkt.COST_MAY)
										 + MAX (rkt.COST_JUN)
										 + MAX (rkt.COST_JUL)
										 + MAX (rkt.COST_AUG)
										 + MAX (rkt.COST_SEP)
										 + MAX (rkt.COST_OCT)
										 + MAX (rkt.COST_NOV)
										 + MAX (rkt.COST_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT rkt
								 LEFT JOIN TM_HECTARE_STATEMENT hs
									ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
									   AND hs.BA_CODE = rkt.BA_CODE
									   AND hs.AFD_CODE = rkt.AFD_CODE
									   AND hs.BLOCK_CODE = rkt.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA_OPSI'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT KASTRASI SANITASI --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'INFRA' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.COST_JAN)
										 + MAX (rkt.COST_FEB)
										 + MAX (rkt.COST_MAR)
										 + MAX (rkt.COST_APR)
										 + MAX (rkt.COST_MAY)
										 + MAX (rkt.COST_JUN)
										 + MAX (rkt.COST_JUL)
										 + MAX (rkt.COST_AUG)
										 + MAX (rkt.COST_SEP)
										 + MAX (rkt.COST_OCT)
										 + MAX (rkt.COST_NOV)
										 + MAX (rkt.COST_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT rkt
								 LEFT JOIN TM_HECTARE_STATEMENT hs
									ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
									   AND hs.BA_CODE = rkt.BA_CODE
									   AND hs.AFD_CODE = rkt.AFD_CODE
									   AND hs.BLOCK_CODE = rkt.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'KASTRASI_SANITASI'
								 AND (hs.MATURITY_STAGE_SMS1 LIKE 'TBM%'
									  OR hs.MATURITY_STAGE_SMS2 LIKE 'TBM%')
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT RAWAT SISIP --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'RAWAT SISIP' GROUP02,
								 rkt.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.COST_JAN)
										 + MAX (rkt.COST_FEB)
										 + MAX (rkt.COST_MAR)
										 + MAX (rkt.COST_APR)
										 + MAX (rkt.COST_MAY)
										 + MAX (rkt.COST_JUN)
										 + MAX (rkt.COST_JUL)
										 + MAX (rkt.COST_AUG)
										 + MAX (rkt.COST_SEP)
										 + MAX (rkt.COST_OCT)
										 + MAX (rkt.COST_NOV)
										 + MAX (rkt.COST_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT rkt
								 LEFT JOIN TM_HECTARE_STATEMENT hs
									ON     hs.PERIOD_BUDGET = rkt.PERIOD_BUDGET
									   AND hs.BA_CODE = rkt.BA_CODE
									   AND hs.AFD_CODE = rkt.AFD_CODE
									   AND hs.BLOCK_CODE = rkt.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON rkt.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'MANUAL_NON_INFRA'
								 AND rkt.ACTIVITY_CODE = '42700'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT PANEN --
						  SELECT RKT_GABUNGAN.PERIOD_BUDGET,
								 RKT_GABUNGAN.BA_CODE,
								 'RKT' GROUP01,
								 'PANEN' GROUP02,
								 RKT_GABUNGAN.ACTIVITY_CODE CODE,
								 activity.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (RKT_GABUNGAN.UPDATE_TIME) IS NULL
									THEN
									   MAX (RKT_GABUNGAN.INSERT_TIME)
									ELSE
									   MAX (RKT_GABUNGAN.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (RKT_GABUNGAN.COST_SETAHUN) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM (SELECT DISTINCT PERIOD_BUDGET PERIOD_BUDGET,
												  BA_CODE,
												  AFD_CODE,
												  BLOCK_CODE,
												  DELETE_USER
									FROM TR_PRODUKSI_PERIODE_BUDGET
								   WHERE DELETE_USER IS NULL AND TON_BUDGET > 0) HS
								 LEFT JOIN (SELECT ROWIDTOCHAR (PANEN1.ROWID) row_id,
												   '' ROW_ID_TEMP,
												   PANEN1.FLAG_TEMP,
												   PANEN1.TRX_RKT_CODE,
												   PANEN1.PERIOD_BUDGET PERIOD_BUDGET,
												   PANEN1.BA_CODE,
												   PANEN1.AFD_CODE,
												   PANEN1.BLOCK_CODE,
												   THS1.BLOCK_DESC,
												   PANEN1.ACTIVITY_CODE,
												   PANEN1.TON,
												   PANEN1.JANJANG,
												   PANEN1.BJR_AFD,
												   PANEN1.JARAK_PKS,
												   PANEN1.SUMBER_BIAYA_UNIT SUMBER_BIAYA,
												   PANEN1.PERSEN_LANGSIR,
												   PANEN1.BIAYA_PEMANEN_HK,
												   PANEN1.BIAYA_PEMANEN_RP_BASIS,
												   PANEN1.BIAYA_PEMANEN_RP_PREMI_JANJANG,
												   PANEN1.BIAYA_PEMANEN_RP_PREMI_BRD,
												   PANEN1.BIAYA_PEMANEN_RP_TOTAL,
												   PANEN1.BIAYA_PEMANEN_RP_KG,
												   PANEN1.BIAYA_SPV_RP_BASIS,
												   PANEN1.BIAYA_SPV_RP_PREMI,
												   PANEN1.BIAYA_SPV_RP_TOTAL,
												   PANEN1.BIAYA_SPV_RP_KG,
												   PANEN1.BIAYA_ALAT_PANEN_RP_KG,
												   PANEN1.BIAYA_ALAT_PANEN_RP_TOTAL,
												   PANEN1.TUKANG_MUAT_BASIS,
												   PANEN1.TUKANG_MUAT_PREMI,
												   PANEN1.TUKANG_MUAT_TOTAL,
												   PANEN1.TUKANG_MUAT_RP_KG,
												   PANEN1.SUPIR_PREMI,
												   PANEN1.SUPIR_RP_KG,
												   PANEN1.ANGKUT_TBS_RP_KG_KM,
												   PANEN1.ANGKUT_TBS_RP_ANGKUT,
												   PANEN1.ANGKUT_TBS_RP_KG,
												   PANEN1.KRANI_BUAH_BASIS,
												   PANEN1.KRANI_BUAH_PREMI,
												   PANEN1.KRANI_BUAH_TOTAL,
												   PANEN1.KRANI_BUAH_RP_KG,
												   PANEN1.LANGSIR_TON,
												   PANEN1.LANGSIR_RP,
												   PANEN1.LANGSIR_TUKANG_MUAT,
												   PANEN1.LANGSIR_RP_KG,
												   PANEN1.COST_JAN,
												   PANEN1.COST_FEB,
												   PANEN1.COST_MAR,
												   PANEN1.COST_APR,
												   PANEN1.COST_MAY,
												   PANEN1.COST_JUN,
												   PANEN1.COST_JUL,
												   PANEN1.COST_AUG,
												   PANEN1.COST_SEP,
												   PANEN1.COST_OCT,
												   PANEN1.COST_NOV,
												   PANEN1.COST_DEC,
												   PANEN1.COST_SETAHUN,
												   PANEN1.INSERT_TIME,
												   PANEN1.UPDATE_TIME
											  FROM    TR_RKT_PANEN PANEN1
												   LEFT JOIN
													  TM_HECTARE_STATEMENT THS1
												   ON PANEN1.PERIOD_BUDGET = THS1.PERIOD_BUDGET
													  AND PANEN1.BA_CODE = THS1.BA_CODE
													  AND PANEN1.AFD_CODE = THS1.AFD_CODE
													  AND PANEN1.BLOCK_CODE = THS1.BLOCK_CODE
											 WHERE PANEN1.DELETE_USER IS NULL) RKT_GABUNGAN
									ON     HS.PERIOD_BUDGET = RKT_GABUNGAN.PERIOD_BUDGET
									   AND HS.BA_CODE = RKT_GABUNGAN.BA_CODE
									   AND HS.AFD_CODE = RKT_GABUNGAN.AFD_CODE
									   AND HS.BLOCK_CODE = RKT_GABUNGAN.BLOCK_CODE
								 LEFT JOIN TM_ACTIVITY activity
									ON RKT_GABUNGAN.ACTIVITY_CODE = activity.ACTIVITY_CODE
								 LEFT JOIN TM_OER_BA oer_ba
									ON oer_ba.PERIOD_BUDGET = hs.PERIOD_BUDGET
									   AND oer_ba.BA_CODE = hs.BA_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON HS.BA_CODE = ORG.BA_CODE
								 LEFT JOIN TM_HECTARE_STATEMENT THS
									ON     HS.PERIOD_BUDGET = THS.PERIOD_BUDGET
									   AND HS.BA_CODE = THS.BA_CODE
									   AND HS.AFD_CODE = THS.AFD_CODE
									   AND HS.BLOCK_CODE = THS.BLOCK_CODE
						   WHERE     1 = 1
								 AND TO_CHAR (RKT_GABUNGAN.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (RKT_GABUNGAN.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY RKT_GABUNGAN.PERIOD_BUDGET,
								 RKT_GABUNGAN.BA_CODE,
								 RKT_GABUNGAN.ACTIVITY_CODE,
								 activity.DESCRIPTION
						UNION ALL
						  -- RKT OPEX --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'OPEX' GROUP02,
								 rkt.COA_CODE CODE,
								 coa.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.DIS_JAN)
										 + MAX (rkt.DIS_FEB)
										 + MAX (rkt.DIS_MAR)
										 + MAX (rkt.DIS_APR)
										 + MAX (rkt.DIS_MAY)
										 + MAX (rkt.DIS_JUN)
										 + MAX (rkt.DIS_JUL)
										 + MAX (rkt.DIS_AUG)
										 + MAX (rkt.DIS_SEP)
										 + MAX (rkt.DIS_OCT)
										 + MAX (rkt.DIS_NOV)
										 + MAX (rkt.DIS_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT_OPEX rkt
								 LEFT JOIN TM_COA coa
									ON rkt.COA_CODE = coa.COA_CODE
								 LEFT JOIN T_PARAMETER_VALUE param
									ON rkt.GROUP_BUM_CODE = param.PARAMETER_VALUE_CODE
									   AND param.PARAMETER_CODE = 'GROUP_BUM'
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
								 LEFT JOIN TN_BASIC basic
									ON     rkt.PERIOD_BUDGET = basic.PERIOD_BUDGET
									   AND rkt.BA_CODE = basic.BA_CODE
									   AND basic.BASIC_NORMA_CODE = 'NC021'
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.TIPE_TRANSAKSI = 'NON_VRA'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.COA_CODE,
								 coa.DESCRIPTION
						UNION ALL
						  -- RKT OPEX VRA --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'OPEX VRA' GROUP02,
								 rkt.COA_CODE CODE,
								 coa.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.DIS_JAN)
										 + MAX (rkt.DIS_FEB)
										 + MAX (rkt.DIS_MAR)
										 + MAX (rkt.DIS_APR)
										 + MAX (rkt.DIS_MAY)
										 + MAX (rkt.DIS_JUN)
										 + MAX (rkt.DIS_JUL)
										 + MAX (rkt.DIS_AUG)
										 + MAX (rkt.DIS_SEP)
										 + MAX (rkt.DIS_OCT)
										 + MAX (rkt.DIS_NOV)
										 + MAX (rkt.DIS_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM (SELECT rkt.TRX_CODE,
										 rkt.PERIOD_BUDGET PERIOD_BUDGET,
										 rkt.BA_CODE,
										 rkt.COA_CODE,
										 rkt.GROUP_BUM_CODE,
										 rkt.ACTUAL,
										 rkt.TAKSASI,
										 rkt.ANTISIPASI,
										 rkt.PERSENTASE_INFLASI,
										 rkt.TOTAL_BIAYA,
										 rkt.DIS_JAN,
										 rkt.DIS_FEB,
										 rkt.DIS_MAR,
										 rkt.DIS_APR,
										 rkt.DIS_MAY,
										 rkt.DIS_JUN,
										 rkt.DIS_JUL,
										 rkt.DIS_AUG,
										 rkt.DIS_SEP,
										 rkt.DIS_OCT,
										 rkt.DIS_NOV,
										 rkt.DIS_DEC,
										 rkt.KETERANGAN,
										 INSERT_TIME,
										 UPDATE_TIME
									FROM TR_RKT_OPEX rkt
								   WHERE rkt.DELETE_USER IS NULL AND rkt.TIPE_TRANSAKSI = 'VRA')
								 RKT
								 LEFT JOIN TM_COA coa
									ON rkt.COA_CODE = coa.COA_CODE
								 LEFT JOIN T_PARAMETER_VALUE param
									ON rkt.GROUP_BUM_CODE = param.PARAMETER_VALUE_CODE
									   AND param.PARAMETER_CODE = 'GROUP_BUM'
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
								 LEFT JOIN TN_BASIC basic
									ON     RKT.PERIOD_BUDGET = basic.PERIOD_BUDGET
									   AND RKT.BA_CODE = basic.BA_CODE
									   AND basic.BASIC_NORMA_CODE = 'NC021'
						   WHERE     1 = 1
								 AND TO_CHAR (RKT.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (RKT.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY RKT.PERIOD_BUDGET,
								 RKT.BA_CODE,
								 RKT.COA_CODE,
								 coa.DESCRIPTION
						UNION ALL
						  -- RKT CSR --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'CSR' GROUP02,
								 rkt.COA_CODE CODE,
								 coa.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.DIS_JAN)
										 + MAX (rkt.DIS_FEB)
										 + MAX (rkt.DIS_MAR)
										 + MAX (rkt.DIS_APR)
										 + MAX (rkt.DIS_MAY)
										 + MAX (rkt.DIS_JUN)
										 + MAX (rkt.DIS_JUL)
										 + MAX (rkt.DIS_AUG)
										 + MAX (rkt.DIS_SEP)
										 + MAX (rkt.DIS_OCT)
										 + MAX (rkt.DIS_NOV)
										 + MAX (rkt.DIS_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT_RELATION rkt
								 LEFT JOIN TM_COA coa
									ON rkt.COA_CODE = coa.COA_CODE
								 LEFT JOIN T_PARAMETER_VALUE param
									ON rkt.GROUP_CODE = param.PARAMETER_VALUE_CODE
									   AND param.PARAMETER_CODE = 'GROUP_CSR'
								 LEFT JOIN TM_GROUP_RELATION master_relation
									ON     rkt.COA_CODE = master_relation.COA_CODE
									   AND rkt.GROUP_CODE = master_relation.GROUP_CODE
									   AND rkt.SUB_GROUP_CODE = master_relation.SUB_GROUP_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.REPORT_TYPE = 'CSR'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.COA_CODE,
								 coa.DESCRIPTION
						UNION ALL
						  -- RKT SHE --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'SUSTAINABILITY' GROUP02,
								 rkt.COA_CODE CODE,
								 coa.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.DIS_JAN)
										 + MAX (rkt.DIS_FEB)
										 + MAX (rkt.DIS_MAR)
										 + MAX (rkt.DIS_APR)
										 + MAX (rkt.DIS_MAY)
										 + MAX (rkt.DIS_JUN)
										 + MAX (rkt.DIS_JUL)
										 + MAX (rkt.DIS_AUG)
										 + MAX (rkt.DIS_SEP)
										 + MAX (rkt.DIS_OCT)
										 + MAX (rkt.DIS_NOV)
										 + MAX (rkt.DIS_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT_RELATION rkt
								 LEFT JOIN TM_COA coa
									ON rkt.COA_CODE = coa.COA_CODE
								 LEFT JOIN T_PARAMETER_VALUE param
									ON rkt.GROUP_CODE = param.PARAMETER_VALUE_CODE
									   AND param.PARAMETER_CODE = 'GROUP_SHE'
								 LEFT JOIN TM_GROUP_RELATION master_relation
									ON     rkt.COA_CODE = master_relation.COA_CODE
									   AND rkt.GROUP_CODE = master_relation.GROUP_CODE
									   AND rkt.SUB_GROUP_CODE = master_relation.SUB_GROUP_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.REPORT_TYPE = 'SHE'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.COA_CODE,
								 coa.DESCRIPTION
						UNION ALL
						  -- RKT IR --
						  SELECT rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 'RKT' GROUP01,
								 'INTERNAL RELATIONSHIP' GROUP02,
								 rkt.COA_CODE CODE,
								 coa.DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (rkt.UPDATE_TIME) IS NULL
									THEN
									   MAX (rkt.INSERT_TIME)
									ELSE
									   MAX (rkt.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN   MAX (rkt.DIS_JAN)
										 + MAX (rkt.DIS_FEB)
										 + MAX (rkt.DIS_MAR)
										 + MAX (rkt.DIS_APR)
										 + MAX (rkt.DIS_MAY)
										 + MAX (rkt.DIS_JUN)
										 + MAX (rkt.DIS_JUL)
										 + MAX (rkt.DIS_AUG)
										 + MAX (rkt.DIS_SEP)
										 + MAX (rkt.DIS_OCT)
										 + MAX (rkt.DIS_NOV)
										 + MAX (rkt.DIS_DEC) IS NOT NULL
									THEN
									   'ADA'
									ELSE
									   'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT_RELATION rkt
								 LEFT JOIN TM_COA coa
									ON rkt.COA_CODE = coa.COA_CODE
								 LEFT JOIN T_PARAMETER_VALUE param
									ON rkt.GROUP_CODE = param.PARAMETER_VALUE_CODE
									   AND param.PARAMETER_CODE = 'GROUP_IR'
								 LEFT JOIN TM_GROUP_RELATION master_relation
									ON     rkt.COA_CODE = master_relation.COA_CODE
									   AND rkt.GROUP_CODE = master_relation.GROUP_CODE
									   AND rkt.SUB_GROUP_CODE = master_relation.SUB_GROUP_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON rkt.BA_CODE = ORG.BA_CODE
						   WHERE     rkt.DELETE_USER IS NULL
								 AND rkt.REPORT_TYPE = 'IR'
								 AND TO_CHAR (rkt.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (rkt.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY rkt.PERIOD_BUDGET,
								 rkt.BA_CODE,
								 rkt.COA_CODE,
								 coa.DESCRIPTION
						UNION ALL
						  -- RKT ALAT KERJA PANEN --
						  SELECT norma.PERIOD_BUDGET,
								 norma.BA_CODE,
								 'RKT' GROUP01,
								 'ALAT KERJA PANEN' GROUP02,
								 norma.MATERIAL_CODE CODE,
								 material.MATERIAL_NAME AKTIVITAS,
								 CASE
									WHEN MAX (norma.UPDATE_TIME) IS NULL
									THEN
									   MAX (norma.INSERT_TIME)
									ELSE
									   MAX (norma.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (norma_harga.PRICE) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TN_ALAT_KERJA_PANEN norma
								 LEFT JOIN TN_HARGA_BARANG norma_harga
									ON     norma.MATERIAL_CODE = norma_harga.MATERIAL_CODE
									   AND norma.BA_CODE = norma_harga.BA_CODE
									   AND norma.PERIOD_BUDGET = norma_harga.PERIOD_BUDGET
								 LEFT JOIN TM_MATERIAL material
									ON     norma.MATERIAL_CODE = material.MATERIAL_CODE
									   AND norma.BA_CODE = material.BA_CODE
									   AND norma.PERIOD_BUDGET = material.PERIOD_BUDGET
								 LEFT JOIN TM_ORGANIZATION B
									ON norma.BA_CODE = B.BA_CODE
						   WHERE     norma.DELETE_USER IS NULL
								 AND TO_CHAR (norma.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (norma.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY norma.PERIOD_BUDGET,
								 norma.BA_CODE,
								 norma.MATERIAL_CODE,
								 material.MATERIAL_NAME
						UNION ALL
						  -- RKT VRA --
						  SELECT RKT.PERIOD_BUDGET,
								 RKT.BA_CODE,
								 'RKT' GROUP01,
								 'VRA' GROUP02,
								 RKT.VRA_CODE CODE,
								 RKT.DESCRIPTION_VRA AKTIVITAS,
								 CASE
									WHEN MAX (RKT.UPDATE_TIME) IS NULL
									THEN
									   MAX (RKT.INSERT_TIME)
									ELSE
									   MAX (RKT.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (RKT.TOTAL_QTY_TAHUN) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM    (SELECT report.PERIOD_BUDGET PERIOD_BUDGET,
											report.INTERNAL_ORDER,
											report.KOMPARISON_OUT_HM_KM,
											report.RP_QTY_BULAN_BUDGET,
											report.TRX_RKT_VRA_CODE,
											ORG.REGION_CODE,
											report.BA_CODE,
											master_vra.VRA_SUB_CAT_DESCRIPTION,
											master_vra.VRA_CODE,
											master_vra.TYPE VRA_TYPE,
											report.DESCRIPTION_VRA DESCRIPTION_VRA,
											report.JUMLAH_ALAT,
											report.TAHUN_ALAT,
											master_vra.UOM,
											report.QTY_DAY,
											report.DAY_YEAR_VRA,
											report.QTY_YEAR,
											report.TOTAL_BIAYA,
											report.TOTAL_RP_QTY,
											report.TOTAL_QTY_TAHUN,
											report.JUMLAH_OPERATOR,
											report.GAJI_OPERATOR,
											report.TOTAL_GAJI_OPERATOR,
											report.TUNJANGAN_OPERATOR,
											report.TOTAL_TUNJANGAN_OPERATOR,
											report.TOTAL_GAJI_TUNJANGAN_OPERATOR,
											report.RP_QTY_OPERATOR,
											report.JUMLAH_HELPER,
											report.GAJI_HELPER,
											report.TOTAL_GAJI_HELPER,
											report.TUNJANGAN_HELPER,
											report.TOTAL_TUNJANGAN_HELPER,
											report.TOTAL_GAJI_TUNJANGAN_HELPER,
											report.RP_QTY_HELPER,
											report.RVRA1_VALUE1,                      -- PAJAK
											report.RVRA1_VALUE2,
											report.RVRA1_VALUE3,
											report.RVRA2_VALUE1,                -- BAHAN BAKAR
											report.RVRA2_VALUE2,
											report.RVRA2_VALUE3,
											report.RVRA3_VALUE1,                  -- OLI MESIN
											report.RVRA3_VALUE2,
											report.RVRA3_VALUE3,
											report.RVRA4_VALUE1,              -- OLI TRANSMISI
											report.RVRA4_VALUE2,
											report.RVRA4_VALUE3,
											report.RVRA5_VALUE1,            -- MINYAK HIDROLIC
											report.RVRA5_VALUE2,
											report.RVRA5_VALUE3,
											report.RVRA6_VALUE1,                     -- GREASE
											report.RVRA6_VALUE2,
											report.RVRA6_VALUE3,
											report.RVRA7_VALUE1,                 -- FILTER OLI
											report.RVRA7_VALUE2,
											report.RVRA7_VALUE3,
											report.RVRA8_VALUE1,            -- FILTER HIDROLIC
											report.RVRA8_VALUE2,
											report.RVRA8_VALUE3,
											report.RVRA9_VALUE1,               -- FILTER SOLAR
											report.RVRA9_VALUE2,
											report.RVRA9_VALUE3,
											report.RVRA10_VALUE1, -- FILTER SOLAR MOISTURE SEPARATOR
											report.RVRA10_VALUE2,
											report.RVRA10_VALUE3,
											report.RVRA11_VALUE1,              -- FILTER UDARA
											report.RVRA11_VALUE2,
											report.RVRA11_VALUE3,
											report.RVRA12_VALUE1,           -- GANTI SPAREPART
											report.RVRA12_VALUE2,
											report.RVRA12_VALUE3,
											report.RVRA13_VALUE1,           --  GANTI BAN LUAR
											report.RVRA13_VALUE2,
											report.RVRA13_VALUE3,
											report.RVRA14_VALUE1,           -- GANTI BAN DALAM
											report.RVRA14_VALUE2,
											report.RVRA14_VALUE3,
											report.RVRA15_VALUE1,           -- SERVIS WORKSHOP
											report.RVRA15_VALUE2,
											report.RVRA15_VALUE3,
											report.RVRA16_VALUE1,                  -- OVERHAUL
											report.RVRA16_VALUE2,
											report.RVRA16_VALUE3,
											report.RVRA17_VALUE1,                    -- RENTAL
											report.RVRA17_VALUE2,
											report.RVRA17_VALUE3,
											report.RVRA18_VALUE1,       -- SERVIS BENGKEL LUAR
											report.RVRA18_VALUE2,
											report.RVRA18_VALUE3,
											report.RVRA19_VALUE1,
											report.RVRA19_VALUE2,
											report.RVRA19_VALUE3,
											report.RVRA20_VALUE1,
											report.RVRA20_VALUE2,
											report.RVRA20_VALUE3,
											vra_sum.VALUE RP_QTY_VRA_TYPE,
											report.FLAG_TEMP,
											report.INSERT_TIME,
											report.UPDATE_TIME
									   FROM TR_RKT_VRA report
											LEFT JOIN TM_VRA master_vra
											   ON report.VRA_CODE = master_vra.VRA_CODE
											LEFT JOIN TR_RKT_VRA_SUM vra_sum
											   ON report.BA_CODE = vra_sum.BA_CODE
												  AND report.PERIOD_BUDGET =
														vra_sum.PERIOD_BUDGET
												  AND report.VRA_CODE = vra_sum.VRA_CODE
											LEFT JOIN TM_ORGANIZATION ORG
											   ON report.BA_CODE = ORG.BA_CODE
									  WHERE report.DELETE_USER IS NULL) RKT
								 LEFT JOIN
									TM_STANDART_JAM_KERJA_WRA standar_jam_kerja
								 ON standar_jam_kerja.PERIOD_BUDGET = RKT.PERIOD_BUDGET
									AND standar_jam_kerja.BA_CODE = RKT.BA_CODE
						   WHERE     1 = 1
								 AND TO_CHAR (RKT.PERIOD_BUDGET, 'RRRR') = '".$per_budg."' 
								 AND UPPER (RKT.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY RKT.PERIOD_BUDGET,
								 RKT.BA_CODE,
								 RKT.VRA_CODE,
								 RKT.DESCRIPTION_VRA
						UNION ALL
						  -- RKT DISTRIBUSI NON INFRA --
						  SELECT VRA.PERIOD_BUDGET,
								 VRA.BA_CODE,
								 'RKT' GROUP01,
								 'DISTRIBUSI NON INFRA' GROUP02,
								 VRA.VRA_CODE CODE,
								 TV.VRA_SUB_CAT_DESCRIPTION AKTIVITAS,
								 CASE
									WHEN MAX (VRA.UPDATE_TIME) IS NULL
									THEN
									   MAX (VRA.INSERT_TIME)
									ELSE
									   MAX (VRA.UPDATE_TIME)
								 END
									LAST_UPDATE,
								 CASE
									WHEN MAX (VRA.PRICE_HM_KM) IS NOT NULL THEN 'ADA'
									ELSE 'TIDAK ADA'
								 END
									STATUS
							FROM TR_RKT_VRA_DISTRIBUSI VRA
								 LEFT JOIN TM_ACTIVITY TA
									ON TA.ACTIVITY_CODE = VRA.ACTIVITY_CODE
								 LEFT JOIN TM_ACTIVITY_MAPPING mapping
									ON TA.ACTIVITY_CODE = mapping.ACTIVITY_CODE
								 LEFT JOIN TM_VRA TV
									ON TV.VRA_CODE = VRA.VRA_CODE
								 LEFT JOIN TM_ORGANIZATION ORG
									ON ORG.BA_CODE = VRA.BA_CODE
						   WHERE     VRA.DELETE_TIME IS NULL
								 AND VRA.TIPE_TRANSAKSI = 'NON_INFRA'
								 AND mapping.ACTIVITY_GROUP_TYPE_CODE <> '-'
								 AND TO_CHAR (VRA.PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
								 AND UPPER (VRA.BA_CODE) LIKE UPPER ('%".$ba."%')
						GROUP BY VRA.PERIOD_BUDGET,
								 VRA.BA_CODE,
								 VRA.VRA_CODE,
								 TV.VRA_SUB_CAT_DESCRIPTION
						UNION ALL
						-- REPORT SUMMARY --
						SELECT TO_DATE ('') PERIOD_BUDGET,
							   '' BA_CODE,
							   'REPORT' GROUP01,
							   'SUMMARY' GROUP02,
							   '' CODE,
							   '' AKTIVITAS,
							   MAX (RPT.INSERT_TIME) LAST_UPDATE,
							   CASE
								  WHEN MAX (RPT.INSERT_TIME) IS NOT NULL THEN 'ADA'
								  ELSE 'TIDAK ADA'
							   END
								  STATUS
						  FROM (SELECT MAX (INSERT_USER) INSERT_USER,
									   MAX (INSERT_TIME) INSERT_TIME
								  FROM TMP_RPT_DEV_COST
								 WHERE     1 = 1
									   AND TO_CHAR (PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
									   AND UPPER (BA_CODE) LIKE UPPER ('%".$ba."%')
								UNION ALL
								SELECT MAX (INSERT_USER) INSERT_USER,
									   MAX (INSERT_TIME) INSERT_TIME
								  FROM TMP_RPT_EST_COST
								 WHERE     1 = 1
									   AND TO_CHAR (PERIOD_BUDGET, 'RRRR') = '".$per_budg."'
									   AND UPPER (BA_CODE) LIKE UPPER ('%".$ba."%')) RPT) RPT_ALL
        ";
		
		
		
		if ($params['controller'] == 'download') {
			$params['search'] = ($params['search'] == 'AA==') ? "" : rawurldecode(base64_decode($params['search']));
		}
	
		
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel Status Hitung All ################################################### */
		
		return $result;
	}
	
	//generate report report kebutuhan aktivitas per BA --aries 16.06.2015
    public function reportKebAktivitasPerBa($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();

		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$result['PERIOD'] = $params['budgetperiod'];
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$result['PERIOD'] = $this->_period;
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			/* Formatted on 16-Jun-15 10:07:32 AM (QP5 v5.136.908.31019) */
			SELECT REPORT.BA_CODE,
				   ORG.ESTATE_NAME,
				   GRP.DESCRIPTION,
				   REPORT.TIPE_TRANSAKSI,
				   REPORT.COST_ELEMENT,
				   REPORT.ACTIVITY_CODE,
				   REPORT.ACTIVITY_DESC,
				   REPORT.SUB_COST_ELEMENT_DESC,
				   REPORT.UOM,
				   REPORT.QTY_JAN,
				   REPORT.QTY_FEB,
				   REPORT.QTY_MAR,
				   REPORT.QTY_APR,
				   REPORT.QTY_MAY,
				   REPORT.QTY_JUN,
				   REPORT.QTY_JUL,
				   REPORT.QTY_AUG,
				   REPORT.QTY_SEP,
				   REPORT.QTY_OCT,
				   REPORT.QTY_NOV,
				   REPORT.QTY_DEC,
				   REPORT.COST_JAN,
				   REPORT.COST_FEB,
				   REPORT.COST_MAR,
				   REPORT.COST_APR,
				   REPORT.COST_MAY,
				   REPORT.COST_JUN,
				   REPORT.COST_JUL,
				   REPORT.COST_AUG,
				   REPORT.COST_SEP,
				   REPORT.COST_OCT,
				   REPORT.COST_NOV,
				   REPORT.COST_DEC,
				   QTY_SETAHUN,
				   COST_SETAHUN
			  FROM (  SELECT PERIOD_BUDGET,
							 REGION_CODE,
							 BA_CODE,
							 ACTIVITY_DESC,
							 TIPE_TRANSAKSI,
							 ACTIVITY_CODE,
							 SUB_COST_ELEMENT_DESC,
							 COST_ELEMENT,
							 SUB_COST_ELEMENT,
							 UOM,
							 SUM (QTY_JAN) QTY_JAN,
							 SUM (QTY_FEB) QTY_FEB,
							 SUM (QTY_MAR) QTY_MAR,
							 SUM (QTY_APR) QTY_APR,
							 SUM (QTY_MAY) QTY_MAY,
							 SUM (QTY_JUN) QTY_JUN,
							 SUM (QTY_JUL) QTY_JUL,
							 SUM (QTY_AUG) QTY_AUG,
							 SUM (QTY_SEP) QTY_SEP,
							 SUM (QTY_OCT) QTY_OCT,
							 SUM (QTY_NOV) QTY_NOV,
							 SUM (QTY_DEC) QTY_DEC,
							 SUM (COST_JAN) COST_JAN,
							 SUM (COST_FEB) COST_FEB,
							 SUM (COST_MAR) COST_MAR,
							 SUM (COST_APR) COST_APR,
							 SUM (COST_MAY) COST_MAY,
							 SUM (COST_JUN) COST_JUN,
							 SUM (COST_JUL) COST_JUL,
							 SUM (COST_AUG) COST_AUG,
							 SUM (COST_SEP) COST_SEP,
							 SUM (COST_OCT) COST_OCT,
							 SUM (COST_NOV) COST_NOV,
							 SUM (COST_DEC) COST_DEC,
							 SUM (QTY_SETAHUN) QTY_SETAHUN,
							 SUM (COST_SETAHUN) COST_SETAHUN
						FROM TMP_RPT_KEB_EST_COST_BLOCK REPORT
					   WHERE 1 = 1
					   $where
				GROUP BY PERIOD_BUDGET,
						 REGION_CODE,
						 BA_CODE,
						 ACTIVITY_DESC,
						 TIPE_TRANSAKSI,
						 ACTIVITY_CODE,
						 SUB_COST_ELEMENT_DESC,
						 COST_ELEMENT,
						 SUB_COST_ELEMENT,
						 UOM) REPORT 
				LEFT JOIN TM_ORGANIZATION ORG
				  ON ORG.BA_CODE = REPORT.BA_CODE
				LEFT JOIN TM_RPT_MAPPING_ACT MAP
				  ON MAP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI 
				  AND MAP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE 
				  AND MAP.COST_ELEMENT = REPORT.COST_ELEMENT
				LEFT JOIN TM_RPT_GROUP GRP
				  ON GRP.GROUP_CODE = MAP.GROUP_CODE
				  ORDER BY MAP.GROUP_CODE,REPORT.ACTIVITY_CODE, REPORT.COST_ELEMENT
			";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel kebutuhan aktivitas estate cost (BA) ################################################### */
		
		return $result;
	}
	
	//generate report report kebutuhan aktivitas per AFD --aries 16.06.2015
    public function reportKebAktivitasPerAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$result['PERIOD'] = $params['budgetperiod'];
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$result['PERIOD'] = $this->_period;
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			/* Formatted on 16-Jun-15 10:07:32 AM (QP5 v5.136.908.31019) */
				SELECT REPORT.BA_CODE,
					   ORG.ESTATE_NAME,
					   REPORT.AFD_CODE,
					   GRP.DESCRIPTION,
					   REPORT.TIPE_TRANSAKSI,
					   REPORT.COST_ELEMENT,
					   REPORT.ACTIVITY_CODE,
					   REPORT.ACTIVITY_DESC,
					   REPORT.SUB_COST_ELEMENT_DESC,
					   REPORT.UOM,
					   REPORT.QTY_JAN,
					   REPORT.QTY_FEB,
					   REPORT.QTY_MAR,
					   REPORT.QTY_APR,
					   REPORT.QTY_MAY,
					   REPORT.QTY_JUN,
					   REPORT.QTY_JUL,
					   REPORT.QTY_AUG,
					   REPORT.QTY_SEP,
					   REPORT.QTY_OCT,
					   REPORT.QTY_NOV,
					   REPORT.QTY_DEC,
					   REPORT.COST_JAN,
					   REPORT.COST_FEB,
					   REPORT.COST_MAR,
					   REPORT.COST_APR,
					   REPORT.COST_MAY,
					   REPORT.COST_JUN,
					   REPORT.COST_JUL,
					   REPORT.COST_AUG,
					   REPORT.COST_SEP,
					   REPORT.COST_OCT,
					   REPORT.COST_NOV,
					   REPORT.COST_DEC,
					   REPORT.QTY_SETAHUN,
					   REPORT.COST_SETAHUN
				  FROM (  SELECT PERIOD_BUDGET,
								 REGION_CODE,
								 BA_CODE,
								 AFD_CODE,
								 ACTIVITY_DESC,
								 TIPE_TRANSAKSI,
								 ACTIVITY_CODE,
								 SUB_COST_ELEMENT_DESC,
								 COST_ELEMENT,
								 SUB_COST_ELEMENT,
								 UOM,
								 SUM (QTY_JAN) QTY_JAN,
								 SUM (QTY_FEB) QTY_FEB,
								 SUM (QTY_MAR) QTY_MAR,
								 SUM (QTY_APR) QTY_APR,
								 SUM (QTY_MAY) QTY_MAY,
								 SUM (QTY_JUN) QTY_JUN,
								 SUM (QTY_JUL) QTY_JUL,
								 SUM (QTY_AUG) QTY_AUG,
								 SUM (QTY_SEP) QTY_SEP,
								 SUM (QTY_OCT) QTY_OCT,
								 SUM (QTY_NOV) QTY_NOV,
								 SUM (QTY_DEC) QTY_DEC,
								 SUM (COST_JAN) COST_JAN,
								 SUM (COST_FEB) COST_FEB,
								 SUM (COST_MAR) COST_MAR,
								 SUM (COST_APR) COST_APR,
								 SUM (COST_MAY) COST_MAY,
								 SUM (COST_JUN) COST_JUN,
								 SUM (COST_JUL) COST_JUL,
								 SUM (COST_AUG) COST_AUG,
								 SUM (COST_SEP) COST_SEP,
								 SUM (COST_OCT) COST_OCT,
								 SUM (COST_NOV) COST_NOV,
								 SUM (COST_DEC) COST_DEC,
								 SUM (QTY_SETAHUN) QTY_SETAHUN,
								 SUM (COST_SETAHUN) COST_SETAHUN
							FROM TMP_RPT_KEB_EST_COST_BLOCK REPORT
							WHERE 1=1
						    $where
						GROUP BY PERIOD_BUDGET,
								 REGION_CODE,
								 BA_CODE,
								 AFD_CODE,
								 ACTIVITY_DESC,
								 TIPE_TRANSAKSI,
								 ACTIVITY_CODE,
								 SUB_COST_ELEMENT_DESC,
								 COST_ELEMENT,
								 SUB_COST_ELEMENT,
								 UOM) REPORT LEFT JOIN TM_ORGANIZATION ORG
						  ON ORG.BA_CODE = REPORT.BA_CODE
						LEFT JOIN TM_RPT_MAPPING_ACT MAP
						  ON MAP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI 
						  AND MAP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE 
						  AND MAP.COST_ELEMENT = REPORT.COST_ELEMENT
						LEFT JOIN TM_RPT_GROUP GRP
						  ON GRP.GROUP_CODE = MAP.GROUP_CODE
						  ORDER BY REPORT.AFD_CODE, MAP.GROUP_CODE,REPORT.ACTIVITY_CODE, REPORT.COST_ELEMENT
			";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel kebutuhan aktivitas estate cost (BA) ################################################### */
		
		return $result;
	}
	
	//report kebutuhan aktivitas dev cost per BA
	public function reportKebAktivitasDevPerBa($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$result['PERIOD'] = $params['budgetperiod'];
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$result['PERIOD'] = $this->_period;
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			/* Formatted on 16-Jun-15 10:07:32 AM (QP5 v5.136.908.31019) */
			SELECT REPORT.BA_CODE,
				   ORG.ESTATE_NAME,
				   GRP.DESCRIPTION,
				   REPORT.TIPE_TRANSAKSI,
				   REPORT.COST_ELEMENT,
				   REPORT.ACTIVITY_CODE,
				   REPORT.ACTIVITY_DESC,
				   REPORT.SUB_COST_ELEMENT_DESC,
				   REPORT.UOM,
				   REPORT.QTY_JAN,
				   REPORT.QTY_FEB,
				   REPORT.QTY_MAR,
				   REPORT.QTY_APR,
				   REPORT.QTY_MAY,
				   REPORT.QTY_JUN,
				   REPORT.QTY_JUL,
				   REPORT.QTY_AUG,
				   REPORT.QTY_SEP,
				   REPORT.QTY_OCT,
				   REPORT.QTY_NOV,
				   REPORT.QTY_DEC,
				   REPORT.COST_JAN,
				   REPORT.COST_FEB,
				   REPORT.COST_MAR,
				   REPORT.COST_APR,
				   REPORT.COST_MAY,
				   REPORT.COST_JUN,
				   REPORT.COST_JUL,
				   REPORT.COST_AUG,
				   REPORT.COST_SEP,
				   REPORT.COST_OCT,
				   REPORT.COST_NOV,
				   REPORT.COST_DEC,
				   QTY_SETAHUN,
				   COST_SETAHUN
			  FROM (  SELECT PERIOD_BUDGET,
							 REGION_CODE,
							 BA_CODE,
							 ACTIVITY_DESC,
							 TIPE_TRANSAKSI,
							 ACTIVITY_CODE,
							 SUB_COST_ELEMENT_DESC,
							 COST_ELEMENT,
							 SUB_COST_ELEMENT,
							 UOM,
							 SUM (QTY_JAN) QTY_JAN,
							 SUM (QTY_FEB) QTY_FEB,
							 SUM (QTY_MAR) QTY_MAR,
							 SUM (QTY_APR) QTY_APR,
							 SUM (QTY_MAY) QTY_MAY,
							 SUM (QTY_JUN) QTY_JUN,
							 SUM (QTY_JUL) QTY_JUL,
							 SUM (QTY_AUG) QTY_AUG,
							 SUM (QTY_SEP) QTY_SEP,
							 SUM (QTY_OCT) QTY_OCT,
							 SUM (QTY_NOV) QTY_NOV,
							 SUM (QTY_DEC) QTY_DEC,
							 SUM (COST_JAN) COST_JAN,
							 SUM (COST_FEB) COST_FEB,
							 SUM (COST_MAR) COST_MAR,
							 SUM (COST_APR) COST_APR,
							 SUM (COST_MAY) COST_MAY,
							 SUM (COST_JUN) COST_JUN,
							 SUM (COST_JUL) COST_JUL,
							 SUM (COST_AUG) COST_AUG,
							 SUM (COST_SEP) COST_SEP,
							 SUM (COST_OCT) COST_OCT,
							 SUM (COST_NOV) COST_NOV,
							 SUM (COST_DEC) COST_DEC,
							 SUM (QTY_SETAHUN) QTY_SETAHUN,
							 SUM (COST_SETAHUN) COST_SETAHUN
						FROM TMP_RPT_KEB_DEV_COST_BLOCK REPORT
					   WHERE 1 = 1
					   $where
				GROUP BY PERIOD_BUDGET,
						 REGION_CODE,
						 BA_CODE,
						 ACTIVITY_DESC,
						 TIPE_TRANSAKSI,
						 ACTIVITY_CODE,
						 SUB_COST_ELEMENT_DESC,
						 COST_ELEMENT,
						 SUB_COST_ELEMENT,
						 UOM) REPORT 
				LEFT JOIN TM_ORGANIZATION ORG
				  ON ORG.BA_CODE = REPORT.BA_CODE
				LEFT JOIN TM_RPT_MAPPING_ACT MAP
				  ON MAP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI 
				  AND MAP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE 
				  AND MAP.COST_ELEMENT = REPORT.COST_ELEMENT
				LEFT JOIN TM_RPT_GROUP GRP
				  ON GRP.GROUP_CODE = MAP.GROUP_CODE
				  ORDER BY MAP.GROUP_CODE,REPORT.ACTIVITY_CODE, REPORT.COST_ELEMENT
			";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		/* ################################################### generate excel kebutuhan aktivitas estate cost (BA) ################################################### */
		
		return $result;
	}
	
	//generate report report kebutuhan aktivitas DEV Cost per AFD --aries 16.06.2015
    public function reportKebAktivitasDevPerAfd($params = array())
    {
		$where = $select_group = $order_group = "";
		$params['uniq_code'] = $this->_global->genFileName();
		
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$result['PERIOD'] = $params['budgetperiod'];
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$result['PERIOD'] = $this->_period;
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "
			/* Formatted on 16-Jun-15 10:07:32 AM (QP5 v5.136.908.31019) */
				SELECT REPORT.BA_CODE,
					   ORG.ESTATE_NAME,
					   REPORT.AFD_CODE,
					   GRP.DESCRIPTION,
					   REPORT.TIPE_TRANSAKSI,
					   REPORT.COST_ELEMENT,
					   REPORT.ACTIVITY_CODE,
					   REPORT.ACTIVITY_DESC,
					   REPORT.SUB_COST_ELEMENT_DESC,
					   REPORT.UOM,
					   REPORT.QTY_JAN,
					   REPORT.QTY_FEB,
					   REPORT.QTY_MAR,
					   REPORT.QTY_APR,
					   REPORT.QTY_MAY,
					   REPORT.QTY_JUN,
					   REPORT.QTY_JUL,
					   REPORT.QTY_AUG,
					   REPORT.QTY_SEP,
					   REPORT.QTY_OCT,
					   REPORT.QTY_NOV,
					   REPORT.QTY_DEC,
					   REPORT.COST_JAN,
					   REPORT.COST_FEB,
					   REPORT.COST_MAR,
					   REPORT.COST_APR,
					   REPORT.COST_MAY,
					   REPORT.COST_JUN,
					   REPORT.COST_JUL,
					   REPORT.COST_AUG,
					   REPORT.COST_SEP,
					   REPORT.COST_OCT,
					   REPORT.COST_NOV,
					   REPORT.COST_DEC,
					   REPORT.QTY_SETAHUN,
					   REPORT.COST_SETAHUN
				  FROM (  SELECT PERIOD_BUDGET,
								 REGION_CODE,
								 BA_CODE,
								 AFD_CODE,
								 ACTIVITY_DESC,
								 TIPE_TRANSAKSI,
								 ACTIVITY_CODE,
								 SUB_COST_ELEMENT_DESC,
								 COST_ELEMENT,
								 SUB_COST_ELEMENT,
								 UOM,
								 SUM (QTY_JAN) QTY_JAN,
								 SUM (QTY_FEB) QTY_FEB,
								 SUM (QTY_MAR) QTY_MAR,
								 SUM (QTY_APR) QTY_APR,
								 SUM (QTY_MAY) QTY_MAY,
								 SUM (QTY_JUN) QTY_JUN,
								 SUM (QTY_JUL) QTY_JUL,
								 SUM (QTY_AUG) QTY_AUG,
								 SUM (QTY_SEP) QTY_SEP,
								 SUM (QTY_OCT) QTY_OCT,
								 SUM (QTY_NOV) QTY_NOV,
								 SUM (QTY_DEC) QTY_DEC,
								 SUM (COST_JAN) COST_JAN,
								 SUM (COST_FEB) COST_FEB,
								 SUM (COST_MAR) COST_MAR,
								 SUM (COST_APR) COST_APR,
								 SUM (COST_MAY) COST_MAY,
								 SUM (COST_JUN) COST_JUN,
								 SUM (COST_JUL) COST_JUL,
								 SUM (COST_AUG) COST_AUG,
								 SUM (COST_SEP) COST_SEP,
								 SUM (COST_OCT) COST_OCT,
								 SUM (COST_NOV) COST_NOV,
								 SUM (COST_DEC) COST_DEC,
								 SUM (QTY_SETAHUN) QTY_SETAHUN,
								 SUM (COST_SETAHUN) COST_SETAHUN
							FROM TMP_RPT_KEB_DEV_COST_BLOCK REPORT
							WHERE 1=1
						    $where
						GROUP BY PERIOD_BUDGET,
								 REGION_CODE,
								 BA_CODE,
								 AFD_CODE,
								 ACTIVITY_DESC,
								 TIPE_TRANSAKSI,
								 ACTIVITY_CODE,
								 SUB_COST_ELEMENT_DESC,
								 COST_ELEMENT,
								 SUB_COST_ELEMENT,
								 UOM) REPORT 
						LEFT JOIN TM_ORGANIZATION ORG
						  ON ORG.BA_CODE = REPORT.BA_CODE
						LEFT JOIN TM_RPT_MAPPING_ACT MAP
						  ON MAP.MATURITY_STAGE = REPORT.TIPE_TRANSAKSI 
						  AND MAP.ACTIVITY_CODE = REPORT.ACTIVITY_CODE 
						  AND MAP.COST_ELEMENT = REPORT.COST_ELEMENT
						LEFT JOIN TM_RPT_GROUP GRP
						  ON GRP.GROUP_CODE = MAP.GROUP_CODE
						  ORDER BY REPORT.AFD_CODE, MAP.GROUP_CODE,REPORT.ACTIVITY_CODE, REPORT.COST_ELEMENT
			";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}

		return $result;
	}
	
	//report HK VS MPP
	function reportHkMppBa(){
		//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$result['PERIOD'] = $params['budgetperiod'];
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$result['PERIOD'] = $this->_period;
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
			$result['BA'] = $params['src_ba'];
        }
		
		$query = "SELECT TMP.BA_CODE,
					   JOB.JOB_DESCRIPTION,
					   TMP.QTY_SETAHUN,
					   TMROLL.HK,
					   (TMP.QTY_SETAHUN / TMROLL.HK) AS HHK,
					   TRROLL.MPP_PERIOD_BUDGET AS MPP,
					   ( (TMP.QTY_SETAHUN / TMROLL.HK) - TRROLL.MPP_PERIOD_BUDGET) AS SELISIH
				  FROM (  
				   SELECT PERIOD_BUDGET,
								 BA_CODE,
								 SUB_COST_ELEMENT,
								 SUM (QTY_SETAHUN) AS QTY_SETAHUN
					FROM (
						SELECT PERIOD_BUDGET,
									 BA_CODE,
									 AFD_CODE,
									 BLOCK_CODE,
									 SUB_COST_ELEMENT,
									 QTY_SETAHUN
								FROM TMP_RPT_KEB_DEV_COST_BLOCK
							   WHERE SUB_COST_ELEMENT IN
										   ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
									 $where 
						 UNION ALL   
						 SELECT PERIOD_BUDGET,
									 BA_CODE,
									 AFD_CODE,
									 BLOCK_CODE,
									 SUB_COST_ELEMENT,
									 QTY_SETAHUN
								FROM TMP_RPT_KEB_EST_COST_BLOCK
							   WHERE SUB_COST_ELEMENT IN
										   ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
									 $where 
							)
					   GROUP BY PERIOD_BUDGET, BA_CODE, SUB_COST_ELEMENT
						) TMP
					   LEFT JOIN TM_JOB_TYPE JOB
						  ON JOB.JOB_CODE = TMP.SUB_COST_ELEMENT
					   LEFT JOIN TM_CHECKROLL_HK TMROLL
						  ON     TMROLL.BA_CODE = TMP.BA_CODE
							 AND TMROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
							 AND TMROLL.EMPLOYEE_STATUS = 'KT'
					   LEFT JOIN TR_RKT_CHECKROLL TRROLL
						  ON     TRROLL.BA_CODE = TMP.BA_CODE
							 AND TRROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
							 AND TRROLL.JOB_CODE = TMP.SUB_COST_ELEMENT
							 AND TRROLL.EMPLOYEE_STATUS = 'KT'";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}
		
		return $result;
	}
	
	function reportHkMppAfd(){
	//filter periode buget
		if($params['budgetperiod'] != ''){
			$where .= "
                AND to_char(PERIOD_BUDGET,'RRRR') = '".$params['budgetperiod']."'
            ";
			$result['PERIOD'] = $params['budgetperiod'];
		}else{
			$where .= "
                AND to_char(PERIOD_BUDGET,'DD-MM-RRRR') = '".$this->_period."'
            ";
			$result['PERIOD'] = $this->_period;
		}
		
		//filter region
		if ($params['src_region_code'] != '') {
			$where .= "
                AND REGION_CODE = '".$params['src_region_code']."'
            ";
        }
		
		//filter BA
		if ($params['key_find'] != '') {
			$where .= "
                AND BA_CODE = '".$params['key_find']."'
            ";
        }
		
		$query = "SELECT TMP.BA_CODE,
						JOB.JOB_DESCRIPTION,
						TMP.AFD_CODE,
						TMP.QTY_SETAHUN,
						TMROLL.HK,
						(TMP.QTY_SETAHUN/TMROLL.HK) AS HHK,
						TRROLL.MPP_PERIOD_BUDGET AS MPP,
						((TMP.QTY_SETAHUN/TMROLL.HK) - TRROLL.MPP_PERIOD_BUDGET) AS SELISIH
				  FROM    (  
				  SELECT PERIOD_BUDGET,
								 BA_CODE,
								 AFD_CODE,
								 SUB_COST_ELEMENT,
								 SUM (QTY_SETAHUN) AS QTY_SETAHUN
					FROM (
				  SELECT PERIOD_BUDGET,
									 BA_CODE,
									 AFD_CODE,
									 BLOCK_CODE,
									 SUB_COST_ELEMENT,
									 QTY_SETAHUN
								FROM TMP_RPT_KEB_DEV_COST_BLOCK
							   WHERE SUB_COST_ELEMENT IN
										   ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
									 $where 
						 UNION ALL   
						 SELECT PERIOD_BUDGET,
									 BA_CODE,
									 AFD_CODE,
									 BLOCK_CODE,
									 SUB_COST_ELEMENT,
									 QTY_SETAHUN
								FROM TMP_RPT_KEB_EST_COST_BLOCK
							   WHERE SUB_COST_ELEMENT IN
										   ('FW010', 'FW030', 'FW040', 'FX130', 'FX140')
								     $where
							)
					   GROUP BY PERIOD_BUDGET, BA_CODE, AFD_CODE, SUB_COST_ELEMENT
						 ) TMP
					   LEFT JOIN TM_JOB_TYPE JOB
					   ON JOB.JOB_CODE = TMP.SUB_COST_ELEMENT
					   LEFT JOIN
						  TM_CHECKROLL_HK TMROLL
					   ON     TMROLL.BA_CODE = TMP.BA_CODE
						  AND TMROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
						  AND TMROLL.EMPLOYEE_STATUS = 'KT'
					   LEFT JOIN
						  TR_RKT_CHECKROLL TRROLL
					   ON     TRROLL.BA_CODE = TMP.BA_CODE
						  AND TRROLL.PERIOD_BUDGET = TMP.PERIOD_BUDGET
						   AND TRROLL.JOB_CODE = TMP.SUB_COST_ELEMENT
						  AND TRROLL.EMPLOYEE_STATUS = 'KT'
						  ORDER BY AFD_CODE";
		
		$sql = "SELECT COUNT(*) FROM ({$query})";
		$result['count'] = $this->_db->fetchOne($sql);
		
		$rows = $this->_db->fetchAll("{$query}");
			
		if (!empty($rows)) {
			foreach ($rows as $idx => $row) {
				$result['rows'][] = $row;
			}
		}

		return $result;
	}
	
	////////////////////////////////////////////////// JANGAN DIUBAH //////////////////////////////////////////////////
	//inisialisasi list yang akan ditampilkan
	public function initList($params = array())
    {
		$result = array();
        $initAction = str_replace(' ', '', ucwords(str_replace('-', ' ', $params['action'])));
		$result = $this->$initAction($params);
        return $result;
    }
	////////////////////////////////////////////////// JANGAN DIUBAH //////////////////////////////////////////////////
}

